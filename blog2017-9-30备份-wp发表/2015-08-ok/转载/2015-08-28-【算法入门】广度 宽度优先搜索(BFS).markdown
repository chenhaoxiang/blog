---
layout: post
title: "【算法入门】广度 宽度优先搜索(BFS)"
date: 2015-08-28 10:54:09 +0800
comments: true
categories:❸ C/C++,----- 数据结构,❺ 算法及基础题,----- 递归搜索回溯,❻ 其他,----- 好文/知识点
tags: [算法,搜索,遍历]
keyword: 陈浩翔, 谙忆
description: 广度/宽度优先搜索(BFS)

【算法入门】







1.前言

广度优先搜索（也称宽度优先搜索，缩写BFS，以下采用广度来描述）是连通图的一种遍历策略。因为它的思想是从一个顶点V0开始，辐射状地优先遍历其周围较广的区域，故得名。 

一般可以用它做什么呢？一个最直观经典的例子就是走迷宫，我们从起点开始，找出到终点的最短路程，很多最短路径算法就是基于广度优先的思想 
---


广度/宽度优先搜索(BFS)

【算法入门】







1.前言

广度优先搜索（也称宽度优先搜索，缩写BFS，以下采用广度来描述）是连通图的一种遍历策略。因为它的思想是从一个顶点V0开始，辐射状地优先遍历其周围较广的区域，故得名。 

一般可以用它做什么呢？一个最直观经典的例子就是走迷宫，我们从起点开始，找出到终点的最短路程，很多最短路径算法就是基于广度优先的思想
&#60;!-- more --&#62;
----------


&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px; text-align:center"&#62;
广度/&#60;span style="font-family:宋体"&#62;宽度&#60;/span&#62;优先搜索(BFS)&#60;/h1&#62;
&#60;h2 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px; text-align:center"&#62;
&#60;a target="_blank" target="_blank" name="t1" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;【算法入门】&#60;/h2&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;br&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:right"&#62;
&#60;br&#62;
&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t2" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;1.&#60;span style="font-family:宋体"&#62;前言&#60;/span&#62;&#60;/h1&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
广度优先搜索（也称宽度优先搜索，缩写BFS，以下采用广度来描述）是&#60;a target="_blank" target="_blank" href="http://baike.baidu.com/view/3148644.htm" style="color:rgb(51,102,153); text-decoration:none"&#62;连通图&#60;/a&#62;的一种&#60;a target="_blank" target="_blank" href="http://baike.baidu.com/view/549585.htm" style="color:rgb(51,102,153); text-decoration:none"&#62;遍历&#60;/a&#62;策略。因为它的思想是从一个顶点&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0开始，辐射状地优先遍历其周围较广的区域，故得名。&nbsp;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
一般可以用它做什么呢？一个最直观经典的例子就是走迷宫，我们从起点开始，找出到终点的最短路程，很多最短路径算法就是基于广度优先的思想成立的。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
算法导论里边会给出不少严&#26684;的证明，我想尽量写得通俗一点，因此采用一些直观的讲法来伪装成证明，关键的&#60;span style="font-family:'Courier New'"&#62;point&#60;/span&#62;&#60;span style="font-family:宋体"&#62;能够帮你&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;get&#60;/span&#62;&#60;span style="font-family:宋体"&#62;到就好。&#60;/span&#62;&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t3" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;2.&#60;span style="font-family:宋体"&#62;图的概念&#60;/span&#62;&#60;/h1&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
刚刚说的广度优先搜索是连通图的一种遍历策略，那就有必要将图先简单解释一下。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;img src="http://my.csdn.net/uploads/201204/30/1335725737_2388.png" alt="" style="border:none; max-width:100%"&#62;&#60;br&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(0,0,255)"&#62;图&#60;span style="font-family:'Courier New'"&#62;2-1&nbsp;&#60;/span&#62;&#60;span style="font-family:宋体"&#62;连通图示例图&#60;/span&#62;&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
如图&#60;span style="font-family:'Courier New'"&#62;2-1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;所示，这就是我们所说的连通图，这里展示的是一个无向图，连通即每&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;2&#60;/span&#62;&#60;span style="font-family:宋体"&#62;个点都有至少一条路径相连，例如&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0到&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;4的路径就是&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0-&gt;V1-&gt;V4。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
一般我们把顶点用&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;span style="font-family:宋体"&#62;缩写，把边用&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;E&#60;/span&#62;&#60;span style="font-family:宋体"&#62;缩写。&#60;/span&#62;&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t4" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;3.&#60;span style="font-family:宋体"&#62;广度优先搜索&#60;/span&#62;&#60;/h1&#62;
&#60;h2 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t5" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;&#60;br&#62;
3.1.&#60;span style="font-family:黑体"&#62;算法的基本思路&#60;/span&#62;&#60;/h2&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
常常我们有这样一个问题，从一个起点开始要到一个终点，我们要找寻一条最短的路径，从图&#60;span style="font-family:'Courier New'"&#62;2-1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;举例，如果我们要求&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0到&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;6的一条最短路（假设走一个节点按一步来算）&#60;span style="color:rgb(255,0,0)"&#62;【注意：此处你可以选择不看这段文字直接看图&#60;span style="font-family:'Courier New'"&#62;3-1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;】&#60;/span&#62;&#60;/span&#62;，我们明显看出这条路径就是&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0-&gt;V2-&gt;V6，而不是&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0-&gt;V3-&gt;V5-&gt;V6。先想想你自己刚刚是怎么找到这条路径的：首先看跟&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0直接连接的节点&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;1、&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;2、&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;3，发现没有&#60;span style="font-family:'Courier New'"&#62;V6&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，进而再看刚刚&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;1、&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;2、&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;3的直接连接节点分别是：&#60;span style="font-family:'Courier New'"&#62;{&#60;/span&#62;V0、&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;4}&#60;span style="font-family:宋体"&#62;、&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;{&#60;/span&#62;V0、V1、&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;6}&#60;span style="font-family:宋体"&#62;、&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;{&#60;/span&#62;V0、V1、&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;5}&#60;span style="font-family:宋体"&#62;（这里画删除线的意思是那些顶点在我们刚刚的搜索过程中已经找过了，我们不需要重新回头再看他们了）。这时候我们从&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V2&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的连通节点集中找到了&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;6，那说明我们找到了这条&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0到&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;6的最短路径：V0-&gt;V2-&gt;V6，虽然你再进一步搜索&#60;span style="font-family:'Courier New'"&#62;V5&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的连接节点集合后会找到另一条路径&#60;/span&#62;V0-&gt;V3-&gt;V5-&gt;V6，但显然他不是最短路径。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
你会看到这里有点像辐射形状的搜索方式，从一个节点，向其旁边节点传递病毒，就这样一层一层的传递辐射下去，知道目标节点被辐射中了，此时就已经找到了从起点到终点的路径。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
我们采用示例图来说明这个过程，在搜索的过程中，初始所有节点是白色（代表了所有点都还没开始搜索），把起点&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0标志成灰色（表示即将辐射&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0），下一步搜索的时候，我们把所有的灰色节点访问一次，然后将其变成黑色（表示已经被辐射过了），进而再将他们所能到达的节点标志成灰色（因为那些节点是下一步搜索的目标点了），但是这里有个判断，就像刚刚的例子，当访问到&#60;span style="font-family:'Courier New'"&#62;V1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;节点的时候，它的下一个节点应该是&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0和&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;4，但是&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;0已经在前面被染成黑色了，所以不会将它染灰色。这样持续下去，直到目标节点&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;6被染灰色，说明了下一步就到终点了，没必要再搜索（染色）其他节点了，此时可以结束搜索了，整个搜索就结束了。然后根据搜索过程，反过来把最短路径找出来，图&#60;span style="font-family:'Courier New'"&#62;3-1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;中把最终路径上的节点标志成绿色。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
整个过程的实例图如图&#60;span style="font-family:'Courier New'"&#62;3-1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;所示。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(51,51,153)"&#62;&#60;img src="http://my.csdn.net/uploads/201204/30/1335725797_1963.png" alt="" style="border:none; max-width:100%"&#62;初始全部都是白色（未访问&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;）&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(51,51,153)"&#62;&#60;img src="http://my.csdn.net/uploads/201204/30/1335725807_5317.png" alt="" style="border:none; max-width:100%"&#62;即将搜索起点&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;0&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;（灰色）&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(51,51,153)"&#62;&#60;img src="http://my.csdn.net/uploads/201204/30/1335725819_1561.png" alt="" style="border:none; max-width:100%"&#62;已搜索&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;0&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;，即将搜索&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;1&#60;span style="font-family:宋体"&#62;、&#60;/span&#62;&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;V&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;2&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;、&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;3&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(51,51,153)"&#62;&#60;img src="http://my.csdn.net/uploads/201204/30/1335725831_7574.png" alt="" style="border:none; max-width:100%"&#62;……终点&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;6&#60;/span&#62;&#60;span style="color:rgb(51,51,153)"&#62;被染灰色，终止&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(0,0,128)"&#62;&#60;img src="http://my.csdn.net/uploads/201204/30/1335725843_7283.png" alt="" style="border:none; max-width:100%"&#62;找到最短路径&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(0,0,255)"&#62;图&#60;span style="font-family:'Courier New'"&#62;3-1&nbsp;&#60;/span&#62;&#60;span style="font-family:宋体"&#62;寻找&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;/span&#62;&#60;span style="color:rgb(0,0,255)"&#62;0&#60;/span&#62;&#60;span style="color:rgb(0,0,255)"&#62;到&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;/span&#62;&#60;span style="color:rgb(0,0,255)"&#62;6&#60;/span&#62;&#60;span style="color:rgb(0,0,255)"&#62;的过程&#60;/span&#62;&#60;/p&#62;
&#60;h2 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t6" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;3.2.&#60;span style="font-family:黑体"&#62;广度优先搜索流程图&#60;/span&#62;&#60;/h2&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(0,0,255)"&#62;&#60;img src="http://my.csdn.net/uploads/201204/30/1335725885_9403.png" alt="" style="border:none; max-width:100%"&#62;&#60;br&#62;
&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(0,0,255)"&#62;图&#60;span style="font-family:'Courier New'"&#62;3-2&nbsp;&#60;/span&#62;&#60;span style="font-family:宋体"&#62;广度优先搜索的流程图&#60;/span&#62;&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
在写具体代码之前有必要先举个实例，详见第&#60;span style="font-family:'Courier New'"&#62;4&#60;/span&#62;&#60;span style="font-family:宋体"&#62;节。&#60;/span&#62;&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t7" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;4.&#60;span style="font-family:宋体"&#62;实例&#60;/span&#62;&#60;/h1&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
第一节就讲过广度优先搜索适用于迷宫类问题，这里先给出&#60;a target="_blank" target="_blank" href="http://poj.org/problem?id=3984" style="color:rgb(51,102,153); text-decoration:none"&#62;&#60;span style="color:rgb(0,0,255)"&#62;POJ3984&#60;/span&#62;&#60;/a&#62;《迷宫问题》。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
《迷宫问题》&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
定义一个二维数组：&nbsp;&#60;br&#62;
int&nbsp;maze[5][5]&nbsp;=&nbsp;{&#60;br&#62;
&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;1,&nbsp;0,&nbsp;0,&nbsp;0,&#60;br&#62;
&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;1,&nbsp;0,&nbsp;1,&nbsp;0,&#60;br&#62;
&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;0,&nbsp;0,&nbsp;0,&nbsp;0,&#60;br&#62;
&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;1,&nbsp;1,&nbsp;1,&nbsp;0,&#60;br&#62;
&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;0,&nbsp;0,&nbsp;1,&nbsp;0,&#60;br&#62;
};&#60;br&#62;
它表示一个迷宫，其中的&#60;span style="font-family:'Courier New'"&#62;1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;表示墙壁，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;0&#60;/span&#62;&#60;span style="font-family:宋体"&#62;表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。&#60;/span&#62;&nbsp;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
题目保证了输入是一定有解的。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
也许你会问，这个跟广度优先搜索的图怎么对应起来？&#60;span style="color:rgb(255,0,0)"&#62;BFS&#60;/span&#62;&#60;span style="color:rgb(255,0,0)"&#62;的第一步就是要识别图的节点跟边！&#60;/span&#62;&#60;/p&#62;
&#60;h2 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t8" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;4.1.&#60;span style="font-family:黑体"&#62;识别出节点跟边&#60;/span&#62;&#60;/h2&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
节点就是某种状态，边就是节点与节点间的某种规则。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
对应于《迷宫问题》，你可以这么认为，节点就是迷宫路上的每一个&#26684;子（非墙），走迷宫的时候，&#26684;子间的关系是什么呢？按照题目意思，我们只能横竖走，因此我们可以这样看，&#26684;子与它横竖方向上的&#26684;子是有连通关系的，只要这个&#26684;子跟另一个&#26684;子是连通的，那么两个&#26684;子节点间就有一条边。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
如果说本题再修改成斜方向也可以走的话，那么就是&#26684;子跟周围&#60;span style="font-family:'Courier New'"&#62;8&#60;/span&#62;&#60;span style="font-family:宋体"&#62;个&#26684;子都可以连通，于是一个节点就会有&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;8&#60;/span&#62;&#60;span style="font-family:宋体"&#62;条边（除了边界的节点）。&#60;/span&#62;&#60;/p&#62;
&#60;h2 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t9" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;4.2.&#60;span style="font-family:黑体"&#62;解题思路&#60;/span&#62;&#60;/h2&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
对应于题目的输入数组：&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
0,&nbsp;1,&nbsp;0,&nbsp;0,&nbsp;0,&#60;br&#62;
&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;1,&nbsp;0,&nbsp;1,&nbsp;0,&#60;br&#62;
&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;0,&nbsp;0,&nbsp;0,&nbsp;0,&#60;br&#62;
&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;1,&nbsp;1,&nbsp;1,&nbsp;0,&#60;br&#62;
&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;0,&nbsp;0,&nbsp;1,&nbsp;0,&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
我们把节点定义为&#60;span style="font-family:'Courier New'"&#62;(x,y)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;(x,y)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;表示数组&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;maze&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的项&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;maze[x][y]&#60;/span&#62;&#60;span style="font-family:宋体"&#62;。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
于是起点就是&#60;span style="font-family:'Courier New'"&#62;(0,0)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，终点是&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;(4,4)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;。按照刚刚的思路，我们大概手工梳理一遍：&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
初始条件：&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
&#60;span style="color:rgb(128,0,0)"&#62;起点&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;/span&#62;&#60;span style="color:rgb(128,0,0)"&#62;s&#60;/span&#62;&#60;span style="color:rgb(128,0,0)"&#62;为&#60;span style="font-family:'Courier New'"&#62;(0,0)&#60;/span&#62;&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
&#60;span style="color:rgb(128,0,0)"&#62;终点&#60;/span&#62;&#60;span style="color:rgb(128,0,0)"&#62;V&#60;/span&#62;&#60;span style="color:rgb(128,0,0)"&#62;d&#60;/span&#62;&#60;span style="color:rgb(128,0,0)"&#62;为&#60;span style="font-family:'Courier New'"&#62;(4,4)&#60;/span&#62;&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
&#60;span style="color:rgb(128,0,0)"&#62;灰色节点集合&#60;span style="font-family:'Courier New'"&#62;Q={}&#60;/span&#62;&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
&#60;span style="color:rgb(128,0,0)"&#62;初始化所有节点为白色节点&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
开始我们的广度搜索！&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
手工执行步骤&#60;span style="color:rgb(255,0,0)"&#62;【&#60;span style="font-family:'Courier New'"&#62;PS&#60;/span&#62;&#60;span style="font-family:宋体"&#62;：你可以直接看图&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;4-1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;】&#60;/span&#62;&#60;/span&#62;:&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
1.起始节点&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;s变成灰色，加入队列&#60;span style="font-family:'Courier New'"&#62;Q&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q={(0,0)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
2.取出队列&#60;span style="font-family:'Courier New'"&#62;Q&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的头一个节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;n，&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;n={0,0}&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q={}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
3.把&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;n={0,0}&#60;span style="font-family:宋体"&#62;染成黑色，取出&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;n所有相邻的白色节点&#60;span style="font-family:'Courier New'"&#62;{(1,0)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
4.不包含终点&#60;span style="font-family:'Courier New'"&#62;(4,4)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，染成灰色，加入队列&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q={(1,0)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
5.取出队列&#60;span style="font-family:'Courier New'"&#62;Q&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的头一个节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;n，&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;n={1,0}&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q={}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
6.把&#60;span style="font-family:'Courier New'"&#62;Vn={1,0}&#60;/span&#62;&#60;span style="font-family:宋体"&#62;染成黑色，取出&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Vn&#60;/span&#62;&#60;span style="font-family:宋体"&#62;所有相邻的白色节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;{(2,0)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
7.不包含终点&#60;span style="font-family:'Courier New'"&#62;(4,4)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，染成灰色，加入队列&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q={(2,0)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
8.取出队列&#60;span style="font-family:'Courier New'"&#62;Q&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的头一个节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Vn&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Vn={2,0}&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q={}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
9.把&#60;span style="font-family:'Courier New'"&#62;Vn={2,0}&#60;/span&#62;&#60;span style="font-family:宋体"&#62;染成黑色，取出&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Vn&#60;/span&#62;&#60;span style="font-family:宋体"&#62;所有相邻的白色节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;{(2,1),&nbsp;(3,0)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
10.不包含终点&#60;span style="font-family:'Courier New'"&#62;(4,4)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，染成灰色，加入队列&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q={(2,1),&nbsp;(3,0)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
11.取出队列&#60;span style="font-family:'Courier New'"&#62;Q&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的头一个节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Vn&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Vn={2,1}&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q={(3,0)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
12. 把&#60;span style="font-family:'Courier New'"&#62;Vn={2,1}&#60;/span&#62;&#60;span style="font-family:宋体"&#62;染成黑色，取出&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Vn&#60;/span&#62;&#60;span style="font-family:宋体"&#62;所有相邻的白色节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;{(2,2)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
13.不包含终点&#60;span style="font-family:'Courier New'"&#62;(4,4)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，染成灰色，加入队列&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Q={(3,0),&nbsp;(2,2)}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
14.持续下去，知道&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;n的所有相邻的白色节点中包含了&#60;span style="font-family:'Courier New'"&#62;(4,4)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;……&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; background-color:rgb(243,243,243)"&#62;
15.此时获得了答案&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;br&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
起始你很容易模仿上边过程走到终点，那为什么它就是最短的呢？&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
怎么保证呢？&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
我们来看看广度搜索的过程中节点的顺序情况：&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(0,0,255)"&#62;&#60;img src="http://my.csdn.net/uploads/201204/30/1335725931_3217.png" alt="" style="border:none; max-width:100%"&#62;&#60;br&#62;
&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px; text-align:center"&#62;
&#60;span style="color:rgb(0,0,255)"&#62;图&#60;span style="font-family:'Courier New'"&#62;4-1&nbsp;&#60;/span&#62;&#60;span style="font-family:宋体"&#62;迷宫问题的搜索树&#60;/span&#62;&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
你是否观察到了，广度搜索的顺序是什么样子的？&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
图中标号即为我们搜索过程中的顺序，我们观察到，这个搜索顺序是按照上图的层次关系来的，例如节点&#60;span style="font-family:'Courier New'"&#62;(0,0)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;在第&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层，节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;(1,0)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;在第&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;2&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层，节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;(2,0)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;在第&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;3&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层，节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;(2,1)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;和节点&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;(3,0)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;在第&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;3&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
我们的搜索顺序就是第一层&#60;span style="font-family:'Courier New'"&#62;-&gt;&#60;/span&#62;&#60;span style="font-family:宋体"&#62;第二层&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;-&gt;&#60;/span&#62;&#60;span style="font-family:宋体"&#62;第三层&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;-&gt;&#60;/span&#62;&#60;span style="font-family:宋体"&#62;第&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;N&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层这样子。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
我们假设终点在第&#60;span style="font-family:'Courier New'"&#62;N&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层，因此我们搜索到的路径长度肯定是&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;N&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，而且这个&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;N&#60;/span&#62;&#60;span style="font-family:宋体"&#62;一定是所求最短的。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
我们用简单的反证法来证明：假设终点在第&#60;span style="font-family:'Courier New'"&#62;N&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层上边出现过，例如第&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;M&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;M&lt;N&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，那么我们在搜索的过程中，肯定是先搜索到第&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;M&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层的，此时搜索到第&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;M&#60;/span&#62;&#60;span style="font-family:宋体"&#62;层的时候发现终点出现过了，那么最短路径应该是&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;M&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，而不是&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;N&#60;/span&#62;&#60;span style="font-family:宋体"&#62;了。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
所以根据广度优先搜索的话，搜索到终点时，该路径一定是最短的。&#60;/p&#62;
&#60;h2 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t10" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;4.3.&#60;span style="font-family:黑体"&#62;代码&#60;/span&#62;&#60;/h2&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
我给出以下代码用于解决上述题目&#60;span style="font-family:'Courier New'"&#62;(&#60;/span&#62;&#60;span style="font-family:宋体"&#62;仅仅只是核心代码&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;：&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;div class="dp-highlighter bg_cpp" style="font-family:Consolas,'Courier New',Courier,mono,serif; background-color:rgb(231,229,220); width:700.90625px; overflow:auto; padding-top:1px; color:rgb(51,51,51); line-height:26px; margin:18px 0px!important"&#62;
&#60;div class="bar" style="padding-left:45px"&#62;
&#60;div class="tools" style="padding:3px 8px 10px 10px; font-size:9px; line-height:normal; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; color:silver; background-color:rgb(248,248,248); border-left-width:3px; border-left-style:solid; border-left-color:rgb(108,226,108)"&#62;
&#60;strong&#62;[cpp]&#60;/strong&#62;&nbsp;&#60;a target="_blank" target="_blank" href="http://blog.csdn.net/raphealguo/article/details/7523411#" class="ViewSource" title="view plain" style="color:rgb(160,160,160); text-decoration:none; background-color:inherit; border:none; padding:1px; margin:0px 10px 0px 0px; font-size:9px; display:inline-block; width:16px; height:16px; text-indent:-2000px"&#62;view
 plain&#60;/a&#62;&#60;a target="_blank" target="_blank" href="http://blog.csdn.net/raphealguo/article/details/7523411#" class="CopyToClipboard" title="copy" style="color:rgb(160,160,160); text-decoration:none; background-color:inherit; border:none; padding:1px; margin:0px 10px 0px 0px; font-size:9px; display:inline-block; width:16px; height:16px; text-indent:-2000px"&#62;copy&#60;/a&#62;
&#60;div style="position:absolute; left:530px; top:6610px; width:18px; height:18px; z-index:99"&#62;
&#60;/div&#62;
&#60;/div&#62;
&#60;/div&#62;
&#60;ol start="1" class="dp-cpp" style="padding:0px; border:none; list-style-position:initial; background-color:rgb(255,255,255); color:rgb(92,92,92); margin:0px 0px 1px 45px!important"&#62;
&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;/**&#60;/span&#62;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;&nbsp;*&nbsp;广度优先搜索&#60;/span&#62;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;&nbsp;*&nbsp;@param&nbsp;Vs&nbsp;起点&#60;/span&#62;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;&nbsp;*&nbsp;@param&nbsp;Vd&nbsp;终点&#60;/span&#62;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;&nbsp;*/&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); background-color:inherit; font-weight:bold"&#62;bool&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;BFS(Node&amp;&nbsp;Vs,&nbsp;Node&amp;&nbsp;Vd){&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;queue&lt;Node&gt;&nbsp;Q;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;Vn,&nbsp;Vw;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); background-color:inherit; font-weight:bold"&#62;int&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;i;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//用于标记颜色当visit[i][j]==true时，说明节点访问过，也就是黑色&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); background-color:inherit; font-weight:bold"&#62;bool&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;visit[MAXL][MAXL];&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//四个方向&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); background-color:inherit; font-weight:bold"&#62;int&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;dir[][2]&nbsp;=&nbsp;{&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0,&nbsp;1},&nbsp;{1,&nbsp;0},&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0,&nbsp;-1},&nbsp;{-1,&nbsp;0}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//初始状态将起点放进队列Q&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;Q.push(Vs);&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;visit[Vs.x][Vs.y]&nbsp;=&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;true&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;;&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//设置节点已经访问过了！&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;while&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;(!Q.empty()){&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//队列不为空，继续搜索！&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//取出队列的头Vn&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vn&nbsp;=&nbsp;Q.front();&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q.pop();&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;for&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;(i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;4;&nbsp;&#43;&#43;i){&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vw&nbsp;=&nbsp;Node(Vn.x&#43;dir[i][0],&nbsp;Vn.y&#43;dir[i][1]);&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//计算相邻节点&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;if&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;(Vw&nbsp;==&nbsp;Vd){&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//找到终点了！&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//把路径记录，这里没给出解法&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;return&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&#60;/span&#62;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;true&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;;&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//返回&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;if&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;(isValid(Vw)&nbsp;&amp;&amp;&nbsp;!visit[Vw.x][Vw.y]){&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//Vw是一个合法的节点并且为白色节点&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q.push(Vw);&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//加入队列Q&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visit[Vw.x][Vw.y]&nbsp;=&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;true&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;;&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//设置节点颜色&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;return&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&#60;/span&#62;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;false&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;;&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//无解&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;/ol&#62;
&#60;/div&#62;
&#60;br style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;br style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t11" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;5.&#60;span style="font-family:宋体"&#62;核心代码&#60;/span&#62;&#60;/h1&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
为了方便适用于大多数的题解，抽取核心代码如下：&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;div class="dp-highlighter bg_cpp" style="font-family:Consolas,'Courier New',Courier,mono,serif; background-color:rgb(231,229,220); width:700.90625px; overflow:auto; padding-top:1px; color:rgb(51,51,51); line-height:26px; margin:18px 0px!important"&#62;
&#60;div class="bar" style="padding-left:45px"&#62;
&#60;div class="tools" style="padding:3px 8px 10px 10px; font-size:9px; line-height:normal; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; color:silver; background-color:rgb(248,248,248); border-left-width:3px; border-left-style:solid; border-left-color:rgb(108,226,108)"&#62;
&#60;strong&#62;[cpp]&#60;/strong&#62;&nbsp;&#60;a target="_blank" target="_blank" href="http://blog.csdn.net/raphealguo/article/details/7523411#" class="ViewSource" title="view plain" style="color:rgb(160,160,160); text-decoration:none; background-color:inherit; border:none; padding:1px; margin:0px 10px 0px 0px; font-size:9px; display:inline-block; width:16px; height:16px; text-indent:-2000px"&#62;view
 plain&#60;/a&#62;&#60;a target="_blank" target="_blank" href="http://blog.csdn.net/raphealguo/article/details/7523411#" class="CopyToClipboard" title="copy" style="color:rgb(160,160,160); text-decoration:none; background-color:inherit; border:none; padding:1px; margin:0px 10px 0px 0px; font-size:9px; display:inline-block; width:16px; height:16px; text-indent:-2000px"&#62;copy&#60;/a&#62;
&#60;div style="position:absolute; left:530px; top:7622px; width:18px; height:18px; z-index:99"&#62;
&#60;/div&#62;
&#60;/div&#62;
&#60;/div&#62;
&#60;ol start="1" class="dp-cpp" style="padding:0px; border:none; list-style-position:initial; background-color:rgb(255,255,255); color:rgb(92,92,92); margin:0px 0px 1px 45px!important"&#62;
&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;/**&#60;/span&#62;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;&nbsp;*&nbsp;广度优先搜索&#60;/span&#62;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;&nbsp;*&nbsp;@param&nbsp;Vs&nbsp;起点&#60;/span&#62;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;&nbsp;*&nbsp;@param&nbsp;Vd&nbsp;终点&#60;/span&#62;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;&nbsp;*/&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&#60;span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); background-color:inherit; font-weight:bold"&#62;bool&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;BFS(Node&amp;&nbsp;Vs,&nbsp;Node&amp;&nbsp;Vd){&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;queue&lt;Node&gt;&nbsp;Q;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;Vn,&nbsp;Vw;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="datatypes" style="margin:0px; padding:0px; border:none; color:rgb(46,139,87); background-color:inherit; font-weight:bold"&#62;int&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;i;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//初始状态将起点放进队列Q&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;Q.push(Vs);&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;hash(Vw)&nbsp;=&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;true&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;;&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//设置节点已经访问过了！&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;while&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;(!Q.empty()){&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//队列不为空，继续搜索！&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//取出队列的头Vn&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vn&nbsp;=&nbsp;Q.front();&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//从队列中移除&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q.pop();&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;while&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;(Vw&nbsp;=&nbsp;Vn通过某规则能够到达的节点){&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;if&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;(Vw&nbsp;==&nbsp;Vd){&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//找到终点了！&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//把路径记录，这里没给出解法&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;return&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&#60;/span&#62;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;true&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;;&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//返回&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;if&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;(isValid(Vw)&nbsp;&amp;&amp;&nbsp;!visit[Vw]){&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//Vw是一个合法的节点并且为白色节点&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Q.push(Vw);&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//加入队列Q&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash(Vw)&nbsp;=&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;true&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;;&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//设置节点颜色&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;li class="alt" style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; color:inherit; line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;&nbsp;&nbsp;&nbsp;&nbsp;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;return&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&#60;/span&#62;&#60;span class="keyword" style="margin:0px; padding:0px; border:none; color:rgb(0,102,153); background-color:inherit; font-weight:bold"&#62;false&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;;&#60;/span&#62;&#60;span class="comment" style="margin:0px; padding:0px; border:none; color:rgb(0,130,0); background-color:inherit"&#62;//无解&#60;/span&#62;&#60;span style="margin:0px; padding:0px; border:none; background-color:inherit"&#62;&nbsp;&nbsp;&#60;/span&#62;&#60;/span&#62;&#60;/li&#62;&#60;li style="border-style:none none none solid; border-left-width:3px; border-left-color:rgb(108,226,108); list-style:decimal-leading-zero outside; background-color:rgb(248,248,248); line-height:18px; margin:0px!important; padding:0px 3px 0px 10px!important"&#62;
&#60;span style="margin:0px; padding:0px; border:none; color:black; background-color:inherit"&#62;}&nbsp;&nbsp;&#60;/span&#62;&#60;/li&#62;&#60;/ol&#62;
&#60;/div&#62;
&#60;br style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;br style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
对于一个题目来说，要标志节点是否访问过，用数组是一种很快速的方法，但有时数据量太大，很难用一个大数组来记录时，采用&#60;span style="font-family:'Courier New'"&#62;hash&#60;/span&#62;&#60;span style="font-family:宋体"&#62;是最好的做法。实际上&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;visit&#60;/span&#62;&#60;span style="font-family:宋体"&#62;数组在这里也是充当&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;hash&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的作用。（&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;PS&#60;/span&#62;&#60;span style="font-family:宋体"&#62;：至于&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;hash&#60;/span&#62;&#60;span style="font-family:宋体"&#62;是什么？得自己去了解，它的作用是在&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;O(1)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的时间复杂度内取出某个&#20540;）&#60;/span&#62;&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t12" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;6.&#60;span style="font-family:宋体"&#62;其他实例&#60;/span&#62;&#60;/h1&#62;
&#60;h2 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t13" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;6.1.&#60;span style="font-family:黑体"&#62;题目描述&#60;/span&#62;&#60;/h2&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
给定序列&#60;span style="font-family:'Courier New'"&#62;1&nbsp;2&nbsp;3&nbsp;4&nbsp;5&nbsp;6&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，再给定一个&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;k&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，我们给出这样的操作：对于序列，我们可以将其中&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;k&#60;/span&#62;&#60;span style="font-family:宋体"&#62;个连续的数全部反转过来，例如&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;k&nbsp;=&nbsp;3&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的时候，上述序列经过&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;1&#60;/span&#62;&#60;span style="font-family:宋体"&#62;步操作后可以变成：&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;3&nbsp;2&nbsp;1&nbsp;4&nbsp;5&nbsp;6&nbsp;&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，如果再对序列&nbsp;&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;3&nbsp;2&nbsp;1&nbsp;4&nbsp;5&nbsp;6&#60;/span&#62;&#60;span style="font-family:宋体"&#62;进行一步操作，可以变成&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;3&nbsp;4&nbsp;1&nbsp;2&nbsp;5&nbsp;6.&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
那么现在题目就是，给定初始序列，以及结束序列，以及&#60;span style="font-family:'Courier New'"&#62;k&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的&#20540;，那么你能够求出从初始序列到结束序列的转变&#60;/span&#62;&#60;span style="color:rgb(255,0,0)"&#62;至少&#60;/span&#62;需要几步操作吗？&#60;/p&#62;
&#60;h2 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t14" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;6.2.&#60;span style="font-family:黑体"&#62;思路&#60;/span&#62;&#60;/h2&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
本题可以采用&#60;span style="font-family:'Courier New'"&#62;BFS&#60;/span&#62;&#60;span style="font-family:宋体"&#62;求解，已经给定初始状态跟目标状态，要求之间的最短操作，其实也很明显是用&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;BFS&#60;/span&#62;&#60;span style="font-family:宋体"&#62;了。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
我们把每次操作完的序列当做一个状态节点。那每一次操作就产生一条边，这个操作就是规则。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
假设起始节点是：&#60;span style="font-family:'Courier New'"&#62;{1&nbsp;2&nbsp;3&nbsp;4&nbsp;5&nbsp;6}&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，终点是：&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;{3&nbsp;4&nbsp;1&nbsp;2&nbsp;5&nbsp;6}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
去除队列中的起始节点时，将它的相邻节点加入队列，其相邻节点就是对其操作一次的所有序列：&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
{3&nbsp;2&nbsp;1&nbsp;4&nbsp;5&nbsp;6}&#60;span style="font-family:宋体"&#62;、&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;{1&nbsp;4&nbsp;3&nbsp;2&nbsp;5&nbsp;6}&#60;/span&#62;&#60;span style="font-family:宋体"&#62;、&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;{1&nbsp;2&nbsp;5&nbsp;4&nbsp;3&nbsp;6}&#60;/span&#62;&#60;span style="font-family:宋体"&#62;、&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;{1&nbsp;2&nbsp;3&nbsp;6&nbsp;5&nbsp;4}&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
然后继续搜索即可得到终点，此时操作数就是搜索到的节点所在的层数&#60;span style="font-family:'Courier New'"&#62;2&#60;/span&#62;&#60;span style="font-family:宋体"&#62;。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;span style="font-size:12px"&#62;&#60;/span&#62;&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
7.OJ&#60;span style="font-family:宋体"&#62;题目&#60;/span&#62;&#60;/h1&#62;
&#60;span style="font-size:12px; font-family:宋体"&#62;&#60;/span&#62;
&#60;p&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
题目分类来自网络：&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" href="http://soj.me/" style="color:rgb(51,102,153); text-decoration:none"&#62;&#60;span style="color:rgb(0,0,255)"&#62;sicily&#60;/span&#62;&#60;/a&#62;：&#60;span style="font-family:'Courier New'"&#62;1048&nbsp;1444&nbsp;1215&nbsp;1135&nbsp;1150&nbsp;1151&nbsp;1114&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" href="http://poj.org/" style="color:rgb(51,102,153); text-decoration:none"&#62;&#60;span style="color:rgb(0,0,255)"&#62;pku&#60;/span&#62;&#60;/a&#62;：1136&nbsp;1249&nbsp;1028&nbsp;1191&nbsp;3278&nbsp;1426&nbsp;3126&nbsp;3087&nbsp;3414&nbsp;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
8.&#60;span style="font-family:宋体"&#62;总结&#60;/span&#62;&#60;/h1&#62;
&#60;p&#62;&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;span style="font-size:12px; font-family:宋体"&#62;&#60;/span&#62;&#60;/h1&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
假设图有&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;span style="font-family:宋体"&#62;个顶点，&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;E&#60;/span&#62;&#60;span style="font-family:宋体"&#62;条边，广度优先搜索算法需要搜索&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;V&#60;/span&#62;&#60;span style="font-family:宋体"&#62;个节点，因此这里的消耗是&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;O(V)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，在搜索过程中，又需要根据边来增加队列的长度，于是这里需要消耗&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;O(E)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，总得来说，&#60;/span&#62;&#60;span style="color:rgb(255,0,0)"&#62;效率大约是&#60;span style="font-family:'Courier New'"&#62;O(V&#43;E)&#60;/span&#62;&#60;/span&#62;。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
其实最影响&#60;span style="font-family:'Courier New'"&#62;BFS&#60;/span&#62;&#60;span style="font-family:宋体"&#62;算法的是在于&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Hash&#60;/span&#62;&#60;span style="font-family:宋体"&#62;运算&#60;/span&#62;，我们前面给出了一个&#60;span style="font-family:'Courier New'"&#62;visit&#60;/span&#62;&#60;span style="font-family:宋体"&#62;数组，已经算是最快的&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Hash&#60;/span&#62;&#60;span style="font-family:宋体"&#62;了，但有些题目来说可能&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;Hash&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的速度要退化到&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;O(lgn)&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的复杂度，当然了，具体还是看实际情况的。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;span style="color:rgb(255,0,0)"&#62;BFS&#60;span style="font-family:宋体"&#62;适合此类题目：给定初始状态跟目标状态，要求从初始状态到目标状态的最短路径。&#60;/span&#62;&#60;/span&#62;&#60;/p&#62;
&#60;h1 style="margin:0px; padding:0px; color:rgb(51,51,51); font-family:Arial; line-height:26px"&#62;
&#60;a target="_blank" target="_blank" name="t17" style="color:rgb(51,102,153)"&#62;&#60;/a&#62;9.&#60;span style="font-family:宋体"&#62;扩展&#60;/span&#62;&#60;/h1&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
进而扩展的话就是双向广度搜索算法，顾名思义，即是从起点跟终点分别做广度优先搜索，直到他们的搜索过程中有一个节点相同了，于是就找到了起点跟终点的一条路径。&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
腾讯笔试题目：假设每个人平均是有&#60;span style="font-family:'Courier New'"&#62;25&#60;/span&#62;&#60;span style="font-family:宋体"&#62;个好友，根据六维理论，任何人之间的联系一定可以通过&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;6&#60;/span&#62;&#60;span style="font-family:宋体"&#62;个人而间接认识，间接通过&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;N&#60;/span&#62;&#60;span style="font-family:宋体"&#62;个人认识的，那他就是你的&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;N&#60;/span&#62;&#60;span style="font-family:宋体"&#62;度好友，现在要你编程验证这个&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;6&#60;/span&#62;&#60;span style="font-family:宋体"&#62;维理论。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
此题如果直接做广度优先搜索，那么搜索的节点数可能达到&#60;span style="font-family:'Courier New'"&#62;25^&#60;/span&#62;6，如果是用双向的话，两个树分别只需要搜索到&#60;span style="font-family:'Courier New'"&#62;3&#60;/span&#62;&#60;span style="font-family:宋体"&#62;度好友即可，搜索节点最多为&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;25^&#60;/span&#62;3个，但是用双向广度算法的话会有一个问题要解决，就是你如何在搜索的过程中判断第一棵树中的节点跟第二棵树中的节点有相同的呢？按我的理解，可以用&#60;span style="font-family:'Courier New'"&#62;Hash&#60;/span&#62;&#60;span style="font-family:宋体"&#62;，又或者放进队列的元素都是指向原来节点的指针，而每个节点加入一个&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;color&#60;/span&#62;&#60;span style="font-family:宋体"&#62;的属性，这样再搜索过程中就可以根据节点的&#60;/span&#62;&#60;span style="font-family:'Courier New'"&#62;color&#60;/span&#62;&#60;span style="font-family:宋体"&#62;来判断是否已经被搜索过了。&#60;/span&#62;&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
=========================================================&#60;/p&#62;
&#60;p style="color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px"&#62;
本文出处：&#60;span style="font-family:'Courier New'"&#62;raphealguo@CSDN：&#60;a target="_blank" target="_blank" href="http://blog.csdn.net/raphealguo" style="color:rgb(51,102,153); text-decoration:none"&#62;http://blog.csdn.net/raphealguo&#60;/a&#62;&#60;/span&#62;&#60;/p&#62;
