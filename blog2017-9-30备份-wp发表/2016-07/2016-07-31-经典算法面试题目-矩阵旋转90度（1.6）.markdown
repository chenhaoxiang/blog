---
layout: post
title: "经典算法面试题目-矩阵旋转90度（1.6）"
date: 2016-07-31 05:07:32 +0800
comments: true
categories:❺ 算法及基础题,----- 经典面试算法
tags: [函数,面试题,算法]
keyword: 陈浩翔, 谙忆
description: 题目

Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees. Can you do this in place?

一张图像表示成NxN的矩阵，图像中每个像素是4个字节，写一个函数 
---


题目

Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees. Can you do this in place?

一张图像表示成NxN的矩阵，图像中每个像素是4个字节，写一个函数
&#60;!-- more --&#62;
----------

题目
==

Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees. Can you do this in place?

一张图像表示成NxN的矩阵，图像中每个像素是4个字节，写一个函数把图像旋转90度。 你能原地进行操作吗？(即不开辟额外的存储空间)


解答
==

我们假设要将图像逆时针旋转90度，顺时针是一个道理。如果原图如下所示：

```
1 2 3 4 
5 6 7 8 
9 10 11 12 
13 14 15 16
```

那么逆时针旋转90度后的图应该是：

```
4 8 12 16 
3 7 11 15 
2 6 10 14 
1 5 9 13
```

我们要如何原地进行操作以达到上面的效果呢？可以分两步走。 第一步交换主对角线两侧的对称元素，第二步交换第i行和第n-1-i行，即得到结果。 看图示：(如果是顺时针， 第一步交换/对角线两侧的对称元素，第二步交换第i行和第n-1-i行，即得到结果。)

```
原图：           第一步操作后：   第二步操作后：
1 2 3 4         1 5 9 13        4 8 12 16
5 6 7 8         2 6 10 14       3 7 11 15
9 10 11 12      3 7 11 15       2 6 10 14
13 14 15 16     4 8 12 16       1 5 9 13
```


顺时针90度与逆时针90度的代码如下：
-----

```
#include &#60;iostream&#62;
using namespace std;

void swap(int *a, int *b){
    int t = *a;
    *a = *b;
    *b = t;
}
//这2个交换函数，选一个就行了，我只是为了演示它们实现的结果是一样
void swap2(int &a,int &b){
    int t = a;
    a = b;
    b = t;
}


//顺时针
void clockwise(int a[][4],int n){
     for(int i=0; i&#60;n; ++i)
        for(int j=0; j&#60;n-i; ++j)
            swap(a[i][j], a[n-1-j][n-1-i]);

    for(int i=0; i&#60;n/2; ++i)
        for(int j=0; j&#60;n; ++j)
            swap(a[i][j], a[n-1-i][j]);
}

//逆时针
void transpose(int a[][4], int n){
    for(int i=0; i&#60;n; ++i)
        for(int j=i+1; j&#60;n; ++j)
            swap(&a[i][j], &a[j][i]);
    for(int i=0; i&#60;n/2; ++i)
        for(int j=0; j&#60;n; ++j)
            swap(&a[i][j], &a[n-1-i][j]);
}
int main(){
    int a[4][4] = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {13, 14, 15, 16}
    };
    for(int i=0; i&#60;4; ++i){
        for(int j=0; j&#60;4; ++j)
            cout&#60;&#60;a[i][j]&#60;&#60;" ";
        cout&#60;&#60;endl;
    }
    cout&#60;&#60;endl;
    transpose(a, 4);
    cout&#60;&#60;"逆时针转90度"&#60;&#60;endl;
    for(int i=0; i&#60;4; ++i){
        for(int j=0; j&#60;4; ++j)
            cout&#60;&#60;a[i][j]&#60;&#60;" ";
        cout&#60;&#60;endl;
    }
    cout&#60;&#60;endl;
    a = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {13, 14, 15, 16}
    };
    for(int i=0; i&#60;4; ++i){
        for(int j=0; j&#60;4; ++j)
            cout&#60;&#60;a[i][j]&#60;&#60;" ";
        cout&#60;&#60;endl;
    }
    clockwise(a,4);
    cout&#60;&#60;endl;
    cout&#60;&#60;"顺时针转90度"&#60;&#60;endl;
    for(int i=0; i&#60;4; ++i){
        for(int j=0; j&#60;4; ++j)
            cout&#60;&#60;a[i][j]&#60;&#60;" ";
        cout&#60;&#60;endl;
    }
    return 0;
}

```


输出结果：
-----

![](http://img.blog.csdn.net/20160731042046826)
