---
layout: post
title: "HDOJ 2044 一只小蜜蜂..."
date: 2016-01-24 11:33:49 +0800
comments: true
categories:❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 模拟/推导/打表
tags: []
keyword: 陈浩翔, 谙忆
description: Problem Description 
有一只经过训练的蜜蜂只能爬向右侧相邻的蜂房，不能反向爬行。请编程计算蜜蜂从蜂房a爬到蜂房b的可能路线数。 
其中，蜂房的结构如下所示。 
Input 
输入数据的第一行是一个整数N,表示测试实例的个数，然后是N 行数据，每行包含两个整数a和b( 0 < a < b < 50 )。Output 
对于每个测试实例，请输出蜜蜂从蜂房a爬到蜂房b的可能路线数，每个 
---


Problem Description 
有一只经过训练的蜜蜂只能爬向右侧相邻的蜂房，不能反向爬行。请编程计算蜜蜂从蜂房a爬到蜂房b的可能路线数。 
其中，蜂房的结构如下所示。 
Input 
输入数据的第一行是一个整数N,表示测试实例的个数，然后是N 行数据，每行包含两个整数a和b( 0 < a < b < 50 )。Output 
对于每个测试实例，请输出蜜蜂从蜂房a爬到蜂房b的可能路线数，每个
<!-- more -->
----------

Problem Description
有一只经过训练的蜜蜂只能爬向右侧相邻的蜂房，不能反向爬行。请编程计算蜜蜂从蜂房a爬到蜂房b的可能路线数。
其中，蜂房的结构如下所示。
![](http://img.blog.csdn.net/20160124233252856)


 

Input
输入数据的第一行是一个整数N,表示测试实例的个数，然后是N 行数据，每行包含两个整数a和b( 0 < a < b < 50 )。

 

Output
对于每个测试实例，请输出蜜蜂从蜂房a爬到蜂房b的可能路线数，每个实例的输出占一行。

 

Sample Input
2
1 2
3 6
 

Sample Output
1
3


```
import java.util.Scanner;

public class Main {
    static long[] time1 = new long[50];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Times();
        int n = sc.nextInt();

        while (n-- > 0) {

            int a = sc.nextInt();
            int b = sc.nextInt();

            System.out.println(time1[b - a]);

        }
    }

    private static void Times() {
        time1[1] = 1;
        time1[2] = 2;
        time1[3] = 3;
        for (int i = 4; i < 50; i++) {
            time1[i] = time1[i - 1] + time1[i - 2];
        }
    }
}

```

本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。 
欢迎转载，分享是进步的源泉。
<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>
