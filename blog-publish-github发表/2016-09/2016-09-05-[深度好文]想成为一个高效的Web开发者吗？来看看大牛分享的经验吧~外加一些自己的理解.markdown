---
layout: post
title: "[深度好文]想成为一个高效的Web开发者吗？来看看大牛分享的经验吧~外加一些自己的理解"
date: 2016-09-05 12:58:13 +0800
comments: true
categories:❻ 其他,----- 情感之谈
tags: []
keyword: 陈浩翔, 谙忆
description: 前言:无意间浏览到此篇文章，发现这篇文章无论是对于新手程序员，还是学过几年的程序员，都是挺有帮助的。于是，在此分享，后面也有我自己的一些理解，希望能帮到更多的朋友。作为一个软(ku)件(bi)工(de)程(ma)师(nong)，你有没有觉得做什么事都没时间？没时间学习新东西，没时间去回顾、整理原来写的烂代码，没时间写单元测试，没时间给接管你项目的家伙写文档，没时间思考，没时间喘气，没！时！间！额… 
---


前言:无意间浏览到此篇文章，发现这篇文章无论是对于新手程序员，还是学过几年的程序员，都是挺有帮助的。于是，在此分享，后面也有我自己的一些理解，希望能帮到更多的朋友。作为一个软(ku)件(bi)工(de)程(ma)师(nong)，你有没有觉得做什么事都没时间？没时间学习新东西，没时间去回顾、整理原来写的烂代码，没时间写单元测试，没时间给接管你项目的家伙写文档，没时间思考，没时间喘气，没！时！间！额…
<!-- more -->
----------

<h1><span style="color:#33FF33;"><span>前言:</span></span></h1><p><span>无意间浏览到此篇文章，发现这篇文章无论是对于新手程序员，还是学过几年的程序员，都是挺有帮助的。于是，在此分享，后面也有我自己的一些理解，<span>希望能帮到更多的朋友</span>。</span></p><p><span><br /></span></p><p><span><br /></span></p><p><span></span></p><p><a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/networks/uploadimg/e174490d-617a-4d9d-be32-6a2d5996c620.png"><img src="http://www.igeekbar.com/igeekbar/networks/uploadimgthumb/e174490d-617a-4d9d-be32-6a2d5996c620.png" class="img-responsive center-block" alt="" /></a></p><br /><p><span>作为一个软(ku)件(bi)工(de)程(ma)师(nong)，你有没有觉得做什么事都没时间？没时间学习新东西，没时间去回顾、整理原来写的烂代码，没时间写单元测试，没时间给接管你项目的家伙写文档，没时间思考，没时间喘气，没！时！间！</span><br /></p><p><br /></p><p>额……如果你肯花点时间看看这篇文章，我相信你会明白应该把时间花在哪。</p><p><br /></p><p>我曾以为成为一个技术大牛的唯一途径是玩命地学习与工作。这个想法差点毁了我。身体越来越差，和家人与朋友越来越疏远，很快我就撑不住了。后来我开始反思，发现自己的时间安排极为不合理，并逐渐悟出了下面这5个道理，这才让自己从那种高压状态中解脱出来。</p><p><br /></p><hr class="section-divider" /><p><br /></p><h2><span style="color:#FF0000;">不要因为怕自己落伍而去学习新东西</span></h2><p>一个优秀的开发者始终在学习，这一点毋庸置疑。诚然，旧的技术终会被淘汰。但是新的技术终有一天会变成旧的。因此，没有必要一味地去追求最新的技术。</p><p>平均每37秒就会诞生一个新的标准或框架，你不可能把它们都学会。很多新技术、框架或者新特性对你来说都不是必需的，你没必要非得了解它们。真正有价值的技术需要经过社区和市场一段时间的打磨才能出现。IT公司通常都会重点培养适合于自己的技术，没有哪个公司会一拍脑门让自己的代码去适配某个全新的框架。因此你也不用太担心因为某些新技术而被裁员。你需要关注的是这三类知识，按照优先级排列如下：</p><p>（1）<span style="color:#3333FF;"><strong>基础</strong></span>。基础是重中之重。当你掌握一门基础知识后，你可以快速掌握其相关的技术。比如如果你非常熟悉JavaScript，那么基于JavaScript的任何框架都难不倒你。如果你掌握了面向对象编程，那么你可以快速掌握一门新的面向对象的语言。深入学习基础能够大幅提高你的学习效率。<a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/networks/uploadimg/796c95ef-83d2-47cb-a844-38f957b6cc1d.png"><img src="http://www.igeekbar.com/igeekbar/networks/uploadimgthumb/796c95ef-83d2-47cb-a844-38f957b6cc1d.png" class="img-responsive center-block" alt="" /></a></p><p>（2）<span style="color:#3333FF;"><strong>你常用技术的最新版本</strong></span>。你平常用得最多的技术才是你的铁饭碗。如果它们出了新的版本，那么你有必要花时间去学习一下。</p><p><br /></p><p>（3）<span style="color:#3333FF;"><strong>大公司推崇的技术</strong></span>。如果一个非常知名的公司（如谷歌、脸书和微软）发布了一个新的技术并不断地对它进行维护，那么这个技术就值得你去关注。曾经社区里有成百上千个非常火的JavaScript框架，结果Angular和React的出现瞬间抢走了他们的风头。<a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/networks/uploadimg/9fa30f04-fe74-402e-8c3d-afbe6d6ababe.png"><img src="http://www.igeekbar.com/igeekbar/networks/uploadimgthumb/9fa30f04-fe74-402e-8c3d-afbe6d6ababe.png" class="img-responsive center-block" alt="" /></a><a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/networks/uploadimg/818565b7-0e4b-4b4e-9b67-9251ce9d0a54.jpg"><img src="http://www.igeekbar.com/igeekbar/networks/uploadimgthumb/818565b7-0e4b-4b4e-9b67-9251ce9d0a54.jpg" class="img-responsive center-block" alt="" /></a></p><p><br /></p><p>好好规划你的学习时间，每天安排一段时间来学习。这段时间不一定很长，哪怕只有25分钟也能使你有所成长。</p><p><br /></p><p><br /></p><h2><span style="color:#FF0000;">写出高效的代码比一般的代码要花更多的时间</span></h2><p>当你运行完程序并发现功能实现的时候，你感觉工作已经完成了，实则不然。实现一个新的功能除了编写新的代码以外，还包括对该功能相关的其他部分已有代码的调整与优化。当你发现你的一部分时间花在完善代码的设计上了，那么从长远角度来看你遇到的错误会更少一些。</p><p><br /></p><p>要想减少你的代码的错误并优化设计，你需要注意以下两点：</p><p>（1）<span style="color:#3333FF;"><strong>先准备好测试环境，然后再开发</strong></span>。先将测试功能配置好，然后再编写符合测试标准的代码。这样既可以减少bug的产生还能优化你的代码思路，因为你在编写代码的时候就严格遵守更加合理和规范的标准。这会使你的代码变得简洁、高效。<a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/networks/uploadimg/7334976a-448f-40e5-9bfa-2aa28b55213f.png"><img src="http://www.igeekbar.com/igeekbar/networks/uploadimgthumb/7334976a-448f-40e5-9bfa-2aa28b55213f.png" class="img-responsive center-block" alt="" /></a></p><p>（2）<span style="color:#3333FF;"><strong>迭代完成你的工作而不是一步到位</strong></span>。在你的代码实现需求之前不要花时间去完善它。你永远也不可能使你的代码处于完美的状态。你优先要做的就是让你的代码完成指定的功能。通常情况开发者会犯这两个错误：要么花了太多时间思考而没有充足的时间去实现，要么没有在设计最初的方案上花足够的时间。遵循Kent Beck说得这句话:</p><blockquote> “先让它生效，再让它正确地工作，最后再让它更高效”。</blockquote><div> <br /></div><div> <br /></div><h2><span style="color:#FF0000;">7*24小时的工作不会让你成为佼佼者，合理的时间安排才是最重要的</span></h2><p>这个经验源于我自身的教训。我曾经为了让老板和客户满意而疯狂地工作。我害怕说“不”，不想让其他人失望。我尽我所能去完成工作，曾经大量摄入咖啡因通宵地工作，困了就直接睡在我的办公桌上。<a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/networks/uploadimg/e988e69b-a5e5-4930-aea1-5131cd7806e9.jpg"><img src="http://www.igeekbar.com/igeekbar/networks/uploadimgthumb/e988e69b-a5e5-4930-aea1-5131cd7806e9.jpg" class="img-responsive center-block" alt="" /></a></p><p>起初我是全公司的楷模。我得到老板的赏识并感觉风光无限，前途一片光明。这种并不长久的过度表现使其他人对我产生了过高的期待，很快我就撑不住了。结果我的身子垮了，经常生病，耽误了工作。公司的人变得不再信任我。&nbsp;</p><p><br /></p><p>后来我渐渐明白真正的佼佼者是那些一直可靠的人。他们保证的事一定会做到。要想成为那样的人就必须认真规划自己的时间。</p><p><br /></p><p>你必须牢牢把握自己时间的控制权，在约定好的期限即将到达的时候高质量地完成你的工作。要想做到这一点起初会很难，因为你需要对超出你能力范围的任务说不。<a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/networks/uploadimg/684ac72a-8638-4c6e-9338-d38ca1420380.jpg"><img src="http://www.igeekbar.com/igeekbar/networks/uploadimgthumb/684ac72a-8638-4c6e-9338-d38ca1420380.jpg" class="img-responsive center-block" alt="" /></a></p><p>刚开始，你的老板和客户可能不太会在意你。但是一旦你建立起靠谱、可信的名声后，一切就都不一样了。随着时间的推移，其他开发者都会渐渐显露疲态，变得不再那么可靠，而你则会脱颖而出，成为团队里的佼佼者。我就是这样成为了行业翘楚。我很好地协调了自己的时间并调整他人对自己的期望值，因此建立起了高质量和高实效的好名声。</p><p><br /></p><p><br /></p><h2><span style="color:#FF0000;">不是所有的付出都会有回报</span></h2><p>花时间也是一种投资。和其他的投资一样，你非常期待投资会有回报，希望在回本的基础上有所收益。</p><p><br /></p><p>我之前曾提到“<span style="color:#000066;"><strong>先让它生效，再让它正确地工作，最后再让它更高效</strong></span>”这句话。但是不要误解，这里的“正确”<u>不代表</u>完美，“高效”<u>不代表</u>追求极致。“正确”意味着你的代码能够准确地实现功能并易于维护。“高效”意味着不影响用户体验。最关键的一点是你的应用要让用户感觉很快。</p><p><a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/networks/uploadimg/c03cff00-97df-4b43-b5dc-9935a91a691e.jpg"><img src="http://www.igeekbar.com/igeekbar/networks/uploadimgthumb/c03cff00-97df-4b43-b5dc-9935a91a691e.jpg" class="img-responsive center-block" alt="" /></a></p><p><br /></p><p>因此，不要纠结于优化一个基本上不用的函数，也不要为了仅节省几毫秒而去修改一个已经比眨眼（大约300毫秒）还要快的功能。不要因为你学了一个新的技术或方法就把你之前写的功能正确、结构完整的代码推翻重写。</p><p><br /></p><p><br /></p><h2><span style="color:#FF0000;">按照时间表去工作可以使你更加高效</span></h2><p>起初我很难理解这一点。你不将你的精力全部投入到工作中也能做到高效？恩，这是真的。Allison Gabriel是弗吉尼亚联邦大学的管理学教授助理，主要研究工作需求和员工动机。她认为：“很多研究表明人的认知能力是有限的，当你不断地去耗费你的能力时，你并不能达到最佳的工作状态。当你被自己榨干时，你的效率会大幅下降。”</p><p><br /></p><p>永远不要在压力非常大的时候工作，尤其是你非常疲劳、情绪不好的时候。这些不安因素都会让你分心，从身心两方面对你造成不良影响，降低你的工作效率。</p><p><a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/networks/uploadimg/0324c845-0a4e-4626-88ea-540ae9ce1da4.jpg"><img src="http://www.igeekbar.com/igeekbar/networks/uploadimgthumb/0324c845-0a4e-4626-88ea-540ae9ce1da4.jpg" class="img-responsive center-block" alt="" /></a></p><p>人脑的自控能力好比是一种资源，当你进行自我控制时，这个资源会被消耗一部分。如果你的自控能力被大量消耗的话你就不能集中注意力，自然就不能高效地工作了。</p><p><br /></p><p>不论你是否乐意，你的身心都需要一个休息的时间。因此在每天的时间表里都要安排休息的时间。严格按照时间表的休息时间去休息，不多也不少，这样可以让你在充分休息的同时不感到内疚。指定明确的休息时间可以让你以更加自如的心态去工作，因为你知道你有休息的时间而不是无休止的工作下去。</p><p><a target=_blank target="_blank" href="http://igeekbar.com/igeekbar/networks/uploadimg/f2ca9400-994e-471b-8001-33610910840d.jpg"><img src="http://igeekbar.com/igeekbar/networks/uploadimgthumb/f2ca9400-994e-471b-8001-33610910840d.jpg" class="img-responsive center-block" alt="" /></a></p><p><br /></p><hr class="section-divider" /><p><br /></p><h2><span style="color:#FF0000;">结语</span></h2><p>了解了这五个经验，相信你已经明白了应该如何安排自己的时间。合理地安排你的学习、工作与休息的时间，制定出详细的时间表并严格按照它执行。学习你应该学的、花时间在一些必要工作上、该休息的时候好好休息。希望你也能在自己的领域崭露头角，成为一个真正的大牛~</p><p>以上除前言外为转载，原文链接:</p><p><a target=_blank target="_blank" href="http://www.igeekbar.com/igeekbar/post/97.htm">igeekbar《想成为一个高效的Web开发者吗？来看看大牛分享的经验吧~》</a><br /></p><p><br /></p><h2><span style="font-size:24px;color:#33FF33;"><strong>我的理解：</strong></span></h2><p>仔细阅读完上面的文章，对此文章有点小小的总结。上面的文章说了5个经验，也就是：</p><p><span style="color:#33CCFF;">1、不要因为怕自己落伍而去学习新东西</span></p><p>我觉得更准确的说，其实应该是:不要因为怕自己落伍而去学习所有的新东西/技术。</p><p>一个人的精力与生命总是有限的，正如前文所说：平均每37秒就会诞生一个新的标准或框架。</p><p>试问，就单说这个每37秒诞生的一个标准或框架，都无法全部学来，更何况编程语言如此大的一个概念。正因为我们精力与生命有限，所以，我们要学会学习，学会挑选。</p><p>上面总结了小3点，也就是:<strong>基础</strong>、<strong>常用技术的最新版本</strong>、<strong>大公司推崇的技术</strong>。</p><p><br /></p><p><span style="color:#33CCFF;">2、写出高效的代码比一般的代码要花更多的时间</span></p><p>如何写出高效的代码，在我的理解看来，这不是一蹴而就的，这需要积累，自己平时写代码的时候，就需要注意代码的高效性这个问题。</p><p>在水平有限的时候，我们可以不必追求高效。在水平提高一些后，就该注意这个问题了。在用我们自己的代码完成完整的功能后，可以对已经完整的代码去进行进一步的完善。<br /></p><p>或者最好一开始就先设计架构好项目，对后面的开发与查错很有帮助的。</p><p>因为自己水平目前有限，无法做出更多的理解。见谅~<br /></p><p><br /></p><p><span style="color:#33CCFF;">3、7*24小时的工作不会让你成为佼佼者，合理的时间安排才是最重要的</span></p><p>即使我们再怎么想努力工作，一天也只有24小时，而你能学习的，除去必须的吃饭睡觉运动，个人觉得一天能有10个小时左右的累积学习时间，那么，坚持下去，每个月你都能看到自己明显的进步了。</p><p>合理的安排时间，这个也是挺重要的，个人并不喜欢全部依赖计划行事，毕竟，总会有一点意外的。但是适当的规划，还是必要的。</p><p>例如，这一天学习什么，学多少。一周学习完哪些东西。这个月做哪些事、等等，我觉得虽然不需要详细的计划，但是，至少，明白自己要做什么，应该学习什么。而不能完全随性而为，想到做啥了就去做啥，然后到最后，啥也没真正的做好。</p><p><br /></p><p><span style="color:#33CCFF;">4、不是所有的付出都会有回报</span></p><p>正如此小标题所说，不是所有付出都会有回报，准确的说，这是一句人生哲理了。相信大家对此都有一些了解，我也就不再说明了。</p><p><br /></p><p><span style="color:#33CCFF;">5、按照时间表去工作可以使你更加高效</span></p><p>时间表这个东西，挺好的。但是最好不要把时间分成很细。</p><p>分成大概就好。而且安排在时间表上的事，不要随意去更改，可能对于一个刚开始按照时间表去做事，挺难的，但是坚持下去，无论是学习的效果还是其他例如锻炼方面的效果都会是很明显的。<br /></p><p><br /></p><p><span>最后-我的理解如有不恰当之处，欢迎指出。</span></p><p><span><br />本文章由[谙忆]编写， 所有权利保留。 <br />转载请注明出处：http://blog.csdn.net/qq_26525215&nbsp; ------<a target=_blank target="_blank" href="http://blog.csdn.net/qq_26525215">大学之旅_谙忆的博客</a><br /><br /></span></p><p><span></span><br /></p><p><br /></p>

本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。 
欢迎转载，分享是进步的源泉。
<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>
