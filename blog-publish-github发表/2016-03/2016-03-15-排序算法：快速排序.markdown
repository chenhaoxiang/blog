---
layout: post
title: "排序算法：快速排序"
date: 2016-03-15 09:07:45 +0800
comments: true
categories:❺ 算法及基础题,----- 排序相关
tags: [快速排序,排序算法,算法]
keyword: 陈浩翔, 谙忆
description: 快速排序（Quicksort）是对冒泡排序的一种改进。 
在实际中最常用的一种排序算法，速度快，效率高。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。 
快速排序采用的思想是分治思想。 
算法介绍： 
设要排序的数组是A[0]……A 
---


快速排序（Quicksort）是对冒泡排序的一种改进。 
在实际中最常用的一种排序算法，速度快，效率高。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。 
快速排序采用的思想是分治思想。 
算法介绍： 
设要排序的数组是A[0]……A
<!-- more -->
----------

快速排序（Quicksort）是对冒泡排序的一种改进。
在实际中最常用的一种排序算法，速度快，效率高。

它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。
快速排序采用的思想是分治思想。
算法介绍：
设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。
一趟快速排序的算法是：
1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；
2）以第一个数组元素作为关键数据，赋值给x，即x=rands[0]；
3）从j开始向前搜索，即由后开始向前搜索(j--)，找到第一个小于x的值rands[j]，将rands[j]和rands[i]互换；
4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于x的rands[i]，将rands[i]和rands[j]互换；
5）重复第3、4步，直到i>=j； (3,4步中，没找到符合条件的值，即3中rands[j]不小于x,4中rands[i]不大于x的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。

下面为快排实现代码：
实现了100个随机数的从小到大排序。
```
package cn.hncu;

public class quickSort {
	public static void main(String[] args) {
		int[] rands = new int[100];
		for(int i=0;i<rands.length;i++){
			rands[i] = (int)(Math.random()*rands.length);
			//System.out.print(rands[i]+" ");
		}
		//int[] rands ={1,17,-25,2,15,-25};
		quickSort(rands, 0, rands.length-1);
		//System.out.println();
		for(int t:rands){
			System.out.print(t+" ");
		}
		
	}
	
	public static void quickSort(int a[],int p,int r){
		if(p<r){
			//把数组划分成两个子数组和一个元素
			//a[q:r]==>a[p:q-1],a[q],a[q+1:r]
			int q = partition(a,p,r);
			quickSort(a, p, q-1);
			quickSort(a, q+1,r);
		}
		
	}

	private static int partition(int[] a, int p, int r) {
		//快排优化
		//随机选择一个a[m]与第一个a[p]交换
		int rand = (int)(Math.random()*(r-p));
		swap(a,p,p+rand);//rand为0-(r-p)之间的随机数
		
		int x = a[p];//第一个元素为枢轴
		int i=p;
		int j=r+1;
		
		while(true){
			//在右侧定位到比枢轴小的书
			while(a[--j]>x); //一定会有一个a[p]，不用考虑越界
			
			//在左侧定位到比枢轴大的数
			while(a[++i]<x&&i<r);//找左边的
			
			if(i>=j){
				break;
			}
			
			swap(a,i,j);
		}
		
		//把枢轴换到小值区的最后一个元素的位置
		swap(a,p,j);
		
		return j;
	}

	private static void swap(int[] a, int i, int j) {
//		System.out.println(a[i]+" "+a[j]);
//		a[i]=a[i]^a[j];
//		a[j]=a[i]^a[j];
//		a[i]=a[i]^a[j];
//		System.out.println(a[i]+" "+a[j]);
//		System.out.println("---------------------");
		//不能用异或来交换a[i]/a[j],因为有可能i，j是相等的，也就是说a[i]和a[j]就是同一个数
		//异或的特点：
		//和0做异或保持原值不变，和1做异或得到原值的相反值。
		//自己和自己异或结果为0；
		
		int t=a[i];
		a[i]=a[j];
		a[j]=t;
	} 
}

```

本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。 
欢迎转载，分享是进步的源泉。
<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>
