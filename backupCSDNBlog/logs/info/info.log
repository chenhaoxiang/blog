[INFO] 2017-07-28 12:29:13 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-625] [chx]
[INFO] 2017-07-28 12:29:12 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-624] [chx]
[INFO] 2017-07-28 12:29:12 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-623] [chx]
[INFO] 2017-07-28 12:29:12 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-622] [chx]
[INFO] 2017-07-28 12:29:11 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-621] [chx]
[INFO] 2017-07-28 12:29:11 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-620] [chx]
[INFO] 2017-07-28 12:29:11 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-619] [chx]
[INFO] 2017-07-28 12:29:11 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-618] [chx]
[INFO] 2017-07-28 12:29:10 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51136848 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:13 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50974855 [pool-627-thread-1] [chx]
[INFO] 2017-07-28 12:29:13 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50974855,"title":"HDOJ 1014 Uniform Generator（公约数问题）","create_at":"\/Date(1458823041000)\/","create":"2016-03-24 08:37:21","view_count":433,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \nComputer simulations often require random numbers. One way to generate pseudo-random numbers is via a function of the formseed(x+1) = [seed(x) + STEP] % MODwhere ‘%’ is the modulus","url":"http://blog.csdn.net/qq_26525215/article/details/50974855","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 公约数公倍数","tags":"acm,java","content":"\u003cp\u003e\u003cstrong\u003eProblem Description\u003c/strong\u003e \u003cbr\u003e\nComputer simulations often require random numbers. One way to generate pseudo-random numbers is via a function of the form\u003c/p\u003e\n\n\u003cp\u003eseed(x+1) = [seed(x) + STEP] % MOD\u003c/p\u003e\n\n\u003cp\u003ewhere ‘%’ is the modulus operator. \u003c/p\u003e\n\n\u003cp\u003eSuch a function will generate pseudo-random numbers (seed) between 0 and MOD-1. One problem with functions of this form is that they will always generate the same pattern over and over. In order to minimize this effect, selecting the STEP and MOD values carefully can result in a uniform distribution of all values between (and including) 0 and MOD-1. \u003c/p\u003e\n\n\u003cp\u003eFor example, if STEP = 3 and MOD = 5, the function will generate the series of pseudo-random numbers 0, 3, 1, 4, 2 in a repeating cycle. In this example, all of the numbers between and including 0 and MOD-1 will be generated every MOD iterations of the function. Note that by the nature of the function to generate the same seed(x+1) every time seed(x) occurs means that if a function will generate all the numbers between 0 and MOD-1, it will generate pseudo-random numbers uniformly with every MOD iterations. \u003c/p\u003e\n\n\u003cp\u003eIf STEP = 15 and MOD = 20, the function generates the series 0, 15, 10, 5 (or any other repeating series if the initial seed is other than 0). This is a poor selection of STEP and MOD because no initial seed will generate all of the numbers from 0 and MOD-1. \u003c/p\u003e\n\n\u003cp\u003eYour program will determine if choices of STEP and MOD will generate a uniform distribution of pseudo-random numbers. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInput\u003c/strong\u003e \u003cbr\u003e\nEach line of input will contain a pair of integers for STEP and MOD in that order (1 &lt;= STEP, MOD &lt;= 100000).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput\u003c/strong\u003e \u003cbr\u003e\nFor each line of input, your program should print the STEP value right- justified in columns 1 through 10, the MOD value right-justified in columns 11 through 20 and either “Good Choice” or “Bad Choice” left-justified starting in column 25. The “Good Choice” message should be printed when the selection of STEP and MOD will generate all the numbers between and including 0 and MOD-1 when MOD numbers are generated. Otherwise, your program should print the message “Bad Choice”. After each output test set, your program should print exactly one blank line.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSample Input\u003c/strong\u003e \u003cbr\u003e\n3 5 \u003cbr\u003e\n15 20 \u003cbr\u003e\n63923 99999\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSample Output\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e     3         5    Good Choice\n\n    15        20    Bad Choice\n\n 63923     99999    Good Choice\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e题目这么长，其实意思就是判断输入的2个数的最大公约数是不是1. \u003cbr\u003e\n如果是输出：Good Choice \u003cbr\u003e\n否则输出：Bad Choice \u003cbr\u003e\n还有注意的是：输出后面跟一个空行。其实我也不知道是输出之间还是输出之后（英语水平有限）。我是输出之后跟一个空行，AC了。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e Main{\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(sc.hasNext()){\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a = sc.nextInt();\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e b = sc.nextInt();\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(gcd(a,b)==\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n                System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.printf(\u003cspan class=\"hljs-string\"\u003e\"%10d%10d\"\u003c/span\u003e,a,b);\n                System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"hljs-string\"\u003e\"    Good Choice\"\u003c/span\u003e);\n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n                System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.printf(\u003cspan class=\"hljs-string\"\u003e\"%10d%10d\"\u003c/span\u003e,a,b);\n                System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"hljs-string\"\u003e\"    Bad Choice\"\u003c/span\u003e);\n            }\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println();\n        }\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e//递归求最大公约数\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egcd\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e b) {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e b==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e?a:gcd(b,a%b);\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"**Problem Description**\nComputer simulations often require random numbers. One way to generate pseudo-random numbers is via a function of the form\n\nseed(x+1) = [seed(x) + STEP] % MOD\n\nwhere \u0027%\u0027 is the modulus operator. \n\nSuch a function will generate pseudo-random numbers (seed) between 0 and MOD-1. One problem with functions of this form is that they will always generate the same pattern over and over. In order to minimize this effect, selecting the STEP and MOD values carefully can result in a uniform distribution of all values between (and including) 0 and MOD-1. \n\nFor example, if STEP = 3 and MOD = 5, the function will generate the series of pseudo-random numbers 0, 3, 1, 4, 2 in a repeating cycle. In this example, all of the numbers between and including 0 and MOD-1 will be generated every MOD iterations of the function. Note that by the nature of the function to generate the same seed(x+1) every time seed(x) occurs means that if a function will generate all the numbers between 0 and MOD-1, it will generate pseudo-random numbers uniformly with every MOD iterations. \n\nIf STEP = 15 and MOD = 20, the function generates the series 0, 15, 10, 5 (or any other repeating series if the initial seed is other than 0). This is a poor selection of STEP and MOD because no initial seed will generate all of the numbers from 0 and MOD-1. \n\nYour program will determine if choices of STEP and MOD will generate a uniform distribution of pseudo-random numbers. \n\n \n\n**Input**\nEach line of input will contain a pair of integers for STEP and MOD in that order (1 \u003c= STEP, MOD \u003c= 100000).\n\n \n\n**Output**\nFor each line of input, your program should print the STEP value right- justified in columns 1 through 10, the MOD value right-justified in columns 11 through 20 and either \"Good Choice\" or \"Bad Choice\" left-justified starting in column 25. The \"Good Choice\" message should be printed when the selection of STEP and MOD will generate all the numbers between and including 0 and MOD-1 when MOD numbers are generated. Otherwise, your program should print the message \"Bad Choice\". After each output test set, your program should print exactly one blank line.\n\n \n\n**Sample Input**\n3 5\n15 20\n63923 99999\n \n\n**Sample Output**\n\n         3         5    Good Choice\n\n        15        20    Bad Choice\n\n     63923     99999    Good Choice\n\n\n题目这么长，其实意思就是判断输入的2个数的最大公约数是不是1.\n如果是输出：Good Choice\n否则输出：Bad Choice\n还有注意的是：输出后面跟一个空行。其实我也不知道是输出之间还是输出之后（英语水平有限）。我是输出之后跟一个空行，AC了。\n\n```\nimport java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tif(gcd(a,b)==1){\n\t\t\t\tSystem.out.printf(\"%10d%10d\",a,b);\n\t\t\t\tSystem.out.println(\"    Good Choice\");\n\t\t\t}else{\n\t\t\t\tSystem.out.printf(\"%10d%10d\",a,b);\n\t\t\t\tSystem.out.println(\"    Bad Choice\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\t//递归求最大公约数\n\tprivate static int gcd(int a, int b) {\n\t\treturn b==0?a:gcd(b,a%b);\n\t}\n\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-627-thread-1] [chx]
[INFO] 2017-07-28 12:29:13 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-03\2016-03-24-HDOJ 1014 Uniform Generator（公约数问题）.markdown [pool-627-thread-1] [chx]
[INFO] 2017-07-28 12:29:10 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-617] [chx]
[INFO] 2017-07-28 12:29:13 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 1014 Uniform Generator（公约数问题）》成功 [pool-627-thread-1] [chx]
[INFO] 2017-07-28 12:29:13 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-628] [chx]
[INFO] 2017-07-28 12:29:13 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-07\2016-07-22-apache的FileUtils方法大全.markdown [pool-626-thread-1] [chx]
[INFO] 2017-07-28 12:29:13 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50382946 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:14 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-629] [chx]
[INFO] 2017-07-28 12:29:14 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《apache的FileUtils方法大全》成功 [pool-626-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50382946 [pool-629-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50382946,"title":"Java---实力弹弹球，弹弹弹","create_at":"\/Date(1450796363000)\/","create":"2015-12-22 10:59:23","view_count":600,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"直接上代码了。 \n微调按钮加画布画几个圆，再实现监听。。。package cn.hncu.threadDemo.thread2;import java.awt.Canvas;\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionL","url":"http://blog.csdn.net/qq_26525215/article/details/50382946","categories":"❷ Java大学之行,----- ①、Java/Web小项目","tags":"","content":"\u003cp\u003e直接上代码了。 \u003cbr\u003e\n微调按钮加画布画几个圆，再实现监听。。。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.threadDemo.thread2;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.Canvas;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.Color;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.Graphics;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.event.ActionEvent;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.event.ActionListener;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.event.FocusEvent;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.event.FocusListener;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.swing.JFrame;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.swing.JLabel;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.swing.JPanel;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.swing.JSpinner;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.swing.Timer;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.swing.event.ChangeEvent;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.swing.event.ChangeListener;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBallsJFrame\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eJFrame\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eChangeListener\u003c/span\u003e{\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e BallsCanvas ball;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e JSpinner spinner;\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBallsJFrame\u003c/span\u003e(){\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"弹弹球\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.setBounds(\u003cspan class=\"hljs-number\"\u003e300\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e400\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e300\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.setDefaultCloseOperation(EXIT_ON_CLOSE);\n        Color colors[] = {Color.red,Color.green,Color.blue,Color.magenta,Color.cyan};\n\n        ball = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e BallsCanvas(colors,\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.getContentPane().add(ball);\u003cspan class=\"hljs-comment\"\u003e//默认是CENTER位置\u003c/span\u003e\n\n        JPanel panel = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e JPanel();\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.getContentPane().add(panel,\u003cspan class=\"hljs-string\"\u003e\"South\"\u003c/span\u003e);\n        panel.add(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e JLabel(\u003cspan class=\"hljs-string\"\u003e\"Delay\"\u003c/span\u003e));\n        spinner = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e JSpinner();\n        spinner.setValue(\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e);\n\n        panel.add(spinner);\n\n        spinner.addChangeListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\n\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.setVisible(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\n    }\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003estateChanged\u003c/span\u003e(ChangeEvent e) {\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e value = Integer.parseInt(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e+spinner.getValue());\n        ball.setDelay(value);\n    }\n\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e BallsJFrame();\n    }\n\n}\n\nclass BallsCanvas extends Canvas implements ActionListener, FocusListener{\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Ball balls[];\u003cspan class=\"hljs-comment\"\u003e//存放所有的球\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Timer timer;\u003cspan class=\"hljs-comment\"\u003e//javax.swing.Timer\u003c/span\u003e\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBallsCanvas\u003c/span\u003e(Color colors[] ,\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e delay){\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.balls = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Ball[colors.length];\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,x=\u003cspan class=\"hljs-number\"\u003e40\u003c/span\u003e;i&lt;colors.length;i++,x+=\u003cspan class=\"hljs-number\"\u003e20\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.balls[i] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Ball(x,x,colors[i]);\n\n        }\n\n        \u003cspan class=\"hljs-comment\"\u003e//让当前画布监听 焦点事件\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.addFocusListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\n\n\n        timer = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Timer(delay,\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\n        timer.start();\n\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetDelay\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e delay){\n        timer.setDelay(delay);\n    }\n\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003epaint\u003c/span\u003e(Graphics g) {\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.balls.length;i++){\n            g.setColor(balls[i].color);\n\n\n            \u003cspan class=\"hljs-comment\"\u003e//让每个球的坐标变化一下---（x坐标）\u003c/span\u003e\n            balls[i].x = balls[i].left ? balls[i].x-\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e:balls[i].x+\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n            \u003cspan class=\"hljs-comment\"\u003e//当球碰壁时，更改球的方向\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(balls[i].x&lt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e||balls[i].x&gt;=\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.getWidth()-\u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e){\n                balls[i].left = !balls[i].left;\u003cspan class=\"hljs-comment\"\u003e//切换方向\u003c/span\u003e\n            }\n\n            \u003cspan class=\"hljs-comment\"\u003e//让每个球的坐标变化一下---（y坐标）\u003c/span\u003e\n            balls[i].y = balls[i].up ? balls[i].y-\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e:balls[i].y+\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n            \u003cspan class=\"hljs-comment\"\u003e//当球碰壁时，更改球的方向\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(balls[i].y&lt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e||balls[i].y&gt;=\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.getHeight()-\u003cspan class=\"hljs-number\"\u003e22\u003c/span\u003e){\n                balls[i].up = !balls[i].up;\u003cspan class=\"hljs-comment\"\u003e//切换方向\u003c/span\u003e\n            }\n\n\n\n            g.fillOval(balls[i].x, balls[i].y, \u003cspan class=\"hljs-number\"\u003e20\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e20\u003c/span\u003e);\n        }\n    }\n\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eactionPerformed\u003c/span\u003e(ActionEvent e) {\n        \u003cspan class=\"hljs-comment\"\u003e//System.out.println(\"aaa\");\u003c/span\u003e\n        repaint();\u003cspan class=\"hljs-comment\"\u003e//刷新画布.调用paint(Graphics g)\u003c/span\u003e\n    }\n\n\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efocusGained\u003c/span\u003e(FocusEvent e) {\n        timer.stop();\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efocusLost\u003c/span\u003e(FocusEvent e) {\n        timer.restart();\n\n    }\n\n\n\n\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBall\u003c/span\u003e{\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e x,y;\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e up,left;\n        Color color;\n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBall\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e x, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e y, Color color) {\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.x = x;\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.y = y;\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.color = color;\n            up = left = \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        }\n\n    }\n\n\n\n\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20151222225803052\" alt=\"\" title=\"\"\u003e\u003c/p\u003e","markdowncontent":"直接上代码了。\n微调按钮加画布画几个圆，再实现监听。。。\n\n```\npackage cn.hncu.threadDemo.thread2;\n\nimport java.awt.Canvas;\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.FocusListener;\n\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JSpinner;\nimport javax.swing.Timer;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ChangeListener;\n\npublic class BallsJFrame extends JFrame implements ChangeListener{\n\tprivate BallsCanvas ball;\n\tprivate JSpinner spinner;\n\t\n\tpublic BallsJFrame(){\n\t\tsuper(\"弹弹球\");\n\t\tthis.setBounds(300, 200, 400, 300);\n\t\tthis.setDefaultCloseOperation(EXIT_ON_CLOSE);\n\t\tColor colors[] = {Color.red,Color.green,Color.blue,Color.magenta,Color.cyan};\n\t\t\n\t\tball = new BallsCanvas(colors,100);\n\t\tthis.getContentPane().add(ball);//默认是CENTER位置\n\t\t\n\t\tJPanel panel = new JPanel();\n\t\tthis.getContentPane().add(panel,\"South\");\n\t\tpanel.add(new JLabel(\"Delay\"));\n\t\tspinner = new JSpinner();\n\t\tspinner.setValue(100);\n\t\t\n\t\tpanel.add(spinner);\n\t\t\n\t\tspinner.addChangeListener(this);\n\t\t\n\t\tthis.setVisible(true);\n\t}\n\t@Override\n\tpublic void stateChanged(ChangeEvent e) {\n\t\tint value = Integer.parseInt(\"\"+spinner.getValue());\n\t\tball.setDelay(value);\n\t}\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\tnew BallsJFrame();\n\t}\n\n}\n\nclass BallsCanvas extends Canvas implements ActionListener, FocusListener{\n\tprivate Ball balls[];//存放所有的球\n\tprivate Timer timer;//javax.swing.Timer\n\t\n\tpublic BallsCanvas(Color colors[] ,int delay){\n\t\tthis.balls = new Ball[colors.length];\n\t\tfor(int i=0,x=40;i\u003ccolors.length;i++,x+=20){\n\t\t\tthis.balls[i] = new Ball(x,x,colors[i]);\n\t\t\t\n\t\t}\n\t\t\n\t\t//让当前画布监听 焦点事件\n\t\tthis.addFocusListener(this);\n\t\t\n\t\t\n\t\ttimer = new Timer(delay,this);\n\t\ttimer.start();\n\t\t\n\t}\n\t\n\tpublic void setDelay(int delay){\n\t\ttimer.setDelay(delay);\n\t}\n\n\n\t@Override\n\tpublic void paint(Graphics g) {\n\t\tfor(int i=0;i\u003cthis.balls.length;i++){\n\t\t\tg.setColor(balls[i].color);\n\t\t\t\n\t\t\t\n\t\t\t//让每个球的坐标变化一下---（x坐标）\n\t\t\tballs[i].x = balls[i].left ? balls[i].x-10:balls[i].x+10;\n\t\t\t//当球碰壁时，更改球的方向\n\t\t\tif(balls[i].x\u003c=0||balls[i].x\u003e=this.getWidth()-24){\n\t\t\t\tballs[i].left = !balls[i].left;//切换方向\n\t\t\t}\n\t\t\t\n\t\t\t//让每个球的坐标变化一下---（y坐标）\n\t\t\tballs[i].y = balls[i].up ? balls[i].y-10:balls[i].y+10;\n\t\t\t//当球碰壁时，更改球的方向\n\t\t\tif(balls[i].y\u003c=0||balls[i].y\u003e=this.getHeight()-22){\n\t\t\t\tballs[i].up = !balls[i].up;//切换方向\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tg.fillOval(balls[i].x, balls[i].y, 20, 20);\n\t\t}\n\t}\n\t\n\t\n\t@Override\n\tpublic void actionPerformed(ActionEvent e) {\n\t\t//System.out.println(\"aaa\");\n\t\trepaint();//刷新画布.调用paint(Graphics g)\n\t}\n\t\n\t\n\n\t@Override\n\tpublic void focusGained(FocusEvent e) {\n\t\ttimer.stop();\n\t}\n\n\t@Override\n\tpublic void focusLost(FocusEvent e) {\n\t\ttimer.restart();\n\t\t\n\t}\n\n\t\n\t\n\t\n\tprivate static class Ball{\n\t\tint x,y;\n\t\tboolean up,left;\n\t\tColor color;\n\t\tpublic Ball(int x, int y, Color color) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.color = color;\n\t\t\tup = left = false;\n\t\t}\n\t\t\n\t}\n\n\n\t\n\n}\n```  \n![](http://img.blog.csdn.net/20151222225803052)","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-629-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-12\2015-12-22-Java---实力弹弹球，弹弹弹.markdown [pool-629-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java---实力弹弹球，弹弹弹》成功 [pool-629-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51136848 [pool-628-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51136848,"title":"Java-单机版的书店管理系统(练习设计模块和思想_系列 五 )","create_at":"\/Date(1460465644000)\/","create":"2016-04-12 08:54:04","view_count":12548,"comment_count":8,"comment_allowed":"true","type":"original","channel":15,"digg":1,"bury":0,"description":"经过前几次的发博客。。 \n我发现这样发代码太费劲了。。所以我把目前我完成的源代码上传到百度云里面去了。 \n百度云链接： \nhttp://pan.baidu.com/s/1o7X1Kk6 \n链接如果失效了，请评论。。看到立刻补！本次增加进货模块， \n进货明细面板做出来了。 \n完成了进货管理的数据层接口和进货管理明细的数据层接口。 \n在用户的逻辑层接口增加了一个方法，能获得所有进货人员的方法， \nget","url":"http://blog.csdn.net/qq_26525215/article/details/51136848","categories":"❷ Java大学之行,----- ②、Java设计模块,----- ----- Java书店管理系统","tags":"设计,管理,数据,java,模块设计","content":"\u003ch2 id=\"本系列前面博客的链接\"\u003e本系列前面博客的链接：\u003c/h2\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 四(2) )： \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51117135\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51117135\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 四(1) )： \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51116429\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51116429\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 三 )： \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51099202\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51099202\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 二 )： \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51089734\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51089734\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 一 )： \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51073546\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51073546\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2 id=\"介绍\"\u003e介绍：\u003c/h2\u003e\n\n\u003cp\u003e经过前几次的发博客。。 \u003cbr\u003e\n我发现这样发代码太费劲了。。 \u003cbr\u003e\n后面写了的部分代码：\u003c/p\u003e\n\n\u003cp\u003e所以我把目前我完成的所有源代码上传到CSDN里面去了。 \u003cbr\u003e\n链接： \u003cbr\u003e\n\u003ca href=\"http://download.csdn.net/detail/qq_26525215/9489109\"\u003ehttp://download.csdn.net/detail/qq_26525215/9489109\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e本次增加进货模块， \u003cbr\u003e\n进货明细面板做出来了。 \u003cbr\u003e\n完成了进货管理的数据层接口和进货管理明细的数据层接口。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160412202611301\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e在用户的逻辑层接口增加了一个方法，能获得所有进货人员的方法， \u003cbr\u003e\ngetAllIn(); \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160412202500074\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e进货的值对象，进货明细的值对象， \u003cbr\u003e\n以及这2个的查询值对象，全部做出来了， \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160412202534909\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003ch1 id=\"invo进货模块的值对象封装\"\u003eIn.vo：进货模块的值对象封装\u003c/h1\u003e\n\n\u003ch2 id=\"inmainmodel类\"\u003eInMainModel类：\u003c/h2\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.bookStore.in.vo;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 进货管理值对象封装\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n *\u003cspan class=\"hljs-javadoctag\"\u003e @version\u003c/span\u003e 1.0\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eInMainModel\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e//进货单编号\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String uuid;\n    \u003cspan class=\"hljs-comment\"\u003e//进货时间\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e inDate;\n    \u003cspan class=\"hljs-comment\"\u003e//进货人员编号\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String inUserId;\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e ---返回进货单编号(String型)\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetUuid\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e uuid;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e uuid---设置进货单编号(String型)\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetUuid\u003c/span\u003e(String uuid) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.uuid = uuid;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---返回进货时间(long型)\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetInDate\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inDate;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e inDate---设置进货时间(long型)\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetInDate\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e inDate) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.inDate = inDate;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---返回进货人员编号(String型)\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetInUserId\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inUserId;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e inUserId---设置进货人员编号(String型)\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetInUserId\u003c/span\u003e(String inUserId) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.inUserId = inUserId;\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehashCode\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e prime = \u003cspan class=\"hljs-number\"\u003e31\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e result = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        result = prime * result + ((uuid == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) ? \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e : uuid.hashCode());\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e result;\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eequals\u003c/span\u003e(Object obj) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e == obj)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (obj == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (getClass() != obj.getClass())\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        InMainModel other = (InMainModel) obj;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (uuid == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (other.uuid != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!uuid.equals(other.uuid))\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003etoString\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e uuid + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + inDate\n                + \u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e + inUserId;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e|||||||||||||||||||||||||||||||||||||||||||||||||||\u003c/p\u003e\n\n\n\n\u003ch2 id=\"inmainquerymodel类\"\u003eInMainQueryModel类：\u003c/h2\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.bookStore.in.vo;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 进货查询值对象封装\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n *\u003cspan class=\"hljs-javadoctag\"\u003e @version\u003c/span\u003e 1.0\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eInMainQueryModel\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eInMainModel\u003c/span\u003e {\u003c/span\u003e\n\n    \u003cspan class=\"hljs-comment\"\u003e//需要查询的最大时间\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e inDate2;\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---需要查询的最大时间值\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetInDate2\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inDate2;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e inDate2---设置需要查询的最大时间\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetInDate2\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e inDate2) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.inDate2 = inDate2;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e|||||||||||||||||||||||||||||||||||||||||\u003c/p\u003e\n\n\n\n\u003ch2 id=\"indetailmodel类\"\u003eInDetailModel类：\u003c/h2\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.bookStore.in.vo;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 进货明细管理的值对象封装\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n *\u003cspan class=\"hljs-javadoctag\"\u003e @version\u003c/span\u003e 1.0\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eInDetailModel\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e//进货明细编号\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String uuid;\n    \u003cspan class=\"hljs-comment\"\u003e//进货单编号\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String inId;\n    \u003cspan class=\"hljs-comment\"\u003e//图书编号\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String bookId;\n    \u003cspan class=\"hljs-comment\"\u003e//进货数量\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e sumNum;\n    \u003cspan class=\"hljs-comment\"\u003e//进货总金额\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e sumMoney;\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetUuid\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e uuid;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetUuid\u003c/span\u003e(String uuid) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.uuid = uuid;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetInId\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inId;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetInId\u003c/span\u003e(String inId) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.inId = inId;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetBookId\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e bookId;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetBookId\u003c/span\u003e(String bookId) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.bookId = bookId;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetSumNum\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sumNum;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetSumNum\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e sumNum) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.sumNum = sumNum;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetSumMoney\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sumMoney;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetSumMoney\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e sumMoney) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.sumMoney = sumMoney;\n    }\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehashCode\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e prime = \u003cspan class=\"hljs-number\"\u003e31\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e result = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        result = prime * result + ((uuid == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) ? \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e : uuid.hashCode());\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e result;\n    }\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eequals\u003c/span\u003e(Object obj) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e == obj)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (obj == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (getClass() != obj.getClass())\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        InDetailModel other = (InDetailModel) obj;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (uuid == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (other.uuid != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!uuid.equals(other.uuid))\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003etoString\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"InDetailModel [uuid=\"\u003c/span\u003e + uuid + \u003cspan class=\"hljs-string\"\u003e\", inId=\"\u003c/span\u003e + inId + \u003cspan class=\"hljs-string\"\u003e\", bookId=\"\u003c/span\u003e\n                + bookId + \u003cspan class=\"hljs-string\"\u003e\", sumNum=\"\u003c/span\u003e + sumNum + \u003cspan class=\"hljs-string\"\u003e\", sumMoney=\"\u003c/span\u003e + sumMoney\n                + \u003cspan class=\"hljs-string\"\u003e\"]\"\u003c/span\u003e;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e|||||||||||||||||||||||||||||||||||||||||||||||||||||\u003c/p\u003e\n\n\n\n\u003ch2 id=\"indetailquerymode类\"\u003eInDetailQueryMode类：\u003c/h2\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.bookStore.in.vo;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 进货明细查询值对象封装\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n *\u003cspan class=\"hljs-javadoctag\"\u003e @version\u003c/span\u003e 1.0\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eInDetailQueryModel\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eInDetailModel\u003c/span\u003e {\u003c/span\u003e\n\n    \u003cspan class=\"hljs-comment\"\u003e//需要查询的最大进货数量\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e sumNum2;\n    \u003cspan class=\"hljs-comment\"\u003e//需要查询的最大进货金额\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e sumMoney2;\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---返回需要查询的最大进货数量\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetSumNum2\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sumNum2;\n    }\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e sumNum2---设置需要查询的最大进货数量\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetSumNum2\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e sumNum2) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.sumNum2 = sumNum2;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---返回需要查询的最大进货金额\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetSumMoney2\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sumMoney2;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e sumMoney2---设置需要查询的最大进货金额\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetSumMoney2\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e sumMoney2) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.sumMoney2 = sumMoney2;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e||||||||||||||||||||||||||||\u003c/p\u003e\n\n\u003ch1 id=\"dao进货模块数据层代码\"\u003eDao：进货模块数据层代码：\u003c/h1\u003e\n\n\n\n\u003ch2 id=\"indetaildao接口\"\u003eInDetailDao接口：\u003c/h2\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.bookStore.in.dao.dao;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.List;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e cn.hncu.bookStore.in.vo.InDetailModel;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e cn.hncu.bookStore.in.vo.InDetailQueryModel;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 进货明细管理数据层接口\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n *\u003cspan class=\"hljs-javadoctag\"\u003e @version\u003c/span\u003e 1.0\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eInDetailDao\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 创建一个进货明细数据对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e inMain---需要创建的进货明细数据对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---true 表示创建成功，false 表示创建失败\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreate\u003c/span\u003e(InDetailModel inDetail);\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 删除一个进货明细数据对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e uuid---进货明细单的编号-唯一的\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---true表示删除成功， false表示删除失败\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edelete\u003c/span\u003e(String uuid);\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 修改一个进货明细数据的对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e inMain---需要修改的进货管理明细对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---true表示修改成功，false表示修改失败\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eupdate\u003c/span\u003e(InDetailModel inDetail);\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 根据进货明细单编号，得到进货明细对象的其他信息资料\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e uuid---进货明细单编号\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---该对象的其他其他信息资料\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e InDetailModel \u003cspan class=\"hljs-title\"\u003egetSingle\u003c/span\u003e(String uuid);\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---所有的进货明细管理对象信息\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List&lt;InDetailModel&gt; \u003cspan class=\"hljs-title\"\u003egetAll\u003c/span\u003e();\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 查找进货明细管理对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e imqm---查找条件！\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---满足查找条件的所有InDetailModel对象\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List&lt;InDetailModel&gt; \u003cspan class=\"hljs-title\"\u003egetbyCondition\u003c/span\u003e(InDetailQueryModel idqm);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e||||||||||||||||||||||||||||||||||||||||\u003c/p\u003e\n\n\n\n\u003ch2 id=\"inmaindao接口\"\u003eInMainDao接口：\u003c/h2\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.bookStore.in.dao.dao;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.List;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e cn.hncu.bookStore.in.vo.InMainModel;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e cn.hncu.bookStore.in.vo.InMainQueryModel;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 进货管理数据层接口\n * \n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n * \n *\u003cspan class=\"hljs-javadoctag\"\u003e @version\u003c/span\u003e 1.0\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eInMainDao\u003c/span\u003e {\u003c/span\u003e\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 创建一个进货数据对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e inMain---需要创建的进货数据对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---true 表示创建成功，false 表示创建失败\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreate\u003c/span\u003e(InMainModel inMain);\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 删除一个进货数据对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e uuid---进货单的编号-唯一的\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---true表示删除成功， false表示删除失败\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edelete\u003c/span\u003e(String uuid);\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 修改一个进货数据的对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e inMain---需要修改的进货管理对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---true表示修改成功，false表示修改失败\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eupdate\u003c/span\u003e(InMainModel inMain);\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 根据进货单编号，得到进货对象的其他信息资料\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e uuid---进货单编号\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---该对象的其他其他信息资料\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e InMainModel \u003cspan class=\"hljs-title\"\u003egetSingle\u003c/span\u003e(String uuid);\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---所有的进货管理对象信息\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List&lt;InMainModel&gt; \u003cspan class=\"hljs-title\"\u003egetAll\u003c/span\u003e();\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 查找进货管理对象\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e imqm---查找条件！\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---满足查找条件的所有INMainModel对象\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List&lt;InMainModel&gt; \u003cspan class=\"hljs-title\"\u003egetbyCondition\u003c/span\u003e(InMainQueryModel imqm);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e|||||||||||||||||||||||||||||||||||||||||||||\u003c/p\u003e\n\n\u003ch1 id=\"运行的部分图片\"\u003e运行的部分图片：\u003c/h1\u003e\n\n\u003cp\u003e下面看运行的图片吧：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160412202131680\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160412202148180\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160412202212665\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160412202224728\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160412202236154\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e具体的进货实现功能在下一系列实现。\u003c/p\u003e","markdowncontent":"本系列前面博客的链接：\n-----------\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 四(2) )：\nhttp://blog.csdn.net/qq_26525215/article/details/51117135\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 四(1) )：\nhttp://blog.csdn.net/qq_26525215/article/details/51116429\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 三 )：\nhttp://blog.csdn.net/qq_26525215/article/details/51099202\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 二 )：\nhttp://blog.csdn.net/qq_26525215/article/details/51089734\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 一 )：\nhttp://blog.csdn.net/qq_26525215/article/details/51073546\n\n介绍：\n---\n\n经过前几次的发博客。。\n我发现这样发代码太费劲了。。\n后面写了的部分代码：\n\n所以我把目前我完成的所有源代码上传到CSDN里面去了。\n链接：\nhttp://download.csdn.net/detail/qq_26525215/9489109\n\n\n本次增加进货模块，\n进货明细面板做出来了。\n完成了进货管理的数据层接口和进货管理明细的数据层接口。\n![](http://img.blog.csdn.net/20160412202611301)\n\n在用户的逻辑层接口增加了一个方法，能获得所有进货人员的方法，\ngetAllIn();\n![](http://img.blog.csdn.net/20160412202500074)\n\n进货的值对象，进货明细的值对象，\n以及这2个的查询值对象，全部做出来了，\n![](http://img.blog.csdn.net/20160412202534909)\n\n\nIn.vo：进货模块的值对象封装\n======\n\nInMainModel类：\n------------\n\n```\npackage cn.hncu.bookStore.in.vo;\n\n/**\n * 进货管理值对象封装\n * @author 陈浩翔\n *\n * @version 1.0\n */\npublic class InMainModel {\n\t//进货单编号\n\tprivate String uuid;\n\t//进货时间\n\tprivate long inDate;\n\t//进货人员编号\n\tprivate String inUserId;\n\t\n\t/**\n\t * \n\t * @return ---返回进货单编号(String型)\n\t */\n\tpublic String getUuid() {\n\t\treturn uuid;\n\t}\n\t\n\t/**\n\t * \n\t * @param uuid---设置进货单编号(String型)\n\t */\n\tpublic void setUuid(String uuid) {\n\t\tthis.uuid = uuid;\n\t}\n\t\n\t/**\n\t * \n\t * @return---返回进货时间(long型)\n\t */\n\tpublic long getInDate() {\n\t\treturn inDate;\n\t}\n\t\n\t/**\n\t * \n\t * @param inDate---设置进货时间(long型)\n\t */\n\tpublic void setInDate(long inDate) {\n\t\tthis.inDate = inDate;\n\t}\n\t\n\t/**\n\t * \n\t * @return---返回进货人员编号(String型)\n\t */\n\tpublic String getInUserId() {\n\t\treturn inUserId;\n\t}\n\t\n\t/**\n\t * \n\t * @param inUserId---设置进货人员编号(String型)\n\t */\n\tpublic void setInUserId(String inUserId) {\n\t\tthis.inUserId = inUserId;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((uuid == null) ? 0 : uuid.hashCode());\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tInMainModel other = (InMainModel) obj;\n\t\tif (uuid == null) {\n\t\t\tif (other.uuid != null)\n\t\t\t\treturn false;\n\t\t} else if (!uuid.equals(other.uuid))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn uuid + \", \" + inDate\n\t\t\t\t+ \", \" + inUserId;\n\t}\n\n}\n\n```\n\n|||||||||||||||||||||||||||||||||||||||||||||||||||\n\nInMainQueryModel类：\n------------------\n\n```\npackage cn.hncu.bookStore.in.vo;\n\n/**\n * 进货查询值对象封装\n * @author 陈浩翔\n *\n * @version 1.0\n */\npublic class InMainQueryModel extends InMainModel {\n\t\n\t//需要查询的最大时间\n\tprivate long inDate2;\n\t\n\t/**\n\t * \n\t * @return---需要查询的最大时间值\n\t */\n\tpublic long getInDate2() {\n\t\treturn inDate2;\n\t}\n\t\n\t/**\n\t * \n\t * @param inDate2---设置需要查询的最大时间\n\t */\n\tpublic void setInDate2(long inDate2) {\n\t\tthis.inDate2 = inDate2;\n\t}\n\n}\n\n```\n\n|||||||||||||||||||||||||||||||||||||||||\n\nInDetailModel类：\n---------------\n\n```\npackage cn.hncu.bookStore.in.vo;\n\n/**\n * 进货明细管理的值对象封装\n * @author 陈浩翔\n *\n * @version 1.0\n */\npublic class InDetailModel {\n\t//进货明细编号\n\tprivate String uuid;\n\t//进货单编号\n\tprivate String inId;\n\t//图书编号\n\tprivate String bookId;\n\t//进货数量\n\tprivate int sumNum;\n\t//进货总金额\n\tprivate double sumMoney;\n\t\n\tpublic String getUuid() {\n\t\treturn uuid;\n\t}\n\tpublic void setUuid(String uuid) {\n\t\tthis.uuid = uuid;\n\t}\n\tpublic String getInId() {\n\t\treturn inId;\n\t}\n\tpublic void setInId(String inId) {\n\t\tthis.inId = inId;\n\t}\n\tpublic String getBookId() {\n\t\treturn bookId;\n\t}\n\tpublic void setBookId(String bookId) {\n\t\tthis.bookId = bookId;\n\t}\n\tpublic int getSumNum() {\n\t\treturn sumNum;\n\t}\n\tpublic void setSumNum(int sumNum) {\n\t\tthis.sumNum = sumNum;\n\t}\n\tpublic double getSumMoney() {\n\t\treturn sumMoney;\n\t}\n\tpublic void setSumMoney(double sumMoney) {\n\t\tthis.sumMoney = sumMoney;\n\t}\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((uuid == null) ? 0 : uuid.hashCode());\n\t\treturn result;\n\t}\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tInDetailModel other = (InDetailModel) obj;\n\t\tif (uuid == null) {\n\t\t\tif (other.uuid != null)\n\t\t\t\treturn false;\n\t\t} else if (!uuid.equals(other.uuid))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"InDetailModel [uuid=\" + uuid + \", inId=\" + inId + \", bookId=\"\n\t\t\t\t+ bookId + \", sumNum=\" + sumNum + \", sumMoney=\" + sumMoney\n\t\t\t\t+ \"]\";\n\t}\n\n}\n\n```\n\n|||||||||||||||||||||||||||||||||||||||||||||||||||||\n\nInDetailQueryMode类：\n-------------------\n\n```\npackage cn.hncu.bookStore.in.vo;\n\n/**\n * 进货明细查询值对象封装\n * @author 陈浩翔\n *\n * @version 1.0\n */\npublic class InDetailQueryModel extends InDetailModel {\n\t\n\t//需要查询的最大进货数量\n\tprivate int sumNum2;\n\t//需要查询的最大进货金额\n\tprivate double sumMoney2;\n\t\n\t/**\n\t * \n\t * @return---返回需要查询的最大进货数量\n\t */\n\tpublic int getSumNum2() {\n\t\treturn sumNum2;\n\t}\n\t/**\n\t * \n\t * @param sumNum2---设置需要查询的最大进货数量\n\t */\n\tpublic void setSumNum2(int sumNum2) {\n\t\tthis.sumNum2 = sumNum2;\n\t}\n\t\n\t/**\n\t * \n\t * @return---返回需要查询的最大进货金额\n\t */\n\tpublic double getSumMoney2() {\n\t\treturn sumMoney2;\n\t}\n\t\n\t/**\n\t * \n\t * @param sumMoney2---设置需要查询的最大进货金额\n\t */\n\tpublic void setSumMoney2(double sumMoney2) {\n\t\tthis.sumMoney2 = sumMoney2;\n\t}\n\n}\n\n```\n\n||||||||||||||||||||||||||||\n\nDao：进货模块数据层代码：\n==============\n\nInDetailDao接口：\n--------------\n\n\n```\npackage cn.hncu.bookStore.in.dao.dao;\n\nimport java.util.List;\n\nimport cn.hncu.bookStore.in.vo.InDetailModel;\nimport cn.hncu.bookStore.in.vo.InDetailQueryModel;\n\n/**\n * 进货明细管理数据层接口\n * @author 陈浩翔\n *\n * @version 1.0\n */\npublic interface InDetailDao {\n\t/**\n\t * 创建一个进货明细数据对象\n\t * @param inMain---需要创建的进货明细数据对象\n\t * @return---true 表示创建成功，false 表示创建失败\n\t */\n\tpublic boolean create(InDetailModel inDetail);\n\t\n\t/**\n\t * 删除一个进货明细数据对象\n\t * @param uuid---进货明细单的编号-唯一的\n\t * @return---true表示删除成功， false表示删除失败\n\t */\n\tpublic boolean delete(String uuid);\n\t\n\t/**\n\t * 修改一个进货明细数据的对象\n\t * @param inMain---需要修改的进货管理明细对象\n\t * @return---true表示修改成功，false表示修改失败\n\t */\n\tpublic boolean update(InDetailModel inDetail);\n\t\n\t/**\n\t * 根据进货明细单编号，得到进货明细对象的其他信息资料\n\t * @param uuid---进货明细单编号\n\t * @return---该对象的其他其他信息资料\n\t */\n\tpublic InDetailModel getSingle(String uuid);\n\t\n\t/**\n\t * \n\t * @return---所有的进货明细管理对象信息\n\t */\n\tpublic List\u003cInDetailModel\u003e getAll();\n\t\n\t/**\n\t * 查找进货明细管理对象\n\t * @param imqm---查找条件！\n\t * @return---满足查找条件的所有InDetailModel对象\n\t */\n\tpublic List\u003cInDetailModel\u003e getbyCondition(InDetailQueryModel idqm);\n}\n\n```\n\n||||||||||||||||||||||||||||||||||||||||\n\nInMainDao接口：\n------------\n\n```\npackage cn.hncu.bookStore.in.dao.dao;\n\nimport java.util.List;\n\nimport cn.hncu.bookStore.in.vo.InMainModel;\nimport cn.hncu.bookStore.in.vo.InMainQueryModel;\n\n/**\n * 进货管理数据层接口\n * \n * @author 陈浩翔\n * \n * @version 1.0\n */\npublic interface InMainDao {\n\t\n\t/**\n\t * 创建一个进货数据对象\n\t * @param inMain---需要创建的进货数据对象\n\t * @return---true 表示创建成功，false 表示创建失败\n\t */\n\tpublic boolean create(InMainModel inMain);\n\t\n\t/**\n\t * 删除一个进货数据对象\n\t * @param uuid---进货单的编号-唯一的\n\t * @return---true表示删除成功， false表示删除失败\n\t */\n\tpublic boolean delete(String uuid);\n\t\n\t/**\n\t * 修改一个进货数据的对象\n\t * @param inMain---需要修改的进货管理对象\n\t * @return---true表示修改成功，false表示修改失败\n\t */\n\tpublic boolean update(InMainModel inMain);\n\t\n\t/**\n\t * 根据进货单编号，得到进货对象的其他信息资料\n\t * @param uuid---进货单编号\n\t * @return---该对象的其他其他信息资料\n\t */\n\tpublic InMainModel getSingle(String uuid);\n\t\n\t/**\n\t * \n\t * @return---所有的进货管理对象信息\n\t */\n\tpublic List\u003cInMainModel\u003e getAll();\n\t\n\t/**\n\t * 查找进货管理对象\n\t * @param imqm---查找条件！\n\t * @return---满足查找条件的所有INMainModel对象\n\t */\n\tpublic List\u003cInMainModel\u003e getbyCondition(InMainQueryModel imqm);\n}\n\n```\n\n|||||||||||||||||||||||||||||||||||||||||||||\n\n\n\n运行的部分图片：\n========\n\n下面看运行的图片吧：\n\n![](http://img.blog.csdn.net/20160412202131680)\n\n![](http://img.blog.csdn.net/20160412202148180)\n\n![](http://img.blog.csdn.net/20160412202212665)\n\n![](http://img.blog.csdn.net/20160412202224728)\n\n![](http://img.blog.csdn.net/20160412202236154)\n\n\n具体的进货实现功能在下一系列实现。\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-628-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-04\2016-04-12-Java-单机版的书店管理系统(练习设计模块和思想_系列 五 ).markdown [pool-628-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java-单机版的书店管理系统(练习设计模块和思想_系列 五 )》成功 [pool-628-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50095293 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:14 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-630] [chx]
[INFO] 2017-07-28 12:29:14 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50095293 [pool-630-thread-1] [chx]
[INFO] 2017-07-28 12:29:14 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50095293,"title":"BNUOJ  44578  Monty Hall problem","create_at":"\/Date(1448771616000)\/","create":"2015-11-29 12:33:36","view_count":398,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"蒙提霍尔问题，亦称为蒙特霍问题或三门问题（Monty Hall problem），是一个源自博弈论的数学游戏问题. \n这个游戏的玩法是：参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门就可以赢得该汽车，而另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，知道门后情形的节目主持人会开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换","url":"http://blog.csdn.net/qq_26525215/article/details/50095293","categories":"❶ ACM,----- BNUOJ-ACM,❺ 算法及基础题,----- 模拟/推导/打表","tags":"游戏,数学","content":"\u003cp\u003e蒙提霍尔问题，亦称为蒙特霍问题或三门问题（Monty Hall problem），是一个源自博弈论的数学游戏问题. \u003cbr\u003e\n这个游戏的玩法是：参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门就可以赢得该汽车，而另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，知道门后情形的节目主持人会开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机会率？ \u003cbr\u003e\n——wikipedia\u003c/p\u003e\n\n\u003cp\u003e现在我们来研究n扇门的蒙提霍尔问题：一共有n扇关闭了的门。只有一扇门后是汽车，其他n-1扇门后是山羊。参赛者选定一扇门后，知道门后情形的节目主持人会开启剩下n-1扇门的其中n-2扇,露出n-2只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。求参赛者换门之后获得汽车的概率。\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\n第一行为一个整数T，代表数据组数，T&lt;=1000。 \u003cbr\u003e\n接下来T行，每行一个正整数n，3&lt;=n&lt;=10^18。n的含义如题意所示。\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n答案要求输出最简分数形式：p/q (p,q互素) 。表示参赛者换门之后获得汽车的概率。\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n1 \u003cbr\u003e\n3 \u003cbr\u003e\nSample Output \u003cbr\u003e\n2/3\u003c/p\u003e\n\n\u003cp\u003e这里解释一下那个2/3怎么来的： \u003cbr\u003e\n假设你永远都会转换选择，这时赢的唯一可能性就是选一扇没有车的门，因为主持人其后必定会开启另外一扇有山羊的门，消除了转换选择后选到另外一只羊的可能性。因为门的总数是三扇，有山羊的门的总数是两扇，所以转换选择而赢得汽车的概率是2/3，与初次选择时选中有山羊的门的概率一样。 \u003cbr\u003e\n补充说明： \u003cbr\u003e\n第一次选的空门1（概率1/3），之后主持人开另一个空门，换门，得到汽车。 事件总概率 1/3 \u003cbr\u003e\n第一次选的空门2（概率1/3），之后主持人开另一个空门，换门，得到汽车。 事件总概率 1/3 \u003cbr\u003e\n换门后得到汽车总概率：2/3。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cpp\"\u003e\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;iostream&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;stdio.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enamespace\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003estd\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e main()\n{\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e t;\n    \u003cspan class=\"hljs-built_in\"\u003escanf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"%d\"\u003c/span\u003e,&amp;t);\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(t--){\n       \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e n;\n       \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e a,b;\n       \u003cspan class=\"hljs-built_in\"\u003escanf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"%lld\"\u003c/span\u003e,&amp;n);\n       a=n;\n       b=n-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n       \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e{\n           a=a%b;\n           \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e tt;\n           tt=a;\n           a=b;\n           b=tt;\n       }\u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(b!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n        \u003cspan class=\"hljs-built_in\"\u003ecout\u003c/span\u003e &lt;&lt; ( n -\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e )/a &lt;&lt; \u003cspan class=\"hljs-string\"\u003e\u0027/\u0027\u003c/span\u003e &lt;&lt; n/a &lt;&lt; endl;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"蒙提霍尔问题，亦称为蒙特霍问题或三门问题（Monty Hall problem），是一个源自博弈论的数学游戏问题.\n这个游戏的玩法是：参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门就可以赢得该汽车，而另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，知道门后情形的节目主持人会开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机会率？\n——wikipedia\n \n现在我们来研究n扇门的蒙提霍尔问题：一共有n扇关闭了的门。只有一扇门后是汽车，其他n-1扇门后是山羊。参赛者选定一扇门后，知道门后情形的节目主持人会开启剩下n-1扇门的其中n-2扇,露出n-2只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。求参赛者换门之后获得汽车的概率。\n \nInput\n第一行为一个整数T，代表数据组数，T\u003c=1000。\n接下来T行，每行一个正整数n，3\u003c=n\u003c=10^18。n的含义如题意所示。\n \nOutput\n答案要求输出最简分数形式：p/q (p,q互素) 。表示参赛者换门之后获得汽车的概率。\n\nSample Input\n1\n3\nSample Output\n2/3\n\n\n这里解释一下那个2/3怎么来的：\n假设你永远都会转换选择，这时赢的唯一可能性就是选一扇没有车的门，因为主持人其后必定会开启另外一扇有山羊的门，消除了转换选择后选到另外一只羊的可能性。因为门的总数是三扇，有山羊的门的总数是两扇，所以转换选择而赢得汽车的概率是2/3，与初次选择时选中有山羊的门的概率一样。\n补充说明：\n第一次选的空门1（概率1/3），之后主持人开另一个空门，换门，得到汽车。 事件总概率 1/3\n第一次选的空门2（概率1/3），之后主持人开另一个空门，换门，得到汽车。 事件总概率 1/3\n换门后得到汽车总概率：2/3。\n\n\n```\n#include \u003ciostream\u003e\n#include \u003cstdio.h\u003e\nusing namespace std;\nint main()\n{\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n       long long n;\n       long long a,b;\n       scanf(\"%lld\",&n);\n       a=n;\n       b=n-1;\n       do{\n           a=a%b;\n           long long tt;\n           tt=a;\n           a=b;\n           b=tt;\n       }while(b!=0);\n        cout \u003c\u003c ( n -1 )/a \u003c\u003c \u0027/\u0027 \u003c\u003c n/a \u003c\u003c endl;\n    }\n    return 0;\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-630-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51325909 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-11\2015-11-29-BNUOJ  44578  Monty Hall problem.markdown [pool-630-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-631] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《BNUOJ  44578  Monty Hall problem》成功 [pool-630-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51325909 [pool-631-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51325909,"title":"HDOJ(HDU) 2178 猜数字(题意有点难理解、、、)","create_at":"\/Date(1462450351000)\/","create":"2016-05-05 08:12:31","view_count":3711,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \nA有1数m，B来猜.B每猜一次，A就说”太大”，”太小”或”对了” 。  \n问B猜n次可以猜到的最大数。 Input \n第1行是整数T,表示有T组数据，下面有T行  \n每行一个整数n (1 ≤ n ≤ 30) Output \n猜n次可以猜到的最大数Sample Input \n2 \n1 \n3Sample Output \n1 \n7这个题目我总感觉题意没说明白，没","url":"http://blog.csdn.net/qq_26525215/article/details/51325909","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 基础题","tags":"","content":"\u003cp\u003eProblem Description \u003cbr\u003e\nA有1数m，B来猜.B每猜一次，A就说”太大”，”太小”或”对了” 。  \u003cbr\u003e\n问B猜n次可以猜到的最大数。 \u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\n第1行是整数T,表示有T组数据，下面有T行  \u003cbr\u003e\n每行一个整数n (1 ≤ n ≤ 30) \u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n猜n次可以猜到的最大数\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n2 \u003cbr\u003e\n1 \u003cbr\u003e\n3\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n1 \u003cbr\u003e\n7\u003c/p\u003e\n\n\u003cp\u003e这个题目我总感觉题意没说明白，没办法。参考了一下网上的题意。\u003c/p\u003e\n\n\u003cp\u003e题意就是： \u003cbr\u003e\n最多猜n次一定可以猜到1至m(闭区间)内的任意数字，求m的最大值。\u003c/p\u003e\n\n\u003cp\u003e用二分法猜可以很快的猜出一个被猜数  \u003cbr\u003e\n但是如果一个数在特定的次数下被猜出来的话，用二分法算出的这个被猜数的范围会更大 \u003cbr\u003e\n也就是题目中说出的最大数\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e Main{\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e t =sc.nextInt();\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(t--&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n =sc.nextInt();\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println((\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e)(Math.pow(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, n)-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e));\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\nA有1数m，B来猜.B每猜一次，A就说\"太大\"，\"太小\"或\"对了\" 。 \n问B猜n次可以猜到的最大数。 \n\n \n\nInput\n第1行是整数T,表示有T组数据，下面有T行 \n每行一个整数n (1 ≤ n ≤ 30) \n\n \n\nOutput\n猜n次可以猜到的最大数\n\n \n\nSample Input\n2\n1\n3\n \n\nSample Output\n1\n7\n\n\n这个题目我总感觉题意没说明白，没办法。参考了一下网上的题意。\n\n题意就是：\n最多猜n次一定可以猜到1至m(闭区间)内的任意数字，求m的最大值。\n\n用二分法猜可以很快的猜出一个被猜数 \n但是如果一个数在特定的次数下被猜出来的话，用二分法算出的这个被猜数的范围会更大\n也就是题目中说出的最大数\n\n```\nimport java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t =sc.nextInt();\n\t\twhile(t--\u003e0){\n\t\t\tint n =sc.nextInt();\n\t\t\tSystem.out.println((int)(Math.pow(2, n)-1));\n\t\t}\n\t}\n}\n\n```\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-631-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-05\2016-05-05-HDOJ(HDU) 2178 猜数字(题意有点难理解、、、).markdown [pool-631-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ(HDU) 2178 猜数字(题意有点难理解、、、)》成功 [pool-631-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50937386 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:15 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-632] [chx]
[INFO] 2017-07-28 12:29:15 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50937386 [pool-632-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50937386,"title":"HDOJ 1018 Big Number（大数位数公式）","create_at":"\/Date(1458464787000)\/","create":"2016-03-20 05:06:27","view_count":418,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":1,"bury":0,"description":"Problem Description \nIn many applications very large integers numbers are required. Some of these applications are using keys for secure transmission of data, encryption, etc. In this problem you are g","url":"http://blog.csdn.net/qq_26525215/article/details/50937386","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 大数问题,----- String","tags":"","content":"\u003cp\u003eProblem Description \u003cbr\u003e\nIn many applications very large integers numbers are required. Some of these applications are using keys for secure transmission of data, encryption, etc. In this problem you are given a number, you have to determine the number of digits in the factorial of the number.\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\nInput consists of several lines of integer numbers. The first line contains an integer n, which is the number of cases to be tested, followed by n lines, one integer 1 ≤ n ≤ 107 on each line.\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\nThe output contains the number of digits in the factorial of the integers appearing in the input.\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n2 \u003cbr\u003e\n10 \u003cbr\u003e\n20\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n7 \u003cbr\u003e\n19\u003c/p\u003e\n\n\u003cp\u003e这题要求n的阶乘的位数，如果n较大时，n的阶乘必将是一个很大的数，题中说1&lt;=n&lt;10000000，当n=10000000时可以说n的阶乘将是一个非常巨大的数字，对于处理大数的问题，我们一般用字符串，这题当n取最大值时，就是一千万个数字相乘的积，太大了，就算保存在字符串中都有一点困难，而且一千万个数字相乘是会涉及到大数的乘法，大数的乘法是比较耗时的，就算计算出结果一般也会超时。这让我们不得不抛弃这种直接的方法。\u003c/p\u003e\n\n\u003cp\u003e再想一下，这题是要求n的阶乘的位数，而n的阶乘是n个数的乘积，那么要是我们能把这个问题分解就好了。\u003c/p\u003e\n\n\u003cp\u003e在这之前，我们必须要知道一个知识，任意一个正整数a的位数等于(int)log10(a)+ 1；为什么呢？下面给大家推导一下：\u003c/p\u003e\n\n\u003cp\u003e对于任意一个给定的正整数a， \u003cbr\u003e\n  假设10^(x-1)&lt;=a&lt;10^x，那么显然a的位数为x位， \u003cbr\u003e\n  又因为 \u003cbr\u003e\n  log10(10^(x-1))&lt;=log10(a)&lt;(log10(10^x)) \u003cbr\u003e\n  即x-1&lt;=log10(a) &lt; x \u003cbr\u003e\n  则(int)log10(a)=x-1, \u003cbr\u003e\n  即(int)log10(a)+1=x \u003cbr\u003e\n  即a的位数是(int)log10(a)+1\u003c/p\u003e\n\n\u003cp\u003e我们知道了一个正整数a的位数等于(int)log10(a) + 1，现在来求n的阶乘的位数： \u003cbr\u003e\n假设A=n!=1*2*3*……*n，那么我们要求的就是(int)log10(A)+1， \u003cbr\u003e\n而： \u003cbr\u003e\nlog10(A)=log10(1*2*3*……n) \u003cbr\u003e\n（根据log10(a*b) = log10(a) +log10(b)有） =log10(1)+log10(2)+log10(3)+……+log10(n) \u003cbr\u003e\n现在我们终于找到方法，问题解决了，我们将求n的阶乘的位数分解成了求n个数对10取对数的和，并且对于其中任意一个数，都在正常的数字范围之类。 \u003cbr\u003e\n总结一下：n的阶乘的位数等于 \u003cbr\u003e\n          (int)(log10(1)+log10(2)+log10(3)+……+log10(n)) + 1\u003c/p\u003e\n\n\u003cp\u003e开始我是打算用java大数做的，可是超时。 \u003cbr\u003e\n上面的思路是参考网络上其他人的。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.math.BigDecimal;\nimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e Main {\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n\n        \u003cspan class=\"hljs-comment\"\u003e//超时\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      Scanner sc = new Scanner(System.in);\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      \u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      int t = sc.nextInt();\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      while(t--&gt;0){\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          int n = sc.nextInt();\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          BigDecimal a  = new BigDecimal(1);\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          \u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          for(int i=n;i&gt;0;i--){\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//              a = a.multiply(new BigDecimal(i));\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          }\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          \u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          String str = a.toPlainString();\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          System.out.println(str.length());\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          \u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          \u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      }\u003c/span\u003e\n\n        Scanner sc= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e t = sc.nextInt();\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(t--&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n = sc.nextInt();\n            \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e sum = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;i&lt;=n;i++){\n                sum = sum+Math.log10(i);\n            }\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println((\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e+(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e)(sum)));\n        }\n\n\n\n\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\nIn many applications very large integers numbers are required. Some of these applications are using keys for secure transmission of data, encryption, etc. In this problem you are given a number, you have to determine the number of digits in the factorial of the number.\n\n \n\nInput\nInput consists of several lines of integer numbers. The first line contains an integer n, which is the number of cases to be tested, followed by n lines, one integer 1 ≤ n ≤ 107 on each line.\n\n \n\nOutput\nThe output contains the number of digits in the factorial of the integers appearing in the input.\n\n \n\nSample Input\n2\n10\n20\n \n\nSample Output\n7\n19\n\n这题要求n的阶乘的位数，如果n较大时，n的阶乘必将是一个很大的数，题中说1\u003c=n\u003c10000000，当n=10000000时可以说n的阶乘将是一个非常巨大的数字，对于处理大数的问题，我们一般用字符串，这题当n取最大值时，就是一千万个数字相乘的积，太大了，就算保存在字符串中都有一点困难，而且一千万个数字相乘是会涉及到大数的乘法，大数的乘法是比较耗时的，就算计算出结果一般也会超时。这让我们不得不抛弃这种直接的方法。\n\n再想一下，这题是要求n的阶乘的位数，而n的阶乘是n个数的乘积，那么要是我们能把这个问题分解就好了。\n\n在这之前，我们必须要知道一个知识，任意一个正整数a的位数等于(int)log10(a)+ 1；为什么呢？下面给大家推导一下：\n\n  对于任意一个给定的正整数a，\n  假设10^(x-1)\u003c=a\u003c10^x，那么显然a的位数为x位，\n  又因为\n  log10(10^(x-1))\u003c=log10(a)\u003c(log10(10^x))\n  即x-1\u003c=log10(a) \u003c x\n  则(int)log10(a)=x-1,\n  即(int)log10(a)+1=x\n  即a的位数是(int)log10(a)+1\n\n我们知道了一个正整数a的位数等于(int)log10(a) + 1，现在来求n的阶乘的位数：\n假设A=n!=1*2*3*......*n，那么我们要求的就是(int)log10(A)+1，\n而：\nlog10(A)=log10(1*2*3*......n)  \n（根据log10(a*b) = log10(a) +log10(b)有） =log10(1)+log10(2)+log10(3)+......+log10(n)\n现在我们终于找到方法，问题解决了，我们将求n的阶乘的位数分解成了求n个数对10取对数的和，并且对于其中任意一个数，都在正常的数字范围之类。\n总结一下：n的阶乘的位数等于\n\t\t  (int)(log10(1)+log10(2)+log10(3)+......+log10(n)) + 1\n\n\n开始我是打算用java大数做的，可是超时。\n上面的思路是参考网络上其他人的。\n\n```\nimport java.math.BigDecimal;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//超时\n//\t\tScanner sc = new Scanner(System.in);\n//\t\t\n//\t\tint t = sc.nextInt();\n//\t\twhile(t--\u003e0){\n//\t\t\tint n = sc.nextInt();\n//\n//\t\t\tBigDecimal a  = new BigDecimal(1);\n//\t\t\t\n//\t\t\tfor(int i=n;i\u003e0;i--){\n//\t\t\t\ta = a.multiply(new BigDecimal(i));\n//\t\t\t}\n//\t\t\t\n//\t\t\tString str = a.toPlainString();\n//\t\t\tSystem.out.println(str.length());\n//\t\t\t\n//\t\t\t\n//\t\t}\n\t\t\n\t\tScanner sc= new Scanner(System.in);\n\t\tint t = sc.nextInt();\n\t\twhile(t--\u003e0){\n\t\t\tint n = sc.nextInt();\n\t\t\tdouble sum = 0;\n\t\t\tfor(int i = 1;i\u003c=n;i++){\n\t\t\t\tsum = sum+Math.log10(i);\n\t\t\t}\n\t\t\tSystem.out.println((1+(int)(sum)));\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n}\n\n```\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-632-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-03\2016-03-20-HDOJ 1018 Big Number（大数位数公式）.markdown [pool-632-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 1018 Big Number（大数位数公式）》成功 [pool-632-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50346523 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:15 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-633] [chx]
[INFO] 2017-07-28 12:29:15 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50346523 [pool-633-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50346523,"title":"汉洛塔递归实现的思考（C语言）","create_at":"\/Date(1450356533000)\/","create":"2015-12-17 08:48:53","view_count":435,"comment_count":0,"comment_allowed":"true","type":"repost","channel":16,"digg":1,"bury":0,"description":"汉洛塔是古印度神话产生的智力玩具，他的玩法是，有三个柱子分别为A,B,C，A柱上面有n个盘子上面小下面大堆叠放在一起，现在要求激将A柱上的盘子全部移到C柱上面，并且一次只能移动一个盘子，必须是小盘在大盘的上面。现在要求用C语言递归来完成，并统计递归调用的次数。这个实现是递归的强大功能的体现，废话不多说，请看源码：#include\u003cstdio.h\u003e\nvoid move(int n,int *cnt,c","url":"http://blog.csdn.net/qq_26525215/article/details/50346523","categories":"❸ C/C++语言基础,❺ 算法及基础题,----- 递归搜索回溯,----- 好文/知识点","tags":"","content":"\u003cp\u003e汉洛塔是古印度神话产生的智力玩具，他的玩法是，有三个柱子分别为A,B,C，A柱上面有n个盘子上面小下面大堆叠放在一起，现在要求激将A柱上的盘子全部移到C柱上面，并且一次只能移动一个盘子，必须是小盘在大盘的上面。现在要求用C语言递归来完成，并统计递归调用的次数。\u003c/p\u003e\n\n\u003cp\u003e这个实现是递归的强大功能的体现，废话不多说，请看源码：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cpp\"\u003e\u003cspan class=\"hljs-preprocessor\"\u003e#include&lt;stdio.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e move(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n,\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e *cnt,\u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e A,\u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e B,\u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e C)\n{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(n==\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\n    {\n        \u003cspan class=\"hljs-built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"%d号盘：%c--&gt;%c\\n\"\u003c/span\u003e,n,A,C);     \n        \u003cspan class=\"hljs-comment\"\u003e//如果还剩一个盘或者只有一个盘时，直接将1号盘移到C柱\u003c/span\u003e\n        (*cnt)++;       \n        \u003cspan class=\"hljs-comment\"\u003e//递归调用次数加1\u003c/span\u003e\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e\n    {\n        move(n-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,cnt,A,C,B);       \n        \u003cspan class=\"hljs-comment\"\u003e//将n-1个盘从A柱上借助于C柱移到B柱上\u003c/span\u003e\n        \u003cspan class=\"hljs-built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"%d号盘：%c--&gt;%c\\n\"\u003c/span\u003e,n ,A,C);    \n        \u003cspan class=\"hljs-comment\"\u003e//当将n-1个盘移到B柱成功时直接将A柱上的盘移到C柱\u003c/span\u003e\n        move(n-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,cnt,B,A,C);        \n        \u003cspan class=\"hljs-comment\"\u003e//再次将n-1个盘从B柱上借助于A柱移到C柱上\u003c/span\u003e\n        (*cnt)++;          \n        \u003cspan class=\"hljs-comment\"\u003e//递归调用次数加1\u003c/span\u003e\n    }\n\n}\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e main(\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e)\n{\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e h;\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e cnt = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\ninput number:\\n\"\u003c/span\u003e);\n    \u003cspan class=\"hljs-built_in\"\u003escanf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"%d\"\u003c/span\u003e,&amp;h);\n    \u003cspan class=\"hljs-built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"the step to moving %2d diskes:\\n\"\u003c/span\u003e,h);\n    move(h,&amp;cnt,\u003cspan class=\"hljs-string\"\u003e\u0027A\u0027\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\u0027B\u0027\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\u0027C\u0027\u003c/span\u003e);\n    \u003cspan class=\"hljs-built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"一共执行了%d次！\\n\"\u003c/span\u003e,cnt);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e我这里给出的源码是极为精简的，但是很健壮！现在分析如下：\u003c/p\u003e\n\n\u003cp\u003e首先，梳理一下思路，要用递归实现的前提是，问题规模更大的解决依赖于问题规模更小的解决，也就是说要想移动n个盘子，必须先移动n-1个盘子，这时递归的基础。那么现在有三个柱子，该如何移动呢？比较好的解决方案是：可以将n-1个盘子以C柱为中转站移动到B柱上，这样A柱上最下面的那个盘子就可自由地移动到C柱上了，然后在将n-1个盘子以A柱为中转站移动到C柱上，这就是上面代码核心的解决算法。\u003c/p\u003e\n\n\u003cp\u003e看到这里，很多人又有疑问，感觉这个解决方案，似乎理解了又似乎没理解，这时怎么回事？其实这就是递归的理解问题。在这个问题中，n个盘子会始终按照这个算法执行，当执行到n==1的时候一下子就返回，层层回叠返回最终的结果。\u003c/p\u003e\n\n\u003cp\u003e这个里面还有一个有意思的问题，就是递归调用的参数是个变量，比如说\u003c/p\u003e\n\n\u003cp\u003emove(n-1,cnt,A,C,B);\u003c/p\u003e\n\n\u003cp\u003e这一步中，他将C给了B，B给了C，这是个互换，又因为当n==1的时候不会再递归调用，故当盘子数为奇数时两个数会互换，而是偶数时就不会互换，举个例子如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cpp\"\u003e\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;iostream&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enamespace\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003estd\u003c/span\u003e;\n\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e swap (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n,\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a,\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e b)\n{\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (n == \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\n    {\n        \u003cspan class=\"hljs-built_in\"\u003ecout\u003c/span\u003e &lt;&lt; \u003cspan class=\"hljs-string\"\u003e\"a=\"\u003c/span\u003e&lt;&lt; a &lt;&lt; \u003cspan class=\"hljs-string\"\u003e\"\\tb=\"\u003c/span\u003e &lt;&lt; b &lt;&lt; endl;\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e\n    {\n        swap(n-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,b,a);\n    }\n}\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e main (\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e)\n{\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e b = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;\n    swap(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,a,b);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在这个例子中，当main函数中个传参的第一参数是奇数时a，b就不会互换，偶数时就会互换，这也是个互换数字的算法呢！\u003c/p\u003e\n\n\u003cp\u003e例外附注一下，汉洛塔的递归调用的个数是2的n次方减1，故大家在试的时候，不要输入太大的n值，以免在DOS下看不全结果！！\u003c/p\u003e","markdowncontent":"汉洛塔是古印度神话产生的智力玩具，他的玩法是，有三个柱子分别为A,B,C，A柱上面有n个盘子上面小下面大堆叠放在一起，现在要求激将A柱上的盘子全部移到C柱上面，并且一次只能移动一个盘子，必须是小盘在大盘的上面。现在要求用C语言递归来完成，并统计递归调用的次数。\n\n这个实现是递归的强大功能的体现，废话不多说，请看源码：\n\n```\n#include\u003cstdio.h\u003e\nvoid move(int n,int *cnt,char A,char B,char C)\n{\n    if(n==1)\n    {\n        printf(\"%d号盘：%c--\u003e%c\\n\",n,A,C);     \n        //如果还剩一个盘或者只有一个盘时，直接将1号盘移到C柱\n        (*cnt)++;       \n        //递归调用次数加1\n    }\n\n    else\n    {\n        move(n-1,cnt,A,C,B);       \n        //将n-1个盘从A柱上借助于C柱移到B柱上\n        printf(\"%d号盘：%c--\u003e%c\\n\",n ,A,C);    \n        //当将n-1个盘移到B柱成功时直接将A柱上的盘移到C柱\n        move(n-1,cnt,B,A,C);        \n        //再次将n-1个盘从B柱上借助于A柱移到C柱上\n        (*cnt)++;          \n        //递归调用次数加1\n    }\n\n}\nint main(void)\n{\n    int h;\n    int cnt = 0;\n    printf(\"\\ninput number:\\n\");\n    scanf(\"%d\",&h);\n    printf(\"the step to moving %2d diskes:\\n\",h);\n    move(h,&cnt,\u0027A\u0027,\u0027B\u0027,\u0027C\u0027);\n    printf(\"一共执行了%d次！\\n\",cnt);\n}\n\n```\n我这里给出的源码是极为精简的，但是很健壮！现在分析如下：\n\n首先，梳理一下思路，要用递归实现的前提是，问题规模更大的解决依赖于问题规模更小的解决，也就是说要想移动n个盘子，必须先移动n-1个盘子，这时递归的基础。那么现在有三个柱子，该如何移动呢？比较好的解决方案是：可以将n-1个盘子以C柱为中转站移动到B柱上，这样A柱上最下面的那个盘子就可自由地移动到C柱上了，然后在将n-1个盘子以A柱为中转站移动到C柱上，这就是上面代码核心的解决算法。\n\n看到这里，很多人又有疑问，感觉这个解决方案，似乎理解了又似乎没理解，这时怎么回事？其实这就是递归的理解问题。在这个问题中，n个盘子会始终按照这个算法执行，当执行到n==1的时候一下子就返回，层层回叠返回最终的结果。\n\n这个里面还有一个有意思的问题，就是递归调用的参数是个变量，比如说\n\nmove(n-1,cnt,A,C,B);\n \n\n这一步中，他将C给了B，B给了C，这是个互换，又因为当n==1的时候不会再递归调用，故当盘子数为奇数时两个数会互换，而是偶数时就不会互换，举个例子如下：\n\n```\n#include \u003ciostream\u003e\nusing namespace std;\nvoid swap (int n,int a,int b)\n{\n    if (n == 1)\n    {\n        cout \u003c\u003c \"a=\"\u003c\u003c a \u003c\u003c \"\\tb=\" \u003c\u003c b \u003c\u003c endl;\n        return;\n    }\n    else\n    {\n        swap(n-1,b,a);\n    }\n}\nint main (void)\n{\n    int a = 1;\n    int b = 2;\n    swap(3,a,b);\n}\n```\n\n在这个例子中，当main函数中个传参的第一参数是奇数时a，b就不会互换，偶数时就会互换，这也是个互换数字的算法呢！\n\n \n\n例外附注一下，汉洛塔的递归调用的个数是2的n次方减1，故大家在试的时候，不要输入太大的n值，以免在DOS下看不全结果！！","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-633-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-12\2015-12-17-汉洛塔递归实现的思考（C语言）.markdown [pool-633-thread-1] [chx]
[INFO] 2017-07-28 12:29:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《汉洛塔递归实现的思考（C语言）》成功 [pool-633-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51075523 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:16 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-634] [chx]
[INFO] 2017-07-28 12:29:16 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51075523 [pool-634-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51075523,"title":"HDOJ 1266 Reverse Number（数字反向输出题）","create_at":"\/Date(1459928874000)\/","create":"2016-04-06 03:47:54","view_count":473,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \nWelcome to 2006’4 computer college programming contest!Specially, I give my best regards to all freshmen! You are the future of HDU ACM! And now, I must tell you that ACM problems","url":"http://blog.csdn.net/qq_26525215/article/details/51075523","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 基础题","tags":"acm","content":"\u003cp\u003eProblem Description \u003cbr\u003e\nWelcome to 2006’4 computer college programming contest!\u003c/p\u003e\n\n\u003cp\u003eSpecially, I give my best regards to all freshmen! You are the future of HDU ACM! And now, I must tell you that ACM problems are always not so easy, but, except this one… Ha-Ha!\u003c/p\u003e\n\n\u003cp\u003eGive you an integer; your task is to output its reverse number. Here, reverse number is defined as follows: \u003cbr\u003e\n1. The reverse number of a positive integer ending without 0 is general reverse, for example, reverse (12) = 21; \u003cbr\u003e\n2. The reverse number of a negative integer is negative, for example, reverse (-12) = -21; \u003cbr\u003e\n3. The reverse number of an integer ending with 0 is described as example, reverse (1200) = 2100.\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\nInput file contains multiple test cases. There is a positive integer n (n&lt;100) in the first line, which means the number of test cases, and then n 32-bit integers follow.\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\nFor each test case, you should output its reverse number, one case per line.\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n3 \u003cbr\u003e\n12 \u003cbr\u003e\n-12 \u003cbr\u003e\n1200\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n21 \u003cbr\u003e\n-21 \u003cbr\u003e\n2100\u003c/p\u003e\n\n\u003cp\u003e注意：前导0的情况！ \u003cbr\u003e\n例： \u003cbr\u003e\n输入： \u003cbr\u003e\n3 \u003cbr\u003e\n-0012560020 \u003cbr\u003e\n00000 \u003cbr\u003e\n00205 \u003cbr\u003e\n输出为： \u003cbr\u003e\n-2006521 \u003cbr\u003e\n0 \u003cbr\u003e\n502\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs axapta\"\u003eimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMain\u003c/span\u003e{\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e main(String[] args) {\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.in);\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e t = sc.nextInt();\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e (t-- &gt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n            String \u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e = sc.next();\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e instr = Integer.parseInt(\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e);\n            \u003cspan class=\"hljs-comment\"\u003e//System.out.println(instr);\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e = Integer.toString(instr);\n\n            \u003cspan class=\"hljs-comment\"\u003e//System.out.println(str);\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) == \u003cspan class=\"hljs-string\"\u003e\u0027-\u0027\u003c/span\u003e) {\n                System.out.print(\u003cspan class=\"hljs-string\"\u003e\"-\"\u003c/span\u003e);\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e k = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e isOne=\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n\n                \u003cspan class=\"hljs-comment\"\u003e//System.out.println(str.length()+\"aaa\");\u003c/span\u003e\n\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.length() - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; i &gt;= \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; i--) {\n                    \u003cspan class=\"hljs-comment\"\u003e//System.out.println(\"a:  \"+str.charAt(i));\u003c/span\u003e\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.charAt(i)!=\u003cspan class=\"hljs-string\"\u003e\u00270\u0027\u003c/span\u003e&amp;&amp;!isOne){\n                        \u003cspan class=\"hljs-comment\"\u003e//System.out.println(\"++ \"+str.charAt(i));\u003c/span\u003e\n                        isOne=\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n                    }\n\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isOne) {\n                        System.out.print(\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.charAt(i));\n                        k++;\n                    }\n                }\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; i &lt; \u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.length() - k; i++) {\n                    System.out.print(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n                }\n                System.out.println();\n            } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e k = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e isOne=\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.length() - \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e; i &gt;= \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i--) {\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.charAt(i)!=\u003cspan class=\"hljs-string\"\u003e\u00270\u0027\u003c/span\u003e&amp;&amp;!isOne){\n                        isOne=\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n                    }\n\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (isOne) {\n                        System.out.print(\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.charAt(i));\n                        k++;\n\n                    }\n                }\n\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; \u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.length() - k; i++) {\n                    System.out.print(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n                }\n                System.out.println();\n\n            }\n\n        }\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\nWelcome to 2006\u00274 computer college programming contest!\n\nSpecially, I give my best regards to all freshmen! You are the future of HDU ACM! And now, I must tell you that ACM problems are always not so easy, but, except this one... Ha-Ha!\n\nGive you an integer; your task is to output its reverse number. Here, reverse number is defined as follows:\n1. The reverse number of a positive integer ending without 0 is general reverse, for example, reverse (12) = 21;\n2. The reverse number of a negative integer is negative, for example, reverse (-12) = -21;\n3. The reverse number of an integer ending with 0 is described as example, reverse (1200) = 2100.\n\n \n\nInput\nInput file contains multiple test cases. There is a positive integer n (n\u003c100) in the first line, which means the number of test cases, and then n 32-bit integers follow.\n\n \n\nOutput\nFor each test case, you should output its reverse number, one case per line.\n\n \n\nSample Input\n3\n12\n-12\n1200\n \n\nSample Output\n21\n-21\n2100\n\n\n注意：前导0的情况！\n例：\n输入：\n3\n-0012560020\n00000\n00205\n输出为：\n-2006521\n0\n502\n\n```\nimport java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t = sc.nextInt();\n\t\twhile (t-- \u003e 0) {\n\t\t\tString str = sc.next();\n\t\t\tint instr = Integer.parseInt(str);\n\t\t\t//System.out.println(instr);\n\t\t\tstr = Integer.toString(instr);\n\t\t\t\n\t\t\t//System.out.println(str);\n\t\t\tif (str.charAt(0) == \u0027-\u0027) {\n\t\t\t\tSystem.out.print(\"-\");\n\t\t\t\tint k = 0;\n\t\t\t\tboolean isOne=false;\n\t\t\t\t\n\t\t\t\t//System.out.println(str.length()+\"aaa\");\n\t\t\t\t\n\t\t\t\tfor (int i = str.length() - 1; i \u003e= 1; i--) {\n\t\t\t\t\t//System.out.println(\"a:  \"+str.charAt(i));\n\t\t\t\t\tif(str.charAt(i)!=\u00270\u0027&&!isOne){\n\t\t\t\t\t\t//System.out.println(\"++ \"+str.charAt(i));\n\t\t\t\t\t\tisOne=true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (isOne) {\n\t\t\t\t\t\tSystem.out.print(str.charAt(i));\n\t\t\t\t\t\tk++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int i = 1; i \u003c str.length() - k; i++) {\n\t\t\t\t\tSystem.out.print(0);\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t} else {\n\t\t\t\tint k = 0;\n\t\t\t\tboolean isOne=false;\n\t\t\t\tfor (int i = str.length() - 1; i \u003e= 0; i--) {\n\t\t\t\t\tif(str.charAt(i)!=\u00270\u0027&&!isOne){\n\t\t\t\t\t\tisOne=true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (isOne) {\n\t\t\t\t\t\tSystem.out.print(str.charAt(i));\n\t\t\t\t\t\tk++;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (int i = 0; i \u003c str.length() - k; i++) {\n\t\t\t\t\tSystem.out.print(0);\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\n\t\t\t}\n\n\t\t}\n\t}\n\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-634-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-04\2016-04-06-HDOJ 1266 Reverse Number（数字反向输出题）.markdown [pool-634-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 1266 Reverse Number（数字反向输出题）》成功 [pool-634-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-627] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51054965 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:16 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-635] [chx]
[INFO] 2017-07-28 12:29:16 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51054965 [pool-635-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51054965,"title":"Java---设计模块(装饰模式)","create_at":"\/Date(1459702721000)\/","create":"2016-04-04 12:58:41","view_count":3304,"comment_count":0,"comment_allowed":"true","type":"original","channel":15,"digg":0,"bury":0,"description":"★ 场景和问题在不对原有对象类进行修改的基础上，如何给一个或多个已有的类对象提供增强额外的功能？★ 引例 \n写一个MyBufferedReader类，使它能够对字符流(如FileReader、InputStreamReader和PipedReader等)进行功能增强： \n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速； \n(2)提供一个能够每次读取一行字符的myReadL","url":"http://blog.csdn.net/qq_26525215/article/details/51054965","categories":"❷ Java大学之行,----- ②、Java设计模块","tags":"字符流,设计,对象","content":"\u003cp\u003e\u003cstrong\u003e★ 场景和问题\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e在不对原有对象类进行修改的基础上，如何给一个或多个已有的类对象提供增强额外的功能？\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e★ 引例\u003c/strong\u003e \u003cbr\u003e\n写一个MyBufferedReader类，使它能够对字符流(如FileReader、InputStreamReader和PipedReader等)进行功能增强： \u003cbr\u003e\n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速； \u003cbr\u003e\n(2)提供一个能够每次读取一行字符的myReadLine()方法。\u003c/p\u003e\n\n\u003cp\u003e实现对FileReader的功能加强：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.pattern.decorator.v1;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.FileReader;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyBufferedReader\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FileReader fr;\u003cspan class=\"hljs-comment\"\u003e//封装\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e buf[] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e];\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e count = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e// 记录当前缓冲区中的字符个数\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e pos = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e// 游标，数组下标，当前读取的是数组中的哪个元素\u003c/span\u003e\n\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyBufferedReader\u003c/span\u003e(FileReader fr){\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.fr=fr;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRead\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException{\n        \u003cspan class=\"hljs-comment\"\u003e// 当缓冲区为空时，用fr对象到文件中去读取一组数据到缓冲区中\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(count==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            count = fr.read(buf);\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(count==-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n            }\n            pos=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;;\n        }\n\n        \u003cspan class=\"hljs-comment\"\u003e// 从缓冲区中取一个字符出去\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e ch = buf[pos];\n        pos++;\n        count--;\n        \u003cspan class=\"hljs-comment\"\u003e//返回那个字符\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e ch;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003eMyReadLine\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException{\n        StringBuffer strBuffer = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e StringBuffer();\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e ch=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(((ch=MyRead())!=-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)){\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(ch==\u003cspan class=\"hljs-string\"\u003e\u0027\\r\u0027\u003c/span\u003e){\n                \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;\n            }\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(ch==\u003cspan class=\"hljs-string\"\u003e\u0027\\n\u0027\u003c/span\u003e){\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e strBuffer.toString();\n            }\n\n            strBuffer.append(ch);\n        }\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(strBuffer.length()!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e strBuffer.toString();\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyClose\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException{\n        fr.close();\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e测试类：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.pattern.decorator;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.BufferedReader;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.FileNotFoundException;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.FileReader;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.InputStream;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e cn.hncu.pattern.decorator.v1.MyBufferedReader;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTestMyBufferReader\u003c/span\u003e {\u003c/span\u003e\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException {\n        \u003cspan class=\"hljs-comment\"\u003e//testMyBufferedReader();//测试自己写的缓存流\u003c/span\u003e\n\n        testBufferedReader();\u003cspan class=\"hljs-comment\"\u003e//看看系统的缓存流读取的是不是和自己读取的相同\u003c/span\u003e\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e//测试JavaAPI中的BufferedReader类\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003etestBufferedReader\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException {\n        FileReader in = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FileReader(\u003cspan class=\"hljs-string\"\u003e\"chx.txt\"\u003c/span\u003e);\n        BufferedReader bf = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e BufferedReader(in);\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e ch=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e((ch=bf.read())!=-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n            System.out.print((\u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e)ch);\n        }\n        bf.close();\n\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e//测试自己写的MyBufferedReader类\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003etestMyBufferedReader\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException {\n        FileReader fr = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FileReader(\u003cspan class=\"hljs-string\"\u003e\"chx.txt\"\u003c/span\u003e);\n        MyBufferedReader mbf = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e MyBufferedReader(fr);\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e ch=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e((ch=mbf.MyRead())!=-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n            System.out.print((\u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e)ch);\n        }\n\n        mbf.MyClose();\n    }\n\n\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e文件chx.txt:\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs erlang-repl\"\u003e写一个\u003cspan class=\"hljs-variable\"\u003eMyBufferedReader\u003c/span\u003e类，使它能够对字符流\n(如\u003cspan class=\"hljs-variable\"\u003eFileReader\u003c/span\u003e、\u003cspan class=\"hljs-variable\"\u003eInputStreamReader\u003c/span\u003e和\u003cspan class=\"hljs-variable\"\u003ePipedReader\u003c/span\u003e等)进行功能增强：\n(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) 提供带缓冲的\u003cspan class=\"hljs-function_or_atom\"\u003emyRead\u003c/span\u003e()方法，对原有的\u003cspan class=\"hljs-function_or_atom\"\u003eread\u003c/span\u003e()方法进行增速；\n(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e)提供一个能够每次读取一行字符的\u003cspan class=\"hljs-function_or_atom\"\u003emyReadLine\u003c/span\u003e()方法。\n\u003cspan class=\"hljs-function_or_atom\"\u003echx\u003c/span\u003e\u003cspan class=\"hljs-exclamation_mark\"\u003e!\u003c/span\u003e\u003cspan class=\"hljs-exclamation_mark\"\u003e!\u003c/span\u003e\u003cspan class=\"hljs-exclamation_mark\"\u003e!\u003c/span\u003e\n\u003cspan class=\"hljs-variable\"\u003eOK\u003c/span\u003e.\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e测试类中testMyBufferedReader()方法的输出结果:\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs erlang-repl\"\u003e写一个\u003cspan class=\"hljs-variable\"\u003eMyBufferedReader\u003c/span\u003e类，使它能够对字符流\n(如\u003cspan class=\"hljs-variable\"\u003eFileReader\u003c/span\u003e、\u003cspan class=\"hljs-variable\"\u003eInputStreamReader\u003c/span\u003e和\u003cspan class=\"hljs-variable\"\u003ePipedReader\u003c/span\u003e等)进行功能增强：\n(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) 提供带缓冲的\u003cspan class=\"hljs-function_or_atom\"\u003emyRead\u003c/span\u003e()方法，对原有的\u003cspan class=\"hljs-function_or_atom\"\u003eread\u003c/span\u003e()方法进行增速；\n(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e)提供一个能够每次读取一行字符的\u003cspan class=\"hljs-function_or_atom\"\u003emyReadLine\u003c/span\u003e()方法。\n\u003cspan class=\"hljs-function_or_atom\"\u003echx\u003c/span\u003e\u003cspan class=\"hljs-exclamation_mark\"\u003e!\u003c/span\u003e\u003cspan class=\"hljs-exclamation_mark\"\u003e!\u003c/span\u003e\u003cspan class=\"hljs-exclamation_mark\"\u003e!\u003c/span\u003e\n\u003cspan class=\"hljs-variable\"\u003eOK\u003c/span\u003e.\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e测试类中testBufferReader()方法的输出结果:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs erlang-repl\"\u003e写一个\u003cspan class=\"hljs-variable\"\u003eMyBufferedReader\u003c/span\u003e类，使它能够对字符流\n(如\u003cspan class=\"hljs-variable\"\u003eFileReader\u003c/span\u003e、\u003cspan class=\"hljs-variable\"\u003eInputStreamReader\u003c/span\u003e和\u003cspan class=\"hljs-variable\"\u003ePipedReader\u003c/span\u003e等)进行功能增强：\n(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) 提供带缓冲的\u003cspan class=\"hljs-function_or_atom\"\u003emyRead\u003c/span\u003e()方法，对原有的\u003cspan class=\"hljs-function_or_atom\"\u003eread\u003c/span\u003e()方法进行增速；\n(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e)提供一个能够每次读取一行字符的\u003cspan class=\"hljs-function_or_atom\"\u003emyReadLine\u003c/span\u003e()方法。\n\u003cspan class=\"hljs-function_or_atom\"\u003echx\u003c/span\u003e\u003cspan class=\"hljs-exclamation_mark\"\u003e!\u003c/span\u003e\u003cspan class=\"hljs-exclamation_mark\"\u003e!\u003c/span\u003e\u003cspan class=\"hljs-exclamation_mark\"\u003e!\u003c/span\u003e\n\u003cspan class=\"hljs-variable\"\u003eOK\u003c/span\u003e.\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e可以看到，输出的结果是一样的！\u003c/p\u003e\n\n\u003cp\u003e下面实现对多个类的缓存增强支持：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.pattern.decorator.v3;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.Reader;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyReader\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eReader\u003c/span\u003e{\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e//如果不写继承，就没有融入体系中去，所以要继承Reader类\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Reader r;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e[] buf = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e];\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e count = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e// 记录当前缓冲区中的字符个数\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e pos = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e// 游标，数组下标，当前读取的是数组中的哪个元素\u003c/span\u003e\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e  \u003cspan class=\"hljs-title\"\u003eMyReader\u003c/span\u003e(Reader r){\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.r=r;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyReader\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException{\n        \u003cspan class=\"hljs-comment\"\u003e// 当缓冲区为空时，用r对象到文件中去读取一组数据到缓冲区中\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(count&lt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            count=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(count==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            count=r.read(buf);\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(count==-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n            }\n            pos=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        }\n\n\n        \u003cspan class=\"hljs-comment\"\u003e// 从缓冲区中取一个字符出去\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e ch = buf[pos];\n        pos++;\n        count--;\n\n\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e ch;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003eMyReaderLine\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException{\n        StringBuffer strBuffer = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e StringBuffer();\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e ch=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e((ch=MyReader())!=-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(ch==\u003cspan class=\"hljs-string\"\u003e\u0027\\r\u0027\u003c/span\u003e){\u003cspan class=\"hljs-comment\"\u003e//回车\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;\n            }\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(ch==\u003cspan class=\"hljs-string\"\u003e\u0027\\n\u0027\u003c/span\u003e){\u003cspan class=\"hljs-comment\"\u003e//换行\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e strBuffer.toString();\n            }\n            \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e s = (\u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e)ch;\n            strBuffer.append(s);\n        }\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(strBuffer.length()!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e strBuffer.toString();\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyClose\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException {\n        r.close();\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eread\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e[] cbuf, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e off, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e len) \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e read(cbuf, off, len);\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eclose\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException {\n        r.close();\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e测试类：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.pattern.decorator;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.FileReader;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.InputStreamReader;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e cn.hncu.pattern.decorator.v3.MyReader;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTestMyReader\u003c/span\u003e {\u003c/span\u003e\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException {\n        testMyReaderLine();\u003cspan class=\"hljs-comment\"\u003e//测试自己写的缓存流\u003c/span\u003e\n        System.out.println(\u003cspan class=\"hljs-string\"\u003e\"-------------\"\u003c/span\u003e);\n        testMyReader();\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e//测试自己写的MyReader类的MyReader()\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003etestMyReader\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException {\n        InputStreamReader in = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FileReader(\u003cspan class=\"hljs-string\"\u003e\"chx.txt\"\u003c/span\u003e);\n        MyReader mr = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e MyReader(in);\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e ch=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e((ch=mr.MyReader())!=-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n            System.out.print((\u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e)ch);\n        }\n        mr.close();\n\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e//测试自己写的MyReader类的MyReaderLine()\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003etestMyReaderLine\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException {\n        FileReader fr = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FileReader(\u003cspan class=\"hljs-string\"\u003e\"chx.txt\"\u003c/span\u003e);\n        MyReader mbf = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e MyReader(fr);\n        String ch=\u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e((ch=mbf.MyReaderLine())!=\u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e){\n            System.out.print(ch);\n            System.out.println();\n        }\n\n        mbf.MyClose();\n    }\n\n\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e文件和上面的文件是一样的，下面看输出结果：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs asciidoc\"\u003e写一个MyBufferedReader类，使它能够对字符流\n(如FileReader、InputStreamReader和PipedReader等)进行功能增强：\n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速；\n(2)提供一个能够每次读取一行字符的myReadLine()方法。\nchx!!!\n\u003cspan class=\"hljs-header\"\u003eOK.\n-------------\u003c/span\u003e\n写一个MyBufferedReader类，使它能够对字符流\n(如FileReader、InputStreamReader和PipedReader等)进行功能增强：\n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速；\n(2)提供一个能够每次读取一行字符的myReadLine()方法。\nchx!!!\nOK.\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e装饰比继承更灵活，避免了继承造成的体系臃肿问题。\u003c/strong\u003e \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160404005810699\" alt=\"\" title=\"\"\u003e\u003c/p\u003e","markdowncontent":"**★ 场景和问题**\n\n在不对原有对象类进行修改的基础上，如何给一个或多个已有的类对象提供增强额外的功能？\n\n**★ 引例**\n写一个MyBufferedReader类，使它能够对字符流(如FileReader、InputStreamReader和PipedReader等)进行功能增强：\n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速；\n(2)提供一个能够每次读取一行字符的myReadLine()方法。\n\n实现对FileReader的功能加强：\n\n```\npackage cn.hncu.pattern.decorator.v1;\n\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class MyBufferedReader {\n\tprivate FileReader fr;//封装\n\tprivate char buf[] = new char[1024];\n\tprivate int count = 0;// 记录当前缓冲区中的字符个数\n\tprivate int pos = 0;// 游标，数组下标，当前读取的是数组中的哪个元素\n\t\n\t\n\tpublic MyBufferedReader(FileReader fr){\n\t\tthis.fr=fr;\n\t}\n\t\n\tpublic int MyRead() throws IOException{\n\t\t// 当缓冲区为空时，用fr对象到文件中去读取一组数据到缓冲区中\n\t\tif(count==0){\n\t\t\tcount = fr.read(buf);\n\t\t\tif(count==-1){\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tpos=0;;\n\t\t}\n\t\t\n\t\t// 从缓冲区中取一个字符出去\n\t\tchar ch = buf[pos];\n\t\tpos++;\n\t\tcount--;\n\t\t//返回那个字符\n\t\treturn ch;\n\t}\n\t\n\tpublic String MyReadLine() throws IOException{\n\t\tStringBuffer strBuffer = new StringBuffer();\n\t\tint ch=0;\n\t\twhile(((ch=MyRead())!=-1)){\n\t\t\tif(ch==\u0027\\r\u0027){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(ch==\u0027\\n\u0027){\n\t\t\t\treturn strBuffer.toString();\n\t\t\t}\n\t\t\t\n\t\t\tstrBuffer.append(ch);\n\t\t}\n\t\t\n\t\tif(strBuffer.length()!=0){\n\t\t\treturn strBuffer.toString();\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tpublic void MyClose() throws IOException{\n\t\tfr.close();\n\t}\n\t\n}\n\n```\n测试类：\n\n```\npackage cn.hncu.pattern.decorator;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport cn.hncu.pattern.decorator.v1.MyBufferedReader;\n\npublic class TestMyBufferReader {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t//testMyBufferedReader();//测试自己写的缓存流\n\t\t\n\t\ttestBufferedReader();//看看系统的缓存流读取的是不是和自己读取的相同\n\t}\n\t\n\t//测试JavaAPI中的BufferedReader类\n\tprivate static void testBufferedReader() throws IOException {\n\t\tFileReader in = new FileReader(\"chx.txt\");\n\t\tBufferedReader bf = new BufferedReader(in);\n\t\tint ch=0;\n\t\twhile((ch=bf.read())!=-1){\n\t\t\tSystem.out.print((char)ch);\n\t\t}\n\t\tbf.close();\n\t\t\n\t}\n\t\n\t//测试自己写的MyBufferedReader类\n\tprivate static void testMyBufferedReader() throws IOException {\n\t\tFileReader fr = new FileReader(\"chx.txt\");\n\t\tMyBufferedReader mbf = new MyBufferedReader(fr);\n\t\tint ch=0;\n\t\twhile((ch=mbf.MyRead())!=-1){\n\t\t\tSystem.out.print((char)ch);\n\t\t}\n\t\t\n\t\tmbf.MyClose();\n\t}\n\t\n\t\n\n}\n\n```\n文件chx.txt:\n\n```\n写一个MyBufferedReader类，使它能够对字符流\n(如FileReader、InputStreamReader和PipedReader等)进行功能增强：\n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速；\n(2)提供一个能够每次读取一行字符的myReadLine()方法。\nchx!!!\nOK.\n```\n测试类中testMyBufferedReader()方法的输出结果:\n\n```\n写一个MyBufferedReader类，使它能够对字符流\n(如FileReader、InputStreamReader和PipedReader等)进行功能增强：\n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速；\n(2)提供一个能够每次读取一行字符的myReadLine()方法。\nchx!!!\nOK.\n```\n测试类中testBufferReader()方法的输出结果:\n\n```\n写一个MyBufferedReader类，使它能够对字符流\n(如FileReader、InputStreamReader和PipedReader等)进行功能增强：\n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速；\n(2)提供一个能够每次读取一行字符的myReadLine()方法。\nchx!!!\nOK.\n```\n可以看到，输出的结果是一样的！\n\n下面实现对多个类的缓存增强支持：\n\n```\npackage cn.hncu.pattern.decorator.v3;\n\nimport java.io.IOException;\nimport java.io.Reader;\n\npublic class MyReader extends Reader{\n\t//如果不写继承，就没有融入体系中去，所以要继承Reader类\n\tprivate Reader r;\n\tprivate char[] buf = new char[1024];\n\tprivate int count = 0;// 记录当前缓冲区中的字符个数\n\tprivate int pos = 0;// 游标，数组下标，当前读取的是数组中的哪个元素\n\t\n\tpublic  MyReader(Reader r){\n\t\tthis.r=r;\n\t}\n\t\n\tpublic int MyReader() throws IOException{\n\t\t// 当缓冲区为空时，用r对象到文件中去读取一组数据到缓冲区中\n\t\tif(count\u003c=0){\n\t\t\tcount=0;\n\t\t}\n\t\tif(count==0){\n\t\t\tcount=r.read(buf);\n\t\t\tif(count==-1){\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tpos=0;\n\t\t}\n\t\t\n\t\t\n\t\t// 从缓冲区中取一个字符出去\n\t\tint ch = buf[pos];\n\t\tpos++;\n\t\tcount--;\n\t\t\n\t\t\n\t\treturn ch;\n\t}\n\t\n\tpublic String MyReaderLine() throws IOException{\n\t\tStringBuffer strBuffer = new StringBuffer();\n\t\tint ch=0;\n\t\twhile((ch=MyReader())!=-1){\n\t\t\tif(ch==\u0027\\r\u0027){//回车\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(ch==\u0027\\n\u0027){//换行\n\t\t\t\treturn strBuffer.toString();\n\t\t\t}\n\t\t\tchar s = (char)ch;\n\t\t\tstrBuffer.append(s);\n\t\t}\n\t\t\n\t\tif(strBuffer.length()!=0){\n\t\t\treturn strBuffer.toString();\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tpublic void MyClose() throws IOException {\n\t\tr.close();\n\t}\n\n\t@Override\n\tpublic int read(char[] cbuf, int off, int len) throws IOException {\n\t\treturn read(cbuf, off, len);\n\t}\n\n\t@Override\n\tpublic void close() throws IOException {\n\t\tr.close();\n\t}\n\n}\n\n```\n测试类：\n\n```\npackage cn.hncu.pattern.decorator;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport cn.hncu.pattern.decorator.v3.MyReader;\n\npublic class TestMyReader {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\ttestMyReaderLine();//测试自己写的缓存流\n\t\tSystem.out.println(\"-------------\");\n\t\ttestMyReader();\n\t}\n\t\n\t//测试自己写的MyReader类的MyReader()\n\tprivate static void testMyReader() throws IOException {\n\t\tInputStreamReader in = new FileReader(\"chx.txt\");\n\t\tMyReader mr = new MyReader(in);\n\t\tint ch=0;\n\t\twhile((ch=mr.MyReader())!=-1){\n\t\t\tSystem.out.print((char)ch);\n\t\t}\n\t\tmr.close();\n\t\t\n\t}\n\t\n\t//测试自己写的MyReader类的MyReaderLine()\n\tprivate static void testMyReaderLine() throws IOException {\n\t\tFileReader fr = new FileReader(\"chx.txt\");\n\t\tMyReader mbf = new MyReader(fr);\n\t\tString ch=null;\n\t\twhile((ch=mbf.MyReaderLine())!=null){\n\t\t\tSystem.out.print(ch);\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t\tmbf.MyClose();\n\t}\n\t\n\t\n\n}\n\n```\n文件和上面的文件是一样的，下面看输出结果：\n\n```\n写一个MyBufferedReader类，使它能够对字符流\n(如FileReader、InputStreamReader和PipedReader等)进行功能增强：\n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速；\n(2)提供一个能够每次读取一行字符的myReadLine()方法。\nchx!!!\nOK.\n-------------\n写一个MyBufferedReader类，使它能够对字符流\n(如FileReader、InputStreamReader和PipedReader等)进行功能增强：\n(1) 提供带缓冲的myRead()方法，对原有的read()方法进行增速；\n(2)提供一个能够每次读取一行字符的myReadLine()方法。\nchx!!!\nOK.\n```\n\n**装饰比继承更灵活，避免了继承造成的体系臃肿问题。**\n![](http://img.blog.csdn.net/20160404005810699)","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-635-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-04\2016-04-04-Java---设计模块(装饰模式).markdown [pool-635-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java---设计模块(装饰模式)》成功 [pool-635-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:49334969 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:16 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-636] [chx]
[INFO] 2017-07-28 12:29:16 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=49334969 [pool-636-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":49334969,"title":"HDOJ 2006 求奇数的乘积","create_at":"\/Date(1445501554000)\/","create":"2015-10-22 04:12:34","view_count":384,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \n给你n个整数，求他们中所有奇数的乘积。Input \n输入数据包含多个测试实例，每个测试实例占一行，每行的第一个数为n，表示本组数据一共有n个，接着是n个整数，你可以假设每组数据必定至少存在一个奇数。Output \n输出每组数中的所有奇数的乘积，对于测试实例，输出一行。Sample Input \n3 1 2 3 \n4 2 3 4 5Sample Output","url":"http://blog.csdn.net/qq_26525215/article/details/49334969","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 基础题","tags":"hdoj","content":"\u003cp\u003eProblem Description \u003cbr\u003e\n给你n个整数，求他们中所有奇数的乘积。\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\n输入数据包含多个测试实例，每个测试实例占一行，每行的第一个数为n，表示本组数据一共有n个，接着是n个整数，你可以假设每组数据必定至少存在一个奇数。\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n输出每组数中的所有奇数的乘积，对于测试实例，输出一行。\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n3 1 2 3 \u003cbr\u003e\n4 2 3 4 5\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n3 \u003cbr\u003e\n15\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.*;\nclass Main{\n  \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String args[]){\n    Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(sc.hasNext()){\n      \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e t = sc.nextInt();\n      \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e s =\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n      \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;t;i++){\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a = sc.nextInt(); \n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a%\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\n           s*=a;\n      }\n      System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(s);\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\n给你n个整数，求他们中所有奇数的乘积。\n \n\nInput\n输入数据包含多个测试实例，每个测试实例占一行，每行的第一个数为n，表示本组数据一共有n个，接着是n个整数，你可以假设每组数据必定至少存在一个奇数。\n \n\nOutput\n输出每组数中的所有奇数的乘积，对于测试实例，输出一行。\n \n\nSample Input\n3 1 2 3\n4 2 3 4 5\n \n\nSample Output\n3\n15\n\n\n```\nimport java.util.*;\nclass Main{\n  public static void main(String args[]){\n    Scanner sc = new Scanner(System.in);\n    while(sc.hasNext()){\n      int t = sc.nextInt();\n      int s =1;\n      for(int i=0;i\u003ct;i++){\n        int a = sc.nextInt(); \n        if(a%2!=0)\n           s*=a;\n      }\n      System.out.println(s);\n    }\n  }\n}\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-636-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-10\2015-10-22-HDOJ 2006 求奇数的乘积.markdown [pool-636-thread-1] [chx]
[INFO] 2017-07-28 12:29:16 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 2006 求奇数的乘积》成功 [pool-636-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51169408 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-637] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51169408 [pool-637-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51169408,"title":"HDOJ 1420 Prepared for New Acmer(DP)","create_at":"\/Date(1460802203000)\/","create":"2016-04-16 06:23:23","view_count":3573,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \n集训进行了将近2个礼拜，这段时间以恢复性训练为主，我一直在密切关注大家的训练情况，目前为止，对大家的表现相当满意，首先是绝大部分队员的训练积极性很高，其次，都很遵守集训纪律，最后，老队员也起到了很好的带头作用，这里特别感谢为这次DP专题练习赛提供题目和测试数据的集训队队长xhd同学.特别高兴的是，跟随集训队训练的一批新队员表现非常好，进步也比较显著，特别是训","url":"http://blog.csdn.net/qq_26525215/article/details/51169408","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 动态规划（DP）","tags":"dp","content":"\u003cp\u003eProblem Description \u003cbr\u003e\n集训进行了将近2个礼拜，这段时间以恢复性训练为主，我一直在密切关注大家的训练情况，目前为止，对大家的表现相当满意，首先是绝大部分队员的训练积极性很高，其次，都很遵守集训纪律，最后，老队员也起到了很好的带头作用，这里特别感谢为这次DP专题练习赛提供题目和测试数据的集训队队长xhd同学.\u003c/p\u003e\n\n\u003cp\u003e特别高兴的是，跟随集训队训练的一批新队员表现非常好，进步也比较显著，特别是训练态度大大超出我的预期，我敢说，如果各位能如此坚持下去，绝对前途无量！\u003c/p\u003e\n\n\u003cp\u003e考虑到新队员还没有经过系统训练，我这里特别添加一道简单题： \u003cbr\u003e\n给定三个正整数A，B和C（A,B,C&lt;=1000000），求A^B mod C的结果.\u003c/p\u003e\n\n\u003cp\u003e希望各位都能体会到比赛中AC的快乐，绝对的量身定制，很高的待遇哟，呵呵…\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\n输入数据首先包含一个正整数N,表示测试实例的个数，然后是N行数据，每行包括三个正整数A,B,C。\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n对每个测试实例请输出计算后的结果，每个实例的输出占一行。\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n3 \u003cbr\u003e\n2 3 4 \u003cbr\u003e\n3 3 5 \u003cbr\u003e\n4 4 6\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n0 \u003cbr\u003e\n2 \u003cbr\u003e\n4\u003c/p\u003e\n\n\u003cp\u003e开始想直接用java大数A过的，单发现取余不会超范围。 \u003cbr\u003e\n事实证明取余循环是可以AC的。 \u003cbr\u003e\n至于用java的大数过，就你们自己去试下吧，我觉得应该是可以过的。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e Main{\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e t = sc.nextInt();\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(t--&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e a = sc.nextLong();\n            \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e b = sc.nextLong();\n            \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e c = sc.nextLong();\n            \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e num = a;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;i&lt;b;i++){\n                a=a%c;\n                \u003cspan class=\"hljs-comment\"\u003e//System.out.println(\"1  \"+a);\u003c/span\u003e\n                a=a*num;\n                \u003cspan class=\"hljs-comment\"\u003e//System.out.println(\"2  \"+a);\u003c/span\u003e\n            }\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(a%c);\n        }\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\n集训进行了将近2个礼拜，这段时间以恢复性训练为主，我一直在密切关注大家的训练情况，目前为止，对大家的表现相当满意，首先是绝大部分队员的训练积极性很高，其次，都很遵守集训纪律，最后，老队员也起到了很好的带头作用，这里特别感谢为这次DP专题练习赛提供题目和测试数据的集训队队长xhd同学.\n\n特别高兴的是，跟随集训队训练的一批新队员表现非常好，进步也比较显著，特别是训练态度大大超出我的预期，我敢说，如果各位能如此坚持下去，绝对前途无量！\n\n考虑到新队员还没有经过系统训练，我这里特别添加一道简单题：\n给定三个正整数A，B和C（A,B,C\u003c=1000000），求A^B mod C的结果.\n\n希望各位都能体会到比赛中AC的快乐，绝对的量身定制，很高的待遇哟，呵呵...\n\n \n\nInput\n输入数据首先包含一个正整数N,表示测试实例的个数，然后是N行数据，每行包括三个正整数A,B,C。\n\n \n\nOutput\n对每个测试实例请输出计算后的结果，每个实例的输出占一行。\n\n \n\nSample Input\n3\n2 3 4\n3 3 5\n4 4 6\n \n\nSample Output\n0\n2\n4\n\n\n开始想直接用java大数A过的，单发现取余不会超范围。\n事实证明取余循环是可以AC的。\n至于用java的大数过，就你们自己去试下吧，我觉得应该是可以过的。\n\n\n```\nimport java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t = sc.nextInt();\n\t\twhile(t--\u003e0){\n\t\t\tlong a = sc.nextLong();\n\t\t\tlong b = sc.nextLong();\n\t\t\tlong c = sc.nextLong();\n\t\t\tlong num = a;\n\t\t\tfor(int i=1;i\u003cb;i++){\n\t\t\t\ta=a%c;\n\t\t\t\t//System.out.println(\"1  \"+a);\n\t\t\t\ta=a*num;\n\t\t\t\t//System.out.println(\"2  \"+a);\n\t\t\t}\n\t\t\tSystem.out.println(a%c);\n\t\t}\n\t}\n\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-637-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-04\2016-04-16-HDOJ 1420 Prepared for New Acmer(DP).markdown [pool-637-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 1420 Prepared for New Acmer(DP)》成功 [pool-637-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50916797 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-638] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-626] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50916797 [pool-638-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50916797,"title":"HDOJ 2072 单词数","create_at":"\/Date(1458217744000)\/","create":"2016-03-17 08:29:04","view_count":376,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \nlily的好朋友xiaoou333最近很空，他想了一件没有什么意义的事情，就是统计一篇文章里不同单词的总数。下面你的任务是帮助xiaoou333解决这个问题。Input \n有多组数据，每组一行，每组就是一篇小文章。每篇小文章都是由小写字母和空格组成，没有标点符号，遇到#时表示输入结束。Output \n每组只输出一个整数，其单独成行，该整数代表一篇文章里不同单","url":"http://blog.csdn.net/qq_26525215/article/details/50916797","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- String","tags":"","content":"\u003cp\u003eProblem Description \u003cbr\u003e\nlily的好朋友xiaoou333最近很空，他想了一件没有什么意义的事情，就是统计一篇文章里不同单词的总数。下面你的任务是帮助xiaoou333解决这个问题。\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\n有多组数据，每组一行，每组就是一篇小文章。每篇小文章都是由小写字母和空格组成，没有标点符号，遇到#时表示输入结束。\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n每组只输出一个整数，其单独成行，该整数代表一篇文章里不同单词的总数。\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\nyou are my friend \u003cbr\u003e\n#\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n4\u003c/p\u003e\n\n\u003cp\u003e我的思路是先按照空格来分配单词。 \u003cbr\u003e\n用String数组。 \u003cbr\u003e\n最后来比较有多少个相等的单词。 \u003cbr\u003e\n相等就减一。 \u003cbr\u003e\n我用了一个boolean型的数组来判断当前单词是否已经被比较了。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs axapta\"\u003e\nimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMain\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e main(String[] args) {\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.in);\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(sc.hasNext()){\n            String \u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e = sc.nextLine();\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.charAt(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)==\u003cspan class=\"hljs-string\"\u003e\u0027#\u0027\u003c/span\u003e){\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e ;\n            }\n\n            String[] strs = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.length()];\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;strs.length;i++){\n                strs[i] = \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e;\n            }\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecount\u003c/span\u003e =\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.length();i++){\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.charAt(i)!=\u003cspan class=\"hljs-string\"\u003e\u0027 \u0027\u003c/span\u003e){\n                    \u003cspan class=\"hljs-comment\"\u003e//System.out.println(\"--- \"+str.charAt(i));\u003c/span\u003e\n                    strs[\u003cspan class=\"hljs-keyword\"\u003ecount\u003c/span\u003e]=strs[\u003cspan class=\"hljs-keyword\"\u003ecount\u003c/span\u003e]+\u003cspan class=\"hljs-keyword\"\u003estr\u003c/span\u003e.charAt(i);\n                }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n                    \u003cspan class=\"hljs-keyword\"\u003ecount\u003c/span\u003e++;\n                }\n            }\n\n\u003cspan class=\"hljs-comment\"\u003e//          for(int i=0;i&lt;count;i++){\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//              System.out.println(strs[i]);\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          }\u003c/span\u003e\n\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e number =strs.length-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e iscp[] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e[strs.length];\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;iscp.length;i++){\n                iscp[i]=\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n            }\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;strs.length-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;i++){\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=i+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;j&lt;strs.length;j++){\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(strs[i].equals(strs[j])&amp;&amp;!iscp[j]){\n                        number--;\n                        iscp[j]=\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n                    }\n                }\n            }\n\n            System.out.println(number);\n\n\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\nlily的好朋友xiaoou333最近很空，他想了一件没有什么意义的事情，就是统计一篇文章里不同单词的总数。下面你的任务是帮助xiaoou333解决这个问题。\n \n\nInput\n有多组数据，每组一行，每组就是一篇小文章。每篇小文章都是由小写字母和空格组成，没有标点符号，遇到#时表示输入结束。\n \n\nOutput\n每组只输出一个整数，其单独成行，该整数代表一篇文章里不同单词的总数。\n \n\nSample Input\nyou are my friend\n#\n \n\nSample Output\n4\n\n我的思路是先按照空格来分配单词。\n用String数组。\n最后来比较有多少个相等的单词。\n相等就减一。\n我用了一个boolean型的数组来判断当前单词是否已经被比较了。\n\n```\n\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tString str = sc.nextLine();\n\t\t\tif(str.charAt(0)==\u0027#\u0027){\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\t\n\t\t\tString[] strs = new String[str.length()];\n\t\t\tfor(int i=0;i\u003cstrs.length;i++){\n\t\t\t\tstrs[i] = \"\";\n\t\t\t}\n\t\t\tint count =0;\n\t\t\tfor(int i=0;i\u003cstr.length();i++){\n\t\t\t\tif(str.charAt(i)!=\u0027 \u0027){\n\t\t\t\t\t//System.out.println(\"--- \"+str.charAt(i));\n\t\t\t\t\tstrs[count]=strs[count]+str.charAt(i);\n\t\t\t\t}else{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n//\t\t\tfor(int i=0;i\u003ccount;i++){\n//\t\t\t\tSystem.out.println(strs[i]);\n//\t\t\t}\n\t\t\t\n\t\t\tint number =strs.length-1;\n\t\t\tboolean iscp[] = new boolean[strs.length];\n\t\t\tfor(int i=0;i\u003ciscp.length;i++){\n\t\t\t\tiscp[i]=false;\n\t\t\t}\n\t\t\tfor(int i=0;i\u003cstrs.length-1;i++){\n\t\t\t\tfor(int j=i+1;j\u003cstrs.length;j++){\n\t\t\t\t\tif(strs[i].equals(strs[j])&&!iscp[j]){\n\t\t\t\t\t\tnumber--;\n\t\t\t\t\t\tiscp[j]=true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(number);\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-638-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-03\2016-03-17-HDOJ 2072 单词数.markdown [pool-638-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 2072 单词数》成功 [pool-638-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-629] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-628] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51029106 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-639] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51029106 [pool-639-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51029106,"title":"HDOJ 1061 Rightmost Digit（循环问题）","create_at":"\/Date(1459420162000)\/","create":"2016-03-31 06:29:22","view_count":566,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":1,"bury":0,"description":"Problem Description \nGiven a positive integer N, you should output the most right digit of N^N.Input \nThe input contains several test cases. The first line of the input is a single integer T which is t","url":"http://blog.csdn.net/qq_26525215/article/details/51029106","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 基础题,----- 判断循环-循环节","tags":"","content":"\u003cp\u003eProblem Description \u003cbr\u003e\nGiven a positive integer N, you should output the most right digit of N^N.\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\nThe input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow. \u003cbr\u003e\nEach test case contains a single positive integer N(1&lt;=N&lt;=1,000,000,000).\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\nFor each test case, you should output the rightmost digit of N^N.\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n2 \u003cbr\u003e\n3 \u003cbr\u003e\n4\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n7 \u003cbr\u003e\n6 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160331182631674\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e题意：很简单，就是输出n^n的最后一个数字时什么。\u003c/p\u003e\n\n\u003cp\u003e思路：前面有过一个0-9的n次方的题目，HDOJ1097题，那一题中我用代码推出了循环节，这个题目，我用的循环节全为4了. \u003cbr\u003e\nHDOJ1097题博客链接：\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/50949847\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/50949847\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e Main{\n    \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e db[][] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e][\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e];\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n        dabiao();\n\u003cspan class=\"hljs-comment\"\u003e//      System.out.println(db[4][0]);\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      System.out.println(db[4][3]);\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      \u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e t = sc.nextLong();\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(t--&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n = sc.nextInt();\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e f=n%\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e m=n%\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e;\n            \u003cspan class=\"hljs-comment\"\u003e//System.out.println(m);\u003c/span\u003e\n            m--;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(m&lt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                m=\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\n            }\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(db[f][m]);\n\n        }\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edabiao\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;i&lt;=\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e;i++){\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;j&lt;\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e;j++){\n                db[i][j]=dabiao(i,j);\n                \u003cspan class=\"hljs-comment\"\u003e//System.out.print(db[i][j]+\" \");\u003c/span\u003e\n            }\n            \u003cspan class=\"hljs-comment\"\u003e//System.out.println();\u003c/span\u003e\n        }\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edabiao\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e j) {\n        \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e m=i;\u003cspan class=\"hljs-comment\"\u003e//4,3\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e k=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;k&lt;=j;k++){\n            m=(m*i)%\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n        }\n        m=m%\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e m;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\nGiven a positive integer N, you should output the most right digit of N^N.\n\n \n\nInput\nThe input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.\nEach test case contains a single positive integer N(1\u003c=N\u003c=1,000,000,000).\n\n \n\nOutput\nFor each test case, you should output the rightmost digit of N^N.\n\n \n\nSample Input\n2\n3\n4\n \n\nSample Output\n7\n6\n![](http://img.blog.csdn.net/20160331182631674)\n\n题意：很简单，就是输出n^n的最后一个数字时什么。\n\n思路：前面有过一个0-9的n次方的题目，HDOJ1097题，那一题中我用代码推出了循环节，这个题目，我用的循环节全为4了.\nHDOJ1097题博客链接：http://blog.csdn.net/qq_26525215/article/details/50949847\n\n\n```\nimport java.util.Scanner;\n\npublic class Main{\n\tstatic long db[][] = new long[10][4];\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tdabiao();\n//\t\tSystem.out.println(db[4][0]);\n//\t\tSystem.out.println(db[4][3]);\n//\t\t\n\t\tlong t = sc.nextLong();\n\t\twhile(t--\u003e0){\n\t\t\tint n = sc.nextInt();\n\t\t\tint f=n%10;\n\t\t\tint m=n%4;\n\t\t\t//System.out.println(m);\n\t\t\tm--;\n\t\t\tif(m\u003c0){\n\t\t\t\tm=3;\n\t\t\t}\n\t\t\tSystem.out.println(db[f][m]);\n\t\t\t\n\t\t}\n\t}\n\n\tprivate static void dabiao() {\n\t\tfor(int i=1;i\u003c=9;i++){\n\t\t\tfor(int j=0;j\u003c4;j++){\n\t\t\t\tdb[i][j]=dabiao(i,j);\n\t\t\t\t//System.out.print(db[i][j]+\" \");\n\t\t\t}\n\t\t\t//System.out.println();\n\t\t}\n\t}\n\n\tprivate static long dabiao(long i, long j) {\n\t\tlong m=i;//4,3\n\t\tfor(int k=1;k\u003c=j;k++){\n\t\t\tm=(m*i)%10;\n\t\t}\n\t\tm=m%10;\n\t\treturn m;\n\t}\n\n}\n\n```\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-639-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-03\2016-03-31-HDOJ 1061 Rightmost Digit（循环问题）.markdown [pool-639-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 1061 Rightmost Digit（循环问题）》成功 [pool-639-thread-1] [chx]
[INFO] 2017-07-28 12:29:17 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50562276 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:17 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-640] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50562276 [pool-640-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50562276,"title":"HDOJ 2030 汉字统计","create_at":"\/Date(1453447787000)\/","create":"2016-01-22 03:29:47","view_count":343,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \n统计给定文本文件中汉字的个数。Input \n输入文件首先包含一个整数n，表示测试实例的个数，然后是n段文本。Output \n对于每一段文本，输出其中的汉字的个数，每个测试实例的输出占一行。[Hint:]从汉字机内码的特点考虑~Sample Input \n2 \nWaHaHa! WaHaHa! 今年过节不说话要说只说普通话WaHaHa! WaHaHa! \n马上就","url":"http://blog.csdn.net/qq_26525215/article/details/50562276","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 基础题","tags":"","content":"\u003cp\u003eProblem Description \u003cbr\u003e\n统计给定文本文件中汉字的个数。\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\n输入文件首先包含一个整数n，表示测试实例的个数，然后是n段文本。\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n对于每一段文本，输出其中的汉字的个数，每个测试实例的输出占一行。\u003c/p\u003e\n\n\u003cp\u003e[Hint:]从汉字机内码的特点考虑~\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n2 \u003cbr\u003e\nWaHaHa! WaHaHa! 今年过节不说话要说只说普通话WaHaHa! WaHaHa! \u003cbr\u003e\n马上就要期末考试了Are you ready?\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n14 \u003cbr\u003e\n9\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e Main {\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String args[]){\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n = sc.nextInt();\n        sc.next();\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(n--&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e m=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            String strs = sc.nextLine();\n            \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e[] strc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e[strs.length()];\n            strc = strs.toCharArray();\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;strc.length;i++){\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(strc[i]&gt;\u003cspan class=\"hljs-number\"\u003e128\u003c/span\u003e){\n                    m++;\n                }\n            }\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(m);\n        }\n    }\n}    \n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\n统计给定文本文件中汉字的个数。\n \n\nInput\n输入文件首先包含一个整数n，表示测试实例的个数，然后是n段文本。\n \n\nOutput\n对于每一段文本，输出其中的汉字的个数，每个测试实例的输出占一行。\n\n[Hint:]从汉字机内码的特点考虑~\n\n\n \n\nSample Input\n2\nWaHaHa! WaHaHa! 今年过节不说话要说只说普通话WaHaHa! WaHaHa!\n马上就要期末考试了Are you ready?\n \n\nSample Output\n14\n9\n \n\n```\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        sc.next();\n        while(n--\u003e0){\n            int m=0;\n            String strs = sc.nextLine();\n            char[] strc = new char[strs.length()];\n            strc = strs.toCharArray();\n            for(int i=0;i\u003cstrc.length;i++){\n                if(strc[i]\u003e128){\n                    m++;\n                }\n            }\n            System.out.println(m);\n        }\n    }\n}    \n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-640-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-01\2016-01-22-HDOJ 2030 汉字统计.markdown [pool-640-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 2030 汉字统计》成功 [pool-640-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:49427953 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-641] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-630] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=49427953 [pool-641-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":49427953,"title":"POJ 1306  Combinations","create_at":"\/Date(1445855087000)\/","create":"2015-10-26 06:24:47","view_count":378,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"DescriptionComputing the exact number of ways that N things can be taken M at a time can be a great challenge when N and/or M become very large. Challenges are the stuff of contests. Therefore, you are","url":"http://blog.csdn.net/qq_26525215/article/details/49427953","categories":"----- POJ-ACM","tags":"poj","content":"\u003cp\u003eDescription\u003c/p\u003e\n\n\u003cp\u003eComputing the exact number of ways that N things can be taken M at a time can be a great challenge when N and/or M become very large. Challenges are the stuff of contests. Therefore, you are to make just such a computation given the following:  \u003cbr\u003e\nGIVEN: 5 &lt;= N &lt;= 100; 5 &lt;= M &lt;= 100; M &lt;= N  \u003cbr\u003e\nCompute the EXACT value of: C = N! / (N-M)!M!  \u003cbr\u003e\nYou may assume that the final value of C will fit in a 32-bit Pascal LongInt or a C long. For the record, the exact value of 100! is:  \u003cbr\u003e\n93,326,215,443,944,152,681,699,238,856,266,700,490,715,968,264,381,621, 468,592,963,895,217,599,993,229,915,608,941,463,976,156,518,286,253, 697,920,827,223,758,251,185,210,916,864,000,000,000,000,000,000,000,000  \u003cbr\u003e\nInput\u003c/p\u003e\n\n\u003cp\u003eThe input to this program will be one or more lines each containing zero or more leading spaces, a value for N, one or more spaces, and a value for M. The last line of the input file will contain a dummy N, M pair with both values equal to zero. Your program should terminate when this line is read. \u003cbr\u003e\nOutput\u003c/p\u003e\n\n\u003cp\u003eThe output from this program should be in the form:  \u003cbr\u003e\nN things taken M at a time is C exactly.  \u003cbr\u003e\nSample Input\u003c/p\u003e\n\n\u003cp\u003e100  6 \u003cbr\u003e\n20  5 \u003cbr\u003e\n18  6 \u003cbr\u003e\n0  0 \u003cbr\u003e\nSample Output\u003c/p\u003e\n\n\u003cp\u003e100 things taken 6 at a time is 1192052400 exactly. \u003cbr\u003e\n20 things taken 5 at a time is 15504 exactly. \u003cbr\u003e\n18 things taken 6 at a time is 18564 exactly.\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cpp\"\u003e\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;iostream&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;stdio.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;string.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;stdlib.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enamespace\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003estd\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e main()\n{\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n,m;\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(~\u003cspan class=\"hljs-built_in\"\u003escanf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"%d%d\"\u003c/span\u003e,&amp;n,&amp;m)&amp;&amp;(n||m)){\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e s[\u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e];\n        \u003cspan class=\"hljs-keyword\"\u003ebool\u003c/span\u003e vis[\u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e];\n        \u003cspan class=\"hljs-built_in\"\u003ememset\u003c/span\u003e(vis,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003esizeof\u003c/span\u003e(vis));\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e x,y;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(n-m&lt;m){\n            x=n-m;\u003cspan class=\"hljs-comment\"\u003e/**x为小的那个数**/\u003c/span\u003e\n            y=m;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n            x=m;\n            y=n-m;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e sum=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=y+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;i&lt;=n;i++){\n            sum*=i;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;j&lt;=x;j++){\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(sum%j==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e&amp;&amp;vis[j]==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                    vis[j]=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n                    sum=sum/j;\n                }\n            }\n        }\n        \u003cspan class=\"hljs-built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"%d things taken %d at a time is %d exactly.\\n\"\u003c/span\u003e,n,m,sum);\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Description\n\nComputing the exact number of ways that N things can be taken M at a time can be a great challenge when N and/or M become very large. Challenges are the stuff of contests. Therefore, you are to make just such a computation given the following: \nGIVEN: 5 \u003c= N \u003c= 100; 5 \u003c= M \u003c= 100; M \u003c= N \nCompute the EXACT value of: C = N! / (N-M)!M! \nYou may assume that the final value of C will fit in a 32-bit Pascal LongInt or a C long. For the record, the exact value of 100! is: \n93,326,215,443,944,152,681,699,238,856,266,700,490,715,968,264,381,621, 468,592,963,895,217,599,993,229,915,608,941,463,976,156,518,286,253, 697,920,827,223,758,251,185,210,916,864,000,000,000,000,000,000,000,000 \nInput\n\nThe input to this program will be one or more lines each containing zero or more leading spaces, a value for N, one or more spaces, and a value for M. The last line of the input file will contain a dummy N, M pair with both values equal to zero. Your program should terminate when this line is read.\nOutput\n\nThe output from this program should be in the form: \nN things taken M at a time is C exactly. \nSample Input\n\n100  6\n20  5\n18  6\n0  0\nSample Output\n\n100 things taken 6 at a time is 1192052400 exactly.\n20 things taken 5 at a time is 15504 exactly.\n18 things taken 6 at a time is 18564 exactly.\n\n\n```\n#include \u003ciostream\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdlib.h\u003e\nusing namespace std;\n\nint main()\n{\n    int n,m;\n    while(~scanf(\"%d%d\",&n,&m)&&(n||m)){\n        int s[200];\n        bool vis[200];\n        memset(vis,0,sizeof(vis));\n        int x,y;\n        if(n-m\u003cm){\n            x=n-m;/**x为小的那个数**/\n            y=m;\n        }\n        else{\n            x=m;\n            y=n-m;\n        }\n        int sum=1;\n        for(int i=y+1;i\u003c=n;i++){\n            sum*=i;\n            for(int j=1;j\u003c=x;j++){\n                if(sum%j==0&&vis[j]==0){\n                    vis[j]=1;\n                    sum=sum/j;\n                }\n            }\n        }\n        printf(\"%d things taken %d at a time is %d exactly.\\n\",n,m,sum);\n    }\n    return 0;\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-641-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-10\2015-10-26-POJ 1306  Combinations.markdown [pool-641-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《POJ 1306  Combinations》成功 [pool-641-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-631] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50925035 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-642] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-632] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50925035 [pool-642-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50925035,"title":"HDOJ 1285 确定比赛名次(拓扑排序)","create_at":"\/Date(1458291522000)\/","create":"2016-03-18 04:58:42","view_count":365,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":1,"bury":0,"description":"Problem Description \n有N个比赛队（1\u003c=N\u003c=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。Input \n输入有若干组，每组中的第一行为二个数N（1\u003c=N\u003c=500），M","url":"http://blog.csdn.net/qq_26525215/article/details/50925035","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 排序相关","tags":"acm,拓扑排序","content":"\u003cp\u003e\u003cstrong\u003eProblem Description\u003c/strong\u003e \u003cbr\u003e\n有N个比赛队（1&lt;=N&lt;=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInput\u003c/strong\u003e \u003cbr\u003e\n输入有若干组，每组中的第一行为二个数N（1&lt;=N&lt;=500），M；其中N表示队伍的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即P1队赢了P2队。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutput\u003c/strong\u003e \u003cbr\u003e\n给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。\u003c/p\u003e\n\n\u003cp\u003e其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSample Input\u003c/strong\u003e \u003cbr\u003e\n4 3 \u003cbr\u003e\n1 2 \u003cbr\u003e\n2 3 \u003cbr\u003e\n4 3\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSample Output\u003c/strong\u003e \u003cbr\u003e\n1 2 4 3\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e拓扑排序介绍：\u003c/strong\u003e \u003cbr\u003e\n拓扑排序(Topological Order)是指，将一个有向无环图(Directed Acyclic Graph简称DAG)进行排序进而得到一个有序的线性序列。\u003c/p\u003e\n\n\u003cp\u003e这样说，可能理解起来比较抽象。下面通过简单的例子进行说明！  \u003cbr\u003e\n例如，一个项目包括A、B、C、D四个子部分来完成，并且A依赖于B和D，C依赖于D。现在要制定一个计划，写出A、B、C、D的执行顺序。这时，就可以利用到拓扑排序，它就是用来确定事物发生的顺序的。\u003c/p\u003e\n\n\u003cp\u003e在拓扑排序中，如果存在一条从顶点A到顶点B的路径，那么在排序结果中B出现在A的后面。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e拓扑排序（适用于有向无环图）：\u003c/strong\u003e \u003cbr\u003e\n1）选一个入度为0的点p输出； \u003cbr\u003e\n2）从图中删除p点 \u003cbr\u003e\n3）将p全部后继点的入度-1 \u003cbr\u003e\n4）重复1-3，直到全部点都输出\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e Main {\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(sc.hasNext()){\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n = sc.nextInt();\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e m = sc.nextInt();\n            \u003cspan class=\"hljs-comment\"\u003e//n个队伍，m行数据\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e map[][] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e505\u003c/span\u003e][\u003cspan class=\"hljs-number\"\u003e505\u003c/span\u003e];\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e times[] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e505\u003c/span\u003e];\n\n            \u003cspan class=\"hljs-comment\"\u003e//初始化\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;n;i++)\n                times[i]=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;m;i++){\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;j&lt;m;j++){\n                    map[i][j]=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n                }\n            }\n\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a;\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e b;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;m;i++){\n                a = sc.nextInt();\n                b = sc.nextInt();\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(map[a-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e][b-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\u003cspan class=\"hljs-comment\"\u003e//避免重复边多次加1\u003c/span\u003e\n                    map[a-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e][b-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n                    times[b-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]++;\n                }\n\n            }\n\n\u003cspan class=\"hljs-comment\"\u003e//          for(int i=0;i&lt;n;i++){\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//              for(int j=0;j&lt;n;j++){\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//                  System.out.print(map[i][j]+\" \");\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//              }\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//              System.out.println(\"----------\");\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          }\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          \u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          for(int i=0;i&lt;n;i++){\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//              System.out.print(times[i]+\" \");\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          }\u003c/span\u003e\n\n            \u003cspan class=\"hljs-comment\"\u003e//拓扑排序\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e count =\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e x=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(count&lt;n){\u003cspan class=\"hljs-comment\"\u003e//表示入栈的n个元素全部排完了\u003c/span\u003e\n\n                \u003cspan class=\"hljs-comment\"\u003e//找一个入度为0的点  x\u003c/span\u003e\n                x=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(times[x]!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                    x++;\n                }\n                times[x]=-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n                    \u003cspan class=\"hljs-comment\"\u003e//避免再次统计，改0为-1\u003c/span\u003e\n                    \u003cspan class=\"hljs-comment\"\u003e//System.out.print(x+\" \");\u003c/span\u003e\n\n                \u003cspan class=\"hljs-comment\"\u003e//将x的后继节点入度减1\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;n;i++){\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(map[x][i]==\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n                        times[i]--;\n                    }\n                }\n                count++;\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(count&lt;n){\n                    System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.print((x+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)+\u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e);\n                }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\u003cspan class=\"hljs-comment\"\u003e//最后一个输出后面没有空格\u003c/span\u003e\n                    System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.print(x+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\n                }\n            }\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println();\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"**Problem Description**\n有N个比赛队（1\u003c=N\u003c=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。\n\n \n\n**Input**\n输入有若干组，每组中的第一行为二个数N（1\u003c=N\u003c=500），M；其中N表示队伍的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即P1队赢了P2队。\n\n \n\n**Output**\n给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。\n\n其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。\n\n \n\n**Sample Input**\n4 3\n1 2\n2 3\n4 3\n \n\n**Sample Output**\n1 2 4 3\n\n\n**拓扑排序介绍：**\n拓扑排序(Topological Order)是指，将一个有向无环图(Directed Acyclic Graph简称DAG)进行排序进而得到一个有序的线性序列。\n\n这样说，可能理解起来比较抽象。下面通过简单的例子进行说明！ \n例如，一个项目包括A、B、C、D四个子部分来完成，并且A依赖于B和D，C依赖于D。现在要制定一个计划，写出A、B、C、D的执行顺序。这时，就可以利用到拓扑排序，它就是用来确定事物发生的顺序的。\n\n在拓扑排序中，如果存在一条从顶点A到顶点B的路径，那么在排序结果中B出现在A的后面。\n\n**拓扑排序（适用于有向无环图）：**\n1）选一个入度为0的点p输出；\n2）从图中删除p点\n3）将p全部后继点的入度-1\n4）重复1-3，直到全部点都输出\n\n```\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint n = sc.nextInt();\n\t\t\tint m = sc.nextInt();\n\t\t\t//n个队伍，m行数据\n\t\t\tint map[][] = new int[505][505];\n\t\t\tint times[] = new int[505];\n\t\t\t\n\t\t\t//初始化\n\t\t\tfor(int i=0;i\u003cn;i++)\n\t\t\t\ttimes[i]=0;\n\t\t\tfor(int i=0;i\u003cm;i++){\n\t\t\t\tfor(int j=0;j\u003cm;j++){\n\t\t\t\t\tmap[i][j]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\tint a;\n\t\t\tint b;\n\t\t\tfor(int i=0;i\u003cm;i++){\n\t\t\t\ta = sc.nextInt();\n\t\t\t\tb = sc.nextInt();\n\t\t\t\tif(map[a-1][b-1]==0){//避免重复边多次加1\n\t\t\t\t\tmap[a-1][b-1]=1;\n\t\t\t\t\ttimes[b-1]++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n//\t\t\tfor(int i=0;i\u003cn;i++){\n//\t\t\t\tfor(int j=0;j\u003cn;j++){\n//\t\t\t\t\tSystem.out.print(map[i][j]+\" \");\n//\t\t\t\t}\n//\t\t\t\tSystem.out.println(\"----------\");\n//\t\t\t}\n//\t\t\t\n//\t\t\tfor(int i=0;i\u003cn;i++){\n//\t\t\t\tSystem.out.print(times[i]+\" \");\n//\t\t\t}\n\t\t\t\n\t\t\t//拓扑排序\n\t\t\tint count =0;\n\t\t\tint x=0;\n\t\t\twhile(count\u003cn){//表示入栈的n个元素全部排完了\n\t\t\t\t\n\t\t\t\t//找一个入度为0的点  x\n\t\t\t\tx=0;\n\t\t\t\twhile(times[x]!=0){\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t\ttimes[x]=-1;\n\t\t\t\t\t//避免再次统计，改0为-1\n\t\t\t\t\t//System.out.print(x+\" \");\n\t\t\t\t\n\t\t\t\t//将x的后继节点入度减1\n\t\t\t\tfor(int i=0;i\u003cn;i++){\n\t\t\t\t\tif(map[x][i]==1){\n\t\t\t\t\t\ttimes[i]--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t\tif(count\u003cn){\n\t\t\t\t\tSystem.out.print((x+1)+\" \");\n\t\t\t\t}else{//最后一个输出后面没有空格\n\t\t\t\t\tSystem.out.print(x+1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-642-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-03\2016-03-18-HDOJ 1285 确定比赛名次(拓扑排序).markdown [pool-642-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 1285 确定比赛名次(拓扑排序)》成功 [pool-642-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50576306 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-643] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-633] [chx]
[INFO] 2017-07-28 12:29:18 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50576306 [pool-643-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50576306,"title":"HDOJ 2045 不容易系列之(3)—— LELE的RPG难题","create_at":"\/Date(1453651990000)\/","create":"2016-01-25 12:13:10","view_count":381,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \n人称“AC女之杀手”的超级偶像LELE最近忽然玩起了深沉，这可急坏了众多“Cole”（LELE的粉丝,即”可乐”）,经过多方打探，某资深Cole终于知道了原因，原来，LELE最近研究起了著名的RPG难题:有排成一行的ｎ个方格，用红(Red)、粉(Pink)、绿(Green)三色涂每个格子，每格涂一色，要求任何相邻的方格不能同色，且首尾两格也不同色．求全部的满","url":"http://blog.csdn.net/qq_26525215/article/details/50576306","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 模拟/推导/打表","tags":"","content":"\u003cp\u003eProblem Description \u003cbr\u003e\n人称“AC女之杀手”的超级偶像LELE最近忽然玩起了深沉，这可急坏了众多“Cole”（LELE的粉丝,即”可乐”）,经过多方打探，某资深Cole终于知道了原因，原来，LELE最近研究起了著名的RPG难题:\u003c/p\u003e\n\n\u003cp\u003e有排成一行的ｎ个方格，用红(Red)、粉(Pink)、绿(Green)三色涂每个格子，每格涂一色，要求任何相邻的方格不能同色，且首尾两格也不同色．求全部的满足要求的涂法.\u003c/p\u003e\n\n\u003cp\u003e以上就是著名的RPG难题.\u003c/p\u003e\n\n\u003cp\u003e如果你是Cole,我想你一定会想尽办法帮助LELE解决这个问题的;如果不是,看在众多漂亮的痛不欲生的Cole女的面子上,你也不会袖手旁观吧?\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\n输入数据包含多个测试实例,每个测试实例占一行,由一个整数N组成，(0&lt; n &lt; =50)。\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n对于每个测试实例，请输出全部的满足要求的涂法，每个实例的输出占一行。\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n1 \u003cbr\u003e\n2\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n3 \u003cbr\u003e\n6\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e分析：假设有n个方格时涂法有f（n）种，在已有n-1个方格的情况下再增添第n个方格使得第n-1个方格由原来的最后一个方格成为倒数第二个方格，这样它可以选择的颜色种类有变化。起初方格n-1作为最后一个方格，它不能与方格1和方格n-2同色，此时，（1）当方格n-2与方格1同色时，n-1只需与n-2不同色即满足条件，注意此时方格n-1与方格1必不同色，因而加上第n个方格时，第n个方格的颜色已经确定了（作为最后一个方格，n只能涂与方格n-1、1不同的第三种色），既然如此，增加第n个方格对于总的涂法总数就没影响。（2）当方格n-2与方格1不同色时，起初方格n-1作为最后一个方格，由于要跟方格1和n-2不同，它可涂的颜色只有一种，而当加上方格n时，它就不需要和方格1不同，于是方格n-1可选的颜色种数+1，总的涂法总数加f（n-2），增加的这f（n-2）种涂法中，方格n-1均与方格1同色，此时方格n有两种颜色可选（因为只要跟方格n-1不一样就同时与方格1不一样），故增加的涂法为2*f（n-2），即f（n）比f（n-1）大2*f（n-2），递推关系：f(n)=f(n-1)+2*f(n-2),n&gt;=4;这里n&gt;=4是因为此时方格n-2不会是方格1\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e Main {\n\n    \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e[] fan = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e51\u003c/span\u003e];\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        Long();\n\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n\n\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(sc.hasNext()){\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n = sc.nextInt();\n\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(fan[n]);\n\n\n        }\n\n    }\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLong\u003c/span\u003e() {\n        fan[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]=\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\n        fan[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e]=\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e;\n        fan[\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]=\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e;i&lt;fan.length;i++){\n            fan[i]=fan[i-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]+\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e*fan[i-\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\n        }\n\n\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\n人称“AC女之杀手”的超级偶像LELE最近忽然玩起了深沉，这可急坏了众多“Cole”（LELE的粉丝,即\"可乐\"）,经过多方打探，某资深Cole终于知道了原因，原来，LELE最近研究起了著名的RPG难题:\n\n有排成一行的ｎ个方格，用红(Red)、粉(Pink)、绿(Green)三色涂每个格子，每格涂一色，要求任何相邻的方格不能同色，且首尾两格也不同色．求全部的满足要求的涂法.\n\n以上就是著名的RPG难题.\n\n如果你是Cole,我想你一定会想尽办法帮助LELE解决这个问题的;如果不是,看在众多漂亮的痛不欲生的Cole女的面子上,你也不会袖手旁观吧?\n\n\n \n\nInput\n输入数据包含多个测试实例,每个测试实例占一行,由一个整数N组成，(0\u003c n \u003c =50)。\n\n \n\nOutput\n对于每个测试实例，请输出全部的满足要求的涂法，每个实例的输出占一行。\n\n \n\nSample Input\n1\n2\n \n\nSample Output\n3\n6\n\n\n**分析：假设有n个方格时涂法有f（n）种，在已有n-1个方格的情况下再增添第n个方格使得第n-1个方格由原来的最后一个方格成为倒数第二个方格，这样它可以选择的颜色种类有变化。起初方格n-1作为最后一个方格，它不能与方格1和方格n-2同色，此时，（1）当方格n-2与方格1同色时，n-1只需与n-2不同色即满足条件，注意此时方格n-1与方格1必不同色，因而加上第n个方格时，第n个方格的颜色已经确定了（作为最后一个方格，n只能涂与方格n-1、1不同的第三种色），既然如此，增加第n个方格对于总的涂法总数就没影响。（2）当方格n-2与方格1不同色时，起初方格n-1作为最后一个方格，由于要跟方格1和n-2不同，它可涂的颜色只有一种，而当加上方格n时，它就不需要和方格1不同，于是方格n-1可选的颜色种数+1，总的涂法总数加f（n-2），增加的这f（n-2）种涂法中，方格n-1均与方格1同色，此时方格n有两种颜色可选（因为只要跟方格n-1不一样就同时与方格1不一样），故增加的涂法为2*f（n-2），即f（n）比f（n-1）大2*f（n-2），递推关系：f(n)=f(n-1)+2*f(n-2),n\u003e=4;这里n\u003e=4是因为此时方格n-2不会是方格1**\n\n\n```\nimport java.util.Scanner;\n\npublic class Main {\n    \n    static long[] fan = new long[51];\n    public static void main(String[] args) {\n        Long();\n        \n        Scanner sc = new Scanner(System.in);\n        \n        \n        while(sc.hasNext()){\n            int n = sc.nextInt();\n            \n            System.out.println(fan[n]);\n            \n            \n        }\n        \n    }\n    private static void Long() {\n        fan[1]=3;\n        fan[2]=6;\n        fan[3]=6;\n        for(int i=4;i\u003cfan.length;i++){\n            fan[i]=fan[i-1]+2*fan[i-2];\n        }\n        \n        \n    }\n\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-643-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-01\2016-01-25-HDOJ 2045 不容易系列之(3)—— LELE的RPG难题.markdown [pool-643-thread-1] [chx]
[INFO] 2017-07-28 12:29:18 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 2045 不容易系列之(3)—— LELE的RPG难题》成功 [pool-643-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50811468 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:19 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-644] [chx]
[INFO] 2017-07-28 12:29:19 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-634] [chx]
[INFO] 2017-07-28 12:29:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50811468 [pool-644-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50811468,"title":"排序算法：冒泡排序","create_at":"\/Date(1457192265000)\/","create":"2016-03-05 11:37:45","view_count":408,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":1,"bury":0,"description":"冒泡排序算法的运作如下：（从后往前）​1.比较相邻的元素。如果第一个比第二个大，就交换他们两个。2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。3.针对所有的元素重复以上的步骤，除了最后一个。4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。若记录序列的初始状态为”正序”，则冒泡排序过程只需进行一趟排序，在排序过程中只需进","url":"http://blog.csdn.net/qq_26525215/article/details/50811468","categories":"----- 排序相关,❺ 算法及基础题","tags":"","content":"\u003cp\u003e冒泡排序算法的运作如下：（从后往前）\u003c/p\u003e\n\n\u003cp\u003e​1.比较相邻的元素。如果第一个比第二个大，就交换他们两个。\u003c/p\u003e\n\n\u003cp\u003e2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\u003c/p\u003e\n\n\u003cp\u003e3.针对所有的元素重复以上的步骤，除了最后一个。\u003c/p\u003e\n\n\u003cp\u003e4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\u003c/p\u003e\n\n\u003cp\u003e若记录序列的初始状态为”正序”，则冒泡排序过程只需进行一趟排序，在排序过程中只需进行n-1次比较，且不移动记录；反之，若记录序列的初始状态为”逆序”，则需进行n(n-1）/2次比较和记录移动。因此冒泡排序总的时间复杂度为O(n*n)。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003epackage cn.hncu;\n\nimport java.sql.Timestamp;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e bubbleSort {\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e[] a = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e];\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;a.length;i++){\n            a[i] = (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e)(Math.random()*a.length);\n        }\n        \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e startTime = System.currentTimeMillis();\u003cspan class=\"hljs-comment\"\u003e//返回以毫秒为单位的当前时间。\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e//1 冒泡排序\u003c/span\u003e\n        bubbleSort1(a);\n        \u003cspan class=\"hljs-comment\"\u003e//1.1 优化后的冒泡排序\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e//bubbleSort2(a);\u003c/span\u003e\n\n        print(a);\n        \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e endTime = System.currentTimeMillis();\u003cspan class=\"hljs-comment\"\u003e//返回以毫秒为单位的当前时间。\u003c/span\u003e\n        System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"hljs-string\"\u003e\"程序运行时间: \"\u003c/span\u003e+(endTime-startTime)+\u003cspan class=\"hljs-string\"\u003e\"ms\"\u003c/span\u003e);\n\n\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebubbleSort2\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e[] a) {\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;a.length-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;i++){\n            boolean flag = \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;j&lt;a.length-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e-i;j++){\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a[j]&gt;a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]){\n                    a[j]  =a[j]^a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n                    a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]=a[j]^a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n                    a[j]  =a[j]^a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n                    flag = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n                }\n            }\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(!flag){\n                \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n            }\n        }\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebubbleSort1\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a[]) {\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;a.length-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;i++){\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;j&lt;a.length-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e-i;j++){\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a[j]&gt;a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]){\n                    a[j]  =a[j]^a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n                    a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]=a[j]^a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n                    a[j]  =a[j]^a[j+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n                }\n            }\n        }\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eprint\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e[] a) {\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;a.length;i++){\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.print(a[i]+\u003cspan class=\"hljs-string\"\u003e\" \"\u003c/span\u003e);\n        }\n        System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println();\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e冒泡排序法的优化方法： \u003cbr\u003e\n在排序过程中，执行完最后的排序后，虽然数据已全部排序完备，但程序无法判断是否完成排序，为了解决这一不足，可设置一个标志位flag，将其初始值设置为非0，表示被排序的表是一个无序的表，每一次排序开始前设置flag值为0，在进行数据交换时，修改flag为非0。在新一轮排序开始时，检查此标志，若此标志为0，表示上一次没有做过交换数据，则结束排序；否则进行排序；\u003c/p\u003e","markdowncontent":"冒泡排序算法的运作如下：（从后往前）\n\n​1.比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n\n2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n\n3.针对所有的元素重复以上的步骤，除了最后一个。\n\n4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n若记录序列的初始状态为\"正序\"，则冒泡排序过程只需进行一趟排序，在排序过程中只需进行n-1次比较，且不移动记录；反之，若记录序列的初始状态为\"逆序\"，则需进行n(n-1）/2次比较和记录移动。因此冒泡排序总的时间复杂度为O(n*n)。\n\n```\npackage cn.hncu;\n\nimport java.sql.Timestamp;\n\npublic class bubbleSort {\n\tpublic static void main(String[] args) {\n\t\tint[] a = new int[10000];\n\t\tfor(int i=0;i\u003ca.length;i++){\n\t\t\ta[i] = (int)(Math.random()*a.length);\n\t\t}\n\t\tlong startTime = System.currentTimeMillis();//返回以毫秒为单位的当前时间。\n\t\t//1 冒泡排序\n\t\tbubbleSort1(a);\n\t\t//1.1 优化后的冒泡排序\n\t\t//bubbleSort2(a);\n\t\t\n\t\tprint(a);\n\t\tlong endTime = System.currentTimeMillis();//返回以毫秒为单位的当前时间。\n\t\tSystem.out.println(\"程序运行时间: \"+(endTime-startTime)+\"ms\");\n\t\t\n\t\t\n\t}\n\n\tprivate static void bubbleSort2(int[] a) {\n\t\tfor(int i=0;i\u003ca.length-1;i++){\n\t\t\tboolean flag = false;\n\t\t\tfor(int j=0;j\u003ca.length-1-i;j++){\n\t\t\t\tif(a[j]\u003ea[j+1]){\n\t\t\t\t\ta[j]  =a[j]^a[j+1];\n\t\t\t\t\ta[j+1]=a[j]^a[j+1];\n\t\t\t\t\ta[j]  =a[j]^a[j+1];\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!flag){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static void bubbleSort1(int a[]) {\n\t\tfor(int i=0;i\u003ca.length-1;i++){\n\t\t\tfor(int j=0;j\u003ca.length-1-i;j++){\n\t\t\t\tif(a[j]\u003ea[j+1]){\n\t\t\t\t\ta[j]  =a[j]^a[j+1];\n\t\t\t\t\ta[j+1]=a[j]^a[j+1];\n\t\t\t\t\ta[j]  =a[j]^a[j+1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static void print(int[] a) {\n\t\tfor(int i=0;i\u003ca.length;i++){\n\t\t\tSystem.out.print(a[i]+\" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n}\n\n```\n\n冒泡排序法的优化方法：\n在排序过程中，执行完最后的排序后，虽然数据已全部排序完备，但程序无法判断是否完成排序，为了解决这一不足，可设置一个标志位flag，将其初始值设置为非0，表示被排序的表是一个无序的表，每一次排序开始前设置flag值为0，在进行数据交换时，修改flag为非0。在新一轮排序开始时，检查此标志，若此标志为0，表示上一次没有做过交换数据，则结束排序；否则进行排序；\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-644-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-03\2016-03-05-排序算法：冒泡排序.markdown [pool-644-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《排序算法：冒泡排序》成功 [pool-644-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:60600311 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:19 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-645] [chx]
[INFO] 2017-07-28 12:29:19 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-635] [chx]
[INFO] 2017-07-28 12:29:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=60600311 [pool-645-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":60600311,"title":"【Web】Java生成中文GIF动态验证码-集成SpringMVC","create_at":"\/Date(1488863859000)\/","create":"2017-03-07 01:17:39","view_count":1473,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":3,"bury":0,"description":"转载请注明出处：http://blog.csdn.net/qq_26525215\n本文源自【大学之旅_谙忆的博客】\n说明GIF验证码相对于JPG图片验证码来说，要更难破解一些，加大了破解的代价。 \n从昨天到现在，写了一个小小的GIF验证码项目(中文成语)。 \n当然，你可以自己修改成字母数字的。我只是单纯的觉得中文验证码的破解代价更高一点~我在这里生成GIF图片的类，用到了国外牛人的三个类，也就是:","url":"http://blog.csdn.net/qq_26525215/article/details/60600311","categories":"❷ Java大学之行,----- ④、Web学习之旅","tags":"java,验证码,spring mvc,web","content":"\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://blog.csdn.net/qq_26525215\"\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://blog.csdn.net/qq_26525215\" target=\"_blank\"\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003ch1 id=\"说明\"\u003e说明\u003c/h1\u003e\n\n\u003cp\u003eGIF验证码相对于JPG图片验证码来说，要更难破解一些，加大了破解的代价。 \u003cbr\u003e\n从昨天到现在，写了一个小小的GIF验证码项目(中文成语)。 \u003cbr\u003e\n当然，你可以自己修改成字母数字的。我只是单纯的觉得中文验证码的破解代价更高一点~\u003c/p\u003e\n\n\u003cp\u003e我在这里生成GIF图片的类，用到了国外牛人的三个类，也就是: \u003cbr\u003e\nAnimatedGifEncoder \u003cbr\u003e\nLZWEncoder \u003cbr\u003e\n和NeuQuant，这三个类。\u003c/p\u003e\n\n\u003cp\u003e没办法，谁让自己还没有那个本事写出这样的类呢，只能用别人的，不过挺好用飞，大家可以搜索一下这3个类，一下就能搜出源码的。 \u003cbr\u003e\n在这里，我就不贴出这三个类的源码了，需要的，可以在本文最后的项目链接拿整个项目，其中有所有源代码。\u003c/p\u003e\n\n\u003cp\u003e本来一开始是写的字母和数字生成的GIF验证码，后来还是改成了汉字成语验证码。\u003c/p\u003e\n\n\u003cp\u003e在这里，我并没有用数据库来存储成语，因为重点不在哪里，所以就只是建立了一个静态块来先写入成语。 \u003cbr\u003e\n(如果是实际开发，我可能会这样做： \u003cbr\u003e\n以便于管理员在后台可以添加成语到验证码成语库，以及可以刷新验证码到成语库中，所以，可以在一个请求方法中操作成语。 \u003cbr\u003e\n如果用来Redis，基本上也是一样，实现同步就行。)\u003c/p\u003e\n\n\n\n\u003ch1 id=\"gif验证码类\"\u003eGIF验证码类\u003c/h1\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.utils;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.*;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.image.BufferedImage;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.OutputStream;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.ArrayList;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.List;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2017/3/6.\n * Time: 下午 8:23.\n * Explain:Gif验证码类\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGifCaptcha\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Font font = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Font(\u003cspan class=\"hljs-string\"\u003e\"宋体\"\u003c/span\u003e, Font.BOLD, \u003cspan class=\"hljs-number\"\u003e20\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e// 字体\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e width = \u003cspan class=\"hljs-number\"\u003e160\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e// 验证码显示长度\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e height = \u003cspan class=\"hljs-number\"\u003e40\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e// 验证码显示高度\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String word = \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e// 当前的字符串\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e delay = \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e// 帧延迟 (默认100)\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e quality = \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//量化器取样间隔 - 默认是10ms\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e repeat = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e// 帧循环次数\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e minColor =\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//设置随机颜色时，最小的取色范围\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e maxColor = \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//设置随机颜色时，最大的取色范围\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e right = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//设置字符最右边的相对位置---相对原始位置 ，默认为0\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e java.util.List&lt;String&gt; words = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList&lt;String&gt;();\u003cspan class=\"hljs-comment\"\u003e// 所有成语\u003c/span\u003e\n\n    \u003cspan class=\"hljs-comment\"\u003e//这里应该去数据库中读取成语，然后存储在内存中\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e//在实际开发中，应该是可以在后台中添加成语，以及刷新成语到内存中去！利用访问某个方法来实现\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e {\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"一唱一和\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"一呼百应\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"一干二净\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"一举两得\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"一落千丈\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"两面三刀\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"六神无主\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"千辛万苦\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"万无一失\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"拔刀相助\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"过时黄花\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"地动山摇\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"不可多得\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"沧海一粟\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"水泄不通\"\u003c/span\u003e);\n        words.add(\u003cspan class=\"hljs-string\"\u003e\"不可计数\"\u003c/span\u003e);\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 空参构造函数\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGifCaptcha\u003c/span\u003e() {\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 可以设置验证码宽度，高度的构造函数\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e width -验证码宽度\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e height -验证码高度\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGifCaptcha\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e width, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e height) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.width = width;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.height = height;\n    }\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     *\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e width -验证码宽度\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e height -验证码高度\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e font -字体\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGifCaptcha\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e width, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e height,  Font font) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e(width, height);\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.font = font;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e width -验证码宽度\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e height -验证码高度\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e font -字体\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e delay -帧延迟\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eGifCaptcha\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e width, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e height, Font font,\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e delay) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e(width, height,font);\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.delay = delay;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Font \u003cspan class=\"hljs-title\"\u003egetFont\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e font;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 设置字体\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e font\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetFont\u003c/span\u003e(Font font) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.font = font;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetWidth\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e width;\n    }\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 设置验证码宽度\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e width\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetWidth\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e width) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.width = width;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetHeight\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e height;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 设置验证码高度\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e height\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetHeight\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e height) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.height = height;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWord\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e word;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 设置验证码字符\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e chars\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetWord\u003c/span\u003e(String chars) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.word = chars;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetDelay\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e delay;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 设置每一帧之间的延迟时间,或改变它的后续帧(适用于最后一帧添加)。\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e delay 单位是毫秒\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetDelay\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e delay) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.delay = delay;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetQuality\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e quality;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 设置图像的颜色量化(转换质量 由GIF规范允许的最大256种颜色)。\n     * 低的值(最小值= 1)产生更好的颜色,但处理显著缓慢。\n     * 10是默认,并产生良好的颜色而且有以合理的速度。\n     * 值更大(大于20)不产生显著的改善速度\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e quality 大于1\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetQuality\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e quality) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(quality&lt;\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n            quality=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.quality = quality;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRepeat\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e repeat;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 设置GIF帧应该播放的次数。\n     * 默认是 0; 0意味着无限循环。\n     * 必须在添加的第一个图像之前被调用。\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e repeat 必须大于等于0\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetRepeat\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e repeat) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (repeat&gt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.repeat = repeat;\n        }\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRight\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e right;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetRight\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e right) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.right = right;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetMaxColor\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e maxColor;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetMaxColor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e maxColor) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.maxColor = maxColor;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetMinColor\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e minColor;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetMinColor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e minColor) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.minColor = minColor;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 给定一个输出流 输入图片\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e os\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eout\u003c/span\u003e(OutputStream os) {\n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n            AnimatedGifEncoder gifEncoder = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AnimatedGifEncoder();\u003cspan class=\"hljs-comment\"\u003e// gif编码类\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//生成字符\u003c/span\u003e\n            gifEncoder.start(os);\n            gifEncoder.setQuality(quality);\u003cspan class=\"hljs-comment\"\u003e//设置量化器取样间隔\u003c/span\u003e\n            gifEncoder.setDelay(delay);\u003cspan class=\"hljs-comment\"\u003e//设置帧延迟\u003c/span\u003e\n            gifEncoder.setRepeat(repeat);\u003cspan class=\"hljs-comment\"\u003e//帧循环次数\u003c/span\u003e\n            BufferedImage frame;\n            \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e[] rands = createWordChar();\n            Color fontcolor[] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Color[word.length()];\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; word.length(); i++) {\n                fontcolor[i] = getRandomColor(minColor,maxColor);\n            }\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; word.length(); i++) {\n                frame = graphicsImage(fontcolor, rands, i);\n                gifEncoder.addFrame(frame);\n                frame.flush();\n            }\n            gifEncoder.finish();\n        } \u003cspan class=\"hljs-keyword\"\u003efinally\u003c/span\u003e {\n            \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n                os.close();\n            } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\n                \u003cspan class=\"hljs-comment\"\u003e// TODO 异常处理\u003c/span\u003e\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 画随机码图\n     *\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e fontcolor 随机字体颜色\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e strs      字符数组\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e flag      透明度使用\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e BufferedImage\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e BufferedImage \u003cspan class=\"hljs-title\"\u003egraphicsImage\u003c/span\u003e(Color[] fontcolor, \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e[] strs, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e flag) {\n        BufferedImage image = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        \u003cspan class=\"hljs-comment\"\u003e//或得图形上下文\u003c/span\u003e\n        Graphics2D g2d=image.createGraphics();\n        \u003cspan class=\"hljs-comment\"\u003e//Graphics2D g2d = (Graphics2D) image.getGraphics();\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e//利用指定颜色填充背景\u003c/span\u003e\n        g2d.setColor(Color.WHITE);\n        g2d.fillRect(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, width, height);\n        AlphaComposite ac;\n        \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e y = (height &gt;&gt; \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) + (font.getSize() &gt;&gt; \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) ;\u003cspan class=\"hljs-comment\"\u003e// 字符的y坐标\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e m = (width-(word.length()*font.getSize()))/word.length();\n        \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e x = m/\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//字符的x坐标\u003c/span\u003e\n        g2d.setFont(font);\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; word.length(); i++) {\n            ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getPellucidity(flag, i));\n            g2d.setComposite(ac);\n            g2d.setColor(fontcolor[i]);\n            g2d.drawOval(Randoms.num(width), Randoms.num(height), Randoms.num(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e), \u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e + Randoms.num(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e));\u003cspan class=\"hljs-comment\"\u003e//绘制椭圆边框\u003c/span\u003e\n            g2d.drawString(strs[i] + \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e,x+(font.getSize()+m)*i+right,y);\n        }\n        g2d.dispose();\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e image;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 获取透明度,从0到1,自动计算步长\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e float 透明度\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetPellucidity\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j) {\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e num = i + j;\n        \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e r = (\u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e) \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e / word.length(), s = (word.length() + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) * r;\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e num &gt; word.length() ? (num * r - s) : num * r;\n    }\n\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 生成随机字符数组\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e 字符数组\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e[] \u003cspan class=\"hljs-title\"\u003ecreateWordChar\u003c/span\u003e() {\n        word = words.get(Randoms.num(words.size()));\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e word.toCharArray();\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 通过给定范围获得随机的颜色\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e Color 获得随机的颜色\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e Color \u003cspan class=\"hljs-title\"\u003egetRandomColor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e min, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e max) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (min &gt; \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e) {\n            min = \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (max &gt; \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e) {\n            max = \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(min&lt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            min=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(max&lt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            max=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(min&gt;max){\n            min=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            max=\u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Color(min + Randoms.num(max - min), min + Randoms.num(max - min), min + Randoms.num(max - min));\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e注释没写很多~有点懒~\u003c/p\u003e\n\n\u003ch1 id=\"请求gif验证码的controller类\"\u003e请求GIF验证码的Controller类\u003c/h1\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.controller;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e cn.hncu.utils.GifCaptcha;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.slf4j.Logger;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.slf4j.LoggerFactory;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.stereotype.Controller;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.web.bind.annotation.RequestMapping;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.web.bind.annotation.RequestMethod;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.servlet.http.HttpServletRequest;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.servlet.http.HttpServletResponse;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.servlet.http.HttpSession;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.awt.*;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2017/3/6.\n * Time: 下午 8:26.\n * Explain:演示GIF验证码的控制器\n */\u003c/span\u003e\n\u003cspan class=\"hljs-annotation\"\u003e@Controller\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCaptchaController\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Logger logger = LoggerFactory.getLogger(CaptchaController.class);\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 获取Gif验证码\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e response\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-annotation\"\u003e@RequestMapping\u003c/span\u003e(value = \u003cspan class=\"hljs-string\"\u003e\"gifCaptcha\"\u003c/span\u003e,method= RequestMethod.GET)\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetGifCaptcha\u003c/span\u003e(HttpServletResponse response,HttpServletRequest request){\n        \u003cspan class=\"hljs-comment\"\u003e//告诉客户端，输出的格式\u003c/span\u003e\n        response.setHeader(\u003cspan class=\"hljs-string\"\u003e\"Pragma\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"No-cache\"\u003c/span\u003e);\n        response.setHeader(\u003cspan class=\"hljs-string\"\u003e\"Cache-Control\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"no-cache\"\u003c/span\u003e);\n        response.setDateHeader(\u003cspan class=\"hljs-string\"\u003e\"Expires\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n        response.setContentType(\u003cspan class=\"hljs-string\"\u003e\"image/gif\"\u003c/span\u003e);\n        GifCaptcha gifCaptcha =  \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e GifCaptcha(\u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Font(\u003cspan class=\"hljs-string\"\u003e\"宋体\"\u003c/span\u003e, Font.BOLD, \u003cspan class=\"hljs-number\"\u003e40\u003c/span\u003e),\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n            gifCaptcha.out(response.getOutputStream());\n            logger.info(\u003cspan class=\"hljs-string\"\u003e\"获取验证码！验证码字符为：\"\u003c/span\u003e+gifCaptcha.getWord());\n            HttpSession session = request.getSession(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\n            \u003cspan class=\"hljs-comment\"\u003e//存入Session\u003c/span\u003e\n            session.setAttribute(\u003cspan class=\"hljs-string\"\u003e\"captchaWord\"\u003c/span\u003e,gifCaptcha.getWord());\n        } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \u003cspan class=\"hljs-annotation\"\u003e@RequestMapping\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e)\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003eindex\u003c/span\u003e()    {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch1 id=\"jsp页面\"\u003eJSP页面\u003c/h1\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs xml\"\u003e\u003cspan class=\"vbscript\"\u003e&lt;%--\n  Created by IntelliJ IDEA.\n  User: 陈浩翔\n  \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e: \u003cspan class=\"hljs-number\"\u003e2017\u003c/span\u003e/\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e/\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e\n  \u003cspan class=\"hljs-built_in\"\u003eTime\u003c/span\u003e: 下午 \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e24\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003eTo\u003c/span\u003e change this template use File | Settings | File Templates.\n--%&gt;\u003c/span\u003e\n\u003cspan class=\"vbscript\"\u003e&lt;%@ page contentType=\u003cspan class=\"hljs-string\"\u003e\"text/html;charset=UTF-8\"\u003c/span\u003e language=\u003cspan class=\"hljs-string\"\u003e\"java\"\u003c/span\u003e %&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003e演示动态验证码\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e path = \u003cspan class=\"hljs-string\"\u003e\"${pageScope.basePath}\"\u003c/span\u003e;\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003echangImg\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e {\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e img = document.getElementById(\u003cspan class=\"hljs-string\"\u003e\"servletImg\"\u003c/span\u003e);\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e d = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e time = d.getTime();\u003cspan class=\"hljs-comment\"\u003e//如果没有这个,下面的img.src = path + \"gifCaptcha?\" + time;不会起作用，因为浏览器的缓存技术，图片可能并不会刷新\u003c/span\u003e\n\n            img.src = \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//解决火狐下验证码刷不出的问题\u003c/span\u003e\n            img.src = path + \u003cspan class=\"hljs-string\"\u003e\"gifCaptcha?\"\u003c/span\u003e + time;\n            \u003cspan class=\"hljs-comment\"\u003e//?号后面的东西是通过get方式传递的\u003c/span\u003e\n        }\n    \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n演示动态验证码：\n\u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eonclick\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"javascript:changImg();\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehref\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"javascript:void(0);\"\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003eimg\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eid\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"servletImg\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"gifCaptcha\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ealt\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"UIFuture验证码\"\u003c/span\u003e/&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ea\u003c/span\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch1 id=\"演示效果\"\u003e演示效果\u003c/h1\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20170306214409430?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY1MjUyMTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e大家其实可以看到，在我点击验证码的时候，有一个小停顿，会显示alt的内容，那是因为我在JS中，2次赋值给img的src属性。 \u003cbr\u003e\n原因是为了解决火狐浏览器显示GIF图的一个问题，如果我不加那个img.src = “”;，在刷新验证码2次后，验证码gif图只显示第一帧！也就是变成了静态图~但是接收到的图片其实还是GIF动图。 \u003cbr\u003e\n我加img.src = “”;，就只是为了解决火狐上验证码刷新2次后会变成静图的问题，该问题在谷歌浏览器，以及360浏览器上没有出现！\u003c/p\u003e\n\n\u003cp\u003e有知道原因的请评论，谢谢\u003c/p\u003e\n\n\u003cp\u003e出问题的是下面这样的情况，在第三次点击图片刷新时(此时用的是同一张图片，随机图片出现的问题是一样的，也就是只显示GIF动图的第一帧图片)(火狐浏览器) \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170306222554472?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY1MjUyMTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" title=\"\"\u003e \u003cbr\u003e\n谷歌浏览器，360浏览器没有出现该问题。\u003c/p\u003e\n\n\u003cp\u003e本篇博客涉及到的源码链接：\u003c/p\u003e\n\n\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cstrong\u003e【\u003ca href=\"https://github.com/chenhaoxiang/captcha/tree/master/verificationCode\" target=\"_blank\"\u003e-&gt;点击访问源码-©CHX\u003c/a\u003e】\u003c/strong\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e本文章由\u003ca href=\"https://chenhaoxiang.github.io/\"\u003e[谙忆]\u003c/a\u003e编写， 所有权利保留。  \u003cbr\u003e\n欢迎转载，分享是进步的源泉。\u003c/p\u003e\n\n\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://blog.csdn.net/qq_26525215\"\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://blog.csdn.net/qq_26525215\" target=\"_blank\"\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","markdowncontent":"\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027 target=\u0027_blank\u0027\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n#说明\n\nGIF验证码相对于JPG图片验证码来说，要更难破解一些，加大了破解的代价。\n从昨天到现在，写了一个小小的GIF验证码项目(中文成语)。\n当然，你可以自己修改成字母数字的。我只是单纯的觉得中文验证码的破解代价更高一点~\n\n我在这里生成GIF图片的类，用到了国外牛人的三个类，也就是:\nAnimatedGifEncoder\nLZWEncoder\n和NeuQuant，这三个类。\n\n没办法，谁让自己还没有那个本事写出这样的类呢，只能用别人的，不过挺好用飞，大家可以搜索一下这3个类，一下就能搜出源码的。\n在这里，我就不贴出这三个类的源码了，需要的，可以在本文最后的项目链接拿整个项目，其中有所有源代码。\n\n本来一开始是写的字母和数字生成的GIF验证码，后来还是改成了汉字成语验证码。\n\n在这里，我并没有用数据库来存储成语，因为重点不在哪里，所以就只是建立了一个静态块来先写入成语。\n(如果是实际开发，我可能会这样做：\n以便于管理员在后台可以添加成语到验证码成语库，以及可以刷新验证码到成语库中，所以，可以在一个请求方法中操作成语。\n如果用来Redis，基本上也是一样，实现同步就行。)\n\n#GIF验证码类\n\n```\npackage cn.hncu.utils;\n\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2017/3/6.\n * Time: 下午 8:23.\n * Explain:Gif验证码类\n */\npublic class GifCaptcha {\n    private Font font = new Font(\"宋体\", Font.BOLD, 20); // 字体\n    private int width = 160; // 验证码显示长度\n    private int height = 40; // 验证码显示高度\n    private String word = \"\"; // 当前的字符串\n    private int delay = 100; // 帧延迟 (默认100)\n    private int quality = 10;//量化器取样间隔 - 默认是10ms\n    private int repeat = 0; // 帧循环次数\n    private int minColor =0;//设置随机颜色时，最小的取色范围\n    private int maxColor = 255;//设置随机颜色时，最大的取色范围\n    private int right = 0; //设置字符最右边的相对位置---相对原始位置 ，默认为0\n    private static java.util.List\u003cString\u003e words = new ArrayList\u003cString\u003e();// 所有成语\n\n    //这里应该去数据库中读取成语，然后存储在内存中\n    //在实际开发中，应该是可以在后台中添加成语，以及刷新成语到内存中去！利用访问某个方法来实现\n    static {\n        words.add(\"一唱一和\");\n        words.add(\"一呼百应\");\n        words.add(\"一干二净\");\n        words.add(\"一举两得\");\n        words.add(\"一落千丈\");\n        words.add(\"两面三刀\");\n        words.add(\"六神无主\");\n        words.add(\"千辛万苦\");\n        words.add(\"万无一失\");\n        words.add(\"拔刀相助\");\n        words.add(\"过时黄花\");\n        words.add(\"地动山摇\");\n        words.add(\"不可多得\");\n        words.add(\"沧海一粟\");\n        words.add(\"水泄不通\");\n        words.add(\"不可计数\");\n    }\n\n    /**\n     * 空参构造函数\n     */\n    public GifCaptcha() {\n    }\n\n    /**\n     * 可以设置验证码宽度，高度的构造函数\n     * @param width -验证码宽度\n     * @param height -验证码高度\n     */\n    public GifCaptcha(int width, int height) {\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     *\n     * @param width -验证码宽度\n     * @param height -验证码高度\n     * @param font -字体\n     */\n    public GifCaptcha(int width, int height,  Font font) {\n        this(width, height);\n        this.font = font;\n    }\n\n    /**\n     * @param width -验证码宽度\n     * @param height -验证码高度\n     * @param font -字体\n     * @param delay -帧延迟\n     */\n    public GifCaptcha(int width, int height, Font font,int delay) {\n        this(width, height,font);\n        this.delay = delay;\n    }\n\n    public Font getFont() {\n        return font;\n    }\n\n    /**\n     * 设置字体\n     * @param font\n     */\n    public void setFont(Font font) {\n        this.font = font;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n    /**\n     * 设置验证码宽度\n     * @param width\n     */\n    public void setWidth(int width) {\n        this.width = width;\n    }\n\n    public int getHeight() {\n        return height;\n    }\n\n    /**\n     * 设置验证码高度\n     * @param height\n     */\n    public void setHeight(int height) {\n        this.height = height;\n    }\n\n    public String getWord() {\n        return word;\n    }\n\n    /**\n     * 设置验证码字符\n     * @param chars\n     */\n    public void setWord(String chars) {\n        this.word = chars;\n    }\n\n    public int getDelay() {\n        return delay;\n    }\n\n    /**\n     * 设置每一帧之间的延迟时间,或改变它的后续帧(适用于最后一帧添加)。\n     * @param delay 单位是毫秒\n     */\n    public void setDelay(int delay) {\n        this.delay = delay;\n    }\n\n    public int getQuality() {\n        return quality;\n    }\n\n    /**\n     * 设置图像的颜色量化(转换质量 由GIF规范允许的最大256种颜色)。\n     * 低的值(最小值= 1)产生更好的颜色,但处理显著缓慢。\n     * 10是默认,并产生良好的颜色而且有以合理的速度。\n     * 值更大(大于20)不产生显著的改善速度\n     * @param quality 大于1\n     */\n    public void setQuality(int quality) {\n        if(quality\u003c1){\n            quality=1;\n        }\n        this.quality = quality;\n    }\n\n    public int getRepeat() {\n        return repeat;\n    }\n\n    /**\n     * 设置GIF帧应该播放的次数。\n     * 默认是 0; 0意味着无限循环。\n     * 必须在添加的第一个图像之前被调用。\n     * @param repeat 必须大于等于0\n     */\n    public void setRepeat(int repeat) {\n        if (repeat\u003e=0) {\n            this.repeat = repeat;\n        }\n    }\n\n    public int getRight() {\n        return right;\n    }\n\n    public void setRight(int right) {\n        this.right = right;\n    }\n\n    public int getMaxColor() {\n        return maxColor;\n    }\n\n    public void setMaxColor(int maxColor) {\n        this.maxColor = maxColor;\n    }\n\n    public int getMinColor() {\n        return minColor;\n    }\n\n    public void setMinColor(int minColor) {\n        this.minColor = minColor;\n    }\n\n    /**\n     * 给定一个输出流 输入图片\n     * @param os\n     */\n    public void out(OutputStream os) {\n        try {\n            AnimatedGifEncoder gifEncoder = new AnimatedGifEncoder();// gif编码类\n            //生成字符\n            gifEncoder.start(os);\n            gifEncoder.setQuality(quality);//设置量化器取样间隔\n            gifEncoder.setDelay(delay);//设置帧延迟\n            gifEncoder.setRepeat(repeat);//帧循环次数\n            BufferedImage frame;\n            char[] rands = createWordChar();\n            Color fontcolor[] = new Color[word.length()];\n            for (int i = 0; i \u003c word.length(); i++) {\n                fontcolor[i] = getRandomColor(minColor,maxColor);\n            }\n            for (int i = 0; i \u003c word.length(); i++) {\n                frame = graphicsImage(fontcolor, rands, i);\n                gifEncoder.addFrame(frame);\n                frame.flush();\n            }\n            gifEncoder.finish();\n        } finally {\n            try {\n                os.close();\n            } catch (IOException e) {\n                // TODO 异常处理\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n    /**\n     * 画随机码图\n     *\n     * @param fontcolor 随机字体颜色\n     * @param strs      字符数组\n     * @param flag      透明度使用\n     * @return BufferedImage\n     */\n    private BufferedImage graphicsImage(Color[] fontcolor, char[] strs, int flag) {\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        //或得图形上下文\n        Graphics2D g2d=image.createGraphics();\n        //Graphics2D g2d = (Graphics2D) image.getGraphics();\n        //利用指定颜色填充背景\n        g2d.setColor(Color.WHITE);\n        g2d.fillRect(0, 0, width, height);\n        AlphaComposite ac;\n        float y = (height \u003e\u003e 1) + (font.getSize() \u003e\u003e 1) ;// 字符的y坐标\n        float m = (width-(word.length()*font.getSize()))/word.length();\n        float x = m/2;//字符的x坐标\n        g2d.setFont(font);\n        for (int i = 0; i \u003c word.length(); i++) {\n            ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getPellucidity(flag, i));\n            g2d.setComposite(ac);\n            g2d.setColor(fontcolor[i]);\n            g2d.drawOval(Randoms.num(width), Randoms.num(height), Randoms.num(5,30), 5 + Randoms.num(5,30));//绘制椭圆边框\n            g2d.drawString(strs[i] + \"\",x+(font.getSize()+m)*i+right,y);\n        }\n        g2d.dispose();\n        return image;\n    }\n\n    /**\n     * 获取透明度,从0到1,自动计算步长\n     * @return float 透明度\n     */\n    private float getPellucidity(int i, int j) {\n        int num = i + j;\n        float r = (float) 1 / word.length(), s = (word.length() + 1) * r;\n        return num \u003e word.length() ? (num * r - s) : num * r;\n    }\n\n\n    /**\n     * 生成随机字符数组\n     * @return 字符数组\n     */\n    protected char[] createWordChar() {\n        word = words.get(Randoms.num(words.size()));\n        return word.toCharArray();\n    }\n\n    /**\n     * 通过给定范围获得随机的颜色\n     * @return Color 获得随机的颜色\n     */\n    protected Color getRandomColor(int min, int max) {\n        if (min \u003e 255) {\n            min = 255;\n        }\n        if (max \u003e 255) {\n            max = 255;\n        }\n        if(min\u003c0){\n            min=0;\n        }\n        if(max\u003c0){\n            max=0;\n        }\n        if(min\u003emax){\n            min=0;\n            max=255;\n        }\n        return new Color(min + Randoms.num(max - min), min + Randoms.num(max - min), min + Randoms.num(max - min));\n    }\n}\n\n```\n注释没写很多~有点懒~\n\n#请求GIF验证码的Controller类\n\n```\npackage cn.hncu.controller;\n\nimport cn.hncu.utils.GifCaptcha;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.awt.*;\nimport java.io.IOException;\n\n/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2017/3/6.\n * Time: 下午 8:26.\n * Explain:演示GIF验证码的控制器\n */\n@Controller\npublic class CaptchaController {\n    private Logger logger = LoggerFactory.getLogger(CaptchaController.class);\n    /**\n     * 获取Gif验证码\n     * @param response\n     */\n    @RequestMapping(value = \"gifCaptcha\",method= RequestMethod.GET)\n    public void getGifCaptcha(HttpServletResponse response,HttpServletRequest request){\n        //告诉客户端，输出的格式\n        response.setHeader(\"Pragma\", \"No-cache\");\n        response.setHeader(\"Cache-Control\", \"no-cache\");\n        response.setDateHeader(\"Expires\", 0);\n        response.setContentType(\"image/gif\");\n        GifCaptcha gifCaptcha =  new GifCaptcha(200,80,new Font(\"宋体\", Font.BOLD, 40),100);\n        try {\n            gifCaptcha.out(response.getOutputStream());\n            logger.info(\"获取验证码！验证码字符为：\"+gifCaptcha.getWord());\n            HttpSession session = request.getSession(true);\n            //存入Session\n            session.setAttribute(\"captchaWord\",gifCaptcha.getWord());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    @RequestMapping(\"index\")\n    public String index()    {\n        return \"index\";\n    }\n\n}\n\n```\n#JSP页面\n\n```\n\u003c%--\n  Created by IntelliJ IDEA.\n  User: 陈浩翔\n  Date: 2017/3/6\n  Time: 下午 8:24\n  To change this template use File | Settings | File Templates.\n--%\u003e\n\u003c%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %\u003e\n\u003chtml\u003e\n\u003chead\u003e\n    \u003ctitle\u003e演示动态验证码\u003c/title\u003e\n    \u003cscript type=\"text/javascript\"\u003e\n        var path = \"${pageScope.basePath}\";\n        function changImg() {\n            var img = document.getElementById(\"servletImg\");\n            var d = new Date();\n            var time = d.getTime();//如果没有这个,下面的img.src = path + \"gifCaptcha?\" + time;不会起作用，因为浏览器的缓存技术，图片可能并不会刷新\n\n            img.src = \"\";//解决火狐下验证码刷不出的问题\n            img.src = path + \"gifCaptcha?\" + time;\n            //?号后面的东西是通过get方式传递的\n        }\n    \u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n演示动态验证码：\n\u003ca onclick=\"javascript:changImg();\" href=\"javascript:void(0);\"\u003e\n    \u003cimg id=\"servletImg\" src=\"gifCaptcha\" alt=\"UIFuture验证码\"/\u003e\n\u003c/a\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\n#演示效果\n\n![](http://img.blog.csdn.net/20170306214409430?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY1MjUyMTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n大家其实可以看到，在我点击验证码的时候，有一个小停顿，会显示alt的内容，那是因为我在JS中，2次赋值给img的src属性。\n原因是为了解决火狐浏览器显示GIF图的一个问题，如果我不加那个img.src = \"\";，在刷新验证码2次后，验证码gif图只显示第一帧！也就是变成了静态图~但是接收到的图片其实还是GIF动图。\n我加img.src = \"\";，就只是为了解决火狐上验证码刷新2次后会变成静图的问题，该问题在谷歌浏览器，以及360浏览器上没有出现！\n\n有知道原因的请评论，谢谢\n\n出问题的是下面这样的情况，在第三次点击图片刷新时(此时用的是同一张图片，随机图片出现的问题是一样的，也就是只显示GIF动图的第一帧图片)(火狐浏览器)\n![](http://img.blog.csdn.net/20170306222554472?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY1MjUyMTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n谷歌浏览器，360浏览器没有出现该问题。\n\n\n本篇博客涉及到的源码链接：\n\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cstrong\u003e【\u003ca href=\u0027https://github.com/chenhaoxiang/captcha/tree/master/verificationCode\u0027 target=\u0027_blank\u0027\u003e-&gt;点击访问源码-&copy;CHX\u003c/a\u003e】\u003c/strong\u003e\n\u003c/blockquote\u003e\n\n\n本文章由\u003ca href=\"https://chenhaoxiang.github.io/\"\u003e[谙忆]\u003c/a\u003e编写， 所有权利保留。 \n欢迎转载，分享是进步的源泉。\n\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027 target=\u0027_blank\u0027\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-645-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-03\2017-03-07-【Web】Java生成中文GIF动态验证码-集成SpringMVC.markdown [pool-645-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【Web】Java生成中文GIF动态验证码-集成SpringMVC》成功 [pool-645-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:52319499 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:19 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-646] [chx]
[INFO] 2017-07-28 12:29:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=52319499 [pool-646-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":52319499,"title":"【BeanUtils】自己写的BeanUtils的嵌套使用","create_at":"\/Date(1472138972000)\/","create":"2016-08-25 11:29:32","view_count":1171,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":2,"bury":0,"description":"转载请注明出处：http://blog.csdn.net/qq_26525215\n本文源自【大学之旅_谙忆的博客】\n其实不打算写的，因为和前面的是一样的，不过既然有人问起，我就写一下吧。MyBeanUtils这是核心的类：通过这个类来返回一个bean对象的。 \n你给的参数是bean的class和封装的Map对象。package cn.hncu.beanUtils;import java.lang.r","url":"http://blog.csdn.net/qq_26525215/article/details/52319499","categories":"❷ Java大学之行,----- ----- Java类反射,----- ③、Java知识点及应用","tags":"对象,bean,class,BeanUtils","content":"\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://blog.csdn.net/qq_26525215\"\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://blog.csdn.net/qq_26525215\" target=\"_blank\"\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e其实不打算写的，因为和前面的是一样的，不过既然有人问起，我就写一下吧。\u003c/p\u003e\n\n\n\n\u003ch1 id=\"mybeanutils\"\u003eMyBeanUtils\u003c/h1\u003e\n\n\u003cp\u003e这是核心的类：\u003c/p\u003e\n\n\u003cp\u003e通过这个类来返回一个bean对象的。 \u003cbr\u003e\n你给的参数是bean的class和封装的Map对象。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.beanUtils;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.lang.reflect.Field;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.lang.reflect.InvocationTargetException;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.lang.reflect.Method;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.Map;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-8-25\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyBeanUtils\u003c/span\u003e {\u003c/span\u003e\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e&lt;T&gt; T \u003cspan class=\"hljs-title\"\u003epopulate\u003c/span\u003e(Class&lt;T&gt; cls ,Map&lt;String, Object&gt; map) \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException{\n        T obj = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n\n        \u003cspan class=\"hljs-comment\"\u003e//1、用类反射new出对象\u003c/span\u003e\n        obj = cls.newInstance();\n\n        \u003cspan class=\"hljs-comment\"\u003e//2 再用类反射对新new的对象设置属性值(必须遵守Java设置规范)--即通过setter方法设置\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e//2.1遍历出所有该类声明的属性\u003c/span\u003e\n        Field flds[] = cls.getDeclaredFields();\u003cspan class=\"hljs-comment\"\u003e//getDeclaredFields()返回Class中所有的字段，包括私有字段；\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(Field fld:flds){\n            \u003cspan class=\"hljs-comment\"\u003e//获取该fld对象所代表的属性名\u003c/span\u003e\n            String fldName = fld.getName();\n            \u003cspan class=\"hljs-comment\"\u003e//根据属性名，到map中去读取数据，只有数据非空才需要给该属性设置值 \u003c/span\u003e\n            Object value = map.get(fldName);\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(value==\u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e){\u003cspan class=\"hljs-comment\"\u003e//如果map中不存在对应的属性数据，我们在这里给出提示信息\u003c/span\u003e\n                System.out.println(fldName+\u003cspan class=\"hljs-string\"\u003e\"的数据为空\"\u003c/span\u003e);\n            }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n                \u003cspan class=\"hljs-comment\"\u003e//如果map中存在对应的属性数据，则由属性名得出它的setter方法的名字\u003c/span\u003e\n                String mothodName = \u003cspan class=\"hljs-string\"\u003e\"set\"\u003c/span\u003e+fldName.substring(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e).toUpperCase()+fldName.substring(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\n\n                 \u003cspan class=\"hljs-comment\"\u003e//根据方法名和参数的数据类型(其实就是属性的类型)，获得Method对象\u003c/span\u003e\n                Class&lt;?&gt; paramTypes[] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Class[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n                paramTypes[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e] = fld.getType();\n                Method method = cls.getDeclaredMethod(mothodName, paramTypes);\n\n                \u003cspan class=\"hljs-comment\"\u003e//调用该method对象所代表的方法\u003c/span\u003e\n                Object args[] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Object[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n                args[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]=value;\n                method.invoke(obj, args);\n            }\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e obj;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch1 id=\"address\"\u003eAddress\u003c/h1\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.domain;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-8-25\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAddress\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String province;\u003cspan class=\"hljs-comment\"\u003e//省份\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String city;\u003cspan class=\"hljs-comment\"\u003e//城市\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAddress\u003c/span\u003e() {\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAddress\u003c/span\u003e(String province, String city) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.province = province;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.city = city;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetProvince\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e province;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetProvince\u003c/span\u003e(String province) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.province = province;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetCity\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e city;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetCity\u003c/span\u003e(String city) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.city = city;\n    }\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003etoString\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Address [province=\"\u003c/span\u003e + province + \u003cspan class=\"hljs-string\"\u003e\", city=\"\u003c/span\u003e + city + \u003cspan class=\"hljs-string\"\u003e\"]\"\u003c/span\u003e;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch1 id=\"person\"\u003ePerson\u003c/h1\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.domain;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.List;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.Map;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-8-25\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePerson\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String name;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e age;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Address address;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e List lists;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Map map;\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePerson\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e();\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePerson\u003c/span\u003e(String name, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e age, Address address, List lists, Map map) {\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e();\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age = age;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.address = address;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lists = lists;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.map = map;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e name;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetName\u003c/span\u003e(String name) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetAge\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e age;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetAge\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e age) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age = age;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Address \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e address;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetAddress\u003c/span\u003e(Address address) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.address = address;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List \u003cspan class=\"hljs-title\"\u003egetLists\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e lists;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetLists\u003c/span\u003e(List lists) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lists = lists;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Map \u003cspan class=\"hljs-title\"\u003egetMap\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e map;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetMap\u003c/span\u003e(Map map) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.map = map;\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003etoString\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Person [name=\"\u003c/span\u003e + name + \u003cspan class=\"hljs-string\"\u003e\", age=\"\u003c/span\u003e + age + \u003cspan class=\"hljs-string\"\u003e\", address=\"\u003c/span\u003e + address\n                + \u003cspan class=\"hljs-string\"\u003e\", lists=\"\u003c/span\u003e + lists + \u003cspan class=\"hljs-string\"\u003e\", map=\"\u003c/span\u003e + map + \u003cspan class=\"hljs-string\"\u003e\"]\"\u003c/span\u003e;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch1 id=\"测试方法\"\u003e测试方法:\u003c/h1\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e@Test\n    @SuppressWarnings({ \u003cspan class=\"hljs-string\"\u003e\"rawtypes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"unchecked\"\u003c/span\u003e })\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003evoid\u003c/span\u003e test2() {\n        \u003cspan class=\"hljs-built_in\"\u003eMap\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e\u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e, Object\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e p \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enew\u003c/span\u003e HashMap();\n        p\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eput(\u003cspan class=\"hljs-string\"\u003e\"name\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Jack\"\u003c/span\u003e);\n        p\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eput(\u003cspan class=\"hljs-string\"\u003e\"age\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e);\n        p\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eput(\u003cspan class=\"hljs-string\"\u003e\"address\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003enew\u003c/span\u003e Address(\u003cspan class=\"hljs-string\"\u003e\"湖南\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"长沙\"\u003c/span\u003e));\n\n        \u003cspan class=\"hljs-built_in\"\u003eList\u003c/span\u003e lists \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enew\u003c/span\u003e ArrayList();\n        lists\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eadd(\u003cspan class=\"hljs-literal\"\u003enew\u003c/span\u003e Book(\u003cspan class=\"hljs-string\"\u003e\"B001\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"红楼梦\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e25.00\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e53.23\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e500\u003c/span\u003e));\n        lists\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eadd(\u003cspan class=\"hljs-literal\"\u003enew\u003c/span\u003e User(\u003cspan class=\"hljs-string\"\u003e\"U001\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"李四\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e25\u003c/span\u003e));\n        lists\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eadd(\u003cspan class=\"hljs-string\"\u003e\"嵌套使用\"\u003c/span\u003e);\n        p\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eput(\u003cspan class=\"hljs-string\"\u003e\"lists\"\u003c/span\u003e, lists);\n\n        \u003cspan class=\"hljs-built_in\"\u003eMap\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003emap\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enew\u003c/span\u003e HashMap();\n        \u003cspan class=\"hljs-built_in\"\u003emap\u003c/span\u003e\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eput(\u003cspan class=\"hljs-string\"\u003e\"user\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003enew\u003c/span\u003e User(\u003cspan class=\"hljs-string\"\u003e\"MU002\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"MapUser\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e));\n        \u003cspan class=\"hljs-built_in\"\u003emap\u003c/span\u003e\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eput(\u003cspan class=\"hljs-string\"\u003e\"string\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"map中的字符串\"\u003c/span\u003e);\n        p\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eput(\u003cspan class=\"hljs-string\"\u003e\"map\"\u003c/span\u003e, \u003cspan class=\"hljs-built_in\"\u003emap\u003c/span\u003e);\n\n        try {\n            Person person \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e MyBeanUtils\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003epopulate(Person\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eclass, p);\n\n            System\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eout\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eprintln(person);\n\n        } catch (ReflectiveOperationException e) {\n            e\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eprintStackTrace();\n        }\n    }\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e里面的Book和User类也就是一个bean对象而已。 \u003cbr\u003e\n其实全部可以写空参构造的，我为了方便，就多写了有值的构造方法了。\u003c/p\u003e\n\n\n\n\u003ch1 id=\"输出结果\"\u003e输出结果:\u003c/h1\u003e\n\n\u003cp\u003ePerson [name=Jack, age=100, address=Address [province=湖南, city=长沙], lists=[Book [uuid=B001, name=红楼梦, inPrice=25.0, outPrice=53.23, num=500], User [uuid=U001, name=李四, age=25], 嵌套使用], map={string=map中的字符串, user=User [uuid=MU002, name=MapUser, age=30]}]\u003c/p\u003e\n\n\u003cp\u003e其实和普通的使用没有什么不同的。 \u003cbr\u003e\n无非是外面再嵌套一层罢了~\u003c/p\u003e\n\n\n\n\u003ch1 id=\"完整源码链接\"\u003e完整源码链接:\u003c/h1\u003e\n\n\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/chenhaoxiang/Java/tree/master/myBeanUtils\"\u003e\u003cfont color=\"red\"\u003e–&gt;点击访问本系列源码–\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\n\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003chr\u003e\n\n\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://blog.csdn.net/qq_26525215\"\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://blog.csdn.net/qq_26525215\" target=\"_blank\"\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","markdowncontent":"\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027 target=\u0027_blank\u0027\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n其实不打算写的，因为和前面的是一样的，不过既然有人问起，我就写一下吧。\n\n#MyBeanUtils\n\n这是核心的类：\n\n通过这个类来返回一个bean对象的。\n你给的参数是bean的class和封装的Map对象。\n\n```\npackage cn.hncu.beanUtils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Map;\n\n/**\n * @author 陈浩翔\n *\n * 2016-8-25\n */\npublic class MyBeanUtils {\n\t\n\tpublic static\u003cT\u003e T populate(Class\u003cT\u003e cls ,Map\u003cString, Object\u003e map) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException{\n\t\tT obj = null;\n\t\t\n\t\t//1、用类反射new出对象\n\t\tobj = cls.newInstance();\n\t\t\n\t\t//2 再用类反射对新new的对象设置属性值(必须遵守Java设置规范)--即通过setter方法设置\n\t\t//2.1遍历出所有该类声明的属性\n\t\tField flds[] = cls.getDeclaredFields();//getDeclaredFields()返回Class中所有的字段，包括私有字段；\n\t\tfor(Field fld:flds){\n\t\t\t//获取该fld对象所代表的属性名\n\t\t\tString fldName = fld.getName();\n\t\t\t//根据属性名，到map中去读取数据，只有数据非空才需要给该属性设置值 \n\t\t\tObject value = map.get(fldName);\n\t\t\tif(value==null){//如果map中不存在对应的属性数据，我们在这里给出提示信息\n\t\t\t\tSystem.out.println(fldName+\"的数据为空\");\n\t\t\t}else{\n\t\t\t\t//如果map中存在对应的属性数据，则由属性名得出它的setter方法的名字\n\t\t\t\tString mothodName = \"set\"+fldName.substring(0, 1).toUpperCase()+fldName.substring(1);\n\t\t\t\t\n\t\t\t\t //根据方法名和参数的数据类型(其实就是属性的类型)，获得Method对象\n\t\t\t\tClass\u003c?\u003e paramTypes[] = new Class[1];\n\t\t\t\tparamTypes[0] = fld.getType();\n\t\t\t\tMethod method = cls.getDeclaredMethod(mothodName, paramTypes);\n\t\t\t\t\n\t\t\t\t//调用该method对象所代表的方法\n\t\t\t\tObject args[] = new Object[1];\n\t\t\t\targs[0]=value;\n\t\t\t\tmethod.invoke(obj, args);\n\t\t\t}\n\t\t}\n\t\treturn obj;\n\t}\n\t\n}\n\n```\n\n#Address\n\n```\npackage cn.hncu.domain;\n\n/**\n * @author 陈浩翔\n *\n * 2016-8-25\n */\npublic class Address {\n\tprivate String province;//省份\n\tprivate String city;//城市\n\tpublic Address() {\n\t}\n\tpublic Address(String province, String city) {\n\t\tthis.province = province;\n\t\tthis.city = city;\n\t}\n\tpublic String getProvince() {\n\t\treturn province;\n\t}\n\tpublic void setProvince(String province) {\n\t\tthis.province = province;\n\t}\n\tpublic String getCity() {\n\t\treturn city;\n\t}\n\tpublic void setCity(String city) {\n\t\tthis.city = city;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Address [province=\" + province + \", city=\" + city + \"]\";\n\t}\n}\n\n```\n\n#Person\n\n```\npackage cn.hncu.domain;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author 陈浩翔\n *\n * 2016-8-25\n */\npublic class Person {\n\tprivate String name;\n\tprivate int age;\n\tprivate Address address;\n\tprivate List lists;\n\tprivate Map map;\n\tpublic Person() {\n\t\tsuper();\n\t}\n\tpublic Person(String name, int age, Address address, List lists, Map map) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.address = address;\n\t\tthis.lists = lists;\n\t\tthis.map = map;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic Address getAddress() {\n\t\treturn address;\n\t}\n\tpublic void setAddress(Address address) {\n\t\tthis.address = address;\n\t}\n\tpublic List getLists() {\n\t\treturn lists;\n\t}\n\tpublic void setLists(List lists) {\n\t\tthis.lists = lists;\n\t}\n\tpublic Map getMap() {\n\t\treturn map;\n\t}\n\tpublic void setMap(Map map) {\n\t\tthis.map = map;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Person [name=\" + name + \", age=\" + age + \", address=\" + address\n\t\t\t\t+ \", lists=\" + lists + \", map=\" + map + \"]\";\n\t}\n\t\n}\n\n```\n\n#测试方法:\n\n```\n@Test\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tpublic void test2() {\n\t\tMap\u003cString, Object\u003e p = new HashMap();\n\t\tp.put(\"name\", \"Jack\");\n\t\tp.put(\"age\", 100);\n\t\tp.put(\"address\", new Address(\"湖南\", \"长沙\"));\n\t\t\n\t\tList lists = new ArrayList();\n\t\tlists.add(new Book(\"B001\", \"红楼梦\", 25.00, 53.23, 500));\n\t\tlists.add(new User(\"U001\", \"李四\", 25));\n\t\tlists.add(\"嵌套使用\");\n\t\tp.put(\"lists\", lists);\n\t\t\n\t\tMap map = new HashMap();\n\t\tmap.put(\"user\", new User(\"MU002\", \"MapUser\", 30));\n\t\tmap.put(\"string\", \"map中的字符串\");\n\t\tp.put(\"map\", map);\n\t\t\n\t\ttry {\n\t\t\tPerson person = MyBeanUtils.populate(Person.class, p);\n\t\t\t\n\t\t\tSystem.out.println(person);\n\t\t\t\n\t\t} catch (ReflectiveOperationException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n里面的Book和User类也就是一个bean对象而已。\n其实全部可以写空参构造的，我为了方便，就多写了有值的构造方法了。\n\n\n#输出结果:\n\nPerson [name=Jack, age=100, address=Address [province=湖南, city=长沙], lists=[Book [uuid=B001, name=红楼梦, inPrice=25.0, outPrice=53.23, num=500], User [uuid=U001, name=李四, age=25], 嵌套使用], map={string=map中的字符串, user=User [uuid=MU002, name=MapUser, age=30]}]\n\n\n其实和普通的使用没有什么不同的。\n无非是外面再嵌套一层罢了~\n\n#完整源码链接:\n\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e\u003ca href=\u0027https://github.com/chenhaoxiang/Java/tree/master/myBeanUtils\u0027\u003e\u003cfont color=\"red\"\u003e--&gt;点击访问本系列源码--\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\n\u003c/blockquote\u003e\n\n\u003chr/\u003e\n\n\n\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027 target=\u0027_blank\u0027\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-646-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-08\2016-08-25-【BeanUtils】自己写的BeanUtils的嵌套使用.markdown [pool-646-thread-1] [chx]
[INFO] 2017-07-28 12:29:19 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-636] [chx]
[INFO] 2017-07-28 12:29:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【BeanUtils】自己写的BeanUtils的嵌套使用》成功 [pool-646-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:49516269 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-647] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-637] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=49516269 [pool-647-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":49516269,"title":"POJ  2260（ZOJ 1949）  Error Correction  一个水题","create_at":"\/Date(1446208668000)\/","create":"2015-10-30 08:37:48","view_count":469,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"DescriptionA boolean matrix has the parity property when each row and each column has an even sum, i.e. contains an even number of bits which are set. Here’s a 4 x 4 matrix which has the parity propert","url":"http://blog.csdn.net/qq_26525215/article/details/49516269","categories":"❶ ACM,----- POJ-ACM,----- ZOJ-ACM","tags":"poj,zoj","content":"\u003cp\u003eDescription\u003c/p\u003e\n\n\u003cp\u003eA boolean matrix has the parity property when each row and each column has an even sum, i.e. contains an even number of bits which are set. Here’s a 4 x 4 matrix which has the parity property:  \u003cbr\u003e\n1 0 1 0\u003c/p\u003e\n\n\u003cp\u003e0 0 0 0\u003c/p\u003e\n\n\u003cp\u003e1 1 1 1\u003c/p\u003e\n\n\u003cp\u003e0 1 0 1\u003c/p\u003e\n\n\u003cp\u003eThe sums of the rows are 2, 0, 4 and 2. The sums of the columns are 2, 2, 2 and 2.  \u003cbr\u003e\nYour job is to write a program that reads in a matrix and checks if it has the parity property. If not, your program should check if the parity property can be established by changing only one bit. If this is not possible either, the matrix should be classified as corrupt. \u003c/p\u003e\n\n\u003cp\u003eInput\u003c/p\u003e\n\n\u003cp\u003eThe input will contain one or more test cases. The first line of each test case contains one integer n (n&lt;100), representing the size of the matrix. On the next n lines, there will be n integers per line. No other integers than 0 and 1 will occur in the matrix. Input will be terminated by a value of 0 for n. \u003cbr\u003e\nOutput\u003c/p\u003e\n\n\u003cp\u003eFor each matrix in the input file, print one line. If the matrix already has the parity property, print “OK”. If the parity property can be established by changing one bit, print “Change bit (i,j)” where i is the row and j the column of the bit to be changed. Otherwise, print “Corrupt”. \u003cbr\u003e\nSample Input\u003c/p\u003e\n\n\u003cp\u003e4 \u003cbr\u003e\n1 0 1 0 \u003cbr\u003e\n0 0 0 0 \u003cbr\u003e\n1 1 1 1 \u003cbr\u003e\n0 1 0 1 \u003cbr\u003e\n4 \u003cbr\u003e\n1 0 1 0 \u003cbr\u003e\n0 0 1 0 \u003cbr\u003e\n1 1 1 1 \u003cbr\u003e\n0 1 0 1 \u003cbr\u003e\n4 \u003cbr\u003e\n1 0 1 0 \u003cbr\u003e\n0 1 1 0 \u003cbr\u003e\n1 1 1 1 \u003cbr\u003e\n0 1 0 1 \u003cbr\u003e\n0 \u003cbr\u003e\nSample Output\u003c/p\u003e\n\n\u003cp\u003eOK \u003cbr\u003e\nChange bit (2,3) \u003cbr\u003e\nCorrupt\u003c/p\u003e\n\n\u003cp\u003e一开始我看不懂题目什么意思，想了很久，后来才明白， \u003cbr\u003e\n就是求每一行，每一列的和是偶数，如果都是，就输出OK。 \u003cbr\u003e\n如果能够通过改一个数字使之全部行列为偶数，就输出需要修改那个 \u003cbr\u003e\n字的行和列。 \u003cbr\u003e\n如果不能，就输出Corrupt。 \u003cbr\u003e\n很水的一个题，，，。。。 \u003cbr\u003e\n奈何英语不好啊！！ \u003cbr\u003e\n附上代码：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cpp\"\u003e\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;iostream&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;stdio.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;string.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#include &lt;stdlib.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enamespace\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003estd\u003c/span\u003e;\n\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e main(){\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n,m;\n    \u003cspan class=\"hljs-keyword\"\u003ebool\u003c/span\u003e s[\u003cspan class=\"hljs-number\"\u003e105\u003c/span\u003e][\u003cspan class=\"hljs-number\"\u003e105\u003c/span\u003e];\n    \u003cspan class=\"hljs-keyword\"\u003eshort\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a[\u003cspan class=\"hljs-number\"\u003e105\u003c/span\u003e],b[\u003cspan class=\"hljs-number\"\u003e105\u003c/span\u003e];\n    \u003cspan class=\"hljs-keyword\"\u003ebool\u003c/span\u003e a1[\u003cspan class=\"hljs-number\"\u003e105\u003c/span\u003e],b1[\u003cspan class=\"hljs-number\"\u003e105\u003c/span\u003e];\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(\u003cspan class=\"hljs-built_in\"\u003ecin\u003c/span\u003e&gt;&gt;n&amp;&amp;n!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e hang=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e lie=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;n;i++){\n                a[i]=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;j&lt;n;j++){\n                \u003cspan class=\"hljs-built_in\"\u003escanf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"%d\"\u003c/span\u003e,&amp;s[i][j]);\n                a[i]+=s[i][j];\n            }\n        }\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;j&lt;n;j++){\n                b[j]=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;n;i++){\n                b[j]+=s[i][j];\n            }\n        }\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;n;i++){\n            a1[i]=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n            b1[i]=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a[i]%\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                a1[i]=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            }\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(b[i]%\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                b1[i]=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            }\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e flag1 = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, flag2=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e hang1,lie1;\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;n;i++){\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a1[i]==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                hang++;\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(flag1==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                    hang1=i+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n                }\n            }\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(b1[i]==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                lie++;\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(flag2==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                    lie1=i+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n                }\n            }\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(hang==\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e&amp;&amp;lie==\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n            \u003cspan class=\"hljs-built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Change bit (%d,%d)\\n\"\u003c/span\u003e,hang1,lie1);\n        }\u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(hang==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e&amp;&amp;lie==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"OK\\n\"\u003c/span\u003e);\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n            \u003cspan class=\"hljs-built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Corrupt\\n\"\u003c/span\u003e);\n        }\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Description\n\nA boolean matrix has the parity property when each row and each column has an even sum, i.e. contains an even number of bits which are set. Here\u0027s a 4 x 4 matrix which has the parity property: \n1 0 1 0\n\n0 0 0 0\n\n1 1 1 1\n\n0 1 0 1\n\nThe sums of the rows are 2, 0, 4 and 2. The sums of the columns are 2, 2, 2 and 2. \nYour job is to write a program that reads in a matrix and checks if it has the parity property. If not, your program should check if the parity property can be established by changing only one bit. If this is not possible either, the matrix should be classified as corrupt. \n\nInput\n\nThe input will contain one or more test cases. The first line of each test case contains one integer n (n\u003c100), representing the size of the matrix. On the next n lines, there will be n integers per line. No other integers than 0 and 1 will occur in the matrix. Input will be terminated by a value of 0 for n.\nOutput\n\nFor each matrix in the input file, print one line. If the matrix already has the parity property, print \"OK\". If the parity property can be established by changing one bit, print \"Change bit (i,j)\" where i is the row and j the column of the bit to be changed. Otherwise, print \"Corrupt\".\nSample Input\n\n4\n1 0 1 0\n0 0 0 0\n1 1 1 1\n0 1 0 1\n4\n1 0 1 0\n0 0 1 0\n1 1 1 1\n0 1 0 1\n4\n1 0 1 0\n0 1 1 0\n1 1 1 1\n0 1 0 1\n0\nSample Output\n\nOK\nChange bit (2,3)\nCorrupt\n\n\n一开始我看不懂题目什么意思，想了很久，后来才明白，\n就是求每一行，每一列的和是偶数，如果都是，就输出OK。\n如果能够通过改一个数字使之全部行列为偶数，就输出需要修改那个\n字的行和列。\n如果不能，就输出Corrupt。\n很水的一个题，，，。。。\n奈何英语不好啊！！\n附上代码：\n\n```\n#include \u003ciostream\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cstdlib.h\u003e\nusing namespace std;\n\nint main(){\n    int n,m;\n    bool s[105][105];\n    short int a[105],b[105];\n    bool a1[105],b1[105];\n    while(cin\u003e\u003en&&n!=0){\n            int hang=0;\n            int lie=0;\n        for(int i=0;i\u003cn;i++){\n                a[i]=0;\n            for(int j=0;j\u003cn;j++){\n                scanf(\"%d\",&s[i][j]);\n                a[i]+=s[i][j];\n            }\n        }\n        for(int j=0;j\u003cn;j++){\n                b[j]=0;\n            for(int i=0;i\u003cn;i++){\n                b[j]+=s[i][j];\n            }\n        }\n        for(int i=0;i\u003cn;i++){\n            a1[i]=1;\n            b1[i]=1;\n            if(a[i]%2!=0){\n                a1[i]=0;\n            }\n            if(b[i]%2!=0){\n                b1[i]=0;\n            }\n        }\n        int flag1 = 0, flag2=0;\n        int hang1,lie1;\n        for(int i=0;i\u003cn;i++){\n            if(a1[i]==0){\n                hang++;\n                if(flag1==0){\n                    hang1=i+1;\n                }\n            }\n            if(b1[i]==0){\n                lie++;\n                if(flag2==0){\n                    lie1=i+1;\n                }\n            }\n        }\n        if(hang==1&&lie==1){\n            printf(\"Change bit (%d,%d)\\n\",hang1,lie1);\n        }else if(hang==0&&lie==0){\n            printf(\"OK\\n\");\n        }\n        else{\n            printf(\"Corrupt\\n\");\n        }\n    }\n    return 0;\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-647-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-10\2015-10-30-POJ  2260（ZOJ 1949）  Error Correction  一个水题.markdown [pool-647-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《POJ  2260（ZOJ 1949）  Error Correction  一个水题》成功 [pool-647-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51052677 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-648] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51052677 [pool-648-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51052677,"title":"Java---设计模块(工厂方法)","create_at":"\/Date(1459696046000)\/","create":"2016-04-03 11:07:26","view_count":589,"comment_count":0,"comment_allowed":"true","type":"original","channel":15,"digg":0,"bury":0,"description":"★ 场景和问题 \nJava程序开发讲究面向接口编程，隐藏具体的实现类，可是如何得到接口呢？工厂类的命名规范：***Factory \n单例工厂方法的命名规范：getInstance()工厂的本质是“选择实现”工厂、接口和实现类之间的技术边界：工厂只负责选择实现，实现类才做真正的实现，而接口是限定到底实现什么东西和返回什么东西，三者之间分工明确、各负其责。下面为简单的工厂方法介绍和源代码： \n接口Dep","url":"http://blog.csdn.net/qq_26525215/article/details/51052677","categories":"❷ Java大学之行,----- ②、Java设计模块","tags":"java,设计,工厂","content":"\u003cp\u003e\u003cstrong\u003e★ 场景和问题\u003c/strong\u003e \u003cbr\u003e\nJava程序开发讲究面向接口编程，隐藏具体的实现类，可是如何得到接口呢？\u003c/p\u003e\n\n\u003cp\u003e工厂类的命名规范：***Factory \u003cbr\u003e\n单例工厂方法的命名规范：getInstance()\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e工厂的本质是“选择实现”\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e工厂、接口和实现类之间的技术边界：工厂只负责选择实现，实现类才做真正的实现，而接口是限定到底实现什么东西和返回什么东西，三者之间分工明确、各负其责。\u003c/p\u003e\n\n\u003cp\u003e下面为简单的工厂方法介绍和源代码： \u003cbr\u003e\n接口DepApi ：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003epackage cn.hncu.pattern.factory.dep;\n\u003cspan class=\"hljs-comment\"\u003e//接口\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e DepApi {\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003et1\u003c/span\u003e();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e实例1 Deplmpl1 ：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.pattern.factory.dep;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDeplmpl1\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDepApi\u003c/span\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003et1\u003c/span\u003e() {\n        System.out.println(\u003cspan class=\"hljs-string\"\u003e\"DepApi--Deplmpl1.t1()...\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Deplmpl1_t1()\"\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e//下面这个方法在外面访问不到，因为被接口隔离了\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003et2\u003c/span\u003e() {\n        System.out.println(\u003cspan class=\"hljs-string\"\u003e\"DepApi--Deplmpl1.t2()...\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Deplmpl1_t2()\"\u003c/span\u003e;\n    }\n\n\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e实例2 Deplmpl2 ：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.pattern.factory.dep;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDeplmpl2\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDepApi\u003c/span\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003et1\u003c/span\u003e() {\n        System.out.println(\u003cspan class=\"hljs-string\"\u003e\"DepApi--Deplmpl2.t1()...\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Deplmpl2_t1()\"\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e//下面这个方法在外面访问不到，因为被接口隔离了\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003et2\u003c/span\u003e() {\n        System.out.println(\u003cspan class=\"hljs-string\"\u003e\"DepApi--Deplmpl2.t2()...\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Deplmpl2_t2()\"\u003c/span\u003e;\n    }\n\n\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e工厂类 DepFactory ：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.pattern.factory.dep;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.FileInputStream;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.InputStream;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.Properties;\n\n\u003cspan class=\"hljs-comment\"\u003e//工厂真正的作用是：选择实现\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDepFactory\u003c/span\u003e {\u003c/span\u003e\n\n    \u003cspan class=\"hljs-comment\"\u003e// 工厂方法,命名规范：createDepApi,getDepApi,getDepInstance\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e DepApi \u003cspan class=\"hljs-title\"\u003egetDepApi\u003c/span\u003e(){\n        Properties p = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Properties();\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e type=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        InputStream inStream;\n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n            inStream = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FileInputStream(\u003cspan class=\"hljs-string\"\u003e\"a.properties\"\u003c/span\u003e);\n            p.load(inStream);\n            type = Integer.parseInt(p.getProperty(\u003cspan class=\"hljs-string\"\u003e\"type\"\u003c/span\u003e));\n        } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\n            e.printStackTrace();\n        }\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(type==\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Deplmpl1();\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(type==\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Deplmpl2();\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e测试 Client ：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003epackage cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dep\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.DepApi\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dep\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.DepFactory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\npublic class Client {\n    public static void main(String[] args) {\n\n        DepApi da = DepFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getDepApi\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        da\u003cspan class=\"hljs-preprocessor\"\u003e.t\u003c/span\u003e1()\u003cspan class=\"hljs-comment\"\u003e;//修改配置文件a.properties就可达到修改调用方法的目的，而不用修改源代码\u003c/span\u003e\n        //da\u003cspan class=\"hljs-preprocessor\"\u003e.t\u003c/span\u003e2()\u003cspan class=\"hljs-comment\"\u003e; //实现类当中的t2()方法已经被接口封装隔离了，访问不了\u003c/span\u003e\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ea.properties文件里面的内容： \u003cbr\u003e\n此为配置文件，修改配置文件不叫修改源代码的。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs rust\"\u003e\u003cspan class=\"hljs-keyword\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e此时的输出结果为;\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs r\"\u003eDepApi--Deplmpl1.t1()\u003cspan class=\"hljs-keyword\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e只修改配置文件：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs rust\"\u003e\u003cspan class=\"hljs-keyword\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e此时的输出结果为：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs r\"\u003eDepApi--Deplmpl2.t1()\u003cspan class=\"hljs-keyword\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"**★ 场景和问题**\nJava程序开发讲究面向接口编程，隐藏具体的实现类，可是如何得到接口呢？\n\n工厂类的命名规范：***Factory\n单例工厂方法的命名规范：getInstance()\n\n**工厂的本质是“选择实现”**\n\n工厂、接口和实现类之间的技术边界：工厂只负责选择实现，实现类才做真正的实现，而接口是限定到底实现什么东西和返回什么东西，三者之间分工明确、各负其责。\n\n下面为简单的工厂方法介绍和源代码：\n接口DepApi ：\n\n```\npackage cn.hncu.pattern.factory.dep;\n//接口\npublic interface DepApi {\n\tpublic String t1();\n}\n\n```\n实例1 Deplmpl1 ：\n\n```\npackage cn.hncu.pattern.factory.dep;\n\npublic class Deplmpl1 implements DepApi{\n\n\t@Override\n\tpublic String t1() {\n\t\tSystem.out.println(\"DepApi--Deplmpl1.t1()...\");\n\t\treturn \"Deplmpl1_t1()\";\n\t}\n\t\n\t//下面这个方法在外面访问不到，因为被接口隔离了\n\tpublic String t2() {\n\t\tSystem.out.println(\"DepApi--Deplmpl1.t2()...\");\n\t\treturn \"Deplmpl1_t2()\";\n\t}\n\t\n\t\n\t\n}\n\n```\n实例2 Deplmpl2 ：\n\n```\npackage cn.hncu.pattern.factory.dep;\n\npublic class Deplmpl2 implements DepApi{\n\n\t@Override\n\tpublic String t1() {\n\t\tSystem.out.println(\"DepApi--Deplmpl2.t1()...\");\n\t\treturn \"Deplmpl2_t1()\";\n\t}\n\t\n\t//下面这个方法在外面访问不到，因为被接口隔离了\n\tpublic String t2() {\n\t\tSystem.out.println(\"DepApi--Deplmpl2.t2()...\");\n\t\treturn \"Deplmpl2_t2()\";\n\t}\n\t\n\t\n\t\n}\n\n```\n工厂类 DepFactory ：\n\n```\npackage cn.hncu.pattern.factory.dep;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\n//工厂真正的作用是：选择实现\npublic class DepFactory {\n\t\n\t// 工厂方法,命名规范：createDepApi,getDepApi,getDepInstance\n\tpublic static DepApi getDepApi(){\n\t\tProperties p = new Properties();\n\t\tint type=1;\n\t\tInputStream inStream;\n\t\ttry {\n\t\t\tinStream = new FileInputStream(\"a.properties\");\n\t\t\tp.load(inStream);\n\t\t\ttype = Integer.parseInt(p.getProperty(\"type\"));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tif(type==1){\n\t\t\treturn new Deplmpl1();\n\t\t}\n\t\tif(type==2){\n\t\t\treturn new Deplmpl2();\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\n```\n测试 Client ：\n\n```\npackage cn.hncu.pattern.factory;\n\nimport cn.hncu.pattern.factory.dep.DepApi;\nimport cn.hncu.pattern.factory.dep.DepFactory;\n\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tDepApi da = DepFactory.getDepApi();\n\t\tda.t1();//修改配置文件a.properties就可达到修改调用方法的目的，而不用修改源代码\n\t\t//da.t2(); //实现类当中的t2()方法已经被接口封装隔离了，访问不了\n\t}\n\n}\n\n```\n\na.properties文件里面的内容：\n此为配置文件，修改配置文件不叫修改源代码的。\n\n```\ntype=1\n\n```\n此时的输出结果为;\n\n```\nDepApi--Deplmpl1.t1()...\n\n```\n只修改配置文件：\n\n```\ntype=2\n```\n此时的输出结果为：\n\n```\nDepApi--Deplmpl2.t1()...\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-648-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-04\2016-04-03-Java---设计模块(工厂方法).markdown [pool-648-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-638] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java---设计模块(工厂方法)》成功 [pool-648-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51190696 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-649] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-639] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51190696 [pool-649-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51190696,"title":"Java-单机版的书店管理系统(练习设计模块和思想_系列 七 )","create_at":"\/Date(1461049774000)\/","create":"2016-04-19 03:09:34","view_count":5940,"comment_count":0,"comment_allowed":"true","type":"original","channel":15,"digg":1,"bury":0,"description":"本系列前面博客的链接：Java-单机版的书店管理系统(练习设计模块和思想_系列 六 ) \nhttp://blog.csdn.net/qq_26525215/article/details/51169277Java-单机版的书店管理系统(练习设计模块和思想_系列 五 )  \nhttp://blog.csdn.net/qq_26525215/article/details/51136848Java-单机","url":"http://blog.csdn.net/qq_26525215/article/details/51190696","categories":"❷ Java大学之行,----- ②、Java设计模块,----- ----- Java书店管理系统","tags":"博客,设计,管理","content":"\u003ch1 id=\"本系列前面博客的链接\"\u003e本系列前面博客的链接：\u003c/h1\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 六 ) \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51169277\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51169277\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 五 )  \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51136848\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51136848\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 四(2) )：  \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51117135\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51117135\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 四(1) )：  \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51116429\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51116429\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 三 )：  \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51099202\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51099202\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 二 )：  \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51089734\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51089734\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJava-单机版的书店管理系统(练习设计模块和思想_系列 一 )：  \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/51073546\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/51073546\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"介绍\"\u003e介绍：\u003c/h1\u003e\n\n\u003cp\u003e现在已经将进货模块的查询写完了，\u003c/p\u003e\n\n\u003cp\u003e（进货模块只有添加和查询！没有删除和修改。 \u003cbr\u003e\n因为如果能随便修改进货的时间，进货的数量等，这不是乱套了嘛）\u003c/p\u003e\n\n\u003cp\u003e现在完成的模块有：用户模块，图书模块，进货模块。 \u003cbr\u003e\n新增写了一个日期类，将long型数字转换成某个日期格式显示给用户看。 \u003cbr\u003e\n将string型的日期格式转换成long型数字存储。 \u003cbr\u003e\n将前面的StringComparison类进行了修改。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e现在剩下的模块还有销售模块，库存模块，还有登录界面，\u003c/strong\u003e \u003cbr\u003e\n库存模块是需要综合销售模块和进货模块来写的。 \u003cbr\u003e\n也就是模块与模块之间需要串接了。 \u003cbr\u003e\n现在我写的这3个模块，基本上是属于和对方没什么联系的，每个模块都能独自完成自己的功能。\u003c/p\u003e\n\n\u003cp\u003e只亮一张进货查询的图片吧。界面不好看（^-^）勿喷噢。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160419145730578\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003ch1 id=\"增加或修改的代码\"\u003e增加或修改的代码：\u003c/h1\u003e\n\n\n\n\u003ch2 id=\"工具类stringcomparison\"\u003e工具类StringComparison ：\u003c/h2\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.bookStore.util;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 工具类\n * 字符串比较\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n *\u003cspan class=\"hljs-javadoctag\"\u003e @version\u003c/span\u003e 1.0\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eStringComparison\u003c/span\u003e {\u003c/span\u003e\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * str1和str2完全(精确查找)匹配\n     * 这个精确匹配是在str2不为null且str2去掉2端空格的情况下比较的！！！\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e str1---被比较的字符串\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e str2---比较的字符串\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---如果2个字符串相同或者str2全部是空格或者str2==null，就返回true，如果2个字符串不同，就返回false\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003estringEquals\u003c/span\u003e(String str1,String str2){\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(str2==\u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e || str2.trim().length()&lt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(!str1.equals(str2.trim())){\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * str1与str2模糊匹配\n     * 这个模糊匹配也是在str2不为null且str2去掉2端空格的情况下比较的！！！\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e str1---被比较的字符串\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e str2---比较的字符串\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---如果str2是str1的子串或者str2全部是空格或str2==null，就返回true，如果str2不是str1的字串，就返回false\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003estringIndexOf\u003c/span\u003e(String str1,String str2){\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(str2==\u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e || str2.trim().length()&lt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n        }\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(str1.indexOf(str2.trim())==-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e工具类DateUtil：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.bookStore.util;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.text.DateFormat;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.text.ParseException;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.text.SimpleDateFormat;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.Date;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.swing.JOptionPane;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 日期工具类\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n *\u003cspan class=\"hljs-javadoctag\"\u003e @version\u003c/span\u003e 1.0\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDateUtil\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 根据传入的long参数 ，把long值转换为固定的年月日格式输出\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e d---传入的参数\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---一个字符串参数，格式为：yyyy年MM月dd日 HH:mm:ss\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003elong2String\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e d){\n        Date date = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Date(d);\n        DateFormat df = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SimpleDateFormat(\u003cspan class=\"hljs-string\"\u003e\"yyyy年MM月dd日 HH:mm:ss\"\u003c/span\u003e);\n        String str = df.format(date);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e str;\n    }\n    \u003cspan class=\"hljs-comment\"\u003e/*\n     * 代码抽取技术：\n     *   首先不要想“抽出的方法”怎么写，而是把类似的代码拷在一起，观察其中的变化部分和不变化部分。\n     *   把这段代码中用到的“前面定义的变量”抽取成方法的参数--本例中为txtInDate和erroInfo，把“留给后面使用的”将在这段代码中新\n     *   创建的变量定义成方法的返回值---本例为inDate。\n     */\u003c/span\u003e\n\n\n    \u003cspan class=\"hljs-javadoc\"\u003e/**\n     * 根据传入的日期格式，把String型的参数转换成long型参数返回&lt;br/&gt;\n     * 如果格式传入错误，会根据传入的erroInfo字符串弹出窗口给出提示！ \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e txtInDate---传入的日期。\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @param\u003c/span\u003e erroInfo----传入的错误提示信息\n     *\u003cspan class=\"hljs-javadoctag\"\u003e @return\u003c/span\u003e---long型的数字，如果格式转换错误，返回-1；\n     */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003estring2Long\u003c/span\u003e(String txtInDate,String erroInfo){\n        DateFormat date = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SimpleDateFormat(\u003cspan class=\"hljs-string\"\u003e\"yyyy-MM-dd HH:mm:ss\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e inDate=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n            Date d = date.parse(txtInDate);\n            inDate = d.getTime();\n        } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (ParseException e) {\n            JOptionPane.showMessageDialog(\u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e, erroInfo);\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inDate;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch2 id=\"进货模块的逻辑层实现类inmainebo\"\u003e进货模块的逻辑层实现类InMainEbo：\u003c/h2\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003epackage cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.business\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ebo\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.List\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Map\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.TreeMap\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.book\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.business\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ebi\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.BookEbi\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.book\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.business\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.BookEbiFactory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.common\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.UuidModelConstance\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.common\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.uuid\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dao\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dao\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.UuidDao\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.common\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.uuid\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dao\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.UuidDaoFactory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.business\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ebi\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InMainEbi\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.business\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InMainEbiFactory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dao\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dao\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InDetailDao\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dao\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dao\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InMainDao\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dao\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InDetailDaoFactory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dao\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InMainDaoFactory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InDetailModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InDetailQueryModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InMainModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InMainQueryModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @author 陈浩翔\n *\n * @version 1.0\n */\u003c/span\u003e\npublic class InMainEbo implements InMainEbi{\n    //注入dao\n\n    InMainDao inMainDao = InMainDaoFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getInMainDao\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    InDetailDao inDetailDao = InDetailDaoFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getInDetailDao\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    UuidDao uuidDao = UuidDaoFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getUuidDao\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    BookEbi bookEbi = BookEbiFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getBookEbi\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n    @Override\n    public boolean create(InMainModel inMain, List&lt;InDetailModel&gt; inDetails) {\n        //////////\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e存储inMain信息///////////\n        //补全inMain中的数据\n        //需要:inUuid,inDate,inUserUuid   已组织:inUserUuid\n        //还缺(需补):inUuid,inDate\n        String inUuid = uuidDao\u003cspan class=\"hljs-preprocessor\"\u003e.getNextUuid\u003c/span\u003e(UuidModelConstance\u003cspan class=\"hljs-preprocessor\"\u003e.IN\u003c/span\u003e_MAIN)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        inMain\u003cspan class=\"hljs-preprocessor\"\u003e.setUuid\u003c/span\u003e(inUuid)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        inMain\u003cspan class=\"hljs-preprocessor\"\u003e.setInDate\u003c/span\u003e(System\u003cspan class=\"hljs-preprocessor\"\u003e.currentTimeMillis\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        inMainDao\u003cspan class=\"hljs-preprocessor\"\u003e.create\u003c/span\u003e(inMain)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n         //////////\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e存储inDetail信息///////////\n        for(InDetailModel model:inDetails){\n            //补全每一个inDetail中的数据\n            //需要:inDetailUuid,inMainUuid,bookUuid,sumNum,sumMoney   已组织:bookUuid,sumNum\n            //还缺(需补):inDetailUuid,inMainUuid,sumMoney\n            model\u003cspan class=\"hljs-preprocessor\"\u003e.setUuid\u003c/span\u003e(uuidDao\u003cspan class=\"hljs-preprocessor\"\u003e.getNextUuid\u003c/span\u003e(UuidModelConstance\u003cspan class=\"hljs-preprocessor\"\u003e.IN\u003c/span\u003e_DETAIL))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            model\u003cspan class=\"hljs-preprocessor\"\u003e.setInId\u003c/span\u003e(inUuid)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n            double sumMoney = model\u003cspan class=\"hljs-preprocessor\"\u003e.getSumNum\u003c/span\u003e() * bookEbi\u003cspan class=\"hljs-preprocessor\"\u003e.getSingle\u003c/span\u003e(model\u003cspan class=\"hljs-preprocessor\"\u003e.getBookId\u003c/span\u003e())\u003cspan class=\"hljs-preprocessor\"\u003e.getInPrice\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            model\u003cspan class=\"hljs-preprocessor\"\u003e.setSumMoney\u003c/span\u003e(sumMoney)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            inDetailDao\u003cspan class=\"hljs-preprocessor\"\u003e.create\u003c/span\u003e(model)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n        return true\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    @Override\n    public Map&lt;InMainModel, List&lt;InDetailModel&gt;&gt; getAll() {\n        Map&lt;InMainModel,List&lt;InDetailModel&gt;&gt; map = new TreeMap&lt;InMainModel, List&lt;InDetailModel&gt;&gt;()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        List&lt;InMainModel&gt; inMains = inMainDao\u003cspan class=\"hljs-preprocessor\"\u003e.getAll\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        for(InMainModel inMain: inMains ){\n            //查询条件值对象的创建\n            InDetailQueryModel idqm = new InDetailQueryModel()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            String inUuid = inMain\u003cspan class=\"hljs-preprocessor\"\u003e.getUuid\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            idqm\u003cspan class=\"hljs-preprocessor\"\u003e.setInId\u003c/span\u003e(inUuid)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n            List&lt;InDetailModel&gt; details = inDetailDao\u003cspan class=\"hljs-preprocessor\"\u003e.getbyCondition\u003c/span\u003e(idqm)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n            map\u003cspan class=\"hljs-preprocessor\"\u003e.put\u003c/span\u003e(inMain, details)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n\n        return map\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    @Override\n    public Map&lt;InMainModel, List&lt;InDetailModel&gt;&gt; getByCondition(\n            InMainQueryModel imqm, InDetailQueryModel idqm) {\n        Map&lt;InMainModel, List&lt;InDetailModel&gt;&gt; map = new TreeMap&lt;InMainModel, List&lt;InDetailModel&gt;&gt;()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        List&lt;InMainModel&gt; list = inMainDao\u003cspan class=\"hljs-preprocessor\"\u003e.getbyCondition\u003c/span\u003e(imqm)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        for(InMainModel inMain : list){\n            idqm\u003cspan class=\"hljs-preprocessor\"\u003e.setInId\u003c/span\u003e(inMain\u003cspan class=\"hljs-preprocessor\"\u003e.getUuid\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n            List&lt;InDetailModel&gt; details = inDetailDao\u003cspan class=\"hljs-preprocessor\"\u003e.getbyCondition\u003c/span\u003e(idqm)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            if(details\u003cspan class=\"hljs-preprocessor\"\u003e.size\u003c/span\u003e()!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                map\u003cspan class=\"hljs-preprocessor\"\u003e.put\u003c/span\u003e(inMain, details)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        }\n\n        return map\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch2 id=\"表现层查询界面的代码inquerypanel\"\u003e表现层查询界面的代码InQueryPanel：\u003c/h2\u003e\n\n\u003cp\u003e这里的代码初始化的initComponents()方法是MyEclipse的Matisse from生成的。 \u003cbr\u003e\n核心代码是查询按钮的监听实现方法和myInitData()方法。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003epackage cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ui\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.List\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Map\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JFrame\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JOptionPane\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.book\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.business\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.BookEbiFactory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.book\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.BookModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.business\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InMainEbiFactory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InDetailModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InDetailQueryModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InMainModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.InMainQueryModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.user\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.business\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.UserEbiFactory\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.user\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.vo\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.UserModel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.bookStore\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.DateUtil\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @author 陈浩翔\n *\n * @version 1.0\n */\u003c/span\u003e\npublic class InQueryPanel extends javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JPanel\u003c/span\u003e {\n    private JFrame mainFrame = null\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"hljs-comment\"\u003e/** Creates new form InQueryPanel \n     * @param mainFrame */\u003c/span\u003e\n    public InQueryPanel(JFrame mainFrame) {\n        this\u003cspan class=\"hljs-preprocessor\"\u003e.mainFrame\u003c/span\u003e = mainFrame\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        initComponents()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        myInitData()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e/**\n     * 初始化combo Box的数据\n     */\u003c/span\u003e\n    private void myInitData() {\n        //进货人组合框内数据的初始化\n        List&lt;UserModel&gt; listUsers = UserEbiFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getUserEbi\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.getAllIn\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        for (UserModel user : listUsers) {\n            combInUser\u003cspan class=\"hljs-preprocessor\"\u003e.addItem\u003c/span\u003e(user\u003cspan class=\"hljs-preprocessor\"\u003e.getName\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n\n        //图书组合框内数据的初始化\n        List&lt;BookModel&gt; listBooks = BookEbiFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getBookEbi\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.getAll\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        for (BookModel book : listBooks) {\n            combBook\u003cspan class=\"hljs-preprocessor\"\u003e.addItem\u003c/span\u003e(book\u003cspan class=\"hljs-preprocessor\"\u003e.getName\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n    }\n\n    //GEN-BEGIN:initComponents\n    // &lt;editor-fold defaultstate=\u003cspan class=\"hljs-string\"\u003e\"collapsed\"\u003c/span\u003e desc=\u003cspan class=\"hljs-string\"\u003e\"Generated Code\"\u003c/span\u003e&gt;\n    private void initComponents() {\n\n        jLabel1 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel5 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        combBook = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JComboBox\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel7 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInUuid = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel4 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        combInUser = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JComboBox\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel8 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInNum = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel9 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInDate = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel10 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInDate2 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel11 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInNum2 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel12 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInDetailUuid = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel13 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInSumMoney = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel14 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInSumMoney2 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel15 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnQuery = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnBack = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        setMinimumSize(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Dimension\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e800\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e600\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        setLayout(null)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel1\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e36\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel1\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e204\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel1\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u67e5\\u8be2\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel1)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel1\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e290\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e170\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel5\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel5\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u56fe\\u4e66:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel5)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel5\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e460\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e240\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        combBook\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Dialog\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        combBook\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        combBook\u003cspan class=\"hljs-preprocessor\"\u003e.setModel\u003c/span\u003e(new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.DefaultComboBoxModel\u003c/span\u003e(\n                new String[] { \u003cspan class=\"hljs-string\"\u003e\"查询所有\"\u003c/span\u003e }))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(combBook)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        combBook\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e510\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e240\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel7\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel7\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u5355\\u7f16\\u53f7:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel7)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel7\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e90\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(tfdInUuid)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInUuid\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e210\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e90\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e150\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel4\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel4\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u4eba:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel4)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel4\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e440\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e90\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        combInUser\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Dialog\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        combInUser\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e204\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e204\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        combInUser\u003cspan class=\"hljs-preprocessor\"\u003e.setModel\u003c/span\u003e(new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.DefaultComboBoxModel\u003c/span\u003e(\n                new String[] { \u003cspan class=\"hljs-string\"\u003e\"查询所有\"\u003c/span\u003e }))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(combInUser)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        combInUser\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e510\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e90\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel8\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel8\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u6700\\u5c0f\\u6570\\u91cf:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel8)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel8\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e320\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(tfdInNum)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInNum\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e210\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e320\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e150\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel9\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel9\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u683c\\u5f0f\\u5982: 2016-04-13\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel9)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel9\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e190\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e190\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e180\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(tfdInDate)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInDate\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e210\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e160\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e150\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel10\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel10\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u622a\\u6b62\\u65f6\\u95f4:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel10)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel10\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e390\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e160\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(tfdInDate2)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInDate2\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e510\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e160\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel11\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel11\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u6700\\u5927\\u6570\\u91cf:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel11)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel11\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e390\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e320\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(tfdInNum2)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInNum2\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e510\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e320\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel12\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel12\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u660e\\u7ec6\\u7f16\\u53f7:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel12)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel12\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e240\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(tfdInDetailUuid)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInDetailUuid\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e210\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e240\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e150\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel13\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel13\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u603b\\u4ef7\\u6700\\u5c0f\\u503c:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel13)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel13\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e400\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e140\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(tfdInSumMoney)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInSumMoney\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e210\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e400\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e150\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel14\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel14\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u603b\\u4ef7\\u6700\\u5927\\u503c:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel14)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel14\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e370\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e400\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e140\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(tfdInSumMoney2)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        tfdInSumMoney2\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e510\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e400\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel15\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"微软雅黑\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e18\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel15\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fdb\\u8d27\\u8d77\\u59cb\\u65f6\\u95f4:\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel15)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel15\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e160\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        btnQuery\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Dialog\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e36\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnQuery\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnQuery\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u67e5\\u8be2\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnQuery\u003cspan class=\"hljs-preprocessor\"\u003e.addActionListener\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionListener\u003c/span\u003e() {\n            public void actionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n                btnQueryActionPerformed(evt)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        })\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(btnQuery)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnQuery\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e160\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e490\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e140\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        btnBack\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Dialog\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e36\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnBack\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnBack\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u8fd4\\u56de\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnBack\u003cspan class=\"hljs-preprocessor\"\u003e.addActionListener\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionListener\u003c/span\u003e() {\n            public void actionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n                btnBackActionPerformed(evt)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        })\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(btnBack)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        btnBack\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e480\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e490\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e140\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }// &lt;/editor-fold&gt;\n    //GEN-END:initComponents\n\n    private void btnQueryActionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n        //\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e收集参数(且验证输入有效性)\n        //进货单编号\n        String inUuid = tfdInUuid\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        //用户姓名\n        String inUserName = combInUser\u003cspan class=\"hljs-preprocessor\"\u003e.getSelectedItem\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.toString\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        //用户ID\n        String inUserUuid =null\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        if(combInUser\u003cspan class=\"hljs-preprocessor\"\u003e.getSelectedIndex\u003c/span\u003e()&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            inUserUuid = UserEbiFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getUserEbi\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.getUserByName\u003c/span\u003e(inUserName)\u003cspan class=\"hljs-preprocessor\"\u003e.getUuid\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n\n        //进货起始时间\n        String txtInDate = tfdInDate\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        long inDate = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        if(txtInDate!=null&amp;txtInDate\u003cspan class=\"hljs-preprocessor\"\u003e.trim\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.length\u003c/span\u003e()&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            inDate = DateUtil\u003cspan class=\"hljs-preprocessor\"\u003e.string\u003c/span\u003e2Long(txtInDate+\u003cspan class=\"hljs-string\"\u003e\" 00:00:00\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"进货起始时间格式错误!\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            if(inDate==-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n                return \u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        }\n\n        //进货截止时间\n        String txtInDate2 = tfdInDate2\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        long inDate2 = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        if(txtInDate2!=null&amp;txtInDate2\u003cspan class=\"hljs-preprocessor\"\u003e.trim\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.length\u003c/span\u003e()&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            inDate2 = DateUtil\u003cspan class=\"hljs-preprocessor\"\u003e.string\u003c/span\u003e2Long(txtInDate2+ \u003cspan class=\"hljs-string\"\u003e\" 23:59:59\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"进货截止时间格式错误!\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            if(inDate2==-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n                return \u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        }\n\n        //进货明细单编号\n        String inDetailUuid  = tfdInDetailUuid\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //书的Uuid\n        String bookUuid =null\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        if(combBook\u003cspan class=\"hljs-preprocessor\"\u003e.getSelectedIndex\u003c/span\u003e()&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            String bookName = combBook\u003cspan class=\"hljs-preprocessor\"\u003e.getSelectedItem\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.toString\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            bookUuid = BookEbiFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getBookEbi\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.getBookByName\u003c/span\u003e(bookName)\u003cspan class=\"hljs-preprocessor\"\u003e.getUuid\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        }\n\n        //进货最小数量\n        int sumNum =\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        if(tfdInNum\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()!=null &amp;&amp; tfdInNum\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.trim\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.length\u003c/span\u003e()&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            try {\n                sumNum = Integer\u003cspan class=\"hljs-preprocessor\"\u003e.parseInt\u003c/span\u003e( tfdInNum\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e() )\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            } catch (NumberFormatException e) {\n                JOptionPane\u003cspan class=\"hljs-preprocessor\"\u003e.showMessageDialog\u003c/span\u003e(mainFrame, \u003cspan class=\"hljs-string\"\u003e\"进货数量最小值格式错误\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                return \u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        }\n\n        //进货最大数量\n        int sumNum2 =\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        if(tfdInNum2\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()!=null &amp;&amp; tfdInNum2\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.trim\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.length\u003c/span\u003e()&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            try {\n                sumNum2 = Integer\u003cspan class=\"hljs-preprocessor\"\u003e.parseInt\u003c/span\u003e( tfdInNum2\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e() )\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            } catch (NumberFormatException e) {\n                JOptionPane\u003cspan class=\"hljs-preprocessor\"\u003e.showMessageDialog\u003c/span\u003e(mainFrame, \u003cspan class=\"hljs-string\"\u003e\"进货数量最大值格式错误\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                return \u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        }\n\n        //进货最小总价\n        double sumMoney =\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        if(tfdInSumMoney\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()!=null &amp;&amp; tfdInSumMoney\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.trim\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.length\u003c/span\u003e()&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            try {\n                sumMoney = Double\u003cspan class=\"hljs-preprocessor\"\u003e.parseDouble\u003c/span\u003e(tfdInSumMoney\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            } catch (NumberFormatException e) {\n                JOptionPane\u003cspan class=\"hljs-preprocessor\"\u003e.showMessageDialog\u003c/span\u003e(mainFrame, \u003cspan class=\"hljs-string\"\u003e\"进货总价最小值格式错误\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                return\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        }\n\n        //进货最大总价\n        double sumMoney2 =\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        if(tfdInSumMoney2\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()!=null &amp;&amp; tfdInSumMoney2\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.trim\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.length\u003c/span\u003e()&gt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n            try {\n                sumMoney2 = Double\u003cspan class=\"hljs-preprocessor\"\u003e.parseDouble\u003c/span\u003e(tfdInSumMoney2\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            } catch (NumberFormatException e) {\n                JOptionPane\u003cspan class=\"hljs-preprocessor\"\u003e.showMessageDialog\u003c/span\u003e(mainFrame, \u003cspan class=\"hljs-string\"\u003e\"进货总价最小值格式错误\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                return\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        }\n\n\n        //\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e组织参数----分别组织InMainQueryModel和InDetailQueryModel\n\n              //组织InMainQueryModel\n        InMainQueryModel imqm = new InMainQueryModel()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        imqm\u003cspan class=\"hljs-preprocessor\"\u003e.setUuid\u003c/span\u003e(inUuid)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        imqm\u003cspan class=\"hljs-preprocessor\"\u003e.setInUserId\u003c/span\u003e(inUserUuid)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        imqm\u003cspan class=\"hljs-preprocessor\"\u003e.setInDate\u003c/span\u003e(inDate)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        imqm\u003cspan class=\"hljs-preprocessor\"\u003e.setInDate\u003c/span\u003e2(inDate2)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n              //组织InDetailQueryModel\n        InDetailQueryModel idqm = new InDetailQueryModel()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        idqm\u003cspan class=\"hljs-preprocessor\"\u003e.setUuid\u003c/span\u003e(inDetailUuid)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        idqm\u003cspan class=\"hljs-preprocessor\"\u003e.setBookId\u003c/span\u003e(bookUuid)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        idqm\u003cspan class=\"hljs-preprocessor\"\u003e.setSumMoney\u003c/span\u003e(sumMoney)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        idqm\u003cspan class=\"hljs-preprocessor\"\u003e.setSumMoney\u003c/span\u003e2(sumMoney2)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        idqm\u003cspan class=\"hljs-preprocessor\"\u003e.setSumNum\u003c/span\u003e(sumNum)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        idqm\u003cspan class=\"hljs-preprocessor\"\u003e.setSumNum\u003c/span\u003e2(sumNum2)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e调用逻辑层\n        Map&lt;InMainModel, List&lt;InDetailModel&gt;&gt; map = InMainEbiFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getInMainEbi\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.getByCondition\u003c/span\u003e(imqm, idqm)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n\n        //\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e返回到结果页面\n        mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.setContentPane\u003c/span\u003e(new InListPanel(mainFrame,map))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.validate\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    private void btnBackActionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n        back()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    private void back() {\n        mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.setContentPane\u003c/span\u003e(new InListPanel(mainFrame))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.validate\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    //GEN-BEGIN:variables\n    // Variables declaration - do not modify\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e btnBack\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e btnQuery\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JComboBox\u003c/span\u003e combBook\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JComboBox\u003c/span\u003e combInUser\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel1\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel10\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel11\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel12\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel13\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel14\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel15\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel4\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel5\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel7\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel8\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel9\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e tfdInDate\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e tfdInDate2\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e tfdInDetailUuid\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e tfdInNum\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e tfdInNum2\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e tfdInSumMoney\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e tfdInSumMoney2\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JTextField\u003c/span\u003e tfdInUuid\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    // End of variables declaration//GEN-END:variables\n\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e目前我的本系列所有源代码已打包上传至百度云： \u003cbr\u003e\n\u003ca href=\"http://pan.baidu.com/s/1nv5ZZwX\"\u003ehttp://pan.baidu.com/s/1nv5ZZwX\u003c/a\u003e \u003cbr\u003e\n2016.4.19\u003c/p\u003e","markdowncontent":"本系列前面博客的链接：\n===========\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 六 )\nhttp://blog.csdn.net/qq_26525215/article/details/51169277\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 五 ) \nhttp://blog.csdn.net/qq_26525215/article/details/51136848\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 四(2) )： \nhttp://blog.csdn.net/qq_26525215/article/details/51117135\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 四(1) )： \nhttp://blog.csdn.net/qq_26525215/article/details/51116429\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 三 )： \nhttp://blog.csdn.net/qq_26525215/article/details/51099202\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 二 )： \nhttp://blog.csdn.net/qq_26525215/article/details/51089734\n\nJava-单机版的书店管理系统(练习设计模块和思想_系列 一 )： \nhttp://blog.csdn.net/qq_26525215/article/details/51073546\n\n介绍：\n===\n\n现在已经将进货模块的查询写完了，\n\n（进货模块只有添加和查询！没有删除和修改。\n因为如果能随便修改进货的时间，进货的数量等，这不是乱套了嘛）\n\n现在完成的模块有：用户模块，图书模块，进货模块。\n新增写了一个日期类，将long型数字转换成某个日期格式显示给用户看。\n将string型的日期格式转换成long型数字存储。\n将前面的StringComparison类进行了修改。\n\n**现在剩下的模块还有销售模块，库存模块，还有登录界面，**\n库存模块是需要综合销售模块和进货模块来写的。\n也就是模块与模块之间需要串接了。\n现在我写的这3个模块，基本上是属于和对方没什么联系的，每个模块都能独自完成自己的功能。\n\n只亮一张进货查询的图片吧。界面不好看（^-^）勿喷噢。\n![](http://img.blog.csdn.net/20160419145730578)\n\n\n增加或修改的代码：\n=========\n\n\n工具类StringComparison ：\n----\n\n```\npackage cn.hncu.bookStore.util;\n\n/**\n * 工具类\n * 字符串比较\n * @author 陈浩翔\n *\n * @version 1.0\n */\npublic class StringComparison {\n\t\n\t/**\n\t * str1和str2完全(精确查找)匹配\n\t * 这个精确匹配是在str2不为null且str2去掉2端空格的情况下比较的！！！\n\t * @param str1---被比较的字符串\n\t * @param str2---比较的字符串\n\t * @return---如果2个字符串相同或者str2全部是空格或者str2==null，就返回true，如果2个字符串不同，就返回false\n\t */\n\tpublic static boolean stringEquals(String str1,String str2){\n\t\tif(str2==null || str2.trim().length()\u003c=0){\n\t\t\treturn true;\n\t\t}\n\t\tif(!str1.equals(str2.trim())){\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * str1与str2模糊匹配\n\t * 这个模糊匹配也是在str2不为null且str2去掉2端空格的情况下比较的！！！\n\t * @param str1---被比较的字符串\n\t * @param str2---比较的字符串\n\t * @return---如果str2是str1的子串或者str2全部是空格或str2==null，就返回true，如果str2不是str1的字串，就返回false\n\t */\n\tpublic static boolean stringIndexOf(String str1,String str2){\n\t\tif(str2==null || str2.trim().length()\u003c=0){\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif(str1.indexOf(str2.trim())==-1){\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n}\n\n```\n\n工具类DateUtil：\n\n```\npackage cn.hncu.bookStore.util;\n\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport javax.swing.JOptionPane;\n\n/**\n * 日期工具类\n * @author 陈浩翔\n *\n * @version 1.0\n */\npublic class DateUtil {\n\t/**\n\t * 根据传入的long参数 ，把long值转换为固定的年月日格式输出\n\t * @param d---传入的参数\n\t * @return---一个字符串参数，格式为：yyyy年MM月dd日 HH:mm:ss\n\t */\n\tpublic static String long2String(long d){\n\t\tDate date = new Date(d);\n\t\tDateFormat df = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss\");\n\t\tString str = df.format(date);\n\t\treturn str;\n\t}\n\t/*\n\t * 代码抽取技术：\n\t *   首先不要想“抽出的方法”怎么写，而是把类似的代码拷在一起，观察其中的变化部分和不变化部分。\n\t *   把这段代码中用到的“前面定义的变量”抽取成方法的参数--本例中为txtInDate和erroInfo，把“留给后面使用的”将在这段代码中新\n\t *   创建的变量定义成方法的返回值---本例为inDate。\n\t */\n\t\n\t\n\t/**\n\t * 根据传入的日期格式，把String型的参数转换成long型参数返回\u003cbr/\u003e\n\t * 如果格式传入错误，会根据传入的erroInfo字符串弹出窗口给出提示！ \n\t * @param txtInDate---传入的日期。\n\t * @param erroInfo----传入的错误提示信息\n\t * @return---long型的数字，如果格式转换错误，返回-1；\n\t */\n\tpublic static long string2Long(String txtInDate,String erroInfo){\n\t\tDateFormat date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tlong inDate=0;\n\t\ttry {\n\t\t\tDate d = date.parse(txtInDate);\n\t\t\tinDate = d.getTime();\n\t\t} catch (ParseException e) {\n\t\t\tJOptionPane.showMessageDialog(null, erroInfo);\n\t\t\treturn -1;\n\t\t}\n\t\treturn inDate;\n\t}\n\t\n}\n\n```\n\n进货模块的逻辑层实现类InMainEbo：\n------------\n\n```\npackage cn.hncu.bookStore.in.business.ebo;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\n\nimport cn.hncu.bookStore.book.business.ebi.BookEbi;\nimport cn.hncu.bookStore.book.business.factory.BookEbiFactory;\nimport cn.hncu.bookStore.common.UuidModelConstance;\nimport cn.hncu.bookStore.common.uuid.dao.dao.UuidDao;\nimport cn.hncu.bookStore.common.uuid.dao.factory.UuidDaoFactory;\nimport cn.hncu.bookStore.in.business.ebi.InMainEbi;\nimport cn.hncu.bookStore.in.business.factory.InMainEbiFactory;\nimport cn.hncu.bookStore.in.dao.dao.InDetailDao;\nimport cn.hncu.bookStore.in.dao.dao.InMainDao;\nimport cn.hncu.bookStore.in.dao.factory.InDetailDaoFactory;\nimport cn.hncu.bookStore.in.dao.factory.InMainDaoFactory;\nimport cn.hncu.bookStore.in.vo.InDetailModel;\nimport cn.hncu.bookStore.in.vo.InDetailQueryModel;\nimport cn.hncu.bookStore.in.vo.InMainModel;\nimport cn.hncu.bookStore.in.vo.InMainQueryModel;\n\n/**\n * \n * @author 陈浩翔\n *\n * @version 1.0\n */\npublic class InMainEbo implements InMainEbi{\n\t//注入dao\n\t\n\tInMainDao inMainDao = InMainDaoFactory.getInMainDao();\n\tInDetailDao inDetailDao = InDetailDaoFactory.getInDetailDao();\n\tUuidDao uuidDao = UuidDaoFactory.getUuidDao();\n\tBookEbi bookEbi = BookEbiFactory.getBookEbi();\n\t\n\t@Override\n\tpublic boolean create(InMainModel inMain, List\u003cInDetailModel\u003e inDetails) {\n\t\t//////////1存储inMain信息///////////\n\t\t//补全inMain中的数据\n\t\t//需要:inUuid,inDate,inUserUuid   已组织:inUserUuid\n\t\t//还缺(需补):inUuid,inDate\n\t\tString inUuid = uuidDao.getNextUuid(UuidModelConstance.IN_MAIN);\n\t\tinMain.setUuid(inUuid);\n\t\tinMain.setInDate(System.currentTimeMillis());\n\t\tinMainDao.create(inMain);\n\t\t\n\t\t //////////2存储inDetail信息///////////\n\t\tfor(InDetailModel model:inDetails){\n\t\t\t//补全每一个inDetail中的数据\n\t\t\t//需要:inDetailUuid,inMainUuid,bookUuid,sumNum,sumMoney   已组织:bookUuid,sumNum\n\t        //还缺(需补):inDetailUuid,inMainUuid,sumMoney\n\t\t\tmodel.setUuid(uuidDao.getNextUuid(UuidModelConstance.IN_DETAIL));\n\t\t\tmodel.setInId(inUuid);\n\t\t\t\n\t\t\tdouble sumMoney = model.getSumNum() * bookEbi.getSingle(model.getBookId()).getInPrice();\n\t\t\tmodel.setSumMoney(sumMoney);\n\t\t\tinDetailDao.create(model);\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic Map\u003cInMainModel, List\u003cInDetailModel\u003e\u003e getAll() {\n\t\tMap\u003cInMainModel,List\u003cInDetailModel\u003e\u003e map = new TreeMap\u003cInMainModel, List\u003cInDetailModel\u003e\u003e();\n\t\t\n\t\tList\u003cInMainModel\u003e inMains = inMainDao.getAll();\n\t\t\n\t\tfor(InMainModel inMain: inMains ){\n\t\t\t//查询条件值对象的创建\n\t\t\tInDetailQueryModel idqm = new InDetailQueryModel();\n\t\t\tString inUuid = inMain.getUuid();\n\t\t\tidqm.setInId(inUuid);\n\n\t\t\tList\u003cInDetailModel\u003e details = inDetailDao.getbyCondition(idqm);\n\t\t\t\n\t\t\tmap.put(inMain, details);\n\t\t}\n\t\t\n\t\treturn map;\n\t}\n\n\t@Override\n\tpublic Map\u003cInMainModel, List\u003cInDetailModel\u003e\u003e getByCondition(\n\t\t\tInMainQueryModel imqm, InDetailQueryModel idqm) {\n\t\tMap\u003cInMainModel, List\u003cInDetailModel\u003e\u003e map = new TreeMap\u003cInMainModel, List\u003cInDetailModel\u003e\u003e();\n\t\t\n\t\tList\u003cInMainModel\u003e list = inMainDao.getbyCondition(imqm);\n\t\t\n\t\tfor(InMainModel inMain : list){\n\t\t\tidqm.setInId(inMain.getUuid());\n\t\t\t\n\t\t\tList\u003cInDetailModel\u003e details = inDetailDao.getbyCondition(idqm);\n\t\t\tif(details.size()!=0){\n\t\t\t\tmap.put(inMain, details);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn map;\n\t}\n\n}\n\n```\n\n\n表现层查询界面的代码InQueryPanel：\n-----------------------\n\n这里的代码初始化的initComponents()方法是MyEclipse的Matisse from生成的。\n核心代码是查询按钮的监听实现方法和myInitData()方法。\n\n```\npackage cn.hncu.bookStore.in.ui;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.swing.JFrame;\nimport javax.swing.JOptionPane;\n\nimport cn.hncu.bookStore.book.business.factory.BookEbiFactory;\nimport cn.hncu.bookStore.book.vo.BookModel;\nimport cn.hncu.bookStore.in.business.factory.InMainEbiFactory;\nimport cn.hncu.bookStore.in.vo.InDetailModel;\nimport cn.hncu.bookStore.in.vo.InDetailQueryModel;\nimport cn.hncu.bookStore.in.vo.InMainModel;\nimport cn.hncu.bookStore.in.vo.InMainQueryModel;\nimport cn.hncu.bookStore.user.business.factory.UserEbiFactory;\nimport cn.hncu.bookStore.user.vo.UserModel;\nimport cn.hncu.bookStore.util.DateUtil;\n\n/**\n * \n * @author 陈浩翔\n *\n * @version 1.0\n */\npublic class InQueryPanel extends javax.swing.JPanel {\n\tprivate JFrame mainFrame = null;\n\n\t/** Creates new form InQueryPanel \n\t * @param mainFrame */\n\tpublic InQueryPanel(JFrame mainFrame) {\n\t\tthis.mainFrame = mainFrame;\n\t\tinitComponents();\n\t\tmyInitData();\n\t}\n\n\t/**\n\t * 初始化combo Box的数据\n\t */\n\tprivate void myInitData() {\n\t\t//进货人组合框内数据的初始化\n\t\tList\u003cUserModel\u003e listUsers = UserEbiFactory.getUserEbi().getAllIn();\n\t\tfor (UserModel user : listUsers) {\n\t\t\tcombInUser.addItem(user.getName());\n\t\t}\n\n\t\t//图书组合框内数据的初始化\n\t\tList\u003cBookModel\u003e listBooks = BookEbiFactory.getBookEbi().getAll();\n\t\tfor (BookModel book : listBooks) {\n\t\t\tcombBook.addItem(book.getName());\n\t\t}\n\t}\n\n\t//GEN-BEGIN:initComponents\n\t// \u003ceditor-fold defaultstate=\"collapsed\" desc=\"Generated Code\"\u003e\n\tprivate void initComponents() {\n\n\t\tjLabel1 = new javax.swing.JLabel();\n\t\tjLabel5 = new javax.swing.JLabel();\n\t\tcombBook = new javax.swing.JComboBox();\n\t\tjLabel7 = new javax.swing.JLabel();\n\t\ttfdInUuid = new javax.swing.JTextField();\n\t\tjLabel4 = new javax.swing.JLabel();\n\t\tcombInUser = new javax.swing.JComboBox();\n\t\tjLabel8 = new javax.swing.JLabel();\n\t\ttfdInNum = new javax.swing.JTextField();\n\t\tjLabel9 = new javax.swing.JLabel();\n\t\ttfdInDate = new javax.swing.JTextField();\n\t\tjLabel10 = new javax.swing.JLabel();\n\t\ttfdInDate2 = new javax.swing.JTextField();\n\t\tjLabel11 = new javax.swing.JLabel();\n\t\ttfdInNum2 = new javax.swing.JTextField();\n\t\tjLabel12 = new javax.swing.JLabel();\n\t\ttfdInDetailUuid = new javax.swing.JTextField();\n\t\tjLabel13 = new javax.swing.JLabel();\n\t\ttfdInSumMoney = new javax.swing.JTextField();\n\t\tjLabel14 = new javax.swing.JLabel();\n\t\ttfdInSumMoney2 = new javax.swing.JTextField();\n\t\tjLabel15 = new javax.swing.JLabel();\n\t\tbtnQuery = new javax.swing.JButton();\n\t\tbtnBack = new javax.swing.JButton();\n\n\t\tsetMinimumSize(new java.awt.Dimension(800, 600));\n\t\tsetLayout(null);\n\n\t\tjLabel1.setFont(new java.awt.Font(\"微软雅黑\", 1, 36));\n\t\tjLabel1.setForeground(new java.awt.Color(204, 0, 0));\n\t\tjLabel1.setText(\"\\u8fdb\\u8d27\\u67e5\\u8be2\");\n\t\tadd(jLabel1);\n\t\tjLabel1.setBounds(290, 10, 170, 70);\n\n\t\tjLabel5.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel5.setText(\"\\u56fe\\u4e66:\");\n\t\tadd(jLabel5);\n\t\tjLabel5.setBounds(460, 240, 50, 30);\n\n\t\tcombBook.setFont(new java.awt.Font(\"Dialog\", 1, 18));\n\t\tcombBook.setForeground(new java.awt.Color(0, 0, 255));\n\t\tcombBook.setModel(new javax.swing.DefaultComboBoxModel(\n\t\t\t\tnew String[] { \"查询所有\" }));\n\t\tadd(combBook);\n\t\tcombBook.setBounds(510, 240, 200, 30);\n\n\t\tjLabel7.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel7.setText(\"\\u8fdb\\u8d27\\u5355\\u7f16\\u53f7:\");\n\t\tadd(jLabel7);\n\t\tjLabel7.setBounds(100, 90, 100, 30);\n\t\tadd(tfdInUuid);\n\t\ttfdInUuid.setBounds(210, 90, 150, 30);\n\n\t\tjLabel4.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel4.setText(\"\\u8fdb\\u8d27\\u4eba:\");\n\t\tadd(jLabel4);\n\t\tjLabel4.setBounds(440, 90, 80, 30);\n\n\t\tcombInUser.setFont(new java.awt.Font(\"Dialog\", 1, 18));\n\t\tcombInUser.setForeground(new java.awt.Color(204, 204, 0));\n\t\tcombInUser.setModel(new javax.swing.DefaultComboBoxModel(\n\t\t\t\tnew String[] { \"查询所有\" }));\n\t\tadd(combInUser);\n\t\tcombInUser.setBounds(510, 90, 200, 30);\n\n\t\tjLabel8.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel8.setText(\"\\u8fdb\\u8d27\\u6700\\u5c0f\\u6570\\u91cf:\");\n\t\tadd(jLabel8);\n\t\tjLabel8.setBounds(80, 320, 120, 30);\n\t\tadd(tfdInNum);\n\t\ttfdInNum.setBounds(210, 320, 150, 30);\n\n\t\tjLabel9.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel9.setText(\"\\u683c\\u5f0f\\u5982: 2016-04-13\");\n\t\tadd(jLabel9);\n\t\tjLabel9.setBounds(190, 190, 180, 30);\n\t\tadd(tfdInDate);\n\t\ttfdInDate.setBounds(210, 160, 150, 30);\n\n\t\tjLabel10.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel10.setText(\"\\u8fdb\\u8d27\\u622a\\u6b62\\u65f6\\u95f4:\");\n\t\tadd(jLabel10);\n\t\tjLabel10.setBounds(390, 160, 120, 30);\n\t\tadd(tfdInDate2);\n\t\ttfdInDate2.setBounds(510, 160, 200, 30);\n\n\t\tjLabel11.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel11.setText(\"\\u8fdb\\u8d27\\u6700\\u5927\\u6570\\u91cf:\");\n\t\tadd(jLabel11);\n\t\tjLabel11.setBounds(390, 320, 120, 30);\n\t\tadd(tfdInNum2);\n\t\ttfdInNum2.setBounds(510, 320, 200, 30);\n\n\t\tjLabel12.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel12.setText(\"\\u8fdb\\u8d27\\u660e\\u7ec6\\u7f16\\u53f7:\");\n\t\tadd(jLabel12);\n\t\tjLabel12.setBounds(80, 240, 120, 30);\n\t\tadd(tfdInDetailUuid);\n\t\ttfdInDetailUuid.setBounds(210, 240, 150, 30);\n\n\t\tjLabel13.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel13.setText(\"\\u8fdb\\u8d27\\u603b\\u4ef7\\u6700\\u5c0f\\u503c:\");\n\t\tadd(jLabel13);\n\t\tjLabel13.setBounds(60, 400, 140, 30);\n\t\tadd(tfdInSumMoney);\n\t\ttfdInSumMoney.setBounds(210, 400, 150, 30);\n\n\t\tjLabel14.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel14.setText(\"\\u8fdb\\u8d27\\u603b\\u4ef7\\u6700\\u5927\\u503c:\");\n\t\tadd(jLabel14);\n\t\tjLabel14.setBounds(370, 400, 140, 30);\n\t\tadd(tfdInSumMoney2);\n\t\ttfdInSumMoney2.setBounds(510, 400, 200, 30);\n\n\t\tjLabel15.setFont(new java.awt.Font(\"微软雅黑\", 0, 18));\n\t\tjLabel15.setText(\"\\u8fdb\\u8d27\\u8d77\\u59cb\\u65f6\\u95f4:\");\n\t\tadd(jLabel15);\n\t\tjLabel15.setBounds(80, 160, 120, 30);\n\n\t\tbtnQuery.setFont(new java.awt.Font(\"Dialog\", 1, 36));\n\t\tbtnQuery.setForeground(new java.awt.Color(255, 0, 0));\n\t\tbtnQuery.setText(\"\\u67e5\\u8be2\");\n\t\tbtnQuery.addActionListener(new java.awt.event.ActionListener() {\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\t\tbtnQueryActionPerformed(evt);\n\t\t\t}\n\t\t});\n\t\tadd(btnQuery);\n\t\tbtnQuery.setBounds(160, 490, 140, 60);\n\n\t\tbtnBack.setFont(new java.awt.Font(\"Dialog\", 1, 36));\n\t\tbtnBack.setForeground(new java.awt.Color(255, 0, 0));\n\t\tbtnBack.setText(\"\\u8fd4\\u56de\");\n\t\tbtnBack.addActionListener(new java.awt.event.ActionListener() {\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\t\tbtnBackActionPerformed(evt);\n\t\t\t}\n\t\t});\n\t\tadd(btnBack);\n\t\tbtnBack.setBounds(480, 490, 140, 60);\n\t}// \u003c/editor-fold\u003e\n\t//GEN-END:initComponents\n\n\tprivate void btnQueryActionPerformed(java.awt.event.ActionEvent evt) {\n\t\t//1收集参数(且验证输入有效性)\n\t\t//进货单编号\n\t\tString inUuid = tfdInUuid.getText();\n\t\t//用户姓名\n\t\tString inUserName = combInUser.getSelectedItem().toString();\n\t\t//用户ID\n\t\tString inUserUuid =null;\n\t\tif(combInUser.getSelectedIndex()\u003e0){\n\t\t\tinUserUuid = UserEbiFactory.getUserEbi().getUserByName(inUserName).getUuid();\n\t\t}\n\t\t\n\t\t//进货起始时间\n\t\tString txtInDate = tfdInDate.getText();\n\t\tlong inDate = 0;\n\t\tif(txtInDate!=null&txtInDate.trim().length()\u003e0){\n\t\t\tinDate = DateUtil.string2Long(txtInDate+\" 00:00:00\", \"进货起始时间格式错误!\");\n\t\t\tif(inDate==-1){\n\t\t\t\treturn ;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//进货截止时间\n\t\tString txtInDate2 = tfdInDate2.getText();\n\t\tlong inDate2 = 0;\n\t\tif(txtInDate2!=null&txtInDate2.trim().length()\u003e0){\n\t\t\tinDate2 = DateUtil.string2Long(txtInDate2+ \" 23:59:59\", \"进货截止时间格式错误!\");\n\t\t\tif(inDate2==-1){\n\t\t\t\treturn ;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//进货明细单编号\n\t\tString inDetailUuid  = tfdInDetailUuid.getText();\n\t\t\n\t\t//书的Uuid\n\t\tString bookUuid =null;\n\t\tif(combBook.getSelectedIndex()\u003e0){\n\t\t\tString bookName = combBook.getSelectedItem().toString();\n\t\t\tbookUuid = BookEbiFactory.getBookEbi().getBookByName(bookName).getUuid();\n\t\t\t\n\t\t}\n\t\t\n\t\t//进货最小数量\n\t\tint sumNum =0;\n\t\tif(tfdInNum.getText()!=null && tfdInNum.getText().trim().length()\u003e0){\n\t\t\ttry {\n\t\t\t\tsumNum = Integer.parseInt( tfdInNum.getText() );\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tJOptionPane.showMessageDialog(mainFrame, \"进货数量最小值格式错误\");\n\t\t\t\treturn ;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//进货最大数量\n\t\tint sumNum2 =0;\n\t\tif(tfdInNum2.getText()!=null && tfdInNum2.getText().trim().length()\u003e0){\n\t\t\ttry {\n\t\t\t\tsumNum2 = Integer.parseInt( tfdInNum2.getText() );\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tJOptionPane.showMessageDialog(mainFrame, \"进货数量最大值格式错误\");\n\t\t\t\treturn ;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//进货最小总价\n\t\tdouble sumMoney =0;\n\t\tif(tfdInSumMoney.getText()!=null && tfdInSumMoney.getText().trim().length()\u003e0){\n\t\t\ttry {\n\t\t\t\tsumMoney = Double.parseDouble(tfdInSumMoney.getText());\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tJOptionPane.showMessageDialog(mainFrame, \"进货总价最小值格式错误\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//进货最大总价\n\t\tdouble sumMoney2 =0;\n\t\tif(tfdInSumMoney2.getText()!=null && tfdInSumMoney2.getText().trim().length()\u003e0){\n\t\t\ttry {\n\t\t\t\tsumMoney2 = Double.parseDouble(tfdInSumMoney2.getText());\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tJOptionPane.showMessageDialog(mainFrame, \"进货总价最小值格式错误\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t//2组织参数----分别组织InMainQueryModel和InDetailQueryModel\n\t\t\n\t\t      //组织InMainQueryModel\n\t\tInMainQueryModel imqm = new InMainQueryModel();\n\t\timqm.setUuid(inUuid);\n\t\timqm.setInUserId(inUserUuid);\n\t\timqm.setInDate(inDate);\n\t\timqm.setInDate2(inDate2);\n\t\t   \t  //组织InDetailQueryModel\n\t\tInDetailQueryModel idqm = new InDetailQueryModel();\n\t\tidqm.setUuid(inDetailUuid);\n\t\tidqm.setBookId(bookUuid);\n\t\tidqm.setSumMoney(sumMoney);\n\t\tidqm.setSumMoney2(sumMoney2);\n\t\tidqm.setSumNum(sumNum);\n\t\tidqm.setSumNum2(sumNum2);\n\t\t\n\t\t//3调用逻辑层\n\t\tMap\u003cInMainModel, List\u003cInDetailModel\u003e\u003e map = InMainEbiFactory.getInMainEbi().getByCondition(imqm, idqm);\n\t\t\n\t\t\n\t\t//4返回到结果页面\n\t\tmainFrame.setContentPane(new InListPanel(mainFrame,map));\n\t\tmainFrame.validate();\n\t}\n\n\tprivate void btnBackActionPerformed(java.awt.event.ActionEvent evt) {\n\t\tback();\n\t}\n\n\tprivate void back() {\n\t\tmainFrame.setContentPane(new InListPanel(mainFrame));\n\t\tmainFrame.validate();\n\t}\n\n\t//GEN-BEGIN:variables\n\t// Variables declaration - do not modify\n\tprivate javax.swing.JButton btnBack;\n\tprivate javax.swing.JButton btnQuery;\n\tprivate javax.swing.JComboBox combBook;\n\tprivate javax.swing.JComboBox combInUser;\n\tprivate javax.swing.JLabel jLabel1;\n\tprivate javax.swing.JLabel jLabel10;\n\tprivate javax.swing.JLabel jLabel11;\n\tprivate javax.swing.JLabel jLabel12;\n\tprivate javax.swing.JLabel jLabel13;\n\tprivate javax.swing.JLabel jLabel14;\n\tprivate javax.swing.JLabel jLabel15;\n\tprivate javax.swing.JLabel jLabel4;\n\tprivate javax.swing.JLabel jLabel5;\n\tprivate javax.swing.JLabel jLabel7;\n\tprivate javax.swing.JLabel jLabel8;\n\tprivate javax.swing.JLabel jLabel9;\n\tprivate javax.swing.JTextField tfdInDate;\n\tprivate javax.swing.JTextField tfdInDate2;\n\tprivate javax.swing.JTextField tfdInDetailUuid;\n\tprivate javax.swing.JTextField tfdInNum;\n\tprivate javax.swing.JTextField tfdInNum2;\n\tprivate javax.swing.JTextField tfdInSumMoney;\n\tprivate javax.swing.JTextField tfdInSumMoney2;\n\tprivate javax.swing.JTextField tfdInUuid;\n\t// End of variables declaration//GEN-END:variables\n\n}\n```\n\n目前我的本系列所有源代码已打包上传至百度云：\nhttp://pan.baidu.com/s/1nv5ZZwX\n2016.4.19\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-649-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-04\2016-04-19-Java-单机版的书店管理系统(练习设计模块和思想_系列 七 ).markdown [pool-649-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java-单机版的书店管理系统(练习设计模块和思想_系列 七 )》成功 [pool-649-thread-1] [chx]
[INFO] 2017-07-28 12:29:20 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:52904323 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:20 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-650] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-640] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=52904323 [pool-650-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":52904323,"title":"《西窗法雨》一天读完，怕不怕","create_at":"\/Date(1477226814000)\/","create":"2016-10-23 08:46:54","view_count":533,"comment_count":0,"comment_allowed":"true","type":"original","channel":7,"digg":2,"bury":0,"description":"首先 \n 《西窗法雨》确实是本不错的书。 \n一个个小故事透露着一股股浓烈西方法律的气息。 \n偶尔来几句我国的法律与之对比。 \n昨天到手，今天一天看完了。可能是因为比较入门吧，加上易懂。 \n \n文章短小，适合闲读。 \n虽然只是法律入门级读物，但也挺引人深思的。 \n在中国，和政治政府沾边的书籍，很少。 \n因为本身就是报刊上连载的文章，所以基本是在列举案例，再加上一两句作者的评论。 \n但是本书没有对法理精","url":"http://blog.csdn.net/qq_26525215/article/details/52904323","categories":"❻ 其他,----- 情感之谈","tags":"法律,中国,政府","content":"\u003cp\u003e首先 \u003cbr\u003e\n 《西窗法雨》确实是本不错的书。 \u003cbr\u003e\n一个个小故事透露着一股股浓烈西方法律的气息。 \u003cbr\u003e\n偶尔来几句我国的法律与之对比。 \u003cbr\u003e\n昨天到手，今天一天看完了。可能是因为比较入门吧，加上易懂。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20161023204445122\" alt=\"\" title=\"\"\u003e \u003cbr\u003e\n文章短小，适合闲读。 \u003cbr\u003e\n虽然只是法律入门级读物，但也挺引人深思的。 \u003cbr\u003e\n在中国，和政治政府沾边的书籍，很少。 \u003cbr\u003e\n因为本身就是报刊上连载的文章，所以基本是在列举案例，再加上一两句作者的评论。 \u003cbr\u003e\n但是本书没有对法理精神的介绍和法制探讨，哈哈，而且远远避开了我国时政。 \u003cbr\u003e\n不过估计没避开的话，应该就是我国的禁书了吧。 \u003cbr\u003e\n毕竟我国的法院可是归于政府。 \u003cbr\u003e\n普及: \u003cbr\u003e\n《宪法》规定,我国的“一府两院”,即政府、法院、检察院都由人大产生,对人大负责,接受人大监督,似乎“一府两院”是平行的. \u003cbr\u003e\n现实中，应该是政府比法院、检察院大了个一级半级。毕竟两院的人员编制、工资经费等等都由政府管理。\u003c/p\u003e\n\n\u003cp\u003e不要被我上面的言语误导啊(如有意外，与本人无关) \u003cbr\u003e\n下面是一篇精彩的解读。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20161023204456997\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e—————————-简介————————————-\u003c/p\u003e\n\n\u003cp\u003e这本书曾在《南方周末》以专栏形式连载,《西窗法雨》简介及读后感.一篇篇短小精悍的文章,犹如一道道美味佳肴,组成了《西窗法雨》这一份可口的法学大餐.本书以精彩的案例为载体,巧妙地将枯燥的法律与文学融为一体.刘星老师更是以亲切家常、平和幽默的手法漫谈西方法律文化,使文章变得更加通俗易懂.虽然说的是西方法律文化现象,但是它启蒙着中国人的法律意识和法治观念,不着痕迹地调动着读者的思维,引领读者一步一步地走进法律世界,领略“法”的奥秘.\u003c/p\u003e\n\n\u003cp\u003e————————-读后感————————-\u003c/p\u003e\n\n\u003cp\u003e对于《西窗法雨》,黄树森先生评价道：“我愿将全书归纳为：一袭纵横捭阖下的法趣谈,一阖学养驳杂下的法议论,一掬情感积淀下的法情结.灵动,缜密,成熟,读之,感到一种法理精神的欢愉洗礼,一种法理智慧的痛快淋浴.”这则评价是我在读过《西窗法雨》后看到的,觉得实在是贴切.我相信读过《西窗法雨》的人都不会否认,读《西窗法雨》让人有一种如沐春风,很舒适的感觉.\u003c/p\u003e\n\n\u003cp\u003e不得不佩服,刘星老师的确是个不可多得的写手,他巧妙地将枯燥的法律与文学融为一体,以活泼细腻的笔触将一份可口的法学大餐呈现在人们面前.他很懂得把握文章的长度,深入浅出,让人不会有饱胀感而又意犹未尽；他的文章内容丰富充实,正是验证了“麻雀虽小,五脏俱全”这一句话,实在是言简意赅；他的写作手法极为巧妙,往往从趣事趣案下手,如药引般引导读者进入他要论述的主题,继而叙述法学原理,领你进入法学世界.\u003c/p\u003e\n\n\u003cp\u003e当苏格拉底为捍卫雅典的法律慎重的选择饮毒自尽时,两千多年来,这位哲人的抉择,带给人们无尽的议论和探讨,这是否为一种迂腐,一种理性的败走……\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20161023204509497\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e当纽伦堡的判决一锤定音,法学家奥斯丁所宣扬的“恶法亦法”在德国纳粹分子的狡辩中被“善恶价值”的尺子狠狠地裁量为“恶法非法” \u003cbr\u003e\n时,一切都在引发世人的思考,法律是否就是正义……\u003c/p\u003e\n\n\u003cp\u003e当1801年美国联邦最高法院首席大法官马歇尔亲自审理的马伯里诉麦迪逊案充分彰显法院的审查权利时,西方国家的法官手执宪法,左右审视各种法律,找到违宪的便取消其“家族”资格的力量的做法引发了大陆法系国家法律人的无尽思考……\u003c/p\u003e\n\n\u003cp\u003e是的,就是这样一个个的小故事,告别了用晦涩的语言表达深刻意蕴的方式,却带给人们无尽的思索.同时,《西窗法雨》将法律与文学完美的结合,使那“雨”不仅“潜入”了“夜”,也潜入了人们的“心”.而这几点雨恰恰又是下得及时的雨,有点启蒙的思想,可贵的是这些思想,往往不是硬塞给你一些法律道理,而是带给你更深层次的思考,一种法律背后的智慧,因而在中国人面前打开了一片全新的天地.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20161023204521419\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e有时候也会思考造成中国的的法治与西方法治差异的原因在哪里?尤其是学了大陆法系与英美法系的差异和特点以后.但是教材上的思考面比较主流也比较狭隘,然而当我阅读到“法治的假设前提”这一篇时,有了一种另类的却潜藏在内心的共鸣.众所周知,早在19世纪末到20世纪初,西方国家尤其是美、英国家就用相当成熟的法律手段治理国家,约束民众的不良行为,并在法治的车轨上越走越远.反观同时期的中国,尚属落后的“人治”状态.历史唯物主义告诉我们,经济基础决定上层建筑,诚然,法治的发展经济占了很大的因素,但是社会心理的影响也是不容小觑的,书中所言,这是“人性恶”的结果,这种“人性恶”的认识起源于《圣经》.《圣经》里说,上帝创造了世界上第一个男人叫亚当,亚当整天孤独寂寞,上帝便从亚当身上取下一根肋骨,创造了一个叫夏娃的女人给亚当做伴,亚当和夏娃没什么事可做,上帝便派他们去看守伊甸园,并且再三叮嘱他们千万不得偷吃善恶树上的“禁果”.夏娃不听上帝的命令偷吃了“禁果”,岂料抵挡不住蛇的诱惑,在无法控制的情况下去引诱亚当,致使两人结合在一起,从而引发了人类的迅速繁衍.上帝知道后极为震怒,将夏娃逐出了伊甸园,读后感《《西窗法雨》简介及读后感》.于是,上帝告诉后来的人类,第一父亲和第一母亲的行为是一种罪恶,人类是由于这种罪恶出现的,所以每个人生下来都是有罪的.西方人相信这个故事,也相信人性恶.所以他们认为说服教育的力量是软弱的,是起不了什么作用的,言传身教无法抑制人的犯罪倾向,因此他们特别喜欢用法律,认为只有运用强制性的法律才能治理国家,因而“法治”在西方日益发达. \u003cbr\u003e\n与洋人不同,中国人则普遍认为人性是善的,相信人性善,或许始于《三字经》,“人之初、性本善”的广为流传便是最有力的说明.由于认为人性善,所以确信教育的力量,感化教育可以使人改邪归正.教育,一直是中国人矫正错误的一个传统手段,先贤孔孟的教诲流传了两千多年.然而也许是国人确信教育的效力,因而在相当长的一段时间里缺乏法治.\u003c/p\u003e\n\n\u003cp\u003e社会发展到今天,倘使我们去争论西方的“人性恶”和中国人的“人性善”谁利谁弊,恐怕没有什么大的必要,也争论不出什么结果,但法治作为治理国家、管理社会的一个有效手段则是一个普遍认同的不争的事实.法治的缺失,“社会将没有方圆,没有秩序”.就从这一点讲,“夏娃”偷吃“禁果”也没有吃错,然而中国的传统教育也不能丢.在中国即使把法治建设得天衣无缝,仍然需要用教育的手段实施法治,因为矫正人的犯罪手段只有两个：心灵的教育和肉体的制裁,前者是道德,后者是法律.道德的方式是一种劝说,法律的方式是一种强制,劝说是教育,强制是惩罚.因而我觉得,将法治与教育的有机结合才是真正的出路.\u003c/p\u003e\n\n\u003cp\u003e在上述问题中,涉及到了“道德”与“法治”这对概念,而这一对概念作为矛盾的存在是法律人最为无奈,最为纠结的.无论选择了哪一个,都是一种背叛,要么背叛良知,要么背叛正义.而《苏格拉底的慎重》为我们所展现的是一位哲人,面对此种问题时的种种思考和抉择.很小的时候便听到过苏格拉底殉道的故事,当时内心十分不解.雅典的法律是不公正的,遵守这样的法律简直就是迂腐!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20161023204533341\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e这种慎重是否在维护法律的尊严与权威?这让我想到了书中的另一个故事,关于二战战犯的审判,盖世太保杀害犹太人遵循的是当时纳粹德国的法律,从狭义的法律意义上讲,他们似乎没有犯罪,然而在道德上认为纳粹没有罪行是世人所无法容忍的,于是,正义的人们认为那些法令与人类最基本的正义相悖,根本不能成为任何法律的理由,任何有良知的人都不会执行这样的法令.\u003c/p\u003e\n\n\u003cp\u003e“恶法非法”成为了一种裁量有点法律到的话的意味.那么,将法律道德化是法律的一种倒退还是升华?然而从另一方面来说,我们是无法脱离“以暴制暴”的原则,但是,如果用一种暴力去打击另一种暴力能为我的情感所接受的话,为什么我就不能接受用生命去维护正义?哪怕这种正义并不见得完善.如果“以暴制暴”能让我们得到一种情感的宣泄和对现实不满的快慰的话,那么苏格垃底的选择则是一种殉道,理性地说,那是一种伟大的震撼! \u003cbr\u003e\n思维在此并没有停滞,康德告诉我们,法律与道德的区别在于前者约束内心,后者约束外在行为；前者只具有说服力,而后者具有一种物质的强制力.换句话说,道德总是劝慰人,法律则总要给人一点厉害看看.在阅读到“法律就是‘强制’?”这一篇之前,我一直坚信肯定的答案,也从来没有过多的思考过“法律的特质在于强制”这样一个命题的真伪.然而刘星教授告诉我,这句话值得怀疑.因为法律的规定具有两方面,一则权利,一则义务.义务是强制的,不可放弃的,然而权利却是可以放弃的,可见这个看法的确有些瑕疵.是的,我想这或许的确是植根于一个信念：法律不是自上而下的,而是自下而上的,它的基础主要在于人们的主动接受,而不是被迫服从.\u003c/p\u003e\n\n\u003cp\u003e《西窗法雨》带给我们的不仅有纵向的深度的思考,更有横向的广阔的视野.一些全新的诠释,一种锐利的彰显,都镌刻在我的内心.在大部分人眼中,法律与政治、经济的联系是十分密切的,至于民俗、习惯之类的或许与法律也有些渊源,然而要说地形地貌、唯独位置、海路位置、气候状况、肤色人种与法律也有千丝万缕的关系,恐怕很多人便会摇头蹙眉了.书中介绍了孟德斯鸠的《论法的精神》中的有关“地理因素”说的内容.比如热带以及亚热带国家所以盛行严刑峻法,是因为那里的酷热容易使人脾气暴躁而失去理智；而处于温带寒带地区的国家之所以刑法较为宽和,就是因为适中及严寒的温度使人冷静和理智.那么讲这些的弦外之音在于哪里?思考一下中国的地理环境,三级阶梯,纬度跨越范围,海路分布,地形地貌十分复杂,那么中国的法律在讲究国家统一性的同时是否也应该讲究地方区域的差异性呢?\u003c/p\u003e\n\n\u003cp\u003e另外,在书中还论述了有关权利的来源,判例法,法院的审查权力,人权,政府与人民的关系,法律的最终效力来源等一系列发人深省的问题.我想说,对于法学初学者的我而言,阅读这本书就像在法律的道路上彷徨地游走.彷徨来自思考时的矛盾,游走来自对法律的好奇.\u003c/p\u003e\n\n\u003cp\u003e确实，本书挺令人深思！\u003c/p\u003e\n\n\u003cp\u003e中间放图片，只是为了使文章看起来舒服点，哈哈。、\u003c/p\u003e","markdowncontent":"首先\n 《西窗法雨》确实是本不错的书。\n一个个小故事透露着一股股浓烈西方法律的气息。\n偶尔来几句我国的法律与之对比。\n昨天到手，今天一天看完了。可能是因为比较入门吧，加上易懂。\n![](http://img.blog.csdn.net/20161023204445122)\n文章短小，适合闲读。\n虽然只是法律入门级读物，但也挺引人深思的。\n在中国，和政治政府沾边的书籍，很少。\n因为本身就是报刊上连载的文章，所以基本是在列举案例，再加上一两句作者的评论。\n但是本书没有对法理精神的介绍和法制探讨，哈哈，而且远远避开了我国时政。\n不过估计没避开的话，应该就是我国的禁书了吧。\n毕竟我国的法院可是归于政府。\n普及:\n《宪法》规定,我国的“一府两院”,即政府、法院、检察院都由人大产生,对人大负责,接受人大监督,似乎“一府两院”是平行的.\n现实中，应该是政府比法院、检察院大了个一级半级。毕竟两院的人员编制、工资经费等等都由政府管理。\n \n不要被我上面的言语误导啊(如有意外，与本人无关)\n下面是一篇精彩的解读。\n\n![](http://img.blog.csdn.net/20161023204456997)\n\n----------------------------简介-------------------------------------\n\n这本书曾在《南方周末》以专栏形式连载,《西窗法雨》简介及读后感.一篇篇短小精悍的文章,犹如一道道美味佳肴,组成了《西窗法雨》这一份可口的法学大餐.本书以精彩的案例为载体,巧妙地将枯燥的法律与文学融为一体.刘星老师更是以亲切家常、平和幽默的手法漫谈西方法律文化,使文章变得更加通俗易懂.虽然说的是西方法律文化现象,但是它启蒙着中国人的法律意识和法治观念,不着痕迹地调动着读者的思维,引领读者一步一步地走进法律世界,领略“法”的奥秘.\n\n\n-------------------------读后感-------------------------\n\n对于《西窗法雨》,黄树森先生评价道：“我愿将全书归纳为：一袭纵横捭阖下的法趣谈,一阖学养驳杂下的法议论,一掬情感积淀下的法情结.灵动,缜密,成熟,读之,感到一种法理精神的欢愉洗礼,一种法理智慧的痛快淋浴.”这则评价是我在读过《西窗法雨》后看到的,觉得实在是贴切.我相信读过《西窗法雨》的人都不会否认,读《西窗法雨》让人有一种如沐春风,很舒适的感觉.\n\n\n不得不佩服,刘星老师的确是个不可多得的写手,他巧妙地将枯燥的法律与文学融为一体,以活泼细腻的笔触将一份可口的法学大餐呈现在人们面前.他很懂得把握文章的长度,深入浅出,让人不会有饱胀感而又意犹未尽；他的文章内容丰富充实,正是验证了“麻雀虽小,五脏俱全”这一句话,实在是言简意赅；他的写作手法极为巧妙,往往从趣事趣案下手,如药引般引导读者进入他要论述的主题,继而叙述法学原理,领你进入法学世界.\n\n\n当苏格拉底为捍卫雅典的法律慎重的选择饮毒自尽时,两千多年来,这位哲人的抉择,带给人们无尽的议论和探讨,这是否为一种迂腐,一种理性的败走……\n\n![](http://img.blog.csdn.net/20161023204509497)\n\n当纽伦堡的判决一锤定音,法学家奥斯丁所宣扬的“恶法亦法”在德国纳粹分子的狡辩中被“善恶价值”的尺子狠狠地裁量为“恶法非法”\n时,一切都在引发世人的思考,法律是否就是正义……\n\n\n当1801年美国联邦最高法院首席大法官马歇尔亲自审理的马伯里诉麦迪逊案充分彰显法院的审查权利时,西方国家的法官手执宪法,左右审视各种法律,找到违宪的便取消其“家族”资格的力量的做法引发了大陆法系国家法律人的无尽思考……\n\n\n是的,就是这样一个个的小故事,告别了用晦涩的语言表达深刻意蕴的方式,却带给人们无尽的思索.同时,《西窗法雨》将法律与文学完美的结合,使那“雨”不仅“潜入”了“夜”,也潜入了人们的“心”.而这几点雨恰恰又是下得及时的雨,有点启蒙的思想,可贵的是这些思想,往往不是硬塞给你一些法律道理,而是带给你更深层次的思考,一种法律背后的智慧,因而在中国人面前打开了一片全新的天地.\n\n![](http://img.blog.csdn.net/20161023204521419)\n\n有时候也会思考造成中国的的法治与西方法治差异的原因在哪里?尤其是学了大陆法系与英美法系的差异和特点以后.但是教材上的思考面比较主流也比较狭隘,然而当我阅读到“法治的假设前提”这一篇时,有了一种另类的却潜藏在内心的共鸣.众所周知,早在19世纪末到20世纪初,西方国家尤其是美、英国家就用相当成熟的法律手段治理国家,约束民众的不良行为,并在法治的车轨上越走越远.反观同时期的中国,尚属落后的“人治”状态.历史唯物主义告诉我们,经济基础决定上层建筑,诚然,法治的发展经济占了很大的因素,但是社会心理的影响也是不容小觑的,书中所言,这是“人性恶”的结果,这种“人性恶”的认识起源于《圣经》.《圣经》里说,上帝创造了世界上第一个男人叫亚当,亚当整天孤独寂寞,上帝便从亚当身上取下一根肋骨,创造了一个叫夏娃的女人给亚当做伴,亚当和夏娃没什么事可做,上帝便派他们去看守伊甸园,并且再三叮嘱他们千万不得偷吃善恶树上的“禁果”.夏娃不听上帝的命令偷吃了“禁果”,岂料抵挡不住蛇的诱惑,在无法控制的情况下去引诱亚当,致使两人结合在一起,从而引发了人类的迅速繁衍.上帝知道后极为震怒,将夏娃逐出了伊甸园,读后感《《西窗法雨》简介及读后感》.于是,上帝告诉后来的人类,第一父亲和第一母亲的行为是一种罪恶,人类是由于这种罪恶出现的,所以每个人生下来都是有罪的.西方人相信这个故事,也相信人性恶.所以他们认为说服教育的力量是软弱的,是起不了什么作用的,言传身教无法抑制人的犯罪倾向,因此他们特别喜欢用法律,认为只有运用强制性的法律才能治理国家,因而“法治”在西方日益发达.\n与洋人不同,中国人则普遍认为人性是善的,相信人性善,或许始于《三字经》,“人之初、性本善”的广为流传便是最有力的说明.由于认为人性善,所以确信教育的力量,感化教育可以使人改邪归正.教育,一直是中国人矫正错误的一个传统手段,先贤孔孟的教诲流传了两千多年.然而也许是国人确信教育的效力,因而在相当长的一段时间里缺乏法治.\n\n\n社会发展到今天,倘使我们去争论西方的“人性恶”和中国人的“人性善”谁利谁弊,恐怕没有什么大的必要,也争论不出什么结果,但法治作为治理国家、管理社会的一个有效手段则是一个普遍认同的不争的事实.法治的缺失,“社会将没有方圆,没有秩序”.就从这一点讲,“夏娃”偷吃“禁果”也没有吃错,然而中国的传统教育也不能丢.在中国即使把法治建设得天衣无缝,仍然需要用教育的手段实施法治,因为矫正人的犯罪手段只有两个：心灵的教育和肉体的制裁,前者是道德,后者是法律.道德的方式是一种劝说,法律的方式是一种强制,劝说是教育,强制是惩罚.因而我觉得,将法治与教育的有机结合才是真正的出路.\n\n\n在上述问题中,涉及到了“道德”与“法治”这对概念,而这一对概念作为矛盾的存在是法律人最为无奈,最为纠结的.无论选择了哪一个,都是一种背叛,要么背叛良知,要么背叛正义.而《苏格拉底的慎重》为我们所展现的是一位哲人,面对此种问题时的种种思考和抉择.很小的时候便听到过苏格拉底殉道的故事,当时内心十分不解.雅典的法律是不公正的,遵守这样的法律简直就是迂腐!\n\n![](http://img.blog.csdn.net/20161023204533341)\n\n这种慎重是否在维护法律的尊严与权威?这让我想到了书中的另一个故事,关于二战战犯的审判,盖世太保杀害犹太人遵循的是当时纳粹德国的法律,从狭义的法律意义上讲,他们似乎没有犯罪,然而在道德上认为纳粹没有罪行是世人所无法容忍的,于是,正义的人们认为那些法令与人类最基本的正义相悖,根本不能成为任何法律的理由,任何有良知的人都不会执行这样的法令.\n\n\n“恶法非法”成为了一种裁量有点法律到的话的意味.那么,将法律道德化是法律的一种倒退还是升华?然而从另一方面来说,我们是无法脱离“以暴制暴”的原则,但是,如果用一种暴力去打击另一种暴力能为我的情感所接受的话,为什么我就不能接受用生命去维护正义?哪怕这种正义并不见得完善.如果“以暴制暴”能让我们得到一种情感的宣泄和对现实不满的快慰的话,那么苏格垃底的选择则是一种殉道,理性地说,那是一种伟大的震撼!\n思维在此并没有停滞,康德告诉我们,法律与道德的区别在于前者约束内心,后者约束外在行为；前者只具有说服力,而后者具有一种物质的强制力.换句话说,道德总是劝慰人,法律则总要给人一点厉害看看.在阅读到“法律就是‘强制’?”这一篇之前,我一直坚信肯定的答案,也从来没有过多的思考过“法律的特质在于强制”这样一个命题的真伪.然而刘星教授告诉我,这句话值得怀疑.因为法律的规定具有两方面,一则权利,一则义务.义务是强制的,不可放弃的,然而权利却是可以放弃的,可见这个看法的确有些瑕疵.是的,我想这或许的确是植根于一个信念：法律不是自上而下的,而是自下而上的,它的基础主要在于人们的主动接受,而不是被迫服从.\n\n\n《西窗法雨》带给我们的不仅有纵向的深度的思考,更有横向的广阔的视野.一些全新的诠释,一种锐利的彰显,都镌刻在我的内心.在大部分人眼中,法律与政治、经济的联系是十分密切的,至于民俗、习惯之类的或许与法律也有些渊源,然而要说地形地貌、唯独位置、海路位置、气候状况、肤色人种与法律也有千丝万缕的关系,恐怕很多人便会摇头蹙眉了.书中介绍了孟德斯鸠的《论法的精神》中的有关“地理因素”说的内容.比如热带以及亚热带国家所以盛行严刑峻法,是因为那里的酷热容易使人脾气暴躁而失去理智；而处于温带寒带地区的国家之所以刑法较为宽和,就是因为适中及严寒的温度使人冷静和理智.那么讲这些的弦外之音在于哪里?思考一下中国的地理环境,三级阶梯,纬度跨越范围,海路分布,地形地貌十分复杂,那么中国的法律在讲究国家统一性的同时是否也应该讲究地方区域的差异性呢?\n\n\n另外,在书中还论述了有关权利的来源,判例法,法院的审查权力,人权,政府与人民的关系,法律的最终效力来源等一系列发人深省的问题.我想说,对于法学初学者的我而言,阅读这本书就像在法律的道路上彷徨地游走.彷徨来自思考时的矛盾,游走来自对法律的好奇.\n\n\n确实，本书挺令人深思！\n\n中间放图片，只是为了使文章看起来舒服点，哈哈。、\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-650-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-10\2016-10-23-《西窗法雨》一天读完，怕不怕.markdown [pool-650-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《《西窗法雨》一天读完，怕不怕》成功 [pool-650-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:48088947 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-651] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-641] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=48088947 [pool-651-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":48088947,"title":"新手入门 acm 输入输出练习","create_at":"\/Date(1440840051000)\/","create":"2015-08-29 05:20:51","view_count":1203,"comment_count":0,"comment_allowed":"true","type":"repost","channel":16,"digg":1,"bury":0,"description":"A + B Problem（1000）\nTime Limit: 2000/1000 MS (Java/Others)   \n Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 355051    Accepted Submission(s): 110841\nProblem Description\nCalculate","url":"http://blog.csdn.net/qq_26525215/article/details/48088947","categories":"❶ ACM,----- HDOJ-C++,----- HDOJ-JAVA,❻ 其他,----- 好文/知识点","tags":"HDOJ,杭电","content":"\r\n\u003cdiv id=\"cnblogs_post_body\" style=\"margin:0px 0px 20px; padding:0px; word-break:break-word; color:rgb(73,73,73); font-size:14px; line-height:22px\"\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eA &#43; B Problem（1000）\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime Limit: 2000/1000 MS (Java/Others)&nbsp;&nbsp;&nbsp;\r\n Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 355051&nbsp;&nbsp;&nbsp; Accepted Submission(s): 110841\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eCalculate&nbsp;\u003cspan style=\"margin:0px; padding:0px\"\u003eA &#43; B\u003c/span\u003e.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eEach line will contain two integers&nbsp;\u003cspan style=\"margin:0px; padding:0px\"\u003eA\u003c/span\u003e&nbsp;and&nbsp;\u003cspan style=\"margin:0px; padding:0px\"\u003eB\u003c/span\u003e. Process to end of file.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each case, output&nbsp;\u003cspan style=\"margin:0px; padding:0px\"\u003eA &#43; B\u003c/span\u003e&nbsp;in one line.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n1 1\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n2\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\nps：\u003ca target=\"_blank\" target=\"_blank\" href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1000\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; line-height:normal\"\u003ehttp://acm.hdu.edu.cn/showproblem.php?pid=1000\u003c/a\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e题意：每一行输入包含两个整数a和b，每个案例输出a&#43;b的&#20540;，在一行；\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e详见代码，\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e a,b,sum;\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(scanf(\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;a,&amp;b)!=\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eEOF)\n    {\u003cbr style=\"margin:0px; padding:0px\"\u003e　　　　　sum\u003c/span\u003e=a&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eb;\n        printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eSum Problem（1001）\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime Limit: 1000/500 MS (Java/Others)&nbsp;&nbsp;&nbsp;\r\n Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 237995&nbsp;&nbsp;&nbsp; Accepted Submission(s): 58229\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eHey, welcome to HDOJ(Hangzhou Dianzi University Online Judge).\u003cbr style=\"margin:0px; padding:0px\"\u003e\r\nIn this problem, your task is to calculate SUM(n) = 1 &#43; 2 &#43; 3 &#43; ... &#43; n.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eThe input will consist of a series of integers n, one integer per line.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each case,&nbsp;\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255)\"\u003eoutput SUM(n) in one line,\u003c/span\u003e&nbsp;\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003efollowed by a blank line.\u003c/span\u003e&nbsp;You\r\n may assume the result will be in the range of 32-bit signed integer.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e1\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e100\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e1\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e5050\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n&nbsp;ps：\u003ca target=\"_blank\" target=\"_blank\" href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1001\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; line-height:normal\"\u003ehttp://acm.hdu.edu.cn/showproblem.php?pid=1001\u003c/a\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n&nbsp;\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e题意：每行将输入一个整数n，对于每个案例,输出SUM(n) = 1 &#43; 2 &#43; 3 &#43;&nbsp; ... &#43; n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255)\"\u003e&lt;求1到n的和&gt;&nbsp;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255)\"\u003e在一行,\u003c/span\u003e紧随其后的是一个空行。\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,255,255); font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e其他的就没什么可以注意的了。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0)\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e详见代码：\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px; font-family:\u0027Courier New\u0027,Courier,monospace\"\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e n,i,sum;\n\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(scanf(\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;n)!=\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eEOF)\n    {\n            \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003efor\u003c/span\u003e(sum=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e,i=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e;i&lt;=n;i&#43;&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n            sum\u003c/span\u003e=sum&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ei;\n            printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eA&#43;B for Input-Output Practice (I)（1089）\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime Limit: 2000/1000 MS (Java/Others)&nbsp;&nbsp;&nbsp;\r\n Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 68193&nbsp;&nbsp;&nbsp; Accepted Submission(s): 37929\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eYour task is to Calculate a &#43; b. Too easy?! Of course! I specially designed the problem for acm beginners. You must have found that some problems have the same titles with this one, yes, all these problems\r\n were designed for the same aim.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eThe input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e1 5\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e10 20\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e6\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e30\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e题意：输入整数a和b,用空&#26684;分隔,每行一对整数。对于每一对输入整数a和b你应该输出他们的总和,输入a和b占在一行,输出占一行。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e貌&#20284;和1000是一样的，o(∩_∩)o 哈哈！\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e a,b,sum;\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(scanf(\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;a,&amp;b)!=\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eEOF)\n    {\u003cbr style=\"margin:0px; padding:0px\"\u003e　　　　 sum\u003c/span\u003e=a&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eb;\n    　　printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eA&#43;B for Input-Output Practice (II)（1090）\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime Limit: 2000/1000 MS (Java/Others)&nbsp;&nbsp;&nbsp;\r\n Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 51355&nbsp;&nbsp;&nbsp; Accepted Submission(s): 33780\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eYour task is to Calculate a &#43; b.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eInput contains an integer N in the first line, and then N lines follow. Each line consists of a pair of integers a and b, separated by a space, one pair of integers per line.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e2\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e1 5\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e10 20\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e6\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e30\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003eps：\u003ca target=\"_blank\" target=\"_blank\" href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1090\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; line-height:normal\"\u003ehttp://acm.hdu.edu.cn/showproblem.php?pid=1090\u003c/a\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e题意：输入包含一个整数N在第一行,然后有N数据。每一行包含一对整数a和b,用空&#26684;分隔,每行一对整数。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp; 对于每一对输入整数a和b你应该输出的总和,a和b在一行,输出输入各占一行。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e比较1089，在1089的基础上多了一个控制输入测试的组数N，其他的一样。有木有。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e详见代码；\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e a,b,t,sum;\n    scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003et);   \n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(t--\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n    {\n        scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;a,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eb);\n        sum\u003c/span\u003e=a&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eb;\n        printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eA&#43;B for Input-Output Practice (III)（1091）\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime Limit: 2000/1000 MS (Java/Others)&nbsp;&nbsp;&nbsp;\r\n Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 60600&nbsp;&nbsp;&nbsp; Accepted Submission(s): 31168\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eYour task is to Calculate a &#43; b.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eInput contains multiple test cases. Each test case contains a pair of integers a and b, one pair of integers per line.&nbsp;\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003eA test case containing\r\n 0 0 terminates the input and this test case is not to be processed.\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e&nbsp;\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e1 5\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e10 20\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e0 0\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e6\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e30\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cbr style=\"margin:0px; padding:0px\"\u003e\r\nps：\u003ca target=\"_blank\" target=\"_blank\" href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1091\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; line-height:normal\"\u003ehttp://acm.hdu.edu.cn/showproblem.php?pid=1091\u003c/a\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e题意：输入包含多个测试用例。每个测试用例包含一对整数a和b,一对整数占一行。\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e当输入测试用例为0 0时，终止输入和测试用例是不被处理。\u003c/span\u003e对于每一对输入整数a和b你应该输出他们的总和,a和b在一行,输出在一行。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e比较1091，不一样的地方就是结束输入的条件不一样，其他的不变，有木有。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e详见代码：\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e a,b,sum;\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(scanf(\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;a,&amp;b)!=\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eEOF)\n    {\n        \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eif\u003c/span\u003e(a==\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e&amp;&amp;b==\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e)\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ebreak\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n        sum\u003c/span\u003e=a&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eb;\n        printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n        \n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eA&#43;B for Input-Output Practice (IV)\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime Limit: 2000/1000 MS (Java/Others)&nbsp;&nbsp;&nbsp;\r\n Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 53974&nbsp;&nbsp;&nbsp; Accepted Submission(s): 28848\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eYour task is to Calculate the sum of some integers.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eInput contains multiple test cases. Each test case contains a integer N, and then N integers follow in the same line. A test case starting with 0 terminates the input and this test case is not to be\r\n processed.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each group of input integers you should output their sum in one line, and with one line of output for each line in input.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e4 1 2 3 4\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e5 1 2 3 4 5\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e0\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e10\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e15\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003eps：\u003ca target=\"_blank\" target=\"_blank\" href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1092\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; line-height:normal\"\u003ehttp://acm.hdu.edu.cn/showproblem.php?pid=1092\u003c/a\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e题意：输入包含多个测试用例。每个测试用例包含一个整数N,然后在同一行输入N个整数,。当测试用例是0时，终止输入和测试用例是不被处理。每组输出整数之和占一行,即，一行输入一行输出。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e比较前面几题，这题稍微有点区别但变幻不大，N用来控制整数的个数。然后最后以0结束测试，\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e详见代码：\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e a[\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e100\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e],t,i,sum;\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(scanf(\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;t)!=\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eEOF)\n    {\n        \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eif\u003c/span\u003e(t==\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n            \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ebreak\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n        sum\u003c/span\u003e=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n        \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003efor\u003c/span\u003e(i=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e1\u003c/span\u003e;i&lt;=t;i&#43;&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n        {\n            scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ea[i]);        \n            sum\u003c/span\u003e=sum&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ea[i];\n        }\n        printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eA&#43;B for Input-Output Practice (V)\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime Limit: 2000/1000 MS (Java/Others)&nbsp;&nbsp;&nbsp;\r\n Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 39483&nbsp;&nbsp;&nbsp; Accepted Submission(s): 26698\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eYour task is to calculate the sum of some integers.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eInput contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each group of input integers you should output their sum in one line, and with one line of output for each line in input.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e2\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e4 1 2 3 4\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e5 1 2 3 4 5\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e10\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e15\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003eps：\u003ca target=\"_blank\" target=\"_blank\" href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1093\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; line-height:normal\"\u003ehttp://acm.hdu.edu.cn/showproblem.php?pid=1093\u003c/a\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0); font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e题意：输入包含一个整数N在第一行,然后有N行测试用例，每一行都始于一个整数M,然后有M整数在同一个行。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0); font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e每组输出整数之和且输出占一行,一行输入一行输出。\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0); font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e反思：是不是前两题的集合体哈，再仔细看看就知道了。有木有！\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0); font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e详见代码：\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e a[\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e100\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e],t,i,p,sum;\n    scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ep);\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(p--\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n    {\n        scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003et);\n        \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eif\u003c/span\u003e(t==\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n            \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ebreak\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n        sum\u003c/span\u003e=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n        \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003efor\u003c/span\u003e(i=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e1\u003c/span\u003e;i&lt;=t;i&#43;&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n        {\n            scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ea[i]);\n            sum\u003c/span\u003e=sum&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ea[i];\n        }\n        printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eA&#43;B for Input-Output Practice (VI)\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime Limit: 2000/1000 MS (Java/Others)&nbsp;&nbsp;&nbsp;\r\n Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 37174&nbsp;&nbsp;&nbsp; Accepted Submission(s): 25051\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eYour task is to calculate the sum of some integers.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eInput contains multiple test cases, and one case one line. Each case starts with an integer N, and then N integers follow in the same line.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each test case you should output the sum of N integers in one line, and with one line of output for each line in input.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e4 1 2 3 4\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e5 1 2 3 4 5\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e10\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e15\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003eps：\u003ca target=\"_blank\" target=\"_blank\" href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1094\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; line-height:normal\"\u003ehttp://acm.hdu.edu.cn/showproblem.php?pid=1094\u003c/a\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0)\"\u003e这题就不要在啰嗦的在写题意了吧，貌&#20284;和上面的题目太像了，，，，o(∩_∩)o 哈哈\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0)\"\u003e详见代码：\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e a[\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e100\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e],t,i,sum;\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(scanf(\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;t)!=\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eEOF)\n    {\n        sum\u003c/span\u003e=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n        \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003efor\u003c/span\u003e(i=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e1\u003c/span\u003e;i&lt;=t;i&#43;&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n        {\n            scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ea[i]);\n            sum\u003c/span\u003e=sum&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ea[i];\n        }\n    　　printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cbr style=\"margin:0px; padding:0px\"\u003e\r\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e看到这里我只想说，大家做题时候，代码写的&#26684;式一定要规范，最好就是形式统一，该空的时候就空&#26684;，不然代码都一个水平面就美观了，而且以后比赛的时候你还有2个队友，让他们给你检查错误的话，你的代码又不整洁，那么效率肯定不会高的，而且会有厌烦的心态，那就更好了，所以大家以后写代码尽量规范一点。就是这样了！\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eA&#43;B for Input-Output Practice (VII)\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime\r\n Limit: 2000/1000 MS (Java/Others)&nbsp;&nbsp;&nbsp; Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 36617&nbsp;&nbsp;&nbsp; Accepted Submission(s): 24438\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eYour task is to Calculate a &#43; b.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eThe input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each pair of input integers a and b you should output the sum of a and b, and followed by a blank line.\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e1 5\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e10 20\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e6\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e30\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003eps：\u003ca target=\"_blank\" target=\"_blank\" href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1095\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; line-height:normal\"\u003ehttp://acm.hdu.edu.cn/showproblem.php?pid=1095\u003c/a\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e题意：输入2个整数a和b,用空&#26684;分隔,每行一对整数。对于每一对输入整数a和b你应该输出他们的总和,a和b,身后跟着\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e一个空行。\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255)\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e是不是又忘记空行了，输出的时候，这次又是中间再空一行哦，所以做题的时候一定要先看清楚题目的具体要求在动手编程，不然只会白白丢分！\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255)\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e详见代码：\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e a,b,sum;\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(scanf(\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;a,&amp;b)!=\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eEOF)\n    {\n        sum\u003c/span\u003e=a&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003eb;\n        printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cbr style=\"margin:0px; padding:0px\"\u003e\r\n\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0); font-size:14pt\"\u003e终于快结束了，，，，，，搞得好辛苦，大家一定要认真对待啊！\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003ch1 style=\"margin:0px; padding:0px; font-size:28px; color:rgb(26,92,200)\"\u003eA&#43;B for Input-Output Practice (VIII)\u003c/h1\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0); font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:green; font-family:Arial; font-size:12px\"\u003eTime\r\n Limit: 2000/1000 MS (Java/Others)&nbsp;&nbsp;&nbsp; Memory Limit: 65536/32768 K (Java/Others) Total Submission(s): 78908&nbsp;&nbsp;&nbsp; Accepted Submission(s): 24263\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eProblem Description\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eYour task is to calculate the sum of some integers.\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eInput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eInput contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line.\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eOutput\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003eFor each group of input integers you should output their sum in one line, and you must note that there is a blank line between outputs.\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Input\u003c/div\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e3\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e4 1 2 3 4\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e5 1 2 3 4 5\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e3 1 2 3\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_title\" align=\"left\" style=\"margin:0px; padding:0px\"\u003eSample Output\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e10\u003c/p\u003e\r\n\u003cdiv class=\"panel_content\" style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e15\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e6\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0); font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003eps：\u003ca target=\"_blank\" target=\"_blank\" href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1096\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; font-weight:normal; line-height:normal\"\u003ehttp://acm.hdu.edu.cn/showproblem.php?pid=1096\u003c/a\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0)\"\u003e题意：输入包含一个整数N在第一行,然后有N行测试数据。每一行都开始都有一个整数M,然后后面有M个整数在同一行。\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0)\"\u003e每组输出整数之和，输出占一行,\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e你必须注意,输出，每行之间有一个空行。\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0)\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e我只能说这题就是上面几道题目的大集合吧，所以是不是很简单呢。哈哈，所以对于acm的输入输出是不是有所了解了呢，\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0)\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e　　对！就是那么简单！so\r\n easy！&nbsp;&nbsp;&nbsp; o(∩_∩)o&nbsp;&nbsp;&nbsp; 那么，，，\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0)\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e还\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-size:14pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,0)\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e是先看代码吧，\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e\r\n\u003cdiv class=\"cnblogs_code\" style=\"margin:5px 0px; padding:5px; background-color:rgb(245,245,245); border:1px solid rgb(204,204,204); overflow:auto; color:rgb(0,0,0); font-family:\u0027Courier New\u0027!important; font-size:12px!important\"\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003cpre style=\"margin-top:0px; margin-bottom:0px; padding:0px; white-space:pre-wrap; word-wrap:break-word; font-family:\u0027Courier New\u0027!important\"\u003e#include&lt;stdio.h&gt;\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e main()\n{\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eint\u003c/span\u003e a[\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e100\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e],t,i,p,sum;\n    scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ep);\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ewhile\u003c/span\u003e(p--\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n    {\n        scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003et);\n        sum\u003c/span\u003e=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n        \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003efor\u003c/span\u003e(i=\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e1\u003c/span\u003e;i&lt;=t;i&#43;&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e)\n        {\n            scanf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e,&amp;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ea[i]);        \n            sum\u003c/span\u003e=sum&#43;\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003ea[i];\n        }\n        printf(\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e%d\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e,sum);\n        \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003eif\u003c/span\u003e(p)\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,128,0); line-height:1.5!important\"\u003e//\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,128,0); line-height:1.5!important\"\u003e中间空行用\u003c/span\u003e\n            printf(\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e\\n\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,0); line-height:1.5!important\"\u003e&quot;\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e);\n    }\n    \u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); line-height:1.5!important\"\u003ereturn\u003c/span\u003e \u003cspan style=\"margin:0px; padding:0px; color:rgb(128,0,128); line-height:1.5!important\"\u003e0\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; line-height:1.5!important\"\u003e;\n}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px; padding:0px\"\u003e\u003cspan class=\"cnblogs_code_copy\" style=\"margin:0px; padding:0px 5px 0px 0px; line-height:1.5!important\"\u003e\u003ca target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-family:Arial,Helvetica,sans-serif; font-size:14px; text-decoration:underline; line-height:normal; border:none!important\"\u003e\u003cimg src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"margin:0px; padding:0px; border:none!important\"\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e&nbsp;\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cbr style=\"margin:0px; padding:0px\"\u003e\r\n\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); font-size:18pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e到现在为止，你已经学会acm的简单输入输出了，\u003c/span\u003e（当然不是所有的输入输出，这个留给以后慢慢学习好了，）\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e那么现在你已经可以在杭电上A题了，\u003c/span\u003e(为自己鼓掌，哈哈）\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e，接下来大家可以从简单题下手，本人建议可以先做11页的题。\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); font-size:18pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e当然不会的题欢迎到群内讨论，QQ群： &nbsp;&lt;主要面向刚刚入门的13级新生！&gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); font-size:18pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e最后还有一个小小的建议：学习贵在坚持！刚刚开始都是比较难的，所以大家要相互鼓励相互监督，共同进步！\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin:10px auto; padding-top:0px; padding-bottom:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(0,0,255); font-size:18pt\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(255,0,0)\"\u003e　　　　　　　　　　谢谢你的浏览！o(∩_∩)o\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv class=\"panel_bottom\" style=\"margin:0px; padding:0px\"\u003e&nbsp;\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv id=\"MySignature\" style=\"margin:0px; padding:0px; color:rgb(73,73,73); font-size:14px; line-height:22px\"\u003e\r\n转载请注明出处：http://www.cnblogs.com/yuyixingkong/ 自己命运的掌控着！\u003c/div\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-651-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-08\2015-08-29-新手入门 acm 输入输出练习.markdown [pool-651-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《新手入门 acm 输入输出练习》成功 [pool-651-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:49334951 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-652] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=49334951 [pool-652-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":49334951,"title":"HDOJ 2004 成绩转换","create_at":"\/Date(1445501506000)\/","create":"2015-10-22 04:11:46","view_count":325,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \n输入一个百分制的成绩t，将其转换成对应的等级，具体转换规则如下： \n90~100为A; \n80~89为B; \n70~79为C; \n60~69为D; \n0~59为E;Input \n输入数据有多组，每组占一行，由一个整数组成。Output \n对于每组输入数据，输出一行。如果输入数据不在0~100范围内，请输出一行：“Score is error!”。Sample","url":"http://blog.csdn.net/qq_26525215/article/details/49334951","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 基础题","tags":"hdoj","content":"\u003cp\u003eProblem Description \u003cbr\u003e\n输入一个百分制的成绩t，将其转换成对应的等级，具体转换规则如下： \u003cbr\u003e\n90~100为A; \u003cbr\u003e\n80~89为B; \u003cbr\u003e\n70~79为C; \u003cbr\u003e\n60~69为D; \u003cbr\u003e\n0~59为E;\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\n输入数据有多组，每组占一行，由一个整数组成。\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n对于每组输入数据，输出一行。如果输入数据不在0~100范围内，请输出一行：“Score is error!”。\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n56 \u003cbr\u003e\n67 \u003cbr\u003e\n100 \u003cbr\u003e\n123\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\nE \u003cbr\u003e\nD \u003cbr\u003e\nA \u003cbr\u003e\nScore is error!\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.*;\nclass Main{\n  \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String args[]){\n    Scanner sc =\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(sc.hasNext()){\n      \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a = sc.nextInt();\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a&lt;\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e||a&gt;\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e)\n        System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"hljs-string\"\u003e\"Score is error!\"\u003c/span\u003e);\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a&gt;=\u003cspan class=\"hljs-number\"\u003e90\u003c/span\u003e&amp;&amp;a&lt;=\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e)\n        System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"hljs-string\"\u003e\"A\"\u003c/span\u003e);\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a&gt;=\u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e&amp;&amp;a&lt;=\u003cspan class=\"hljs-number\"\u003e89\u003c/span\u003e)\n        System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"hljs-string\"\u003e\"B\"\u003c/span\u003e);\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a&gt;=\u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e&amp;&amp;a&lt;=\u003cspan class=\"hljs-number\"\u003e79\u003c/span\u003e)\n        System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"hljs-string\"\u003e\"C\"\u003c/span\u003e);\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a&gt;=\u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e&amp;&amp;a&lt;=\u003cspan class=\"hljs-number\"\u003e69\u003c/span\u003e)\n        System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"hljs-string\"\u003e\"D\"\u003c/span\u003e);\n      \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a&gt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e&amp;&amp;a&lt;=\u003cspan class=\"hljs-number\"\u003e59\u003c/span\u003e)\n        System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(\u003cspan class=\"hljs-string\"\u003e\"E\"\u003c/span\u003e);\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\n输入一个百分制的成绩t，将其转换成对应的等级，具体转换规则如下：\n90~100为A;\n80~89为B;\n70~79为C;\n60~69为D;\n0~59为E;\n \n\nInput\n输入数据有多组，每组占一行，由一个整数组成。\n \n\nOutput\n对于每组输入数据，输出一行。如果输入数据不在0~100范围内，请输出一行：“Score is error!”。\n \n\nSample Input\n56\n67\n100\n123\n \n\nSample Output\nE\nD\nA\nScore is error!\n\n```\nimport java.util.*;\nclass Main{\n  public static void main(String args[]){\n    Scanner sc =new Scanner(System.in);\n    while(sc.hasNext()){\n      int a = sc.nextInt();\n      if(a\u003c0||a\u003e100)\n        System.out.println(\"Score is error!\");\n      if(a\u003e=90&&a\u003c=100)\n        System.out.println(\"A\");\n      if(a\u003e=80&&a\u003c=89)\n        System.out.println(\"B\");\n      if(a\u003e=70&&a\u003c=79)\n        System.out.println(\"C\");\n      if(a\u003e=60&&a\u003c=69)\n        System.out.println(\"D\");\n      if(a\u003e=0&&a\u003c=59)\n        System.out.println(\"E\");\n    }\n  }\n}\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-652-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-10\2015-10-22-HDOJ 2004 成绩转换.markdown [pool-652-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ 2004 成绩转换》成功 [pool-652-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-642] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50355579 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-653] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50355579 [pool-653-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50355579,"title":"Java---计算机贷款支付额计算(用对话框实现)","create_at":"\/Date(1450454606000)\/","create":"2015-12-19 12:03:26","view_count":729,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"本例演示如何编写程序来计算贷款支付问题。\n下面是编写程序的步骤：\n1.提示用户输入年利率、年数和贷款总额\n2.利用年利率算出月利率\n3.通过前面的公式计算月支付额。\n4.计算总支付额，它是月支付额乘以12再乘以年数。\n5.在消息对话框中显示月支付额和总支付额。\npackage cn.hncu.Chapter2;import javax.swing.JOptionPane;/**\n * @author","url":"http://blog.csdn.net/qq_26525215/article/details/50355579","categories":"❷ Java大学之行,----- ①、Java/Web小项目","tags":"计算机,支付,对话框","content":"\u003cul\u003e\n\u003cli\u003e本例演示如何编写程序来计算贷款支付问题。\u003c/li\u003e\n\u003cli\u003e下面是编写程序的步骤：\u003c/li\u003e\n\u003cli\u003e1.提示用户输入年利率、年数和贷款总额\u003c/li\u003e\n\u003cli\u003e2.利用年利率算出月利率\u003c/li\u003e\n\u003cli\u003e3.通过前面的公式计算月支付额。\u003c/li\u003e\n\u003cli\u003e4.计算总支付额，它是月支付额乘以12再乘以年数。\u003c/li\u003e\n\u003cli\u003e5.在消息对话框中显示月支付额和总支付额。\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.Chapter2;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.swing.JOptionPane;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e hncu_chx\n *\n * Mylove amin\n * \n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eComputeLoan\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        \u003cspan class=\"hljs-comment\"\u003e//Enter yearly interest rate开始的年利率\u003c/span\u003e\n        String annualInterestRateString = JOptionPane.showInputDialog(\u003cspan class=\"hljs-string\"\u003e\"Enter yearly \"\u003c/span\u003e +\n                \u003cspan class=\"hljs-string\"\u003e\"interest rate,for example 8.25:\"\u003c/span\u003e);\n\n        \u003cspan class=\"hljs-comment\"\u003e//Convert转换… string to double\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e annualInterestRate = \n                Double.parseDouble(annualInterestRateString);\n\n        \u003cspan class=\"hljs-comment\"\u003e//Obtain获得 monthly每月的 interest rate利息率\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e monthlyInterestRate = annualInterestRate/\u003cspan class=\"hljs-number\"\u003e1200\u003c/span\u003e;\n\n        \u003cspan class=\"hljs-comment\"\u003e//Enter number of years \u003c/span\u003e\n        String numberOfYearsString =JOptionPane.showInputDialog(\u003cspan class=\"hljs-string\"\u003e\"Enter number of years as an integer,\"\u003c/span\u003e +\n                \u003cspan class=\"hljs-string\"\u003e\"\\nfor example 5:\"\u003c/span\u003e);\n\n        \u003cspan class=\"hljs-comment\"\u003e//Convert转换 string to int \u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e numberOfYears = Integer.parseInt(numberOfYearsString);\n\n        \u003cspan class=\"hljs-comment\"\u003e//Enter开始 loan借款 amount总额\u003c/span\u003e\n        String loanString = JOptionPane.showInputDialog(\u003cspan class=\"hljs-string\"\u003e\"Enter loan amount,\"\u003c/span\u003e +\n                \u003cspan class=\"hljs-string\"\u003e\"for example 120000.95:\"\u003c/span\u003e);\n\n        \u003cspan class=\"hljs-comment\"\u003e//Convert string to double\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e loanAmount = Double.parseDouble(loanString);\n\n        \u003cspan class=\"hljs-comment\"\u003e//Calculate 计算 payment付款，支付；报酬\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e monthlyPayment = loanAmount * monthlyInterestRate/(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e/Math.pow(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e+monthlyInterestRate, \n                numberOfYears*\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e));\n        \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e totalPayment = monthlyPayment*numberOfYears*\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e;\n\n        \u003cspan class=\"hljs-comment\"\u003e//Format格式 to keep tow digits位数 数字 after the decimal小数 point点\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e//格式保留小数点后两位数\u003c/span\u003e\n        monthlyPayment = (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e )(monthlyPayment *\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e)/\u003cspan class=\"hljs-number\"\u003e100.0\u003c/span\u003e;\n        totalPayment = (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e)(totalPayment *\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e)/\u003cspan class=\"hljs-number\"\u003e100.0\u003c/span\u003e;\n\n        \u003cspan class=\"hljs-comment\"\u003e//Display显示 results结果 成绩 \u003c/span\u003e\n        String output = \u003cspan class=\"hljs-string\"\u003e\"The monthly payment is \"\u003c/span\u003e+monthlyPayment+\n                \u003cspan class=\"hljs-string\"\u003e\"\\nThe total payment is \"\u003c/span\u003e+totalPayment;\n        JOptionPane.showMessageDialog(\u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e, output);\n\n\n    }\n\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20151219000034994\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20151219000043538\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20151219000053498\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20151219000100589\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e注意：如果在输入对话框中点击取消，无字符串返回，系统会出现运行时错误。\u003c/p\u003e","markdowncontent":" * 本例演示如何编写程序来计算贷款支付问题。\n * 下面是编写程序的步骤：\n * 1.提示用户输入年利率、年数和贷款总额\n * 2.利用年利率算出月利率\n * 3.通过前面的公式计算月支付额。\n * 4.计算总支付额，它是月支付额乘以12再乘以年数。\n * 5.在消息对话框中显示月支付额和总支付额。\n```\npackage cn.hncu.Chapter2;\n\nimport javax.swing.JOptionPane;\n\n/**\n * @author hncu_chx\n *\n * Mylove amin\n * \n */\npublic class ComputeLoan {\n\tpublic static void main(String[] args) {\n\t\t//Enter yearly interest rate开始的年利率\n\t\tString annualInterestRateString = JOptionPane.showInputDialog(\"Enter yearly \" +\n\t\t\t\t\"interest rate,for example 8.25:\");\n\t\t\n\t\t//Convert转换… string to double\n\t\tdouble annualInterestRate = \n\t\t\t\tDouble.parseDouble(annualInterestRateString);\n\t\t\n\t\t//Obtain获得 monthly每月的 interest rate利息率\n\t\tdouble monthlyInterestRate = annualInterestRate/1200;\n\t\t\n\t\t//Enter number of years \n\t\tString numberOfYearsString =JOptionPane.showInputDialog(\"Enter number of years as an integer,\" +\n\t\t\t\t\"\\nfor example 5:\");\n\t\t\n\t\t//Convert转换 string to int \n\t\tint numberOfYears = Integer.parseInt(numberOfYearsString);\n\t\t\n\t\t//Enter开始 loan借款 amount总额\n\t\tString loanString = JOptionPane.showInputDialog(\"Enter loan amount,\" +\n\t\t\t\t\"for example 120000.95:\");\n\t\t\n\t\t//Convert string to double\n\t\tdouble loanAmount = Double.parseDouble(loanString);\n\t\t\n\t\t//Calculate 计算 payment付款，支付；报酬\n\t\tdouble monthlyPayment = loanAmount * monthlyInterestRate/(1-1/Math.pow(1+monthlyInterestRate, \n\t\t\t\tnumberOfYears*12));\n\t\tdouble totalPayment = monthlyPayment*numberOfYears*12;\n\t\t\n\t\t//Format格式 to keep tow digits位数 数字 after the decimal小数 point点\n\t\t//格式保留小数点后两位数\n\t\tmonthlyPayment = (int )(monthlyPayment *100)/100.0;\n\t\ttotalPayment = (int)(totalPayment *100)/100.0;\n\t\t\n\t\t//Display显示 results结果 成绩 \n\t\tString output = \"The monthly payment is \"+monthlyPayment+\n\t\t\t\t\"\\nThe total payment is \"+totalPayment;\n\t\tJOptionPane.showMessageDialog(null, output);\n\t\t\n\t\t\n\t}\n\n}\n```\n![](http://img.blog.csdn.net/20151219000034994)\n\n![](http://img.blog.csdn.net/20151219000043538)\n\n![](http://img.blog.csdn.net/20151219000053498)\n\n![](http://img.blog.csdn.net/20151219000100589)\n\n注意：如果在输入对话框中点击取消，无字符串返回，系统会出现运行时错误。","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-653-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-12\2015-12-19-Java---计算机贷款支付额计算(用对话框实现).markdown [pool-653-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java---计算机贷款支付额计算(用对话框实现)》成功 [pool-653-thread-1] [chx]
[INFO] 2017-07-28 12:29:21 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-643] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:74012471 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:22 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-654] [chx]
[INFO] 2017-07-28 12:29:22 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74012471 [pool-654-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":74012471,"title":"【Cocos2d-x】开发基础-Cocos2d-x核心概念","create_at":"\/Date(1498830872000)\/","create":"2017-06-30 09:54:32","view_count":116,"comment_count":0,"comment_allowed":"true","type":"original","channel":1,"digg":0,"bury":0,"description":"本篇博客讲解: \n1.Cocos2d-x的核心概念导演导演类Director(v3.0之前是CCDirector)用于管理场景对象。 \n(所以3.0版本和以前的最大区别(我们看到的最大区别)就是类前面的CC，3.0版本是把所以的类前缀CC都去掉了)采用单例设计模式！(不多解释啦，不知道的朋友请搜索)auto director = Director::getInstance();//获取唯一的导演","url":"http://blog.csdn.net/qq_26525215/article/details/74012471","categories":"cocos2d-x","tags":"cocos2d-x,博客","content":"\u003cp\u003e本篇博客讲解: \u003cbr\u003e\n1.Cocos2d-x的核心概念\u003c/p\u003e\n\n\n\n\u003ch2 id=\"title\"\u003e\u003c!-- more --\u003e\u003c/h2\u003e\n\n\n\n\u003ch1 id=\"导演\"\u003e导演\u003c/h1\u003e\n\n\u003cp\u003e导演类Director(v3.0之前是CCDirector)用于管理场景对象。 \u003cbr\u003e\n(所以3.0版本和以前的最大区别(我们看到的最大区别)就是类前面的CC，3.0版本是把所以的类前缀CC都去掉了)\u003c/p\u003e\n\n\u003cp\u003e采用单例设计模式！(不多解释啦，不知道的朋友请搜索)\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-c++ 获得导演类Director实例语句 hljs d\"\u003e\u003cspan class=\"hljs-keyword\"\u003eauto\u003c/span\u003e director = Director::getInstance();\u003cspan class=\"hljs-comment\"\u003e//获取唯一的导演  单例模式\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch2 id=\"导演对象的职责作用\"\u003e导演对象的职责/作用\u003c/h2\u003e\n\n\u003cp\u003e访问和改变场景 \u003cbr\u003e\n访问Cocos2d-x的配置信息 \u003cbr\u003e\n暂停、继续和停止游戏 \u003cbr\u003e\n转换坐标  \u003c/p\u003e\n\n\u003cp\u003e上面只是导演对象的职责其中一部分，还有其他很多，但我们不需要让导演做很多事情(其他的事被隐藏了)，我们用的最多的应该就是访问和改变场景、暂停、继续和停止游戏和转换坐标  \u003c/p\u003e\n\n\n\n\u003ch1 id=\"场景\"\u003e场景\u003c/h1\u003e\n\n\u003cp\u003e场景类Scene(v3.0之前是CCScene)是构成游戏的界面，类似于电影中的场景。\u003c/p\u003e\n\n\u003cp\u003e像导演、场景、包括层，精灵等这些游戏的概念，其实都是从电影行业中过渡过来的。 \u003cbr\u003e\n那么，电影行业，我们知道有场景，有导演。 \u003cbr\u003e\n场景就是我们拍这场戏，我们布置的景  比如打斗的场景等 \u003cbr\u003e\n场景中会有男主角，女主角，那么男女主角就相当于我们这里的精灵了，包括道具什么的(精灵)，这些东西在一起，就构成了层  \u003c/p\u003e\n\n\u003cp\u003e所以场景里面也会放一些层  \u003c/p\u003e\n\n\n\n\u003ch2 id=\"场景大致可以分为以下几类\"\u003e场景大致可以分为以下几类\u003c/h2\u003e\n\n\u003cp\u003e展示类场景。播放视频或简单的在图像上输出文字，来实现游戏的开场介绍、胜利和失败提示、帮助介绍 \u003cbr\u003e\n选项类场景。主菜单，设置游戏参数等(比如开始，暂停，继续菜单) \u003cbr\u003e\n游戏场景。这是游戏的主要内容  \u003c/p\u003e\n\n\u003cp\u003eScene类图:继承图 \u003cbr\u003e\n\u003cimg src=\"http://i.imgur.com/2S6h9PZ.png\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch1 id=\"层\"\u003e层\u003c/h1\u003e\n\n\u003cp\u003e层是我们写游戏的重点，我们大约99%以上的时间是在层上实现我们游戏内容。 \u003cbr\u003e\n层的管理类似于Photoshop中的图层，它也是一层一层叠在一起  \u003c/p\u003e\n\n\u003cp\u003e我们一般写的很多类都是层，然后在层上面添加精灵等.然后把层放到场景里 \u003cbr\u003e\n场景包含层，层包含精灵,菜单等对象  \u003c/p\u003e\n\n\u003cp\u003e理论上来说，层的层数越多(层与层之间有覆盖的问题，后面的层会覆盖先绘制的层)，需要绘制的深度越深，越耗CPU \u003cbr\u003e\n大家可以打开Photoshop，用里面的图层来理解，这样更加直观 \u003cbr\u003e\n\u003cimg src=\"http://i.imgur.com/4XUGFsE.png\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch1 id=\"精灵\"\u003e精灵\u003c/h1\u003e\n\n\u003cp\u003e精灵类Sprite(v3.0之前是CCSprite)是游戏中非常重要的概念，它包括了敌人、玩家控制的对象、静态物体、地图和背景等 \u003cbr\u003e\n通常情况它会进行运动，运动方式包括了：移动、旋转、放大、缩小和动画等  \u003c/p\u003e\n\n\n\n\u003ch1 id=\"菜单\"\u003e菜单\u003c/h1\u003e\n\n\u003cp\u003e菜单在游戏中时非常重要的概念，它提供操作的集合，在Cococ2d-x中菜单类是Menu  \u003c/p\u003e\n\n\u003cp\u003eMenu中包含菜单项 \u003cbr\u003e\nMenuItem，它有三个子类： \u003cbr\u003e\nMenuItemLabel、MenuItemSprite和MenuItemToggle  \u003c/p\u003e\n\n\u003cp\u003e之前的HelloWord中的关闭按钮其实就是一个菜单项 \u003cbr\u003e\n我们也可以用精灵来实现，但是菜单项封装了一些触摸事件，你不需要关心它事件处理的细节问题  \u003c/p\u003e\n\n\u003cp\u003e本文章由\u003ca href=\"http://chenhaoxiang.cn/\"\u003e[谙忆]\u003c/a\u003e编写， 所有权利保留。  \u003cbr\u003e\n欢迎转载，分享是进步的源泉。\u003c/p\u003e\n\n\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://chenhaoxiang.cn\"\u003e\u003cfont color=\"green\"\u003ehttp://chenhaoxiang.cn\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://chenhaoxiang.cn\" target=\"_blank\"\u003e人生之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","markdowncontent":"---\nlayout: post\ntitle: \"【Cocos2d-x】开发基础-Cocos2d-x核心概念\"\ndate: 2017-06-10 13:38:54 +0800\ncomments: true\ncategories: Cocos2d-x\ntags: [Cocos2d-x, basis]\nkeyword: 陈浩翔, 谙忆, C++, Cocos2d-x,Cocos2d-x核心概念\ndescription:  Cocos2d-x的核心概念 导演 场景 层 精灵 菜单\n---\n\n本篇博客讲解:  \n1.Cocos2d-x的核心概念\n\n\u003c!-- more --\u003e\n----------\n#导演\n导演类Director(v3.0之前是CCDirector)用于管理场景对象。  \n(所以3.0版本和以前的最大区别(我们看到的最大区别)就是类前面的CC，3.0版本是把所以的类前缀CC都去掉了)\n\n采用单例设计模式！(不多解释啦，不知道的朋友请搜索)\n```c++ 获得导演类Director实例语句\nauto director = Director::getInstance();//获取唯一的导演  单例模式\n```\n\n##导演对象的职责/作用\n访问和改变场景  \n访问Cocos2d-x的配置信息  \n暂停、继续和停止游戏  \n转换坐标  \n\n上面只是导演对象的职责其中一部分，还有其他很多，但我们不需要让导演做很多事情(其他的事被隐藏了)，我们用的最多的应该就是访问和改变场景、暂停、继续和停止游戏和转换坐标  \n\n#场景\n场景类Scene(v3.0之前是CCScene)是构成游戏的界面，类似于电影中的场景。\n\n像导演、场景、包括层，精灵等这些游戏的概念，其实都是从电影行业中过渡过来的。  \n那么，电影行业，我们知道有场景，有导演。  \n场景就是我们拍这场戏，我们布置的景  比如打斗的场景等  \n场景中会有男主角，女主角，那么男女主角就相当于我们这里的精灵了，包括道具什么的(精灵)，这些东西在一起，就构成了层  \n  \n所以场景里面也会放一些层  \n\n##场景大致可以分为以下几类\n展示类场景。播放视频或简单的在图像上输出文字，来实现游戏的开场介绍、胜利和失败提示、帮助介绍  \n选项类场景。主菜单，设置游戏参数等(比如开始，暂停，继续菜单)  \n游戏场景。这是游戏的主要内容  \n\nScene类图:继承图\n![](http://i.imgur.com/2S6h9PZ.png)\n\n#层\n层是我们写游戏的重点，我们大约99%以上的时间是在层上实现我们游戏内容。  \n层的管理类似于Photoshop中的图层，它也是一层一层叠在一起  \n\n我们一般写的很多类都是层，然后在层上面添加精灵等.然后把层放到场景里  \n场景包含层，层包含精灵,菜单等对象  \n\n理论上来说，层的层数越多(层与层之间有覆盖的问题，后面的层会覆盖先绘制的层)，需要绘制的深度越深，越耗CPU  \n大家可以打开Photoshop，用里面的图层来理解，这样更加直观  \n![](http://i.imgur.com/4XUGFsE.png)\n\n#精灵\n精灵类Sprite(v3.0之前是CCSprite)是游戏中非常重要的概念，它包括了敌人、玩家控制的对象、静态物体、地图和背景等  \n通常情况它会进行运动，运动方式包括了：移动、旋转、放大、缩小和动画等  \n\n\n#菜单\n菜单在游戏中时非常重要的概念，它提供操作的集合，在Cococ2d-x中菜单类是Menu  \n\nMenu中包含菜单项  \nMenuItem，它有三个子类：  \nMenuItemLabel、MenuItemSprite和MenuItemToggle  \n\n之前的HelloWord中的关闭按钮其实就是一个菜单项  \n我们也可以用精灵来实现，但是菜单项封装了一些触摸事件，你不需要关心它事件处理的细节问题  \n\n本文章由\u003ca href=\"http://chenhaoxiang.cn/\"\u003e[谙忆]\u003c/a\u003e编写， 所有权利保留。 \n欢迎转载，分享是进步的源泉。\n\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://chenhaoxiang.cn\u0027\u003e\u003cfont color=\"green\"\u003ehttp://chenhaoxiang.cn\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://chenhaoxiang.cn\u0027 target=\u0027_blank\u0027\u003e人生之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-654-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-06\2017-06-30-【Cocos2d-x】开发基础-Cocos2d-x核心概念.markdown [pool-654-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-644] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【Cocos2d-x】开发基础-Cocos2d-x核心概念》成功 [pool-654-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51020630 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:22 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-655] [chx]
[INFO] 2017-07-28 12:29:22 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51020630 [pool-655-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51020630,"title":"【2】JAVA---地址App小软件（ListPanel.class）（表现层）","create_at":"\/Date(1459353669000)\/","create":"2016-03-31 12:01:09","view_count":455,"comment_count":0,"comment_allowed":"true","type":"original","channel":15,"digg":1,"bury":0,"description":"这个是表现层的主界面。 \n/*\n * ListPanel.java\n *\n */package cn.hncu.addr.ui;import javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;import cn.hncu.addr.busine","url":"http://blog.csdn.net/qq_26525215/article/details/51020630","categories":"❷ Java大学之行,----- ②、Java设计模块,----- ----- Java地址App","tags":"","content":"\u003cp\u003e这个是表现层的主界面。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160331000001167\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e\u003cspan class=\"hljs-comment\"\u003e/*\n * ListPanel.java\n *\n */\u003c/span\u003e\n\npackage cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.addr\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ui\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JFrame\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JList\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JOptionPane\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.addr\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.business\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.AddrBusiness\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"hljs-comment\"\u003e/**\n * \n * @author __chx__\n */\u003c/span\u003e\npublic class ListPanel extends javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JPanel\u003c/span\u003e {\n    \u003cspan class=\"hljs-comment\"\u003e/** Creates new form ListPanel */\u003c/span\u003e\n    private JFrame mainFrame = null\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private JLabel jlbFindAddress = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n\n    public ListPanel(JFrame mainFrame) {\n        this\u003cspan class=\"hljs-preprocessor\"\u003e.mainFrame\u003c/span\u003e = mainFrame\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        initComponents()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        myInitData()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    public ListPanel(JFrame mainFrame, Object[] objs) {\n        this\u003cspan class=\"hljs-preprocessor\"\u003e.mainFrame\u003c/span\u003e = mainFrame\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        initComponents()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jListAddress\u003cspan class=\"hljs-preprocessor\"\u003e.setListData\u003c/span\u003e(objs)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jlbFindAddress\n                \u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u67e5\\u627e\\u5230\\u7684\\u5730\\u5740\\u4fe1\\u606f\\uff1a\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jlbFindAddress)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jlbFindAddress\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e40\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e125\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    private void myInitData() {\n        AddrBusiness \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e = new AddrBusiness()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Object obj[] = \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.getAll\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jListAddress\u003cspan class=\"hljs-preprocessor\"\u003e.setListData\u003c/span\u003e(obj)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    \u003cspan class=\"hljs-comment\"\u003e/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\u003c/span\u003e\n    private JList&lt;String&gt; getListAddress() {\n        return jListAddress\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n\n    private void initComponents() {\n        jLabelApp = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnAdd = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnChange = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnDelete = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnFind = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jScrollPane1 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JScrollPane\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jListAddress = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JList\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel1 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jToggleButton1 = new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JToggleButton\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        setPreferredSize(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Dimension\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e800\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e600\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        setLayout(null)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabelApp\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Microsoft YaHei UI\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e36\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabelApp\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabelApp\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"    \\u5730\\u5740\\u4fe1\\u606fApp\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabelApp)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabelApp\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e240\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e20\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e263\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e47\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jbtnAdd\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Microsoft YaHei UI\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnAdd\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e102\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e102\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnAdd\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u6dfb\\u52a0\\u5730\\u5740\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnAdd\u003cspan class=\"hljs-preprocessor\"\u003e.addActionListener\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionListener\u003c/span\u003e() {\n            public void actionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n                jbtnAddActionPerformed(evt)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        })\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jbtnAdd)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnAdd\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e360\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jbtnChange\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Microsoft YaHei UI\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnChange\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e102\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e102\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnChange\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u4fee\\u6539\\u5730\\u5740\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnChange\u003cspan class=\"hljs-preprocessor\"\u003e.addActionListener\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionListener\u003c/span\u003e() {\n            public void actionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n                jbtnChangeActionPerformed(evt)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        })\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jbtnChange)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnChange\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e460\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jbtnDelete\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Microsoft YaHei UI\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnDelete\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e102\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e102\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnDelete\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u5220\\u9664\\u5730\\u5740\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnDelete\u003cspan class=\"hljs-preprocessor\"\u003e.addActionListener\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionListener\u003c/span\u003e() {\n            public void actionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n                jbtnDeleteActionPerformed(evt)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        })\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jbtnDelete)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnDelete\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e470\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e460\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jbtnFind\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Microsoft YaHei UI\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnFind\u003cspan class=\"hljs-preprocessor\"\u003e.setForeground\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Color\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e102\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e102\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnFind\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u67e5\\u627e\\u5730\\u5740\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnFind\u003cspan class=\"hljs-preprocessor\"\u003e.addActionListener\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionListener\u003c/span\u003e() {\n            public void actionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n                jbtnFindActionPerformed(evt)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        })\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jbtnFind)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jbtnFind\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e470\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e360\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e120\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jListAddress\u003cspan class=\"hljs-preprocessor\"\u003e.setFont\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Font\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Microsoft YaHei UI\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e14\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jListAddress\u003cspan class=\"hljs-preprocessor\"\u003e.setModel\u003c/span\u003e(new javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.AbstractListModel\u003c/span\u003e() {\n            String[] strings = { \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e }\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n            public int getSize() {\n                return strings\u003cspan class=\"hljs-preprocessor\"\u003e.length\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n\n            public Object getElementAt(int i) {\n                return strings[i]\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        })\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jScrollPane1\u003cspan class=\"hljs-preprocessor\"\u003e.setViewportView\u003c/span\u003e(jListAddress)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jScrollPane1)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jScrollPane1\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e40\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e70\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e700\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e270\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jLabel1\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\" \\u9648\\u6d69\\u7fd4\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jLabel1)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jLabel1\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e700\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e510\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e60\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e17\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        jToggleButton1\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\\u9000\\u51fa\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jToggleButton1\u003cspan class=\"hljs-preprocessor\"\u003e.addActionListener\u003c/span\u003e(new java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionListener\u003c/span\u003e() {\n            public void actionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n                jToggleButton1ActionPerformed(evt)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        })\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e(jToggleButton1)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        jToggleButton1\u003cspan class=\"hljs-preprocessor\"\u003e.setBounds\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e680\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e410\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    private void jToggleButton1ActionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.exit\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    private void jbtnFindActionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n        mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.setContentPane\u003c/span\u003e(new QueryPanel(mainFrame))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.validate\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    private void jbtnDeleteActionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n        if (jListAddress\u003cspan class=\"hljs-preprocessor\"\u003e.getSelectedValue\u003c/span\u003e() == null) {\n            JOptionPane\u003cspan class=\"hljs-preprocessor\"\u003e.showMessageDialog\u003c/span\u003e(this, \u003cspan class=\"hljs-string\"\u003e\"未选中地址！无法删除，请重新选择！\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        } else {\n            mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.setContentPane\u003c/span\u003e(new DeletePanel(mainFrame,\n                    (String) jListAddress\u003cspan class=\"hljs-preprocessor\"\u003e.getSelectedValue\u003c/span\u003e()))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.validate\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n    }\n\n    private void jbtnChangeActionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n        if (jListAddress\u003cspan class=\"hljs-preprocessor\"\u003e.getSelectedValue\u003c/span\u003e() == null) {\n            JOptionPane\u003cspan class=\"hljs-preprocessor\"\u003e.showMessageDialog\u003c/span\u003e(this, \u003cspan class=\"hljs-string\"\u003e\"未选中地址！无法修改，请重新选择！\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        } else {\n            mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.setContentPane\u003c/span\u003e(new UpdatePanel(mainFrame,\n                    (String) jListAddress\u003cspan class=\"hljs-preprocessor\"\u003e.getSelectedValue\u003c/span\u003e()))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.validate\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n    }\n\n    private void jbtnAddActionPerformed(java\u003cspan class=\"hljs-preprocessor\"\u003e.awt\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.event\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ActionEvent\u003c/span\u003e evt) {\n        // System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"aaa\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.setContentPane\u003c/span\u003e(new AddPanel(mainFrame))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        mainFrame\u003cspan class=\"hljs-preprocessor\"\u003e.revalidate\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabel1\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JLabel\u003c/span\u003e jLabelApp\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JList\u003c/span\u003e jListAddress\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JScrollPane\u003c/span\u003e jScrollPane1\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JToggleButton\u003c/span\u003e jToggleButton1\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e jbtnAdd\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e jbtnChange\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e jbtnDelete\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    private javax\u003cspan class=\"hljs-preprocessor\"\u003e.swing\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.JButton\u003c/span\u003e jbtnFind\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n}\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"这个是表现层的主界面。\n![](http://img.blog.csdn.net/20160331000001167)\n\n```\n/*\n * ListPanel.java\n *\n */\n\npackage cn.hncu.addr.ui;\n\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JOptionPane;\n\nimport cn.hncu.addr.business.AddrBusiness;\n\n/**\n * \n * @author __chx__\n */\npublic class ListPanel extends javax.swing.JPanel {\n\t/** Creates new form ListPanel */\n\tprivate JFrame mainFrame = null;\n\tprivate JLabel jlbFindAddress = new javax.swing.JLabel();\n\t\n\t\n\tpublic ListPanel(JFrame mainFrame) {\n\t\tthis.mainFrame = mainFrame;\n\t\tinitComponents();\n\t\tmyInitData();\n\t}\n\n\tpublic ListPanel(JFrame mainFrame, Object[] objs) {\n\t\tthis.mainFrame = mainFrame;\n\t\tinitComponents();\n\t\tjListAddress.setListData(objs);\n\n\t\tjlbFindAddress\n\t\t\t\t.setText(\"\\u67e5\\u627e\\u5230\\u7684\\u5730\\u5740\\u4fe1\\u606f\\uff1a\");\n\t\tadd(jlbFindAddress);\n\t\tjlbFindAddress.setBounds(40, 50, 125, 17);\n\t}\n\n\tprivate void myInitData() {\n\t\tAddrBusiness set = new AddrBusiness();\n\t\tObject obj[] = set.getAll();\n\t\tjListAddress.setListData(obj);\n\t}\n\n\t/**\n\t * This method is called from within the constructor to initialize the form.\n\t * WARNING: Do NOT modify this code. The content of this method is always\n\t * regenerated by the Form Editor.\n\t */\n\tprivate JList\u003cString\u003e getListAddress() {\n\t\treturn jListAddress;\n\t}\n\n\t\n\tprivate void initComponents() {\n\t\tjLabelApp = new javax.swing.JLabel();\n\t\tjbtnAdd = new javax.swing.JButton();\n\t\tjbtnChange = new javax.swing.JButton();\n\t\tjbtnDelete = new javax.swing.JButton();\n\t\tjbtnFind = new javax.swing.JButton();\n\t\tjScrollPane1 = new javax.swing.JScrollPane();\n\t\tjListAddress = new javax.swing.JList();\n\t\tjLabel1 = new javax.swing.JLabel();\n\t\tjToggleButton1 = new javax.swing.JToggleButton();\n\n\t\tsetPreferredSize(new java.awt.Dimension(800, 600));\n\t\tsetLayout(null);\n\n\t\tjLabelApp.setFont(new java.awt.Font(\"Microsoft YaHei UI\", 1, 36));\n\t\tjLabelApp.setForeground(new java.awt.Color(255, 0, 0));\n\t\tjLabelApp.setText(\"    \\u5730\\u5740\\u4fe1\\u606fApp\");\n\t\tadd(jLabelApp);\n\t\tjLabelApp.setBounds(240, 20, 263, 47);\n\n\t\tjbtnAdd.setFont(new java.awt.Font(\"Microsoft YaHei UI\", 1, 14));\n\t\tjbtnAdd.setForeground(new java.awt.Color(102, 102, 255));\n\t\tjbtnAdd.setText(\"\\u6dfb\\u52a0\\u5730\\u5740\");\n\t\tjbtnAdd.addActionListener(new java.awt.event.ActionListener() {\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\t\tjbtnAddActionPerformed(evt);\n\t\t\t}\n\t\t});\n\t\tadd(jbtnAdd);\n\t\tjbtnAdd.setBounds(120, 360, 120, 60);\n\n\t\tjbtnChange.setFont(new java.awt.Font(\"Microsoft YaHei UI\", 1, 14));\n\t\tjbtnChange.setForeground(new java.awt.Color(102, 102, 255));\n\t\tjbtnChange.setText(\"\\u4fee\\u6539\\u5730\\u5740\");\n\t\tjbtnChange.addActionListener(new java.awt.event.ActionListener() {\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\t\tjbtnChangeActionPerformed(evt);\n\t\t\t}\n\t\t});\n\t\tadd(jbtnChange);\n\t\tjbtnChange.setBounds(120, 460, 120, 60);\n\n\t\tjbtnDelete.setFont(new java.awt.Font(\"Microsoft YaHei UI\", 1, 14));\n\t\tjbtnDelete.setForeground(new java.awt.Color(102, 102, 255));\n\t\tjbtnDelete.setText(\"\\u5220\\u9664\\u5730\\u5740\");\n\t\tjbtnDelete.addActionListener(new java.awt.event.ActionListener() {\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\t\tjbtnDeleteActionPerformed(evt);\n\t\t\t}\n\t\t});\n\t\tadd(jbtnDelete);\n\t\tjbtnDelete.setBounds(470, 460, 120, 60);\n\n\t\tjbtnFind.setFont(new java.awt.Font(\"Microsoft YaHei UI\", 1, 14));\n\t\tjbtnFind.setForeground(new java.awt.Color(102, 102, 255));\n\t\tjbtnFind.setText(\"\\u67e5\\u627e\\u5730\\u5740\");\n\t\tjbtnFind.addActionListener(new java.awt.event.ActionListener() {\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\t\tjbtnFindActionPerformed(evt);\n\t\t\t}\n\t\t});\n\t\tadd(jbtnFind);\n\t\tjbtnFind.setBounds(470, 360, 120, 60);\n\n\t\tjListAddress.setFont(new java.awt.Font(\"Microsoft YaHei UI\", 1, 14));\n\t\tjListAddress.setModel(new javax.swing.AbstractListModel() {\n\t\t\tString[] strings = { \"\" };\n\n\t\t\tpublic int getSize() {\n\t\t\t\treturn strings.length;\n\t\t\t}\n\n\t\t\tpublic Object getElementAt(int i) {\n\t\t\t\treturn strings[i];\n\t\t\t}\n\t\t});\n\t\tjScrollPane1.setViewportView(jListAddress);\n\n\t\tadd(jScrollPane1);\n\t\tjScrollPane1.setBounds(40, 70, 700, 270);\n\n\t\tjLabel1.setText(\" \\u9648\\u6d69\\u7fd4\");\n\t\tadd(jLabel1);\n\t\tjLabel1.setBounds(700, 510, 60, 17);\n\n\t\tjToggleButton1.setText(\"\\u9000\\u51fa\");\n\t\tjToggleButton1.addActionListener(new java.awt.event.ActionListener() {\n\t\t\tpublic void actionPerformed(java.awt.event.ActionEvent evt) {\n\t\t\t\tjToggleButton1ActionPerformed(evt);\n\t\t\t}\n\t\t});\n\t\tadd(jToggleButton1);\n\t\tjToggleButton1.setBounds(680, 410, 80, 50);\n\t}\n\n\tprivate void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {\n\t\tSystem.exit(0);\n\t}\n\n\tprivate void jbtnFindActionPerformed(java.awt.event.ActionEvent evt) {\n\t\tmainFrame.setContentPane(new QueryPanel(mainFrame));\n\t\tmainFrame.validate();\n\t}\n\n\tprivate void jbtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {\n\t\tif (jListAddress.getSelectedValue() == null) {\n\t\t\tJOptionPane.showMessageDialog(this, \"未选中地址！无法删除，请重新选择！\");\n\t\t} else {\n\t\t\tmainFrame.setContentPane(new DeletePanel(mainFrame,\n\t\t\t\t\t(String) jListAddress.getSelectedValue()));\n\t\t\tmainFrame.validate();\n\t\t}\n\t}\n\n\tprivate void jbtnChangeActionPerformed(java.awt.event.ActionEvent evt) {\n\t\tif (jListAddress.getSelectedValue() == null) {\n\t\t\tJOptionPane.showMessageDialog(this, \"未选中地址！无法修改，请重新选择！\");\n\t\t} else {\n\t\t\tmainFrame.setContentPane(new UpdatePanel(mainFrame,\n\t\t\t\t\t(String) jListAddress.getSelectedValue()));\n\t\t\tmainFrame.validate();\n\t\t}\n\t}\n\n\tprivate void jbtnAddActionPerformed(java.awt.event.ActionEvent evt) {\n\t\t// System.out.println(\"aaa\");\n\t\tmainFrame.setContentPane(new AddPanel(mainFrame));\n\t\tmainFrame.revalidate();\n\t}\n\n\tprivate javax.swing.JLabel jLabel1;\n\tprivate javax.swing.JLabel jLabelApp;\n\tprivate javax.swing.JList jListAddress;\n\tprivate javax.swing.JScrollPane jScrollPane1;\n\tprivate javax.swing.JToggleButton jToggleButton1;\n\tprivate javax.swing.JButton jbtnAdd;\n\tprivate javax.swing.JButton jbtnChange;\n\tprivate javax.swing.JButton jbtnDelete;\n\tprivate javax.swing.JButton jbtnFind;\n\t\n}\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-655-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-03\2016-03-31-【2】JAVA---地址App小软件（ListPanel.class）（表现层）.markdown [pool-655-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【2】JAVA---地址App小软件（ListPanel.class）（表现层）》成功 [pool-655-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-645] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:52146529 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:22 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-656] [chx]
[INFO] 2017-07-28 12:29:22 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-646] [chx]
[INFO] 2017-07-28 12:29:22 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=52146529 [pool-656-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":52146529,"title":"MySQL---数据库从入门走向大神系列(六)-事务处理与事务隔离(锁机制)","create_at":"\/Date(1470643064000)\/","create":"2016-08-08 03:57:44","view_count":14254,"comment_count":5,"comment_allowed":"true","type":"original","channel":6,"digg":1,"bury":0,"description":"MySQL 事务处理简单介绍事务处理：MySQL 事务主要用于处理操作量大，复杂度高的数据。 \n比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！一个事务是一个连续的一组数据库操作，就好像它是一个单一的工作单元进行。换言之，永远不会是完整的事务，除非该组内的每个单独的操作是成功的。如果在事务的任","url":"http://blog.csdn.net/qq_26525215/article/details/52146529","categories":"❷ Java大学之行,----- ⑤、数据库","tags":"数据库,mysql,事务,管理","content":"\u003ch1 id=\"mysql-事务处理\"\u003eMySQL 事务处理\u003c/h1\u003e\n\n\n\n\u003ch2 id=\"简单介绍事务处理\"\u003e简单介绍事务处理：\u003c/h2\u003e\n\n\u003cp\u003eMySQL 事务主要用于处理操作量大，复杂度高的数据。 \u003cbr\u003e\n比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！\u003c/p\u003e\n\n\u003cp\u003e一个事务是一个连续的一组数据库操作，就好像它是一个单一的工作单元进行。换言之，永远不会是完整的事务，除非该组内的每个单独的操作是成功的。如果在事务的任何操作失败，则整个事务将失败。\u003c/p\u003e\n\n\u003cp\u003e事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行\u003c/p\u003e\n\n\u003cp\u003e事务用来管理多条insert,update,delete语句\u003c/p\u003e\n\n\u003cp\u003e一般来说，事务是必须满足4个条件（ACID）：  \u003cbr\u003e\nAtomicity（原子性）、Consistency（稳定性）、Isolation（隔离性）、Durability（可靠性）\u003c/p\u003e\n\n\u003cp\u003e1、事务的原子性：一组事务，要么成功；要么撤回。 \u003cbr\u003e\n2、稳定性 ： 有非法数据（外键约束之类），事务撤回。 \u003cbr\u003e\n3、隔离性：事务独立运行。一个事务处理后的结果，影响了其他事务，那么其他事务会撤回。事务的100%隔离，需要牺牲速度。 \u003cbr\u003e\n4、可靠性：软、硬件崩溃后，InnoDB数据表驱动会利用日志文件重构修改。可靠性和高速度不可兼得， innodb_flush_log_at_trx_commit选项 决定什么时候把事务保存到日志里。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e开始一个事务\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在MySQL中，事务开始使用COMMIT或ROLLBACK语句开始工作和结束。开始和结束语句的SQL命令之间形成了大量的事务。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCOMMIT &amp; ROLLBACK:\u003c/strong\u003e  \u003cbr\u003e\n这两个关键字提交和回滚(撤销事务)主要用于MySQL的事务。\u003c/p\u003e\n\n\u003cp\u003e当一个成功的事务完成后，发出COMMIT命令应使所有参与表的更改才会生效。\u003c/p\u003e\n\n\u003cp\u003e如果发生故障时，应发出一个ROLLBACK命令返回的事务中引用的每一个表到以前的状态。\u003c/p\u003e\n\n\u003cp\u003e可以控制的事务行为称为AUTOCOMMIT设置会话变量。如果AUTOCOMMIT设置为1（默认值），然后每一个SQL语句（在事务与否）被认为是一个完整的事务，并承诺在默认情况下，当它完成。 AUTOCOMMIT设置为0时，发出SET AUTOCOMMIT =0命令，在随后的一系列语句的作用就像一个事务，直到一个明确的COMMIT语句时，没有活动的提交。\u003c/p\u003e\n\n\u003cp\u003eJava中setAutoCommit(false)对应mysql中的“START TRANSACTION;”的功能\u003c/p\u003e\n\n\n\n\u003ch2 id=\"sql代码演示说明\"\u003eSQL代码演示说明：\u003c/h2\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e;\u003c/span\u003e\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e aa \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\u00277\u0027\u003c/span\u003e;\u003c/span\u003e\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e aa \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e sname=\u003cspan class=\"hljs-string\"\u003e\u0027aaaa\u0027\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e id=\u003cspan class=\"hljs-string\"\u003e\u00275\u0027\u003c/span\u003e;\u003c/span\u003e\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003erollback\u003c/span\u003e;\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e/*事务回滚-执行失败*/\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e/*commit;提交事务-执行成功*/\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e说明：从”start transaction”开始 到 “bollback; 或 commit; ”，这中间的那么语句是一个整体，如果执行 “bollback”，那么这些动作都会回滚(撤消)。如果执行“commit”，就全部执行成功。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160808021007636\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch2 id=\"java代码演示\"\u003eJava代码演示:\u003c/h2\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003etransactionDemo\u003c/span\u003e() \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e ClassNotFoundException, SQLException{\n\n        \u003cspan class=\"hljs-comment\"\u003e//1、加载连接器(驱动)  Driver \u003c/span\u003e\n        Class.forName(\u003cspan class=\"hljs-string\"\u003e\"com.mysql.jdbc.Driver\"\u003c/span\u003e);\n\n        \u003cspan class=\"hljs-comment\"\u003e//2、建立连接\u003c/span\u003e\n        String url  = \u003cspan class=\"hljs-string\"\u003e\"jdbc:mysql://127.0.0.1:3306/hncu?useUnicode=true&amp;characterEncoding=utf-8\"\u003c/span\u003e;\n\n        Connection con = DriverManager.getConnection(url, \u003cspan class=\"hljs-string\"\u003e\"root\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"1234\"\u003c/span\u003e);\n\n        \u003cspan class=\"hljs-comment\"\u003e//3、获取语句对象\u003c/span\u003e\n        Statement st = con.createStatement();\n\n        \u003cspan class=\"hljs-comment\"\u003e//4、下面为Java实现事务处理\u003c/span\u003e\n\n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n            con.setAutoCommit(\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//从设置false开始，以下都是一个事务\u003c/span\u003e\n\n            String sql = \u003cspan class=\"hljs-string\"\u003e\"insert into aa values(1,\u0027张三\u0027);\"\u003c/span\u003e;\n            st.execute(sql);\u003cspan class=\"hljs-comment\"\u003e//增\u003c/span\u003e\n\n            sql = \u003cspan class=\"hljs-string\"\u003e\"delete from aa where id = 5\"\u003c/span\u003e;\n            st.execute(sql);\u003cspan class=\"hljs-comment\"\u003e//删\u003c/span\u003e\n\n            sql = \u003cspan class=\"hljs-string\"\u003e\"update aa set sname=\u0027rose111\u0027 where id=6\"\u003c/span\u003e;\n            st.execute(sql);\n\n            con.commit();\u003cspan class=\"hljs-comment\"\u003e//提交\u003c/span\u003e\n\n        } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (Exception e) {\n            con.rollback();\u003cspan class=\"hljs-comment\"\u003e//如果出现异常，我们就让事务回滚\u003c/span\u003e\n        } \u003cspan class=\"hljs-keyword\"\u003efinally\u003c/span\u003e{\n            con.setAutoCommit(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//再设置回去\u003c/span\u003e\n            con.close();\n        }\n    }\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch1 id=\"事务隔离级别加锁\"\u003e事务隔离级别(加锁)：\u003c/h1\u003e\n\n\u003cp\u003eSQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。\u003c/p\u003e\n\n\u003cp\u003e查询事务隔离级别：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eselect\u003c/span\u003e @@tx_isolation;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"read-uncommitted读取未提交内容\"\u003eRead Uncommitted（读取未提交内容）\u003c/h2\u003e\n\n\u003cp\u003e在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，被称之为脏读（Dirty Read）。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e测试流程：\n1、A设置read-uncommitted, \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n设置事务隔离级别(\u003cspan class=\"hljs-keyword\"\u003eread\u003c/span\u003e-uncommitted)：\n\u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esession\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eisolation\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elevel\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eread\u003c/span\u003e uncommitted;\u003c/span\u003e\n2、B执行\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e，再修改一条记录，\n\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e、A查询记录，得到了以为正确的记录\n\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e、B回滚。\n问题：A读到了B没有提交的记录，也就是脏读。 \u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160808134602144\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003ch2 id=\"read-committed读取提交内容\"\u003eRead Committed（读取提交内容）\u003c/h2\u003e\n\n\u003cp\u003e这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。\u003c/p\u003e\n\n\u003cp\u003e这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\u003c/p\u003e\n\n\u003cp\u003e不可重复读(nonrepeatable read)： \u003cbr\u003e\n一个从开始直到提交之前所做的任何修改对其它事务都是不可见的。两次同样的查询可能会得到不一样的结果。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e测试流程：\n1、A设置read-committed, \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n设置事务隔离级别(\u003cspan class=\"hljs-keyword\"\u003eread\u003c/span\u003e-committed)：\n\u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esession\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eisolation\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elevel\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eread\u003c/span\u003e committed;\u003c/span\u003e\n2、B执行\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e，修改一条记录，查询记录，记录已经修改成功\n\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e、A查询记录，结果还是老的记录\n\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e、B提交事务\n\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e、A再次查询记录，结果是新的记录。\n问题：两次查询结果不一致，也就是不可重复读问题。\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160808142912399\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003ch2 id=\"repeatable-read可重读-mysql的默认事务隔离级别\"\u003eRepeatable Read（可重读）-MySQL的默认事务隔离级别\u003c/h2\u003e\n\n\u003cp\u003e它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。\u003c/p\u003e\n\n\u003cp\u003e保证了在同一事务中多次读取结果是一致的。但会引起另外一个幻读问题，当某个事务在读取某个范围记录时，另外一个事务在该范围插入和新记录，当之前事务再次读取该范围记录时会产生幻行。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e测试流程：\n1、A设置repeatable-read, \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e，查询记录，结果是老的记录\n设置事务隔离级别(repeatable-\u003cspan class=\"hljs-keyword\"\u003eread\u003c/span\u003e，MySQL默认)：\n\u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esession\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eisolation\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elevel\u003c/span\u003e repeatable \u003cspan class=\"hljs-keyword\"\u003eread\u003c/span\u003e;\u003c/span\u003e\n2、B执行\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e，修改一条记录，查询记录，记录已经修改成功\n\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e、A查询记录，结果还是老的记录\n\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e、B提交事务\n\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e、A再次查询记录，结果还是老的记录。\n问题：可以重复读，A在事务过程中，即使B修改了数据，并且\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e，A读取的还是老的数据。即可重复读。\n注意：这里可能会存在一个新的问题，A在事务过程中，B增加一条记录，并提交，导致A的两次读取不一致，会多一条记录，也就是幻影读。\n\nInnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160808151647732\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003ch2 id=\"serializable可串行化\"\u003eSerializable（可串行化） \u003c/h2\u003e\n\n\u003cp\u003e这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e测试流程：\n1、A设置serializable, \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e，查询记录，结果是老的记录\n设置事务隔离级别(serializable，最高级别)：\n\u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esession\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eisolation\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elevel\u003c/span\u003e serializable;\u003c/span\u003e\n2、B执行\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003estart\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e，修改一条记录，B卡在这里，要等待A完成才行。\n\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e、A查询记录，结果还是老的记录，A提交。\n\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e、B的修改操作才进行下去。\n注意：B在等待过程中，会出现\u003cspan class=\"hljs-keyword\"\u003elock\u003c/span\u003e超时。\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160808152916843\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e小知识点：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs autohotkey\"\u003e共享锁：如果事务T对数据\u003cspan class=\"hljs-literal\"\u003eA\u003c/span\u003e加上共享锁后，则其他事务只能对\u003cspan class=\"hljs-literal\"\u003eA\u003c/span\u003e再加共享锁，不能加排他锁。获准共享锁的事务只能读数据，不能修改数据。\n排他锁：如果事务T对数据\u003cspan class=\"hljs-literal\"\u003eA\u003c/span\u003e加上排他锁后，则其他事务不能再对\u003cspan class=\"hljs-literal\"\u003eA\u003c/span\u003e加任任何类型的封锁。获准排他锁的事务既能读数据，又能修改数据。\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e查看当前隔离级别：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eselect\u003c/span\u003e @@tx_isolation;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e设置隔离级别语法：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e [\u003cspan class=\"hljs-keyword\"\u003esession\u003c/span\u003e | \u003cspan class=\"hljs-keyword\"\u003eglobal\u003c/span\u003e] \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eisolation\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elevel\u003c/span\u003e {\u003cspan class=\"hljs-keyword\"\u003eread\u003c/span\u003e uncommitted | \u003cspan class=\"hljs-keyword\"\u003eread\u003c/span\u003e committed | repeatable \u003cspan class=\"hljs-keyword\"\u003eread\u003c/span\u003e | serializable}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：\u003c/p\u003e\n\n\u003cp\u003e脏读(Drity Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack(回滚)了操作，则后一个事务所读取的数据就会是不正确的。\u003c/p\u003e\n\n\u003cp\u003e不可重复读(Non-repeatable read):在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。\u003c/p\u003e\n\n\u003cp\u003e幻读(Phantom Read):在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。\u003c/p\u003e","markdowncontent":"MySQL 事务处理\n========\n\n\n简单介绍事务处理：\n-----------------\nMySQL 事务主要用于处理操作量大，复杂度高的数据。\n比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！\n\n一个事务是一个连续的一组数据库操作，就好像它是一个单一的工作单元进行。换言之，永远不会是完整的事务，除非该组内的每个单独的操作是成功的。如果在事务的任何操作失败，则整个事务将失败。\n\n事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行\n\n事务用来管理多条insert,update,delete语句\n\n一般来说，事务是必须满足4个条件（ACID）： \nAtomicity（原子性）、Consistency（稳定性）、Isolation（隔离性）、Durability（可靠性）\n\n1、事务的原子性：一组事务，要么成功；要么撤回。\n2、稳定性 ： 有非法数据（外键约束之类），事务撤回。\n3、隔离性：事务独立运行。一个事务处理后的结果，影响了其他事务，那么其他事务会撤回。事务的100%隔离，需要牺牲速度。\n4、可靠性：软、硬件崩溃后，InnoDB数据表驱动会利用日志文件重构修改。可靠性和高速度不可兼得， innodb_flush_log_at_trx_commit选项 决定什么时候把事务保存到日志里。\n\n**开始一个事务**\n```\nstart transaction\n```\n\n在MySQL中，事务开始使用COMMIT或ROLLBACK语句开始工作和结束。开始和结束语句的SQL命令之间形成了大量的事务。\n\n**COMMIT & ROLLBACK:** \n这两个关键字提交和回滚(撤销事务)主要用于MySQL的事务。\n\n当一个成功的事务完成后，发出COMMIT命令应使所有参与表的更改才会生效。\n\n如果发生故障时，应发出一个ROLLBACK命令返回的事务中引用的每一个表到以前的状态。\n\n可以控制的事务行为称为AUTOCOMMIT设置会话变量。如果AUTOCOMMIT设置为1（默认值），然后每一个SQL语句（在事务与否）被认为是一个完整的事务，并承诺在默认情况下，当它完成。 AUTOCOMMIT设置为0时，发出SET AUTOCOMMIT =0命令，在随后的一系列语句的作用就像一个事务，直到一个明确的COMMIT语句时，没有活动的提交。\n\nJava中setAutoCommit(false)对应mysql中的“START TRANSACTION;”的功能\n\n\nSQL代码演示说明：\n--------------\n\n\n```\nstart transaction;\ndelete from aa where id=\u00277\u0027;\nupdate aa set sname=\u0027aaaa\u0027 where id=\u00275\u0027;\nrollback;/*事务回滚-执行失败*/\n/*commit;提交事务-执行成功*/\n```\n说明：从\"start transaction\"开始 到 “bollback; 或 commit; ”，这中间的那么语句是一个整体，如果执行 “bollback”，那么这些动作都会回滚(撤消)。如果执行“commit”，就全部执行成功。\n\n![](http://img.blog.csdn.net/20160808021007636)\n\n\n\nJava代码演示:\n----------------\n\n```\n@Test\n\tpublic void transactionDemo() throws ClassNotFoundException, SQLException{\n\t\t\n\t\t//1、加载连接器(驱动)  Driver \n\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\n\t\t//2、建立连接\n\t\tString url  = \"jdbc:mysql://127.0.0.1:3306/hncu?useUnicode=true&characterEncoding=utf-8\";\n\t\t\n\t\tConnection con = DriverManager.getConnection(url, \"root\", \"1234\");\n\t\t\n\t\t//3、获取语句对象\n\t\tStatement st = con.createStatement();\n\t\t\n\t\t//4、下面为Java实现事务处理\n\t\t\n\t\ttry {\n\t\t\tcon.setAutoCommit(false);//从设置false开始，以下都是一个事务\n\t\t\t\n\t\t\tString sql = \"insert into aa values(1,\u0027张三\u0027);\";\n\t\t\tst.execute(sql);//增\n\t\t\t\n\t\t\tsql = \"delete from aa where id = 5\";\n\t\t\tst.execute(sql);//删\n\t\t\t\n\t\t\tsql = \"update aa set sname=\u0027rose111\u0027 where id=6\";\n\t\t\tst.execute(sql);\n\t\t\t\n\t\t\tcon.commit();//提交\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tcon.rollback();//如果出现异常，我们就让事务回滚\n\t\t} finally{\n\t\t\tcon.setAutoCommit(true);//再设置回去\n\t\t\tcon.close();\n\t\t}\n\t}\n```\n\n\n事务隔离级别(加锁)：\n=========\n\n SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。\n\n查询事务隔离级别：\n```\nselect @@tx_isolation;\n```\n\n   \nRead Uncommitted（读取未提交内容）\n---------------------------------------\n在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，被称之为脏读（Dirty Read）。\n\n```\n测试流程：\n1、A设置read-uncommitted, start transaction\n设置事务隔离级别(read-uncommitted)：\nset session transaction isolation level read uncommitted;\n2、B执行start transaction，再修改一条记录，\n3、A查询记录，得到了以为正确的记录\n4、B回滚。\n问题：A读到了B没有提交的记录，也就是脏读。 \n```\n![](http://img.blog.csdn.net/20160808134602144)\n\n\nRead Committed（读取提交内容）\n------------------------------------\n这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。\n\n这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。\n\n不可重复读(nonrepeatable read)：\n一个从开始直到提交之前所做的任何修改对其它事务都是不可见的。两次同样的查询可能会得到不一样的结果。\n\n```\n测试流程：\n1、A设置read-committed, start transaction\n设置事务隔离级别(read-committed)：\nset session transaction isolation level read committed;\n2、B执行start transaction，修改一条记录，查询记录，记录已经修改成功\n3、A查询记录，结果还是老的记录\n4、B提交事务\n5、A再次查询记录，结果是新的记录。\n问题：两次查询结果不一致，也就是不可重复读问题。\n```\n\n![](http://img.blog.csdn.net/20160808142912399)\n\n\n\nRepeatable Read（可重读）-MySQL的默认事务隔离级别\n-----------------------------\n\n它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。\n\n保证了在同一事务中多次读取结果是一致的。但会引起另外一个幻读问题，当某个事务在读取某个范围记录时，另外一个事务在该范围插入和新记录，当之前事务再次读取该范围记录时会产生幻行。\n\n\n\n```\n测试流程：\n1、A设置repeatable-read, start transaction，查询记录，结果是老的记录\n设置事务隔离级别(repeatable-read，MySQL默认)：\nset session transaction isolation level repeatable read;\n2、B执行start transaction，修改一条记录，查询记录，记录已经修改成功\n3、A查询记录，结果还是老的记录\n4、B提交事务\n5、A再次查询记录，结果还是老的记录。\n问题：可以重复读，A在事务过程中，即使B修改了数据，并且commit，A读取的还是老的数据。即可重复读。\n注意：这里可能会存在一个新的问题，A在事务过程中，B增加一条记录，并提交，导致A的两次读取不一致，会多一条记录，也就是幻影读。\n\nInnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。\n```\n\n![](http://img.blog.csdn.net/20160808151647732)\n\n\n\nSerializable（可串行化） \n--------------------------\n\n这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n\n```\n测试流程：\n1、A设置serializable, start transaction，查询记录，结果是老的记录\n设置事务隔离级别(serializable，最高级别)：\nset session transaction isolation level serializable;\n2、B执行start transaction，修改一条记录，B卡在这里，要等待A完成才行。\n3、A查询记录，结果还是老的记录，A提交。\n4、B的修改操作才进行下去。\n注意：B在等待过程中，会出现lock超时。\n```\n\n![](http://img.blog.csdn.net/20160808152916843)\n\n\n小知识点：\n```\n共享锁：如果事务T对数据A加上共享锁后，则其他事务只能对A再加共享锁，不能加排他锁。获准共享锁的事务只能读数据，不能修改数据。\n排他锁：如果事务T对数据A加上排他锁后，则其他事务不能再对A加任任何类型的封锁。获准排他锁的事务既能读数据，又能修改数据。\n```\n\n查看当前隔离级别：\n\n```\nselect @@tx_isolation;\n```\n\n\n设置隔离级别语法：\n```\nset [session | global] transaction isolation level {read uncommitted | read committed | repeatable read | serializable}\n```\n\n这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：\n\n脏读(Drity Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack(回滚)了操作，则后一个事务所读取的数据就会是不正确的。\n\n不可重复读(Non-repeatable read):在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。\n\n幻读(Phantom Read):在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-656-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-08\2016-08-08-MySQL---数据库从入门走向大神系列(六)-事务处理与事务隔离(锁机制).markdown [pool-656-thread-1] [chx]
[INFO] 2017-07-28 12:29:22 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《MySQL---数据库从入门走向大神系列(六)-事务处理与事务隔离(锁机制)》成功 [pool-656-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51044941 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-657] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51044941 [pool-657-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51044941,"title":"Java---设计模块（设计模块的简介及最简单的俩个单例代码加测试）","create_at":"\/Date(1459593745000)\/","create":"2016-04-02 06:42:25","view_count":8417,"comment_count":0,"comment_allowed":"true","type":"original","channel":15,"digg":0,"bury":0,"description":"设计模式学习概述： \n★ 为什么要学习设计模式 \n1、设计模式都是一些相对优秀的解决方案，很多问题都是典型的、有代表性的问题，学习设计模式，我们就不用自己从头来解决这些问题，相当于在巨人的肩膀上，复用这些方案即可。 \n2、设计模式已经成为专业人士的常用词汇，不懂不利于交流。 \n3、能让你设计的系统更加专业，让系统有更好的架构。★ 学习设计模式的层次 \n1、基本入门级——套用型（半年到一年左右时间领悟","url":"http://blog.csdn.net/qq_26525215/article/details/51044941","categories":"----- ②、Java设计模块,❷ Java大学之行","tags":"测试,设计,设计模式,架构","content":"\u003cp\u003e\u003cstrong\u003e设计模式学习概述：\u003c/strong\u003e \u003cbr\u003e\n\u003cstrong\u003e★ 为什么要学习设计模式\u003c/strong\u003e \u003cbr\u003e\n1、设计模式都是一些相对优秀的解决方案，很多问题都是典型的、有代表性的问题，学习设计模式，我们就不用自己从头来解决这些问题，相当于在巨人的肩膀上，复用这些方案即可。 \u003cbr\u003e\n2、设计模式已经成为专业人士的常用词汇，不懂不利于交流。 \u003cbr\u003e\n3、能让你设计的系统更加专业，让系统有更好的架构。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e★ 学习设计模式的层次\u003c/strong\u003e \u003cbr\u003e\n1、基本入门级——套用型（半年到一年左右时间领悟学会） \u003cbr\u003e\n2、基本掌握级——可变形使用型（一年左右时间领悟学会） \u003cbr\u003e\n3、真正理解和掌握级——思想上吸收和趋同型（看个人天赋，不确定时间学会）\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e设计模式1——单例\u003c/strong\u003e \u003cbr\u003e\n解决：\u003cstrong\u003e保证了一个类在内存中只能有一个对象。\u003c/strong\u003e \u003cbr\u003e\n思路： \u003cbr\u003e\n1、如果其他程序能够随意用new创建该类对象，那么就无法控制个数。因此，不让其他程序用new创建该类的对象。 \u003cbr\u003e\n2、既然不让其他程序new该类对象，那么该类在自己内部就要创建一个对象，否则该类就永远无法创建对象了。 \u003cbr\u003e\n3、该类将创建的对象对外(整个系统)提供，让其他程序获取并使用。\u003c/p\u003e\n\n\u003cp\u003e步骤： \u003cbr\u003e\n1、  将该类中的构造函数私有化。 \u003cbr\u003e\n2、在本类中创建一个本类对象。 \u003cbr\u003e\n3、定义一个方法，返回值类型是本类类型。让其他程序通过该方法就可以获取到该类对象。\u003c/p\u003e\n\n\u003cp\u003e第一种方法：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.pattern.singleton.one;\n\u003cspan class=\"hljs-comment\"\u003e/*\n *  饿汉式   \n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSingle\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e Single S  = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Single();\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSingle\u003c/span\u003e(){\n    }\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e Single \u003cspan class=\"hljs-title\"\u003egetInstance\u003c/span\u003e(){\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e S;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e测试的类：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003epackage cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.one\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\npublic class TestSingle {\n    public static void main(String[] args) {\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(Single\u003cspan class=\"hljs-preprocessor\"\u003e.getInstance\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(Single\u003cspan class=\"hljs-preprocessor\"\u003e.getInstance\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(Single\u003cspan class=\"hljs-preprocessor\"\u003e.getInstance\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(Single\u003cspan class=\"hljs-preprocessor\"\u003e.getInstance\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(Single\u003cspan class=\"hljs-preprocessor\"\u003e.getInstance\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        Single s1 = Single\u003cspan class=\"hljs-preprocessor\"\u003e.getInstance\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Single s2 = Single\u003cspan class=\"hljs-preprocessor\"\u003e.getInstance\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        //测试地址值是否相等\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(s1==s2)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e测试结果：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003ecn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.one\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e@bcda2d\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.one\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e@bcda2d\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.one\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e@bcda2d\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.one\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e@bcda2d\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.one\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e@bcda2d\ntrue\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e第二种方法：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.pattern.singleton.two;\n\u003cspan class=\"hljs-comment\"\u003e/*\n * 懒汉式\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSingle\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e Single s = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSingle\u003c/span\u003e(){\n    }\n    \u003cspan class=\"hljs-comment\"\u003e//单例的延迟加载方式,有一个小bug，就是多线程加载时，会出现多次new的情况\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e//下面给出解决这个延迟的问题。\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//  public static Single getInstance(){\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      if(s==null){\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//          s = new Single();\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      }\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//      return s;\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//  }\u003c/span\u003e\n\n    \u003cspan class=\"hljs-comment\"\u003e//优化方案---多线程加锁，谁调用锁谁，每次只能让一个线程调用\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esynchronized\u003c/span\u003e Single \u003cspan class=\"hljs-title\"\u003egetInstance\u003c/span\u003e(){\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(s==\u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e){\n            s = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Single();\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e s;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e测试的类：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs axapta\"\u003epackage cn.hncu.pattern.singleton.two;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eTestSingle2\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e main(String[] args) {\n        Thread[] td = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Thread[\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e];\n        \u003cspan class=\"hljs-comment\"\u003e//给一个线程数组\u003c/span\u003e\n\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;td.length;i++){\n            td[i] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e useSingle();\n        }\u003cspan class=\"hljs-comment\"\u003e//new出每一个线程\u003c/span\u003e\n\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;td.length;i++){\n            td[i].start();\n        }\n    }\n}\n\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003euseSingle\u003c/span\u003e \u003cspan class=\"hljs-inheritance\"\u003e\u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThread\u003c/span\u003e {\u003c/span\u003e\n    @Override\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e run() {\n        Single obj = Single.getInstance();\n        System.out.println(obj);\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e测试结果：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003ecn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\ncn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.pattern\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.singleton\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.two\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Single\u003c/span\u003e\u003cspan class=\"hljs-localvars\"\u003e@2\u003c/span\u003eaf081\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"**设计模式学习概述：**\n**★ 为什么要学习设计模式**\n1、设计模式都是一些相对优秀的解决方案，很多问题都是典型的、有代表性的问题，学习设计模式，我们就不用自己从头来解决这些问题，相当于在巨人的肩膀上，复用这些方案即可。\n2、设计模式已经成为专业人士的常用词汇，不懂不利于交流。\n3、能让你设计的系统更加专业，让系统有更好的架构。\n\n**★ 学习设计模式的层次**\n1、基本入门级——套用型（半年到一年左右时间领悟学会）\n2、基本掌握级——可变形使用型（一年左右时间领悟学会）\n3、真正理解和掌握级——思想上吸收和趋同型（看个人天赋，不确定时间学会）\n\n\n**设计模式1——单例**\n解决：**保证了一个类在内存中只能有一个对象。**\n思路：\n1、如果其他程序能够随意用new创建该类对象，那么就无法控制个数。因此，不让其他程序用new创建该类的对象。\n2、既然不让其他程序new该类对象，那么该类在自己内部就要创建一个对象，否则该类就永远无法创建对象了。\n3、该类将创建的对象对外(整个系统)提供，让其他程序获取并使用。\n\n步骤：\n1、\t将该类中的构造函数私有化。\n2、在本类中创建一个本类对象。\n3、定义一个方法，返回值类型是本类类型。让其他程序通过该方法就可以获取到该类对象。\n\n\n第一种方法：\n```\npackage cn.hncu.pattern.singleton.one;\n/*\n *  饿汉式   \n */\npublic class Single {\n\tprivate static final Single S  = new Single();\n\tprivate Single(){\n\t}\n\tpublic static Single getInstance(){\n\t\treturn S;\n\t}\n}\n\n```\n测试的类：\n\n```\npackage cn.hncu.pattern.singleton.one;\n\npublic class TestSingle {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Single.getInstance());\n\t\tSystem.out.println(Single.getInstance());\n\t\tSystem.out.println(Single.getInstance());\n\t\tSystem.out.println(Single.getInstance());\n\t\tSystem.out.println(Single.getInstance());\n\t\t\n\t\tSingle s1 = Single.getInstance();\n\t\tSingle s2 = Single.getInstance();\n\t\t//测试地址值是否相等\n\t\tSystem.out.println(s1==s2);\n\t\t\n\t}\n\n}\n\n```\n测试结果：\n\n```\ncn.hncu.pattern.singleton.one.Single@bcda2d\ncn.hncu.pattern.singleton.one.Single@bcda2d\ncn.hncu.pattern.singleton.one.Single@bcda2d\ncn.hncu.pattern.singleton.one.Single@bcda2d\ncn.hncu.pattern.singleton.one.Single@bcda2d\ntrue\n\n```\n第二种方法：\n\n```\npackage cn.hncu.pattern.singleton.two;\n/*\n * 懒汉式\n */\npublic class Single {\n\tprivate static Single s = null;\n\tprivate Single(){\n\t}\n\t//单例的延迟加载方式,有一个小bug，就是多线程加载时，会出现多次new的情况\n\t//下面给出解决这个延迟的问题。\n//\tpublic static Single getInstance(){\n//\t\tif(s==null){\n//\t\t\ts = new Single();\n//\t\t}\n//\t\treturn s;\n//\t}\n\t\n\t//优化方案---多线程加锁，谁调用锁谁，每次只能让一个线程调用\n\tpublic static synchronized Single getInstance(){\n\t\tif(s==null){\n\t\t\ts = new Single();\n\t\t}\n\t\treturn s;\n\t}\n\t\n}\n\n```\n测试的类：\n\n```\npackage cn.hncu.pattern.singleton.two;\n\npublic class TestSingle2 {\n\tpublic static void main(String[] args) {\n\t\tThread[] td = new Thread[50];\n\t\t//给一个线程数组\n\t\t\n\t\tfor(int i=0;i\u003ctd.length;i++){\n\t\t\ttd[i] = new useSingle();\n\t\t}//new出每一个线程\n\t\t\n\t\tfor(int i=0;i\u003ctd.length;i++){\n\t\t\ttd[i].start();\n\t\t}\n\t}\n}\n\nclass useSingle extends Thread {\n\t@Override\n\tpublic void run() {\n\t\tSingle obj = Single.getInstance();\n\t\tSystem.out.println(obj);\n\t}\n\n}\n\n```\n\n测试结果：\n\n```\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\ncn.hncu.pattern.singleton.two.Single@2af081\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-657-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-04\2016-04-02-Java---设计模块（设计模块的简介及最简单的俩个单例代码加测试）.markdown [pool-657-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java---设计模块（设计模块的简介及最简单的俩个单例代码加测试）》成功 [pool-657-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-647] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:52389895 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-658] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-648] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=52389895 [pool-658-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":52389895,"title":"境外诈骗，最新来自senegal的邮件诈骗","create_at":"\/Date(1472657144000)\/","create":"2016-08-31 11:25:44","view_count":2065,"comment_count":6,"comment_allowed":"true","type":"original","channel":7,"digg":1,"bury":0,"description":"转载请注明出处：http://blog.csdn.net/qq_26525215\n本文源自【大学之旅_谙忆的博客】\n写这篇博客的目的，只是希望大家能够知道，这种类似的邮件与信息时诈骗的，至于她能骗到你什么，请看下去。前几天收到那封英文邮件的时候，真的，完全看不出这是个诈骗邮件，我很认真的和她来往了3封邮件。大家请看：最开始的她对我发的邮件与我的回复邮件： \n她的来信大概意思是：你好，我的名字是Jov","url":"http://blog.csdn.net/qq_26525215/article/details/52389895","categories":"❻ 其他,----- 上网技巧/问题解决","tags":"邮件,博客,防诈骗","content":"\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://blog.csdn.net/qq_26525215\"\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://blog.csdn.net/qq_26525215\" target=\"_blank\"\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e写这篇博客的目的，只是希望大家能够知道，这种类似的邮件与信息是诈骗的，至于她能骗到你什么，请看下去。\u003c/p\u003e\n\n\u003cp\u003e前几天收到那封英文邮件的时候，真的，完全看不出这是个诈骗邮件，我很认真的和她来往了3封邮件。大家请看：\u003c/p\u003e\n\n\u003cp\u003e最开始的她对我发的邮件与我的回复邮件：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160831225335289\" alt=\"\" title=\"\"\u003e \u003cbr\u003e\n她的来信大概意思是：\u003c/p\u003e\n\n\u003cp\u003e你好，我的名字是Jovita Gomez小姐，我看到你的电子邮件在blog.csdn.net。我有一份美好的友谊与你感兴趣的。我会告诉你更多关于我和我的照片发送给你，当你回复我的邮件（jovitagomez001@hotmail.com）我会等你的邮件。Honestly Jovita.。\u003c/p\u003e\n\n\u003cp\u003e我的回信大概意思：\u003c/p\u003e\n\n\u003cp\u003e你好，亲爱的Jovita Gomez小姐，很惊讶地收到你的邮件， \u003cbr\u003e\n我也很高兴有你这个朋友，我不知道如何表达我的快乐，总之，我很高兴。 \u003cbr\u003e\n你是第一个CSDN博客通过我的邮件给我的外国朋友。我希望尽快收到你的来信。 \u003cbr\u003e\n陈浩翔\u003c/p\u003e\n\n\u003cp\u003e我很认真，很认真的回了她！\u003c/p\u003e\n\n\u003cp\u003e然后继续收到她的来信： \u003cbr\u003e\n下面的邮件比较长，我直接用文字了，就不截图了。\u003c/p\u003e\n\n\u003cp\u003eHow are you doing presently, I hope this my mail will reach you in good condition of health, I will really like to have a good relationship with you and I have a special reason why I decided to contact you because of my situation here. My name is Miss Jovita Gomez. Am 23 years old girl from zimbabwe, the only daughter of Late Mr Gomez Sango. my late father Mr gomez Sango was an importer and exporter. my late father was killed by high killers, my late father business partner sent group of high killers to my parents, the high killers killed my father, killed my mother,and my only two brothers, am the only survivor in my family because i was not at home when the high killers came, i was in the school Hostel that is what save me.\u003c/p\u003e\n\n\u003cp\u003ei run away from zimbabwe my country because my father business partner want to kill me too, i run away because those killers still want to kill me by all means i decided to move out from zimbabwe for the sake of my life, Meanwhile,I wanted to escape to Europe but is very difficult to me because i do not have money at hand for traveling document. i manage to toke my Father’s Files which contains important documents. So I decided to run to the refugee camp in senegal where I am presently seeking asylum under the United Nations High Commission for the Refugee here in Dakar senegal, I wish to contact you personally for a long term business relationship and investment assistance in your country.\u003c/p\u003e\n\n\u003cp\u003eplease please please i really really need your honesty and trustworthiness,My father deposited the sum of US$ 5.700.000 ( Five Million Seven Hundred Thousand U.S.A. Dollars) in Finance Firm with my name as the next of kin. However, I shall forward to you the necessary information of the deposit on confirmation of your acceptance to assist me for the transfer and investment of the fund in your country. i want  the bank to transfer the money to you in  your country and i will join you in your country, i want you to help me in this transaction and i want you to help me to invest the money for me in your country immediately the bank transfer the money to you in your country, and I will like to complete my studies in your country because I was in my school before i decided to escaped to senegal to safe my life. According to the financial governing laws of this country senegal, people under refugees are not allowed to participate into monetary transaction or operate personal bank account with large sums international or locally.\u003c/p\u003e\n\n\u003cp\u003eIt is from my heart to compensate you with 20% of the total money for your services and the balance will be my investment capital. This is the reason why I decided to contact you. Please all communications should be through this email address only for confidential purposes. As soon as I receive your positive response showing your interest I will put things into action immediately. In the light of the above, I shall appreciate an urgent message indicating your ability and willingness to handle this transaction sincerely.\u003c/p\u003e\n\n\u003cp\u003eI am staying at the female refugee camp here in dakar senegal. Am waiting your urgent and positive response. Please keep this thing only to your self please I beg you do not tell anybody this thing till I come over to your country after the transfer. I hope my explanation is very clear but if you need further clarification then send in your questions. i will try to send you my pictures in my next mail. Thanks as i hope to receive from you soon.\u003c/p\u003e\n\n\u003cp\u003eYours Sincerely \u003cbr\u003e\nMiss.Jovita Gomez.\u003c/p\u003e\n\n\u003cp\u003e大概意思就是她是哪里的，因为商业，她的父母和兄弟被人追杀而死，然后父母留下了570万美元，说是要转给我，需要我提供一些证明，说下次来信会给我发她的照片，希望收到我的回信啥的，当时第一次没看懂，然后我又很认真的回了她：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160831225947518\" alt=\"\" title=\"\"\u003e \u003cbr\u003e\n翻译过来，大概意思是：\u003c/p\u003e\n\n\u003cp\u003e亲爱的小姐，Jovita Gomez，你好，首先很高兴听到你的回信。 \u003cbr\u003e\n我的英语不是很好，也许有些地方不合理的说法，请原谅我。 \u003cbr\u003e\n看到你的回复，我对你的家人遭遇感到很抱歉。你现在还好吗？我希望你一切都好。我期待着你来到我的国家，我对你上一个邮件的消息，不是很清楚，我有什么可以帮你吗？我很乐意帮助你。 \u003cbr\u003e\n你的朋友： \u003cbr\u003e\n陈浩翔\u003c/p\u003e\n\n\u003cp\u003e于是她又回了我，她的原文：\u003c/p\u003e\n\n\u003cp\u003eThe most important thing i need from you right now is your honesty and trustworthiness as i told you before. I choose you in this transaction because of my situation based on my present situation here in senegal as a refugee under asylum. According to the financial governing laws of this country senegal, people under refugees are not allowed to participate into monetary transaction or operate personal bank account with large sums international or locally as i told you before. I want you to understand more about my situation here in the camp, I am e-mailing you from the office of the Reverend father David Mike who is Priest at the church in the refugee camp, I have explained to him a little about my life though not everything, i told the reverend father about my communication with you and he permitted me to access my e-mail in his office computer three times in a day here in the refugee camp, I don’t have access to food here in the refugee camp, the food government give to us here is not good for health,  life has not been easy for me. i told the reverend father about you and he permitted me to be receiving phone calls from you through his office telephone number; which is as follows:(+221769099374)  call me i don’t have any money at hand here for now, when you call Reverend father David Mike tell him that you want to speak with Miss. Jovita Gomez the zimbabwe girl.\u003c/p\u003e\n\n\u003cp\u003edon’t be surprised that i gave you this kind of trust that is how God want it anything that happened in this world is how God want it, only try to be honest and sincere with me. I will send you all the important documents of the money, the money is 100 percent genuine, only if you can promise me that you are not going to betray me or sit on my inheritance after the money transfer to your account in your country, please tell me more about yourself again in your next mail. Please understand that there is no illegality involvement in this transaction, you are going to deal with the holding bank directly. i am with important documents here. deposit certificate of the money and death certificate of my late father. all i need from you now is your sincerity, honest and seriousness about this transaction. try to send mail to me three times in a day. so that we will do this transaction with out any delay.\u003c/p\u003e\n\n\u003cp\u003ePlease reply my mail urgently with, your Full name, Your country name, your full address, your phone number, your photos, your occupation, your age. So that i will submit them to the bank to enable send mail about you for them to know that you are the one who will access to my father’s deposited funds and then apply for it’s claim and transfer directly on my behalf to your account. i will send you the bank contact in my next mail so that you will contact the bank for the transfer and the bank will transfer the money to you in your country and i will join you over there to continue new life. I have attached my photos in this mail and i will like to see yours too. am really suffering in this refugee camp i want the money to be transfer to you in your country so that i will come out from this refugee camp and join you in your country. \u003cbr\u003e\nI am waiting for your mail.\u003c/p\u003e\n\n\u003cp\u003eYours sincerely \u003cbr\u003e\nMiss. Jovita Gomez\u003c/p\u003e\n\n\u003cp\u003e大概意思就是，她现在是用她那里牧师的电脑给我发邮件，每天能用3次，还告诉了我她那里的牧师的电话(我特意查了一下，塞内瓦尔的电话区号的确是2217)，说要我给出让她能信服的东西，希望我提供我的国家，具体地址，电话，照片，她会联系银行，给我转账…然后附件给我发了她的2张照片。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160831231021944\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e当时我确实懵了一B，银行账户都没问我，你怎么给我转账哈~ \u003cbr\u003e\n哈哈，开个小玩笑。\u003c/p\u003e\n\n\u003cp\u003e当时我只是有点怀疑，然后打算百度一下，于是，我直接百度”senegal邮件诈骗”,然后，你们看：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160831231158550\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160831231207445\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e还有很多，点了一篇进去看了一下。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160831231251758\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e哈哈，原因改了，不过结果还是给我们转钱， \u003cbr\u003e\n可能有人要问，既然是给我们转钱，她怎么转钱啊。\u003c/p\u003e\n\n\u003cp\u003e嗯~手续费可不便宜哦， \u003cbr\u003e\n大家看一下各大银行的国际汇款手续费： \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160831231538385\" alt=\"\" title=\"\"\u003e \u003cbr\u003e\n嗯，这是2010年的，手续费应该现在上涨了吧。\u003c/p\u003e\n\n\u003cp\u003e到时候她会用手续费的原因来要求你先汇手续费给她，然后她才能把钱转过了，因为她在有一封邮件说了，她那里在贫民区无法取钱！！！！无法取钱！！！所以咯，推理一下，只能是你付手续费咯。\u003c/p\u003e\n\n\u003cp\u003e对于她开始说，我帮助她，就能得到她那570W美元的百分之20的时候，我就有点怀疑了。不过当时可能自己心里带着点，万一是真的呢，哈哈，当时自己也是贪心了。不过她索要我的个人信息时，我就百度了一下，没等到她向我要手续费就拆穿了这个诈骗，哈哈。\u003c/p\u003e\n\n\u003cp\u003e也许她最后需要的不是手续费，不过也差不多啦，肯定到最后是你出钱的，她会找各种理由，这点勿需置疑。 \u003cbr\u003e\n好啦，写了这么多，只希望大家不要被骗了，虽然1-2百不是什么大事，但是影响心情，不是吗。 \u003cbr\u003e\n只要记住，天下没有这么掉馅饼的事啦。\u003c/p\u003e\n\n\u003cp\u003e希望大伙都能不被骗，嘿嘿~\u003c/p\u003e\n\n\u003cp\u003e然后，在博乐群，问了一下，发现还有几个朋友这几天遇到一样的情况，应该是CSDN网站内的邮箱被爬取了。\u003c/p\u003e\n\n\u003cp\u003e本文章由[谙忆]编写， 所有权利保留。 \u003c/p\u003e\n\n\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://blog.csdn.net/qq_26525215\"\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://blog.csdn.net/qq_26525215\" target=\"_blank\"\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","markdowncontent":"\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027 target=\u0027_blank\u0027\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n写这篇博客的目的，只是希望大家能够知道，这种类似的邮件与信息是诈骗的，至于她能骗到你什么，请看下去。\n\n前几天收到那封英文邮件的时候，真的，完全看不出这是个诈骗邮件，我很认真的和她来往了3封邮件。大家请看：\n\n最开始的她对我发的邮件与我的回复邮件：\n\n![](http://img.blog.csdn.net/20160831225335289)\n她的来信大概意思是：\n\n你好，我的名字是Jovita Gomez小姐，我看到你的电子邮件在blog.csdn.net。我有一份美好的友谊与你感兴趣的。我会告诉你更多关于我和我的照片发送给你，当你回复我的邮件（jovitagomez001@hotmail.com）我会等你的邮件。Honestly Jovita.。\n\n\n我的回信大概意思：\n\n\n你好，亲爱的Jovita Gomez小姐，很惊讶地收到你的邮件，\n我也很高兴有你这个朋友，我不知道如何表达我的快乐，总之，我很高兴。\n你是第一个CSDN博客通过我的邮件给我的外国朋友。我希望尽快收到你的来信。\n陈浩翔\n\n\n我很认真，很认真的回了她！\n\n然后继续收到她的来信：\n下面的邮件比较长，我直接用文字了，就不截图了。\n\n\nHow are you doing presently, I hope this my mail will reach you in good condition of health, I will really like to have a good relationship with you and I have a special reason why I decided to contact you because of my situation here. My name is Miss Jovita Gomez. Am 23 years old girl from zimbabwe, the only daughter of Late Mr Gomez Sango. my late father Mr gomez Sango was an importer and exporter. my late father was killed by high killers, my late father business partner sent group of high killers to my parents, the high killers killed my father, killed my mother,and my only two brothers, am the only survivor in my family because i was not at home when the high killers came, i was in the school Hostel that is what save me.\n\ni run away from zimbabwe my country because my father business partner want to kill me too, i run away because those killers still want to kill me by all means i decided to move out from zimbabwe for the sake of my life, Meanwhile,I wanted to escape to Europe but is very difficult to me because i do not have money at hand for traveling document. i manage to toke my Father\u0027s Files which contains important documents. So I decided to run to the refugee camp in senegal where I am presently seeking asylum under the United Nations High Commission for the Refugee here in Dakar senegal, I wish to contact you personally for a long term business relationship and investment assistance in your country.\n\nplease please please i really really need your honesty and trustworthiness,My father deposited the sum of US$ 5.700.000 ( Five Million Seven Hundred Thousand U.S.A. Dollars) in Finance Firm with my name as the next of kin. However, I shall forward to you the necessary information of the deposit on confirmation of your acceptance to assist me for the transfer and investment of the fund in your country. i want  the bank to transfer the money to you in  your country and i will join you in your country, i want you to help me in this transaction and i want you to help me to invest the money for me in your country immediately the bank transfer the money to you in your country, and I will like to complete my studies in your country because I was in my school before i decided to escaped to senegal to safe my life. According to the financial governing laws of this country senegal, people under refugees are not allowed to participate into monetary transaction or operate personal bank account with large sums international or locally.\n\nIt is from my heart to compensate you with 20% of the total money for your services and the balance will be my investment capital. This is the reason why I decided to contact you. Please all communications should be through this email address only for confidential purposes. As soon as I receive your positive response showing your interest I will put things into action immediately. In the light of the above, I shall appreciate an urgent message indicating your ability and willingness to handle this transaction sincerely.\n\nI am staying at the female refugee camp here in dakar senegal. Am waiting your urgent and positive response. Please keep this thing only to your self please I beg you do not tell anybody this thing till I come over to your country after the transfer. I hope my explanation is very clear but if you need further clarification then send in your questions. i will try to send you my pictures in my next mail. Thanks as i hope to receive from you soon.\n\nYours Sincerely\nMiss.Jovita Gomez.\n\n\n大概意思就是她是哪里的，因为商业，她的父母和兄弟被人追杀而死，然后父母留下了570万美元，说是要转给我，需要我提供一些证明，说下次来信会给我发她的照片，希望收到我的回信啥的，当时第一次没看懂，然后我又很认真的回了她：\n\n![](http://img.blog.csdn.net/20160831225947518)\n翻译过来，大概意思是：\n\n\n亲爱的小姐，Jovita Gomez，你好，首先很高兴听到你的回信。\n我的英语不是很好，也许有些地方不合理的说法，请原谅我。\n看到你的回复，我对你的家人遭遇感到很抱歉。你现在还好吗？我希望你一切都好。我期待着你来到我的国家，我对你上一个邮件的消息，不是很清楚，我有什么可以帮你吗？我很乐意帮助你。\n你的朋友：\n陈浩翔\n\n\n于是她又回了我，她的原文：\n\n\nThe most important thing i need from you right now is your honesty and trustworthiness as i told you before. I choose you in this transaction because of my situation based on my present situation here in senegal as a refugee under asylum. According to the financial governing laws of this country senegal, people under refugees are not allowed to participate into monetary transaction or operate personal bank account with large sums international or locally as i told you before. I want you to understand more about my situation here in the camp, I am e-mailing you from the office of the Reverend father David Mike who is Priest at the church in the refugee camp, I have explained to him a little about my life though not everything, i told the reverend father about my communication with you and he permitted me to access my e-mail in his office computer three times in a day here in the refugee camp, I don\u0027t have access to food here in the refugee camp, the food government give to us here is not good for health,  life has not been easy for me. i told the reverend father about you and he permitted me to be receiving phone calls from you through his office telephone number; which is as follows:(+221769099374)  call me i don\u0027t have any money at hand here for now, when you call Reverend father David Mike tell him that you want to speak with Miss. Jovita Gomez the zimbabwe girl.\n\ndon\u0027t be surprised that i gave you this kind of trust that is how God want it anything that happened in this world is how God want it, only try to be honest and sincere with me. I will send you all the important documents of the money, the money is 100 percent genuine, only if you can promise me that you are not going to betray me or sit on my inheritance after the money transfer to your account in your country, please tell me more about yourself again in your next mail. Please understand that there is no illegality involvement in this transaction, you are going to deal with the holding bank directly. i am with important documents here. deposit certificate of the money and death certificate of my late father. all i need from you now is your sincerity, honest and seriousness about this transaction. try to send mail to me three times in a day. so that we will do this transaction with out any delay.\n\nPlease reply my mail urgently with, your Full name, Your country name, your full address, your phone number, your photos, your occupation, your age. So that i will submit them to the bank to enable send mail about you for them to know that you are the one who will access to my father\u0027s deposited funds and then apply for it\u0027s claim and transfer directly on my behalf to your account. i will send you the bank contact in my next mail so that you will contact the bank for the transfer and the bank will transfer the money to you in your country and i will join you over there to continue new life. I have attached my photos in this mail and i will like to see yours too. am really suffering in this refugee camp i want the money to be transfer to you in your country so that i will come out from this refugee camp and join you in your country.\nI am waiting for your mail.\n\nYours sincerely\nMiss. Jovita Gomez\n\n\n大概意思就是，她现在是用她那里牧师的电脑给我发邮件，每天能用3次，还告诉了我她那里的牧师的电话(我特意查了一下，塞内瓦尔的电话区号的确是2217)，说要我给出让她能信服的东西，希望我提供我的国家，具体地址，电话，照片，她会联系银行，给我转账...然后附件给我发了她的2张照片。\n\n![](http://img.blog.csdn.net/20160831231021944)\n\n当时我确实懵了一B，银行账户都没问我，你怎么给我转账哈~\n哈哈，开个小玩笑。\n\n当时我只是有点怀疑，然后打算百度一下，于是，我直接百度\"senegal邮件诈骗\",然后，你们看：\n\n![](http://img.blog.csdn.net/20160831231158550)\n\n![](http://img.blog.csdn.net/20160831231207445)\n\n还有很多，点了一篇进去看了一下。\n\n![](http://img.blog.csdn.net/20160831231251758)\n\n哈哈，原因改了，不过结果还是给我们转钱，\n可能有人要问，既然是给我们转钱，她怎么转钱啊。\n\n嗯~手续费可不便宜哦，\n大家看一下各大银行的国际汇款手续费：\n![](http://img.blog.csdn.net/20160831231538385)\n嗯，这是2010年的，手续费应该现在上涨了吧。\n\n到时候她会用手续费的原因来要求你先汇手续费给她，然后她才能把钱转过了，因为她在有一封邮件说了，她那里在贫民区无法取钱！！！！无法取钱！！！所以咯，推理一下，只能是你付手续费咯。\n\n对于她开始说，我帮助她，就能得到她那570W美元的百分之20的时候，我就有点怀疑了。不过当时可能自己心里带着点，万一是真的呢，哈哈，当时自己也是贪心了。不过她索要我的个人信息时，我就百度了一下，没等到她向我要手续费就拆穿了这个诈骗，哈哈。\n\n也许她最后需要的不是手续费，不过也差不多啦，肯定到最后是你出钱的，她会找各种理由，这点勿需置疑。\n好啦，写了这么多，只希望大家不要被骗了，虽然1-2百不是什么大事，但是影响心情，不是吗。\n只要记住，天下没有这么掉馅饼的事啦。\n\n希望大伙都能不被骗，嘿嘿~\n\n然后，在博乐群，问了一下，发现还有几个朋友这几天遇到一样的情况，应该是CSDN网站内的邮箱被爬取了。\n\n\n本文章由[谙忆]编写， 所有权利保留。 \n\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027 target=\u0027_blank\u0027\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-658-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-08\2016-08-31-境外诈骗，最新来自senegal的邮件诈骗.markdown [pool-658-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《境外诈骗，最新来自senegal的邮件诈骗》成功 [pool-658-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:53038259 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-659] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=53038259 [pool-659-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":53038259,"title":"【Spring】Spring基础配置-依赖注入","create_at":"\/Date(1478269448000)\/","create":"2016-11-04 10:24:08","view_count":656,"comment_count":0,"comment_allowed":"true","type":"original","channel":15,"digg":1,"bury":0,"description":"转载请注明出处：http://blog.csdn.net/qq_26525215\n本文源自【大学之旅_谙忆的博客】\n\n\n本文章由[谙忆]编写， 所有权利保留。 \n\n\n转载请注明出处：http://blog.csdn.net/qq_26525215\n本文源自【大学之旅_谙忆的博客】","url":"http://blog.csdn.net/qq_26525215/article/details/53038259","categories":"❷ Java大学之行,----- ⑥、框架/第三方工具,----- ----- Spring","tags":"spring,编程,框架,博客,aop","content":"\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://blog.csdn.net/qq_26525215\"\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://blog.csdn.net/qq_26525215\" target=\"_blank\"\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSpring框架本身有四大原则: \u003cbr\u003e\n1、使用POJO进行轻量级和最小侵入式开发 \u003cbr\u003e\n2、通过依赖注入和基于接口编程实现松耦合 \u003cbr\u003e\n3、通过AOP和默认习惯进行声明式编程 \u003cbr\u003e\n4、使用AOP和模板减少模式化代码\u003c/p\u003e\n\n\u003cp\u003e在Spring环境中，控制翻转（IoC）-Inversion of Control和依赖注入（DI）-dependency injection是等同的概念。\u003c/p\u003e\n\n\u003cp\u003e控制翻转是通过依赖注入实现的。所谓依赖注入指的是容器负责创建对象和维护对象间的依赖关系，而不是通过对象本身负责自己的创建和解决自己的依赖。\u003c/p\u003e\n\n\u003cp\u003e依赖注入的主要目的是为了解耦，体现了一种”组合”的理念。\u003c/p\u003e\n\n\u003cp\u003e可以这样理解，当我们希望某个类具备某项功能时，可以选择继承一个具有此功能的类，也可以选择组合另外一个具有此功能的类。那么显然，我们选择组合。因为组合另外一个类会使得耦合度大大降低。\u003c/p\u003e\n\n\u003cp\u003e组合:组合关系就是整体与部分的关系，部分属于整体，整体不存在，部分一定不存在，然而部分不存在整体是可以存在的，说的更明确一些就是部分必须创生于整体创生之后，而销毁于整体销毁之前。部分在这个生命期内可以被其它对象关联甚至聚合，但有一点必须注意，一旦部分所属于的整体销毁了，那么与之关联的对象中的引用就会成为空引用，这一点可以利用程序来保障。\u003c/p\u003e\n\n\u003cp\u003eSpring IoC容器（ApplicationContext）负责创建Bean，并通过容器将功能类Bean注入到你需要的Bean中。 \u003cbr\u003e\nSpring提供使用xml，注解，Java配置，groovy配置实现Bean的创建和注入。 \u003cbr\u003e\n这些配置方式，都被称为配置元数据。 \u003cbr\u003e\n元数据:即描述数据的数据。元数据本身不具备任何可执行的能力，只能通过外界代码来对这些元数据行解析后进行一些有意义操作。 \u003cbr\u003e\nSpring容器解析这些配置元数据进行Bean初始化、配置和管理依赖。\u003c/p\u003e\n\n\u003cp\u003e声明Bean的注解 \u003cbr\u003e\n    @Component组件，没有明确的角色。 \u003cbr\u003e\n    @Service在业务逻辑层(service层)使用。 \u003cbr\u003e\n    @Repository在数据访问层(dao层)使用。 \u003cbr\u003e\n    @Controller在展现层(MVC)\u003c/p\u003e\n\n\u003cp\u003e注入Bean的注解，一般情况下通用 \u003cbr\u003e\n    @Autowired：Spring提供的注解。 \u003cbr\u003e\n    @Inject：JSR-330提供的注解。 \u003cbr\u003e\n    @Resource：JSR-250提供的注解。 \u003cbr\u003e\n@Autowired,@Inject,@Resource都可注解在set方法上或者属性上。\u003c/p\u003e\n\n\u003cp\u003e演示实例: \u003cbr\u003e\n演示基于注解的Bean的初始化和依赖注入。\u003c/p\u003e\n\n\u003cp\u003e首先需要先安装好Maven，搭建好Spring， \u003cbr\u003e\n我在这篇博客中有介绍: \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/53010442\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/53010442\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e编写功能类Bean：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.p1_3_1;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.stereotype.Component;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.stereotype.Service;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2016/11/3.\n * Time: 上午 9:03.\n */\u003c/span\u003e\n\u003cspan class=\"hljs-annotation\"\u003e@Service\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//使用@Service注解声明当前FunctionService类是Spring管理的一个Bean。其中，使用@Component,@Service,@Repository和\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//@Controller是等效的。\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFunctionService\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003esayHello\u003c/span\u003e(String word){\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Hello \"\u003c/span\u003e+word +\u003cspan class=\"hljs-string\"\u003e\" !\"\u003c/span\u003e;\n    }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e使用功能类Bean：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.p1_3_1;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.beans.factory.annotation.Autowired;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.stereotype.Service;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e javax.annotation.Resource;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2016/11/3.\n * Time: 上午 9:04.\n */\u003c/span\u003e\n\u003cspan class=\"hljs-annotation\"\u003e@Service\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//使用@Service注解声明当前UseFunctionService类是Spring管理的一个Bean\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eUseFunctionService\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-annotation\"\u003e@Autowired\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e//使用@Autowired将FunctionService的尸体Bean注入到UseFunctionService中，\u003c/span\u003e\n    \u003cspan class=\"hljs-comment\"\u003e//让UseFunctionService具备FunctionService的功能，此处使用@Inject或者@Resource注解是等效的。\u003c/span\u003e\n    FunctionService functionService;\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003esayHello\u003c/span\u003e(String word){\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e functionService.sayHello(word);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e配置类:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.p1_3_1;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.context.annotation.ComponentScan;\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.context.annotation.Configuration;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2016/11/3.\n * Time: 上午 9:08.\n */\u003c/span\u003e\n\u003cspan class=\"hljs-annotation\"\u003e@Configuration\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//@Configuration声明当前类是配置类。\u003c/span\u003e\n\u003cspan class=\"hljs-annotation\"\u003e@ComponentScan\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"cn.hncu.p1_3_1\"\u003c/span\u003e)\n\u003cspan class=\"hljs-comment\"\u003e//使用@ComponentScan，自动扫描包名下所有使用@Service，@Component，@Repository和@Controller的类，并注册为Bean\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDiConfig\u003c/span\u003e {\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e运行:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.p1_3_1;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2016/11/3.\n * Time: 上午 9:09.\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMain\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        AnnotationConfigApplicationContext context = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AnnotationConfigApplicationContext(DiConfig.class);\n        \u003cspan class=\"hljs-comment\"\u003e//使用AnnotationConfigApplicationContext作为Spring容器，接受输入一个配置类作为参数\u003c/span\u003e\n        UseFunctionService useFunctionService = context.getBean(UseFunctionService.class);\n        \u003cspan class=\"hljs-comment\"\u003e//获得声明配置的UseFunctionService的Bean\u003c/span\u003e\n        System.out.println(useFunctionService.sayHello(\u003cspan class=\"hljs-string\"\u003e\"张三\"\u003c/span\u003e));\n        context.close();\n}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e输出结果: \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20161104213807840\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e项目链接—具体到包: \u003cbr\u003e\n\u003ca href=\"https://github.com/chenhaoxiang/Java/tree/master/springBoot/src/main/java/cn/hncu/p1_3_1\"\u003ehttps://github.com/chenhaoxiang/Java/tree/master/springBoot/src/main/java/cn/hncu/p1_3_1\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e本文章由\u003ca href=\"https://chenhaoxiang.github.io/\"\u003e[谙忆]\u003c/a\u003e编写， 所有权利保留。 \u003c/p\u003e\n\n\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://blog.csdn.net/qq_26525215\"\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://blog.csdn.net/qq_26525215\" target=\"_blank\"\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","markdowncontent":"\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027 target=\u0027_blank\u0027\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\nSpring框架本身有四大原则:\n1、使用POJO进行轻量级和最小侵入式开发\n2、通过依赖注入和基于接口编程实现松耦合\n3、通过AOP和默认习惯进行声明式编程\n4、使用AOP和模板减少模式化代码\n\n在Spring环境中，控制翻转（IoC）-Inversion of Control和依赖注入（DI）-dependency injection是等同的概念。\n\n控制翻转是通过依赖注入实现的。所谓依赖注入指的是容器负责创建对象和维护对象间的依赖关系，而不是通过对象本身负责自己的创建和解决自己的依赖。\n\n依赖注入的主要目的是为了解耦，体现了一种\"组合\"的理念。\n\n可以这样理解，当我们希望某个类具备某项功能时，可以选择继承一个具有此功能的类，也可以选择组合另外一个具有此功能的类。那么显然，我们选择组合。因为组合另外一个类会使得耦合度大大降低。\n\n组合:组合关系就是整体与部分的关系，部分属于整体，整体不存在，部分一定不存在，然而部分不存在整体是可以存在的，说的更明确一些就是部分必须创生于整体创生之后，而销毁于整体销毁之前。部分在这个生命期内可以被其它对象关联甚至聚合，但有一点必须注意，一旦部分所属于的整体销毁了，那么与之关联的对象中的引用就会成为空引用，这一点可以利用程序来保障。\n\n\nSpring IoC容器（ApplicationContext）负责创建Bean，并通过容器将功能类Bean注入到你需要的Bean中。\nSpring提供使用xml，注解，Java配置，groovy配置实现Bean的创建和注入。\n这些配置方式，都被称为配置元数据。\n元数据:即描述数据的数据。元数据本身不具备任何可执行的能力，只能通过外界代码来对这些元数据行解析后进行一些有意义操作。\nSpring容器解析这些配置元数据进行Bean初始化、配置和管理依赖。\n\n声明Bean的注解\n\t@Component组件，没有明确的角色。\n\t@Service在业务逻辑层(service层)使用。\n\t@Repository在数据访问层(dao层)使用。\n\t@Controller在展现层(MVC)\n\t\n注入Bean的注解，一般情况下通用\n\t@Autowired：Spring提供的注解。\n\t@Inject：JSR-330提供的注解。\n\t@Resource：JSR-250提供的注解。\n@Autowired,@Inject,@Resource都可注解在set方法上或者属性上。\n\n演示实例:\n演示基于注解的Bean的初始化和依赖注入。\n\n首先需要先安装好Maven，搭建好Spring，\n我在这篇博客中有介绍:\nhttp://blog.csdn.net/qq_26525215/article/details/53010442\n\n编写功能类Bean：\n```\npackage cn.hncu.p1_3_1;\n\nimport org.springframework.stereotype.Component;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2016/11/3.\n * Time: 上午 9:03.\n */\n@Service\n//使用@Service注解声明当前FunctionService类是Spring管理的一个Bean。其中，使用@Component,@Service,@Repository和\n//@Controller是等效的。\npublic class FunctionService {\n    public String sayHello(String word){\n        return \"Hello \"+word +\" !\";\n    }\n}\n```\n\n\n使用功能类Bean：\n```\npackage cn.hncu.p1_3_1;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2016/11/3.\n * Time: 上午 9:04.\n */\n@Service\n//使用@Service注解声明当前UseFunctionService类是Spring管理的一个Bean\npublic class UseFunctionService {\n    @Autowired\n    //使用@Autowired将FunctionService的尸体Bean注入到UseFunctionService中，\n    //让UseFunctionService具备FunctionService的功能，此处使用@Inject或者@Resource注解是等效的。\n    FunctionService functionService;\n    public String sayHello(String word){\n        return functionService.sayHello(word);\n    }\n}\n\n```\n\n\n配置类:\n\n```\npackage cn.hncu.p1_3_1;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2016/11/3.\n * Time: 上午 9:08.\n */\n@Configuration\n//@Configuration声明当前类是配置类。\n@ComponentScan(\"cn.hncu.p1_3_1\")\n//使用@ComponentScan，自动扫描包名下所有使用@Service，@Component，@Repository和@Controller的类，并注册为Bean\npublic class DiConfig {\n}\n\n```\n\n运行:\n\n```\npackage cn.hncu.p1_3_1;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created with IntelliJ IDEA.\n * User: 陈浩翔.\n * Date: 2016/11/3.\n * Time: 上午 9:09.\n */\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DiConfig.class);\n        //使用AnnotationConfigApplicationContext作为Spring容器，接受输入一个配置类作为参数\n        UseFunctionService useFunctionService = context.getBean(UseFunctionService.class);\n        //获得声明配置的UseFunctionService的Bean\n        System.out.println(useFunctionService.sayHello(\"张三\"));\n        context.close();\n}\n}\n\n```\n\n输出结果:\n![](http://img.blog.csdn.net/20161104213807840)\n\n\n项目链接---具体到包:\nhttps://github.com/chenhaoxiang/Java/tree/master/springBoot/src/main/java/cn/hncu/p1_3_1\n\n本文章由\u003ca href=\"https://chenhaoxiang.github.io/\"\u003e[谙忆]\u003c/a\u003e编写， 所有权利保留。 \n\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027\u003e\u003cfont color=\"green\"\u003ehttp://blog.csdn.net/qq_26525215\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://blog.csdn.net/qq_26525215\u0027 target=\u0027_blank\u0027\u003e大学之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-659-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-11\2016-11-04-【Spring】Spring基础配置-依赖注入.markdown [pool-659-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【Spring】Spring基础配置-依赖注入》成功 [pool-659-thread-1] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-649] [chx]
[INFO] 2017-07-28 12:29:23 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:50870978 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:23 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-660] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=50870978 [pool-660-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":50870978,"title":"深搜算法：倒油/面向对象的思想来做","create_at":"\/Date(1457806867000)\/","create":"2016-03-13 02:21:07","view_count":439,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":1,"bury":0,"description":"题目：有一位厨师要从盛12斤油（a桶）的桶中倒出6斤油来，可是手边只有盛8斤油（b桶）和盛5斤油（c桶）的两个桶，问如何操作才能将6斤取出来呢？下面为JAVA实现代码： \n主类：package cn.hncu.oil.dfs1;import cn.hncu.oil.common.Bucket;\nimport cn.hncu.oil.common.DumpCase;\nimport cn.hncu.oi","url":"http://blog.csdn.net/qq_26525215/article/details/50870978","categories":"❺ 算法及基础题,----- 递归搜索回溯","tags":"java,面向对象,算法","content":"\u003cp\u003e题目：有一位厨师要从盛12斤油（a桶）的桶中倒出6斤油来，可是手边只有盛8斤油（b桶）和盛5斤油（c桶）的两个桶，问如何操作才能将6斤取出来呢？\u003c/p\u003e\n\n\u003cp\u003e下面为JAVA实现代码： \u003cbr\u003e\n主类：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003epackage cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.oil\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dfs\u003c/span\u003e1\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.oil\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.common\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Bucket\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.oil\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.common\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.DumpCase\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.oil\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.common\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Myset\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\npublic class DumpOilDFS {\n    public static void main(String[] args) {\n\n        Bucket buckets[] = new Bucket[\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        buckets[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e] = new Bucket(\u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        buckets[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] = new Bucket(\u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        buckets[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e] = new Bucket(\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        DumpCase u = new DumpCase(buckets)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Myset caseset = new Myset()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        caseset\u003cspan class=\"hljs-preprocessor\"\u003e.add\u003c/span\u003e(u)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        dfs(u,caseset)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n\n\n\n    }\n\n    private static void dfs(DumpCase u0, Myset caseset) {\n\n        for(Bucket bucket: u0\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()){\n            if(bucket\u003cspan class=\"hljs-preprocessor\"\u003e.getNow\u003c/span\u003e()==\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e){\n                //System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"find a case\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                print(u0)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                return\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        }\n\n        int n = u0\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.length\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;//桶的个数\u003c/span\u003e\n        DumpCase u = new DumpCase(u0)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        //用备份节点去搜\n        //遍历所有的DumpCase: 依次让桶i向j倒\n        for(int i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;i&lt;n;i++){\u003c/span\u003e\n            for(int j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;j&lt;n;j++){\u003c/span\u003e\n                if(i==j){//不能自己给自己的桶倒油\n                    continue\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                }\n                //算出桶i给j倒时，能倒多少--&gt;temp\n                int temp = u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[i]\u003cspan class=\"hljs-preprocessor\"\u003e.canOut\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                if(u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[j]\u003cspan class=\"hljs-preprocessor\"\u003e.canIn\u003c/span\u003e()&lt;u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[i]\u003cspan class=\"hljs-preprocessor\"\u003e.canOut\u003c/span\u003e()){\n                    temp = u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[j]\u003cspan class=\"hljs-preprocessor\"\u003e.canIn\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                }\n                //倒油\n                u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[i]\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e(temp)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[j]\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e(temp)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n                //判断该情况是否已经出现过了//如果存在，要还原(把油倒回去)\n                if(caseset\u003cspan class=\"hljs-preprocessor\"\u003e.contains\u003c/span\u003e(u)){\n                    u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[i]\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e(temp)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                    u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[j]\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e(temp)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                    continue\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                }\n\n\n                DumpCase v = new DumpCase(u)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                v\u003cspan class=\"hljs-preprocessor\"\u003e.setParent\u003c/span\u003e(u0)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                caseset\u003cspan class=\"hljs-preprocessor\"\u003e.add\u003c/span\u003e(v)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                //System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(a)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                dfs(v,caseset)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n                u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[i]\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e(temp)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n                u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[j]\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e(temp)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n\n\n\n            }\n        }\n\n\n    }\n\n    private static void print(DumpCase u0) {\n        Myset \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e  =new Myset()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.add\u003c/span\u003e(u0)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        DumpCase v =u0\u003cspan class=\"hljs-preprocessor\"\u003e.getParent\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        while(v!=null){\n            \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.add\u003c/span\u003e(v)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            //System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(v\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\u003cspan class=\"hljs-preprocessor\"\u003e.getNow\u003c/span\u003e()+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+v\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\u003cspan class=\"hljs-preprocessor\"\u003e.getNow\u003c/span\u003e()+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+v\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e]\u003cspan class=\"hljs-preprocessor\"\u003e.getNow\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            v= v\u003cspan class=\"hljs-preprocessor\"\u003e.getParent\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"------------\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        //System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"12,0,0\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Object objs[] = \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.getAll\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        for(int i=objs\u003cspan class=\"hljs-preprocessor\"\u003e.length\u003c/span\u003e-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;i&gt;=0;i--){\u003c/span\u003e\n            DumpCase u =(DumpCase) objs[i]\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\u003cspan class=\"hljs-preprocessor\"\u003e.getNow\u003c/span\u003e()+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e]\u003cspan class=\"hljs-preprocessor\"\u003e.getNow\u003c/span\u003e()+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+u\u003cspan class=\"hljs-preprocessor\"\u003e.getBucket\u003c/span\u003e()[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e]\u003cspan class=\"hljs-preprocessor\"\u003e.getNow\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n\n\n\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eDumpCase 类：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.oil.common;\n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.Arrays;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDumpCase\u003c/span\u003e {\u003c/span\u003e\n    Bucket buckets[];\n    DumpCase parent = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDumpCase\u003c/span\u003e(){\n\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehashCode\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e prime = \u003cspan class=\"hljs-number\"\u003e31\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e result = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        result = prime * result + Arrays.hashCode(buckets);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e result;\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eequals\u003c/span\u003e(Object obj) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e == obj)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (obj == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (getClass() != obj.getClass())\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        DumpCase other = (DumpCase) obj;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!Arrays.equals(buckets, other.buckets))\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDumpCase\u003c/span\u003e(Bucket buckets[]){\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.buckets = buckets;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDumpCase\u003c/span\u003e(DumpCase u) {\u003cspan class=\"hljs-comment\"\u003e//必须要深拷贝\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.buckets = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Bucket[u.getBucket().length];\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;u.getBucket().length;i++){\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.buckets[i] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Bucket(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.buckets[i].max=u.buckets[i].max;\n            \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.buckets[i].now=u.buckets[i].now;\n        }\n\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Bucket[] \u003cspan class=\"hljs-title\"\u003egetBucket\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e buckets;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetBucket\u003c/span\u003e(Bucket[] buckets) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.buckets = buckets;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e DumpCase \u003cspan class=\"hljs-title\"\u003egetParent\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e parent;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetParent\u003c/span\u003e(DumpCase parent) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.parent = parent;\n    }\n\n\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBucket 类：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.oil.common;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBucket\u003c/span\u003e {\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e//桶的容量和现在装的油的多少\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e now;\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e max;\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBucket\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e max,\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e now) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.max=max;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.now=now;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ein\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n){\n         now+=n;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eout\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n){\n        now-=n;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetNow\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e now;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetMax\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e max;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecanIn\u003c/span\u003e(){\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e max-now;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecanOut\u003c/span\u003e(){\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e now;\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehashCode\u003c/span\u003e() {\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e prime = \u003cspan class=\"hljs-number\"\u003e31\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e result = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        result = prime * result + max;\n        result = prime * result + now;\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e result;\n    }\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eequals\u003c/span\u003e(Object obj) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e == obj)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (obj == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (getClass() != obj.getClass())\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        Bucket other = (Bucket) obj;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (max != other.max)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (now != other.now)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eMyset 类：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e cn.hncu.oil.common;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyset\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Object[] objs = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Object[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e];\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003econtains\u003c/span\u003e(Object obj){\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(Object objtemp:objs){\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(objtemp.equals(obj)){\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n            }\n        }\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eadd\u003c/span\u003e(Object obj){\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(contains(obj)){\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n        }\n        Object[] objstemp = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Object[objs.length+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n        System.arraycopy(objs, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, objstemp, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, objs.length);\n        objstemp[objs.length]=obj;\n        objs = objstemp;\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Object[] \u003cspan class=\"hljs-title\"\u003egetAll\u003c/span\u003e(){\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e objs;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSize\u003c/span\u003e(){\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e objs.length;\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"题目：有一位厨师要从盛12斤油（a桶）的桶中倒出6斤油来，可是手边只有盛8斤油（b桶）和盛5斤油（c桶）的两个桶，问如何操作才能将6斤取出来呢？\n\n下面为JAVA实现代码：\n主类：\n```\npackage cn.hncu.oil.dfs1;\n\nimport cn.hncu.oil.common.Bucket;\nimport cn.hncu.oil.common.DumpCase;\nimport cn.hncu.oil.common.Myset;\n\npublic class DumpOilDFS {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tBucket buckets[] = new Bucket[3];\n\t\tbuckets[0] = new Bucket(12, 12);\n\t\tbuckets[1] = new Bucket(8, 0);\n\t\tbuckets[2] = new Bucket(5, 0);\n\t\t\n\t\tDumpCase u = new DumpCase(buckets);\n\t\tMyset caseset = new Myset();\n\t\tcaseset.add(u);\n\t\t\n\t\tdfs(u,caseset);\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\n\tprivate static void dfs(DumpCase u0, Myset caseset) {\n\t\t\n\t\tfor(Bucket bucket: u0.getBucket()){\n\t\t\tif(bucket.getNow()==6){\n\t\t\t\t//System.out.println(\"find a case\");\n\t\t\t\tprint(u0);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint n = u0.getBucket().length;//桶的个数\n\t\tDumpCase u = new DumpCase(u0);\n\t\t//用备份节点去搜\n\t\t//遍历所有的DumpCase: 依次让桶i向j倒\n\t\tfor(int i=0;i\u003cn;i++){\n\t\t\tfor(int j=0;j\u003cn;j++){\n\t\t\t\tif(i==j){//不能自己给自己的桶倒油\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//算出桶i给j倒时，能倒多少--\u003etemp\n\t\t\t\tint temp = u.getBucket()[i].canOut();\n\t\t\t\tif(u.getBucket()[j].canIn()\u003cu.getBucket()[i].canOut()){\n\t\t\t\t\ttemp = u.getBucket()[j].canIn();\n\t\t\t\t}\n\t\t\t\t//倒油\n\t\t\t\tu.getBucket()[i].out(temp);\n\t\t\t\tu.getBucket()[j].in(temp);\n\t\t\t\t\n\t\t\t\t//判断该情况是否已经出现过了//如果存在，要还原(把油倒回去)\n\t\t\t\tif(caseset.contains(u)){\n\t\t\t\t\tu.getBucket()[i].in(temp);\n\t\t\t\t\tu.getBucket()[j].out(temp);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tDumpCase v = new DumpCase(u);\n\t\t\t\tv.setParent(u0);\n\t\t\t\tcaseset.add(v);\n\t\t\t\t//System.out.println(a);\n\t\t\t\tdfs(v,caseset);\n\t\t\t\t\n\t\t\t\tu.getBucket()[i].in(temp);\n\t\t\t\tu.getBucket()[j].out(temp);\n\t\t\n\t\t\n\t\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\n\tprivate static void print(DumpCase u0) {\n\t\tMyset set  =new Myset();\n\t\tset.add(u0);\n\t\tDumpCase v =u0.getParent();\n\t\twhile(v!=null){\n\t\t\tset.add(v);\n\t\t\t//System.out.println(v.getBucket()[0].getNow()+\",\"+v.getBucket()[1].getNow()+\",\"+v.getBucket()[2].getNow());\n\t\t\tv= v.getParent();\n\t\t}\n\t\tSystem.out.println(\"------------\");\n\t\t//System.out.println(\"12,0,0\");\n\t\tObject objs[] = set.getAll();\n\t\t\n\t\tfor(int i=objs.length-1;i\u003e=0;i--){\n\t\t\tDumpCase u =(DumpCase) objs[i];\n\t\t\tSystem.out.println(u.getBucket()[0].getNow()+\",\"+u.getBucket()[1].getNow()+\",\"+u.getBucket()[2].getNow());\n\t\t}\n\t\t\n\t\t\n\t\t\n\t}\n\n}\n\n```\nDumpCase 类：\n```\npackage cn.hncu.oil.common;\n\nimport java.util.Arrays;\n\npublic class DumpCase {\n\tBucket buckets[];\n\tDumpCase parent = null;\n\t\n\tpublic DumpCase(){\n\t\t\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + Arrays.hashCode(buckets);\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tDumpCase other = (DumpCase) obj;\n\t\tif (!Arrays.equals(buckets, other.buckets))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tpublic DumpCase(Bucket buckets[]){\n\t\tthis.buckets = buckets;\n\t}\n\n\tpublic DumpCase(DumpCase u) {//必须要深拷贝\n\t\tthis.buckets = new Bucket[u.getBucket().length];\n\t\tfor(int i=0;i\u003cu.getBucket().length;i++){\n\t\t\tthis.buckets[i] = new Bucket(0, 0);\n\t\t\tthis.buckets[i].max=u.buckets[i].max;\n\t\t\tthis.buckets[i].now=u.buckets[i].now;\n\t\t}\n\t\t\n\t}\n\n\tpublic Bucket[] getBucket() {\n\t\treturn buckets;\n\t}\n\n\tpublic void setBucket(Bucket[] buckets) {\n\t\tthis.buckets = buckets;\n\t}\n\n\tpublic DumpCase getParent() {\n\t\treturn parent;\n\t}\n\n\tpublic void setParent(DumpCase parent) {\n\t\tthis.parent = parent;\n\t}\n\t\n\t\n\t\n}\n\n```\nBucket 类：\n```\npackage cn.hncu.oil.common;\n\npublic class Bucket {//桶的容量和现在装的油的多少\n\tint now;\n\tint max;\n\t\n\tpublic Bucket(int max,int now) {\n\t\tthis.max=max;\n\t\tthis.now=now;\n\t}\n\t\n\tpublic void in(int n){\n\t\t now+=n;\n\t}\n\t\n\tpublic void out(int n){\n\t\tnow-=n;\n\t}\n\t\n\tpublic int getNow() {\n\t\treturn now;\n\t}\n\n\tpublic int getMax() {\n\t\treturn max;\n\t}\n\n\tpublic int canIn(){\n\t\treturn max-now;\n\t}\n\t\n\tpublic int canOut(){\n\t\treturn now;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + max;\n\t\tresult = prime * result + now;\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tBucket other = (Bucket) obj;\n\t\tif (max != other.max)\n\t\t\treturn false;\n\t\tif (now != other.now)\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n}\n\n```\nMyset 类：\n```\npackage cn.hncu.oil.common;\n\npublic class Myset {\n\tprivate Object[] objs = new Object[0];\n\t\n\tpublic boolean contains(Object obj){\n\t\tfor(Object objtemp:objs){\n\t\t\tif(objtemp.equals(obj)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic boolean add(Object obj){\n\t\tif(contains(obj)){\n\t\t\treturn false;\n\t\t}\n\t\tObject[] objstemp = new Object[objs.length+1];\n\t\tSystem.arraycopy(objs, 0, objstemp, 0, objs.length);\n\t\tobjstemp[objs.length]=obj;\n\t\tobjs = objstemp;\n\t\treturn true;\n\t}\n\t\n\tpublic Object[] getAll(){\n\t\treturn objs;\n\t}\n\t\n\tpublic int Size(){\n\t\treturn objs.length;\n\t}\n\t\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-660-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-03\2016-03-13-深搜算法：倒油 面向对象的思想来做.markdown [pool-660-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《深搜算法：倒油 面向对象的思想来做》成功 [pool-660-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-650] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:49362163 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-661] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=49362163 [pool-661-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":49362163,"title":"POJ 2262  Goldbach\u0027s Conjecture","create_at":"\/Date(1445585481000)\/","create":"2015-10-23 03:31:21","view_count":382,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \nIn 1742, Christian Goldbach, a German amateur mathematician, sent a letter to Leonhard Euler in which he made the following conjecture:  \nEvery even number greater than 4 can be","url":"http://blog.csdn.net/qq_26525215/article/details/49362163","categories":"❶ ACM,----- POJ-ACM","tags":"poj","content":"\u003cp\u003eProblem Description \u003cbr\u003e\nIn 1742, Christian Goldbach, a German amateur mathematician, sent a letter to Leonhard Euler in which he made the following conjecture:  \u003cbr\u003e\nEvery even number greater than 4 can be  \u003cbr\u003e\nwritten as the sum of two odd prime numbers.\u003c/p\u003e\n\n\u003cp\u003eFor example:  \u003cbr\u003e\n8 = 3 + 5. Both 3 and 5 are odd prime numbers.  \u003cbr\u003e\n20 = 3 + 17 = 7 + 13.  \u003cbr\u003e\n42 = 5 + 37 = 11 + 31 = 13 + 29 = 19 + 23.\u003c/p\u003e\n\n\u003cp\u003eToday it is still unproven whether the conjecture is right. (Oh wait, I have the proof of course, but it is too long to write it on the margin of this page.)  \u003cbr\u003e\nAnyway, your task is now to verify Goldbach’s conjecture for all even numbers less than a million. \u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\nThe input will contain one or more test cases.  \u003cbr\u003e\nEach test case consists of one even integer n with 6 &lt;= n &lt; 1000000.  \u003cbr\u003e\nInput will be terminated by a value of 0 for n.\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\nFor each test case, print one line of the form n = a + b, where a and b are odd primes. Numbers and operators should be separated by exactly one blank like in the sample output below. If there is more than one pair of odd primes adding up to n, choose the pair where the difference b - a is maximized. If there is no such pair, print a line saying “Goldbach’s conjecture is wrong.”\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n8 \u003cbr\u003e\n20 \u003cbr\u003e\n42 \u003cbr\u003e\n0\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n8 = 3 + 5 \u003cbr\u003e\n20 = 3 + 17 \u003cbr\u003e\n42 = 5 + 37\u003c/p\u003e\n\n\u003cp\u003e用打表法\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs perl\"\u003e\u003cspan class=\"hljs-comment\"\u003e#include &lt;stdio.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e#include &lt;stdlib.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e#include &lt;math.h&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e sum(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ex\u003c/span\u003e){\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i;\n     \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e t = \u003cspan class=\"hljs-keyword\"\u003esqrt\u003c/span\u003e ( \u003cspan class=\"hljs-keyword\"\u003ex\u003c/span\u003e + \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e.\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e ) ;\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(i=\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e;i&lt;=t;i++){\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003ex\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e%i\u003c/span\u003e==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n}\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e arr[\u003cspan class=\"hljs-number\"\u003e500005\u003c/span\u003e],j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\nvoid a(){\n       \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i;\n    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(i=\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;i&lt;\u003cspan class=\"hljs-number\"\u003e500000\u003c/span\u003e;i++){\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(sum(i))\n            arr[j++]=i;\n    }\n}\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e main(){\n\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003em\u003c/span\u003e,i;\n    a();\n    \u003cspan class=\"hljs-regexp\"\u003e/**for(i=0;i&lt;10;i++)\n    {\n        printf(\"%6d\",arr[i]);\n    }**/\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003em\u003c/span\u003e;\n        scanf(\u003cspan class=\"hljs-string\"\u003e\"\u003cspan class=\"hljs-variable\"\u003e%d\u003c/span\u003e\"\u003c/span\u003e,&amp;\u003cspan class=\"hljs-keyword\"\u003em\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003em\u003c/span\u003e==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003em\u003c/span\u003e==\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e){\n        \u003cspan class=\"hljs-keyword\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"6 = 3 + 3\\n\"\u003c/span\u003e);\n    }\n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e{\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e flag=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;\u003cspan class=\"hljs-regexp\"\u003em/2&amp;&amp;m/\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e&gt;arr[i];i++)\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(sum(\u003cspan class=\"hljs-keyword\"\u003em\u003c/span\u003e-arr[i])==\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e){\n                flag=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n                \u003cspan class=\"hljs-regexp\"\u003e//printf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"i=\u003cspan class=\"hljs-variable\"\u003e%d\u003c/span\u003e\\n\"\u003c/span\u003e,i);\n            \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n        }\n       \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(flag){\n            \u003cspan class=\"hljs-regexp\"\u003e//printf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"##i=\u003cspan class=\"hljs-variable\"\u003e%d\u003c/span\u003e\\n\"\u003c/span\u003e,i);\n           \u003cspan class=\"hljs-keyword\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"\u003cspan class=\"hljs-variable\"\u003e%d\u003c/span\u003e = \u003cspan class=\"hljs-variable\"\u003e%d\u003c/span\u003e + \u003cspan class=\"hljs-variable\"\u003e%d\u003c/span\u003e\\n\"\u003c/span\u003e,\u003cspan class=\"hljs-keyword\"\u003em\u003c/span\u003e,arr[i],\u003cspan class=\"hljs-keyword\"\u003em\u003c/span\u003e-arr[i]);\n       }\n       \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e\n          \u003cspan class=\"hljs-keyword\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"Goldbach\u0027s conjecture is wrong.\\n\"\u003c/span\u003e);\n    }\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\nIn 1742, Christian Goldbach, a German amateur mathematician, sent a letter to Leonhard Euler in which he made the following conjecture: \nEvery even number greater than 4 can be \nwritten as the sum of two odd prime numbers.\n\nFor example: \n8 = 3 + 5. Both 3 and 5 are odd prime numbers. \n20 = 3 + 17 = 7 + 13. \n42 = 5 + 37 = 11 + 31 = 13 + 29 = 19 + 23.\n\nToday it is still unproven whether the conjecture is right. (Oh wait, I have the proof of course, but it is too long to write it on the margin of this page.) \nAnyway, your task is now to verify Goldbach\u0027s conjecture for all even numbers less than a million. \n \n\nInput\nThe input will contain one or more test cases. \nEach test case consists of one even integer n with 6 \u003c= n \u003c 1000000. \nInput will be terminated by a value of 0 for n.\n \n\nOutput\nFor each test case, print one line of the form n = a + b, where a and b are odd primes. Numbers and operators should be separated by exactly one blank like in the sample output below. If there is more than one pair of odd primes adding up to n, choose the pair where the difference b - a is maximized. If there is no such pair, print a line saying \"Goldbach\u0027s conjecture is wrong.\"\n \n\nSample Input\n8\n20\n42\n0\n \n\nSample Output\n8 = 3 + 5\n20 = 3 + 17\n42 = 5 + 37\n \n 用打表法\n \n\n```\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cmath.h\u003e\nint sum(int x){\n    int i;\n     int t = sqrt ( x + 0.5 ) ;\n    for(i=2;i\u003c=t;i++){\n        if(x%i==0)\n            return 0;\n    }\n    return 1;\n}\nint arr[500005],j=0;\nvoid a(){\n       int i;\n    for(i=3;i\u003c500000;i++){\n        if(sum(i))\n            arr[j++]=i;\n    }\n}\nint main(){\n\n    int m,i;\n    a();\n    /**for(i=0;i\u003c10;i++)\n    {\n        printf(\"%6d\",arr[i]);\n    }**/\n    while(1){\n        int m;\n        scanf(\"%d\",&m);\n    if(m==0){\n        return 0;\n    }\n    if(m==6){\n        printf(\"6 = 3 + 3\\n\");\n    }\n    else{\n        int flag=0;\n        for(i=0;i\u003cm/2&&m/2\u003earr[i];i++)\n        if(sum(m-arr[i])==1){\n                flag=1;\n                //printf(\"i=%d\\n\",i);\n            break;\n        }\n       if(flag){\n            //printf(\"##i=%d\\n\",i);\n           printf(\"%d = %d + %d\\n\",m,arr[i],m-arr[i]);\n       }\n       else\n          printf(\"Goldbach\u0027s conjecture is wrong.\\n\");\n    }\n    }\n    return 0;\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-661-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-10\2015-10-23-POJ 2262  Goldbach's Conjecture.markdown [pool-661-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《POJ 2262  Goldbach's Conjecture》成功 [pool-661-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-651] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51218511 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-662] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51218511 [pool-662-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51218511,"title":"Java---多线程之死锁","create_at":"\/Date(1461295009000)\/","create":"2016-04-22 11:16:49","view_count":4230,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"★ 死锁的两种情况：简单的说下单块cpu运行多线程的情况：大家可能平时玩电脑，可以同时挂QQ啊，玩游戏啊，打开文本啊，等等。这里，我们假设是单块cpu。也就是俗称的单核cpu。 \n大家可能会觉得这些软件，这些线程是同时运行的， \n其实不然，其实在任何一种情况下，电脑都只运行一个线程！ \n只是因为这个单块的cpu内部为我们划分了很多很多的时间块， \n而这个时间的划分是以纳秒为单位的，也就是说，这个10","url":"http://blog.csdn.net/qq_26525215/article/details/51218511","categories":"❷ Java大学之行,----- ③、Java知识点及应用,----- ----- Java多线程","tags":"多线程,java,软件,cpu","content":"\u003ch1 id=\"死锁的两种情况\"\u003e★ 死锁的两种情况：\u003c/h1\u003e\n\n\n\n\u003ch2 id=\"简单的说下单块cpu运行多线程的情况\"\u003e简单的说下单块cpu运行多线程的情况：\u003c/h2\u003e\n\n\u003cp\u003e大家可能平时玩电脑，可以同时挂QQ啊，玩游戏啊，打开文本啊，等等。这里，我们假设是单块cpu。也就是俗称的单核cpu。 \u003cbr\u003e\n大家可能会觉得这些软件，这些线程是同时运行的， \u003cbr\u003e\n其实不然，其实在任何一种情况下，电脑都只运行一个线程！ \u003cbr\u003e\n只是因为这个单块的cpu内部为我们划分了很多很多的时间块， \u003cbr\u003e\n而这个时间的划分是以纳秒为单位的，也就是说，这个10纳秒我运行这个线程，下个10纳秒运行另外一个线程（或者又被上一个线程抢到了（只是被上一个线程抢到的概率小，这是cpu调度器的算法决定了的），它会慢慢平衡的，不可能一直让某一个线程一直抢占cpu调度器资源），所以说，它运行并不是连续的，只是间隔时间太短，我们感觉不出来而已！！！\u003c/p\u003e\n\n\n\n\u003ch2 id=\"第一种情况\"\u003e第一种情况：\u003c/h2\u003e\n\n\u003cp\u003e1）多个线程共用同一个对象锁，互相等待。 \u003cbr\u003e\n两个线程共用一个锁，一个线程拿着锁来调用另外一个线程，于是出现了死锁情况！\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e thread.deadLock.lock1;\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 简单的类\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-4-22\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eS\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e thread.deadLock.lock1;\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 含有main方法的类\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-4-22\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDeadLock1\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        S s = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e S();\n        Thread b = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Thread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ThreadB(s));\n        Thread a = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Thread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ThreadA(s,b));\n        a.start();\n        b.start();\n    }\n\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e thread.deadLock.lock1;\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * ThreadB类\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-4-22\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThreadB\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRunnable\u003c/span\u003e{\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e S s = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThreadB\u003c/span\u003e(S s) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.s = s;\n    }\n\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e  \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e() {\n        System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程B在等待锁s！\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003esynchronized\u003c/span\u003e (s) {\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程B拿到锁s！\"\u003c/span\u003e);\n            s.a=\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e;\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程B  s.a = \"\u003c/span\u003e + s.a);\n        }\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e thread.deadLock.lock1;\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * ThreadA类\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-4-22\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThreadA\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRunnable\u003c/span\u003e{\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e S s = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Thread b = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThreadA\u003c/span\u003e(S s,Thread b) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.b = b;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.s = s;\n    }\n\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e  \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e() {\n        System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程A在等待锁s！\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003esynchronized\u003c/span\u003e (s) {\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程A拿到锁s！\"\u003c/span\u003e);\n            \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n                \u003cspan class=\"hljs-comment\"\u003e//调用b线程的运行代码。\u003c/span\u003e\n                \u003cspan class=\"hljs-comment\"\u003e//但是此时的锁在a线程手里，b拿不到锁。\u003c/span\u003e\n                \u003cspan class=\"hljs-comment\"\u003e//所以出现了，b等待a给锁，a就拿着锁等待b运行，所以出现了死锁！\u003c/span\u003e\n                b.join();\n            } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"s.a = \"\u003c/span\u003e + s.a);\n        }\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e运行结果只有一种情况，一定锁死！ \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160422110207544\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch2 id=\"第二种情况\"\u003e第二种情况：\u003c/h2\u003e\n\n\u003cp\u003e2）互相持有对方所需的资源（即每个线程都需要同时拿到多个资源才能继续执行，而多个线程都处于：各持有一部分，在等待另一部分。）\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e thread.deadLock.lock2;\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 资源类1\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-4-22\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eS1\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a =\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e thread.deadLock.lock2;\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * 资源类2\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-4-22\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eS2\u003c/span\u003e {\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a =\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e thread.deadLock.lock2;\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * \n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-4-22\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDeadLock2\u003c/span\u003e {\u003c/span\u003e\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        \u003cspan class=\"hljs-comment\"\u003e//如果要解决这种多资源出现的死锁，可以把多个资源打包成一个综合资源，\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e//把综合资源变成一个对象锁,哪个线程一拿到锁就有全部资源了\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e//在设计阶段就应该考虑到----把多线程中的每个线程所用的互斥资源图画出来\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e//--从图中看出哪些线程存在共享互斥资源，然后分析是否可能存在死锁\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e//这个死锁存在随机性！！！\u003c/span\u003e\n\n        S1 s1 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e S1();\n        S2 s2 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e S2();\n\n        Thread a = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Thread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ThreadA(s1,s2));\n        Thread b = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Thread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ThreadB(s1,s2));\n\n        a.start();\n        b.start();\n\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e thread.deadLock.lock2;\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * ThreadA---a线程运行代码类\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-4-22\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThreadA\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRunnable\u003c/span\u003e{\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e S1 s1 = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e S2 s2 = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThreadA\u003c/span\u003e(S1 s1, S2 s2) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.s1 = s1;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.s2 = s2;\n    }\n\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e() {\n        System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程a在等待锁s1!\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003esynchronized\u003c/span\u003e (s1) {\u003cspan class=\"hljs-comment\"\u003e//拿到了锁s1\u003c/span\u003e\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"s1.a=\"\u003c/span\u003e + s1.a);\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程a拿到了锁s1\"\u003c/span\u003e);\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程a在等待锁s2\"\u003c/span\u003e);\n            \u003cspan class=\"hljs-keyword\"\u003esynchronized\u003c/span\u003e (s2) {\u003cspan class=\"hljs-comment\"\u003e//拿到锁s2\u003c/span\u003e\n                System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程a拿到了锁s2\"\u003c/span\u003e);\n                System.out.println(\u003cspan class=\"hljs-string\"\u003e\"s2.a=\"\u003c/span\u003e + s2.a);\n            }\u003cspan class=\"hljs-comment\"\u003e//释放锁s2\u003c/span\u003e\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程a释放了锁s2\"\u003c/span\u003e);\n        }\u003cspan class=\"hljs-comment\"\u003e//释放锁s1\u003c/span\u003e\n\n\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e thread.deadLock.lock2;\n\u003cspan class=\"hljs-javadoc\"\u003e/**\n * ThreadB---b线程运行代码类\n *\u003cspan class=\"hljs-javadoctag\"\u003e @author\u003c/span\u003e 陈浩翔\n *\n * 2016-4-22\n */\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThreadB\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRunnable\u003c/span\u003e{\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e S1 s1 = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e S2 s2 = \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\n\n\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThreadB\u003c/span\u003e(S1 s1, S2 s2) {\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.s1 = s1;\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.s2 = s2;\n    }\n\n\n\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e() {\n        System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程b在等待锁s2!\"\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003esynchronized\u003c/span\u003e (s2) {\u003cspan class=\"hljs-comment\"\u003e//拿到了锁s2\u003c/span\u003e\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"s2.a=\"\u003c/span\u003e + s2.a);\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程b拿到了锁s2\"\u003c/span\u003e);\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程b在等待锁s1\"\u003c/span\u003e);\n            \u003cspan class=\"hljs-keyword\"\u003esynchronized\u003c/span\u003e (s1) {\u003cspan class=\"hljs-comment\"\u003e//拿到锁s1\u003c/span\u003e\n                System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程b拿到了锁s1\"\u003c/span\u003e);\n                System.out.println(\u003cspan class=\"hljs-string\"\u003e\"s1.a=\"\u003c/span\u003e + s1.a);\n            }\u003cspan class=\"hljs-comment\"\u003e//释放锁s1\u003c/span\u003e\n            System.out.println(\u003cspan class=\"hljs-string\"\u003e\"线程b释放了锁s1\"\u003c/span\u003e);\n        }\u003cspan class=\"hljs-comment\"\u003e//释放锁s2\u003c/span\u003e\n\n\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个情况下的死锁会出现2中情况：：\u003c/p\u003e\n\n\u003cp\u003e第一种：没有死锁： \u003cbr\u003e\n这种情况的出现是因为可能a线程或者b线程抢到了cpu资源，一次就全部运行完了，这样，就不会出现死锁！\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160422110405621\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e第二种：出现了死锁： \u003cbr\u003e\n假如a线程拿到了s1的锁，还没有拿到s2的锁， \u003cbr\u003e\n这个时候s2的锁被b线程拿到了，b线程就开始等待s1锁，而s1锁在a线程手上，a线程就等s2锁啊，b线程就等s1锁，，，于是，出现了死锁！\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160422111335142\" alt=\"\" title=\"\"\u003e \u003cbr\u003e\n大家可以看到，这个死锁的情况下，程序并没有停止运行的，那个程序运行的红方块标志还亮着呢！ \u003cbr\u003e\n前面那图没有出现死锁的情况下，程序运行一下就输出完了，红方块是暗的！\u003c/p\u003e\n\n\n\n\u003ch2 id=\"总结\"\u003e总结：\u003c/h2\u003e\n\n\u003cp\u003e★ 死锁的解决 \u003cbr\u003e\n(死锁并没有解决的方案，只能从源头上去避免！) \u003cbr\u003e\n要从设计方面去解决避免，即在设计时就考虑不能出现死锁。 \u003cbr\u003e\n罗列出所有临界资源，画分布图，从图中观察其中的死锁情况，改变其中线程的(临界)资源的获取方式。 \u003cbr\u003e\n设计原则：尽量让程序中少出现临界资源。\u003c/p\u003e\n\n\u003cp\u003e★ wait/notify 和 sleep方法\u003c/p\u003e\n\n\u003cp\u003ewait和notify只能在它们被调用的实例的同步块内使用，而sleep()到处都可以用。 \u003cbr\u003e\nwait()和sleep()最大的区别：sleep()不释放对象锁，而wait()会释放，因此从效率方面考虑wait()方法更好。\u003c/p\u003e\n\n\u003cp\u003e★ 同步设计的基本原则 \u003cbr\u003e\n ◎ 同步块中(synchronized修饰)的代码越小越好！ \u003cbr\u003e\n ◎ 同步块中不要写阻塞性代码(如，InputStream.read() )！ \u003cbr\u003e\n ◎ 在持有锁的时候，不要对其它对象调用方法。（如果做到，可以消除最常见的死锁源头。）\u003c/p\u003e\n\n\u003cp\u003e★ 同步概述 \u003cbr\u003e\n◎同步的原理：将需要同步的代码进行封装，并在该代码上加了一个锁。 \u003cbr\u003e\n◎同步的好处：解决多线程的安全问题。 \u003cbr\u003e\n◎同步的弊端：会降低性能。 \u003cbr\u003e\n◎同步的前提：必须要保证有多个线程且它们在同步中使用的是同一个锁。\u003c/p\u003e","markdowncontent":"★ 死锁的两种情况：\n==========\n\n简单的说下单块cpu运行多线程的情况：\n-------------------\n\n大家可能平时玩电脑，可以同时挂QQ啊，玩游戏啊，打开文本啊，等等。这里，我们假设是单块cpu。也就是俗称的单核cpu。\n大家可能会觉得这些软件，这些线程是同时运行的，\n其实不然，其实在任何一种情况下，电脑都只运行一个线程！\n只是因为这个单块的cpu内部为我们划分了很多很多的时间块，\n而这个时间的划分是以纳秒为单位的，也就是说，这个10纳秒我运行这个线程，下个10纳秒运行另外一个线程（或者又被上一个线程抢到了（只是被上一个线程抢到的概率小，这是cpu调度器的算法决定了的），它会慢慢平衡的，不可能一直让某一个线程一直抢占cpu调度器资源），所以说，它运行并不是连续的，只是间隔时间太短，我们感觉不出来而已！！！\n\n\n第一种情况：\n------\n1）多个线程共用同一个对象锁，互相等待。\n两个线程共用一个锁，一个线程拿着锁来调用另外一个线程，于是出现了死锁情况！\n\n\n```\npackage thread.deadLock.lock1;\n/**\n * 简单的类\n * @author 陈浩翔\n *\n * 2016-4-22\n */\npublic class S {\n\tpublic int a = 0 ;\n}\n\n```\n\n```\npackage thread.deadLock.lock1;\n/**\n * 含有main方法的类\n * @author 陈浩翔\n *\n * 2016-4-22\n */\npublic class DeadLock1 {\n\tpublic static void main(String[] args) {\n\t\tS s = new S();\n\t\tThread b = new Thread(new ThreadB(s));\n\t\tThread a = new Thread(new ThreadA(s,b));\n\t\ta.start();\n\t\tb.start();\n\t}\n\t\n\t\n}\n\n```\n\n```\npackage thread.deadLock.lock1;\n/**\n * ThreadB类\n * @author 陈浩翔\n *\n * 2016-4-22\n */\npublic class ThreadB implements Runnable{\n\tprivate S s = null;\n\t\n\t\n\tpublic ThreadB(S s) {\n\t\tthis.s = s;\n\t}\n\n\n\t@Override\n\tpublic  void run() {\n\t\tSystem.out.println(\"线程B在等待锁s！\");\n\t\tsynchronized (s) {\n\t\t\tSystem.out.println(\"线程B拿到锁s！\");\n\t\t\ts.a=100;\n\t\t\tSystem.out.println(\"线程B  s.a = \" + s.a);\n\t\t}\n\t}\n\t\n}\n\n```\n\n```\npackage thread.deadLock.lock1;\n/**\n * ThreadA类\n * @author 陈浩翔\n *\n * 2016-4-22\n */\npublic class ThreadA implements Runnable{\n\tprivate S s = null;\n\tprivate Thread b = null;\n\t\n\tpublic ThreadA(S s,Thread b) {\n\t\tthis.b = b;\n\t\tthis.s = s;\n\t}\n\n\n\t@Override\n\tpublic  void run() {\n\t\tSystem.out.println(\"线程A在等待锁s！\");\n\t\tsynchronized (s) {\n\t\t\tSystem.out.println(\"线程A拿到锁s！\");\n\t\t\ttry {\n\t\t\t\t//调用b线程的运行代码。\n\t\t\t\t//但是此时的锁在a线程手里，b拿不到锁。\n\t\t\t\t//所以出现了，b等待a给锁，a就拿着锁等待b运行，所以出现了死锁！\n\t\t\t\tb.join();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(\"s.a = \" + s.a);\n\t\t}\n\t}\n\t\n}\n\n```\n运行结果只有一种情况，一定锁死！\n![](http://img.blog.csdn.net/20160422110207544)\n\n\n\n\n\n第二种情况：\n------\n\n2）互相持有对方所需的资源（即每个线程都需要同时拿到多个资源才能继续执行，而多个线程都处于：各持有一部分，在等待另一部分。）\n\n\n\n```\npackage thread.deadLock.lock2;\n/**\n * 资源类1\n * @author 陈浩翔\n *\n * 2016-4-22\n */\npublic class S1 {\n\tpublic int a =0;\n}\n\n```\n\n```\npackage thread.deadLock.lock2;\n/**\n * 资源类2\n * @author 陈浩翔\n *\n * 2016-4-22\n */\npublic class S2 {\n\tpublic int a =1;\n}\n\n```\n\n```\npackage thread.deadLock.lock2;\n/**\n * \n * @author 陈浩翔\n *\n * 2016-4-22\n */\npublic class DeadLock2 {\n\n\tpublic static void main(String[] args) {\n\t\t//如果要解决这种多资源出现的死锁，可以把多个资源打包成一个综合资源，\n\t\t//把综合资源变成一个对象锁,哪个线程一拿到锁就有全部资源了\n\t\t//在设计阶段就应该考虑到----把多线程中的每个线程所用的互斥资源图画出来\n\t\t//--从图中看出哪些线程存在共享互斥资源，然后分析是否可能存在死锁\n\t\t//这个死锁存在随机性！！！\n\t\t\n\t\tS1 s1 = new S1();\n\t\tS2 s2 = new S2();\n\t\t\n\t\tThread a = new Thread(new ThreadA(s1,s2));\n\t\tThread b = new Thread(new ThreadB(s1,s2));\n\t\t\n\t\ta.start();\n\t\tb.start();\n\t\t\n\t}\n\n}\n\n```\n\n```\npackage thread.deadLock.lock2;\n/**\n * ThreadA---a线程运行代码类\n * @author 陈浩翔\n *\n * 2016-4-22\n */\npublic class ThreadA implements Runnable{\n\tprivate S1 s1 = null;\n\tprivate S2 s2 = null;\n\t\n\t\n\tpublic ThreadA(S1 s1, S2 s2) {\n\t\tthis.s1 = s1;\n\t\tthis.s2 = s2;\n\t}\n\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"线程a在等待锁s1!\");\n\t\tsynchronized (s1) {//拿到了锁s1\n\t\t\tSystem.out.println(\"s1.a=\" + s1.a);\n\t\t\tSystem.out.println(\"线程a拿到了锁s1\");\n\t\t\tSystem.out.println(\"线程a在等待锁s2\");\n\t\t\tsynchronized (s2) {//拿到锁s2\n\t\t\t\tSystem.out.println(\"线程a拿到了锁s2\");\n\t\t\t\tSystem.out.println(\"s2.a=\" + s2.a);\n\t\t\t}//释放锁s2\n\t\t\tSystem.out.println(\"线程a释放了锁s2\");\n\t\t}//释放锁s1\n\t\t\n\t\t\n\t}\n\t\n}\n\n```\n\n```\npackage thread.deadLock.lock2;\n/**\n * ThreadB---b线程运行代码类\n * @author 陈浩翔\n *\n * 2016-4-22\n */\npublic class ThreadB implements Runnable{\n\tprivate S1 s1 = null;\n\tprivate S2 s2 = null;\n\t\n\t\n\t\n\tpublic ThreadB(S1 s1, S2 s2) {\n\t\tthis.s1 = s1;\n\t\tthis.s2 = s2;\n\t}\n\n\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"线程b在等待锁s2!\");\n\t\tsynchronized (s2) {//拿到了锁s2\n\t\t\tSystem.out.println(\"s2.a=\" + s2.a);\n\t\t\tSystem.out.println(\"线程b拿到了锁s2\");\n\t\t\tSystem.out.println(\"线程b在等待锁s1\");\n\t\t\tsynchronized (s1) {//拿到锁s1\n\t\t\t\tSystem.out.println(\"线程b拿到了锁s1\");\n\t\t\t\tSystem.out.println(\"s1.a=\" + s1.a);\n\t\t\t}//释放锁s1\n\t\t\tSystem.out.println(\"线程b释放了锁s1\");\n\t\t}//释放锁s2\n\t\t\n\t\t\n\t}\n\t\n}\n\n```\n\n这个情况下的死锁会出现2中情况：：\n\n第一种：没有死锁：\n这种情况的出现是因为可能a线程或者b线程抢到了cpu资源，一次就全部运行完了，这样，就不会出现死锁！\n\n![](http://img.blog.csdn.net/20160422110405621)\n\n第二种：出现了死锁：\n假如a线程拿到了s1的锁，还没有拿到s2的锁，\n这个时候s2的锁被b线程拿到了，b线程就开始等待s1锁，而s1锁在a线程手上，a线程就等s2锁啊，b线程就等s1锁，，，于是，出现了死锁！\n\n![](http://img.blog.csdn.net/20160422111335142)\n大家可以看到，这个死锁的情况下，程序并没有停止运行的，那个程序运行的红方块标志还亮着呢！\n前面那图没有出现死锁的情况下，程序运行一下就输出完了，红方块是暗的！\n\n总结：\n---\n\n\n★ 死锁的解决\n(死锁并没有解决的方案，只能从源头上去避免！)\n要从设计方面去解决避免，即在设计时就考虑不能出现死锁。\n罗列出所有临界资源，画分布图，从图中观察其中的死锁情况，改变其中线程的(临界)资源的获取方式。\n设计原则：尽量让程序中少出现临界资源。\n\n\n★ wait/notify 和 sleep方法\n\nwait和notify只能在它们被调用的实例的同步块内使用，而sleep()到处都可以用。\nwait()和sleep()最大的区别：sleep()不释放对象锁，而wait()会释放，因此从效率方面考虑wait()方法更好。\n\n\n★ 同步设计的基本原则\n ◎ 同步块中(synchronized修饰)的代码越小越好！\n ◎ 同步块中不要写阻塞性代码(如，InputStream.read() )！\n ◎ 在持有锁的时候，不要对其它对象调用方法。（如果做到，可以消除最常见的死锁源头。）\n\n\n★ 同步概述\n◎同步的原理：将需要同步的代码进行封装，并在该代码上加了一个锁。\n◎同步的好处：解决多线程的安全问题。\n◎同步的弊端：会降低性能。\n◎同步的前提：必须要保证有多个线程且它们在同步中使用的是同一个锁。\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-662-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-652] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-04\2016-04-22-Java---多线程之死锁.markdown [pool-662-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java---多线程之死锁》成功 [pool-662-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51286618 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-663] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51286618 [pool-663-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51286618,"title":"HDOJ(HDU) 2097 Sky数(进制)","create_at":"\/Date(1462000864000)\/","create":"2016-04-30 03:21:04","view_count":435,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"Problem Description \nSky从小喜欢奇特的东西，而且天生对数字特别敏感，一次偶然的机会，他发现了一个有趣的四位数2992，这个数，它的十进制数表示，其四位数字之和为2+9+9+2=22，它的十六进制数BB0，其四位数字之和也为22，同时它的十二进制数表示1894，其四位数字之和也为22，啊哈，真是巧啊。Sky非常喜欢这种四位数，由于他的发现，所以这里我们命名其为Sky数。但是要判","url":"http://blog.csdn.net/qq_26525215/article/details/51286618","categories":"❶ ACM,----- HDOJ-JAVA,❺ 算法及基础题,----- 进制相关","tags":"","content":"\u003cp\u003eProblem Description \u003cbr\u003e\nSky从小喜欢奇特的东西，而且天生对数字特别敏感，一次偶然的机会，他发现了一个有趣的四位数2992，这个数，它的十进制数表示，其四位数字之和为2+9+9+2=22，它的十六进制数BB0，其四位数字之和也为22，同时它的十二进制数表示1894，其四位数字之和也为22，啊哈，真是巧啊。Sky非常喜欢这种四位数，由于他的发现，所以这里我们命名其为Sky数。但是要判断这样的数还是有点麻烦啊，那么现在请你帮忙来判断任何一个十进制的四位数，是不是Sky数吧。\u003c/p\u003e\n\n\u003cp\u003eInput \u003cbr\u003e\n输入含有一些四位正整数，如果为0，则输入结束。\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n若n为Sky数，则输出“#n is a Sky Number.”，否则输出“#n is not a Sky Number.”。每个结果占一行。注意：#n表示所读入的n值。\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n2992 \u003cbr\u003e\n1234 \u003cbr\u003e\n0\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n2992 is a Sky Number. \u003cbr\u003e\n1234 is not a Sky Number.\u003c/p\u003e\n\n\u003cp\u003e用java的Integer类中的toString方法，很容易将一个10进制的数转换为其他进制的数。 \u003cbr\u003e\n慢慢的体验Java方法的强大吧。。。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003eimport java.util.Scanner;\n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e Main{\n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {\n        Scanner sc = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Scanner(System.\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e);\n        \u003cspan class=\"hljs-keyword\"\u003echar\u003c/span\u003e hex[] = {\u003cspan class=\"hljs-string\"\u003e\u0027a\u0027\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\u0027b\u0027\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\u0027c\u0027\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\u0027d\u0027\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\u0027e\u0027\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\u0027f\u0027\u003c/span\u003e};\n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(sc.hasNext()){\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e n10 = sc.nextInt();\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(n10==\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\n            }\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e b=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e c=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n            String strn16 = Integer.toString(n10, \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e);\n            String strn12 = Integer.toString(n10, \u003cspan class=\"hljs-number\"\u003e12\u003c/span\u003e);\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e k=n10;\n            \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(k!=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e){\n                a=a+k%\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n                k=k/\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;\n            }\n            \u003cspan class=\"hljs-comment\"\u003e//System.out.println(a);\u003c/span\u003e\n            boolean isNum = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;strn16.length();i++){\n                isNum = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;j&lt;hex.length;j++){\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(strn16.charAt(i)==hex[j]){\n                        b+=\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e+j;\n                        isNum=\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n                        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n                    }\n                }\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(isNum){\n                    b+=Integer.parseInt(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e+strn16.charAt(i));\n                }\n            }\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a!=b){\n                System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(n10+\u003cspan class=\"hljs-string\"\u003e\" is not a Sky Number.\"\u003c/span\u003e);\n                \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;\n            }\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;strn12.length();i++){\n                isNum = \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;j&lt;hex.length;j++){\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(strn12.charAt(i)==hex[j]){\n                        c+=\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e+j;\n                        isNum=\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\n                        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n                    }\n                }\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(isNum){\n                    c+=Integer.parseInt(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e+strn12.charAt(i));\n                }\n            }\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(a!=c){\n                System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(n10+\u003cspan class=\"hljs-string\"\u003e\" is not a Sky Number.\"\u003c/span\u003e);\n                \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;\n            }\n            System.\u003cspan class=\"hljs-keyword\"\u003eout\u003c/span\u003e.println(n10+\u003cspan class=\"hljs-string\"\u003e\" is a Sky Number.\"\u003c/span\u003e);\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Problem Description\nSky从小喜欢奇特的东西，而且天生对数字特别敏感，一次偶然的机会，他发现了一个有趣的四位数2992，这个数，它的十进制数表示，其四位数字之和为2+9+9+2=22，它的十六进制数BB0，其四位数字之和也为22，同时它的十二进制数表示1894，其四位数字之和也为22，啊哈，真是巧啊。Sky非常喜欢这种四位数，由于他的发现，所以这里我们命名其为Sky数。但是要判断这样的数还是有点麻烦啊，那么现在请你帮忙来判断任何一个十进制的四位数，是不是Sky数吧。\n\n \n\nInput\n输入含有一些四位正整数，如果为0，则输入结束。\n\n \n\nOutput\n若n为Sky数，则输出“#n is a Sky Number.”，否则输出“#n is not a Sky Number.”。每个结果占一行。注意：#n表示所读入的n值。\n\n \n\nSample Input\n2992\n1234\n0\n \n\nSample Output\n2992 is a Sky Number.\n1234 is not a Sky Number.\n\n\n用java的Integer类中的toString方法，很容易将一个10进制的数转换为其他进制的数。\n慢慢的体验Java方法的强大吧。。。\n\n```\nimport java.util.Scanner;\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tchar hex[] = {\u0027a\u0027,\u0027b\u0027,\u0027c\u0027,\u0027d\u0027,\u0027e\u0027,\u0027f\u0027};\n\t\twhile(sc.hasNext()){\n\t\t\tint n10 = sc.nextInt();\n\t\t\tif(n10==0){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint a=0;\n\t\t\tint b=0;\n\t\t\tint c=0;\n\t\t\tString strn16 = Integer.toString(n10, 16);\n\t\t\tString strn12 = Integer.toString(n10, 12);\n\t\t\tint k=n10;\n\t\t\twhile(k!=0){\n\t\t\t\ta=a+k%10;\n\t\t\t\tk=k/10;\n\t\t\t}\n\t\t\t//System.out.println(a);\n\t\t\tboolean isNum = true;\n\t\t\tfor(int i=0;i\u003cstrn16.length();i++){\n\t\t\t\tisNum = true;\n\t\t\t\tfor(int j=0;j\u003chex.length;j++){\n\t\t\t\t\tif(strn16.charAt(i)==hex[j]){\n\t\t\t\t\t\tb+=10+j;\n\t\t\t\t\t\tisNum=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(isNum){\n\t\t\t\t\tb+=Integer.parseInt(\"\"+strn16.charAt(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(a!=b){\n\t\t\t\tSystem.out.println(n10+\" is not a Sky Number.\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(int i=0;i\u003cstrn12.length();i++){\n\t\t\t\tisNum = true;\n\t\t\t\tfor(int j=0;j\u003chex.length;j++){\n\t\t\t\t\tif(strn12.charAt(i)==hex[j]){\n\t\t\t\t\t\tc+=10+j;\n\t\t\t\t\t\tisNum=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(isNum){\n\t\t\t\t\tc+=Integer.parseInt(\"\"+strn12.charAt(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(a!=c){\n\t\t\t\tSystem.out.println(n10+\" is not a Sky Number.\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSystem.out.println(n10+\" is a Sky Number.\");\n\t\t}\n\t}\n}\n\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-663-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-04\2016-04-30-HDOJ(HDU) 2097 Sky数(进制).markdown [pool-663-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ(HDU) 2097 Sky数(进制)》成功 [pool-663-thread-1] [chx]
[INFO] 2017-07-28 12:29:24 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-653] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:48029307 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:25 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-664] [chx]
[INFO] 2017-07-28 12:29:25 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=48029307 [pool-664-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":48029307,"title":"HDOJ1253 胜利大逃亡 BFS","create_at":"\/Date(1440663144000)\/","create":"2015-08-27 04:12:24","view_count":756,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":1,"bury":0,"description":"胜利大逃亡 \nTime Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others) \nTotal Submission(s): 29528    Accepted Submission(s): 11136Problem Description \nIgnatius被魔王抓走了,有一天魔王出差去了,这可是I","url":"http://blog.csdn.net/qq_26525215/article/details/48029307","categories":"❶ ACM,----- HDOJ-C++,❺ 算法及基础题,----- 递归搜索回溯","tags":"bfs","content":"\u003cp\u003e胜利大逃亡 \u003cbr\u003e\nTime Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others) \u003cbr\u003e\nTotal Submission(s): 29528    Accepted Submission(s): 11136\u003c/p\u003e\n\n\u003cp\u003eProblem Description \u003cbr\u003e\nIgnatius被魔王抓走了,有一天魔王出差去了,这可是Ignatius逃亡的好机会.\u003c/p\u003e\n\n\u003cp\u003e魔王住在一个城堡里,城堡是一个A*B*C的立方体,可以被表示成A个B*C的矩阵,刚开始Ignatius被关在(0,0,0)的位置,离开城堡的门在(A-1,B-1,C-1)的位置,现在知道魔王将在T分钟后回到城堡,Ignatius每分钟能从一个坐标走到相邻的六个坐标中的其中一个.现在给你城堡的地图,请你计算出Ignatius能否在魔王回来前离开城堡(只要走到出口就算离开城堡,如果走到出口的时候魔王刚好回来也算逃亡成功),如果可以请输出需要多少分钟才能离开,如果不能则输出-1. \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20150828102336698\" alt=\"\" title=\"\"\u003e \u003cbr\u003e\nInput \u003cbr\u003e\n输入数据的第一行是一个正整数K,表明测试数据的数量.每组测试数据的第一行是四个正整数A,B,C和T(1&lt;=A,B,C&lt;=50,1&lt;=T&lt;=1000),它们分别代表城堡的大小和魔王回来的时间.然后是A块输入数据(先是第0块,然后是第1块,第2块……),每块输入数据有B行,每行有C个正整数,代表迷宫的布局,其中0代表路,1代表墙.(如果对输入描述不清楚,可以参考Sample Input中的迷宫描述,它表示的就是上图中的迷宫)\u003c/p\u003e\n\n\u003cp\u003e特别注意:本题的测试数据非常大,请使用scanf输入,我不能保证使用cin能不超时.在本OJ上请使用Visual C++提交.\u003c/p\u003e\n\n\u003cp\u003eOutput \u003cbr\u003e\n对于每组测试数据,如果Ignatius能够在魔王回来前离开城堡,那么请输出他最少需要多少分钟,否则输出-1.\u003c/p\u003e\n\n\u003cp\u003eSample Input \u003cbr\u003e\n1 \u003cbr\u003e\n3 3 4 20 \u003cbr\u003e\n0 1 1 1 \u003cbr\u003e\n0 0 1 1 \u003cbr\u003e\n0 1 1 1 \u003cbr\u003e\n1 1 1 1 \u003cbr\u003e\n1 0 0 1 \u003cbr\u003e\n0 1 1 1 \u003cbr\u003e\n0 0 0 0 \u003cbr\u003e\n0 1 1 0 \u003cbr\u003e\n0 1 1 0\u003c/p\u003e\n\n\u003cp\u003eSample Output \u003cbr\u003e\n11\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\n#include&lt;memory.h&gt;\n#include &lt;queue&gt;\n#include&lt;algorithm&gt;\n#include&lt;string.h&gt;\n#include&lt;stdio.h&gt;\n#define N \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e\nusing namespace std;\nstruct node\n{\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e x,y,z;\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e time;\n};\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e directions[\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e][\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]={{\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e},{\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e},{\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e},{-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e},{\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e},{\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e}};\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e a,b,c,t;\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e map[N][N][N];\nnode my,cur,nextt;\n\u003cspan class=\"hljs-comment\"\u003e//用next提交会ce，不能用next的原因是，next可能是其他意思\u003c/span\u003e\n\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e BFS(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e x,\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e y,\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e z)\n{\n\n    queue&lt;node&gt;q;\u003cspan class=\"hljs-javadoc\"\u003e/**queue类是为程序员提供了一个队列的功能的容器适配器，\n    具体而言，一个FIFO（先入先出）的数据结构**/\u003c/span\u003e\n    my.x=x;\n    my.y=y;\n    my.z=z;\n    my.time=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    q.push(my);\u003cspan class=\"hljs-javadoc\"\u003e/**push()会将一个元素置入queue中。**/\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(!q.empty())\u003cspan class=\"hljs-javadoc\"\u003e/**empty()判断队列空，当队列空时，返回true。**/\u003c/span\u003e\n    {\n        cur=q.front();\u003cspan class=\"hljs-javadoc\"\u003e/**front()会返回queue内的第一个元素(也就是第一个被置入的元素)。**/\u003c/span\u003e\n        q.pop();\n        \u003cspan class=\"hljs-javadoc\"\u003e/**pop()会从queue中移除一个元素。\n注意：pop()虽然会移除下一个元素，但是并不返回它，\nfront()和back()返回下一个元素但并不移除该元素。**/\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;\u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e;i++)\n        {\n            nextt.x=cur.x+directions[i][\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e];\n            nextt.y=cur.y+directions[i][\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\n            nextt.z=cur.z+directions[i][\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(nextt.x&lt;a&amp;&amp;nextt.y&lt;b&amp;&amp;nextt.z&lt;c&amp;&amp;nextt.x&gt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e&amp;&amp;nextt.y&gt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e&amp;&amp;nextt.z&gt;=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e&amp;&amp;map[nextt.x][nextt.y][nextt.z]!=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e&amp;&amp;nextt.time&lt;=t)\n            {\n\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(nextt.x==a-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e&amp;&amp;nextt.y==b-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e&amp;&amp;nextt.z==c-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)  \u003cspan class=\"hljs-javadoc\"\u003e/**如果找到了出口 返回当前走的步数**/\u003c/span\u003e\n                    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e cur.time+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n                nextt.time=cur.time+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;                       \u003cspan class=\"hljs-javadoc\"\u003e/**下一步可以走该方向，将该方向的信息完善后打入队列中**/\u003c/span\u003e\n                q.push(nextt);\u003cspan class=\"hljs-javadoc\"\u003e/**push()会将一个元素置入queue中。**/\u003c/span\u003e\n                map[nextt.x][nextt.y][nextt.z]=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;              \u003cspan class=\"hljs-javadoc\"\u003e/**标记一下该方向的节点已经走过**/\u003c/span\u003e\n            }\n        }\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e -\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n}\n\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e main()\n{\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e sum,i,j,x,k;\n    scanf(\u003cspan class=\"hljs-string\"\u003e\"%d\"\u003c/span\u003e,&amp;x);\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(x--)\n    {\n        scanf(\u003cspan class=\"hljs-string\"\u003e\"%d%d%d%d\"\u003c/span\u003e,&amp;a,&amp;b,&amp;c,&amp;t);\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(i=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;i&lt;a;i++)\n                {\n                    \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(k=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;k&lt;b;k++)\n                    {\n                        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(j=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;j&lt;c;j++)\n                        {\n                            scanf(\u003cspan class=\"hljs-string\"\u003e\"%d\"\u003c/span\u003e,&amp;map[i][k][j]);\n                        }\n                    }\n                }\n        sum=BFS(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n        printf(\u003cspan class=\"hljs-string\"\u003e\"%d\\n\"\u003c/span\u003e,sum);\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"胜利大逃亡\nTime Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)\nTotal Submission(s): 29528    Accepted Submission(s): 11136\n\n\nProblem Description\nIgnatius被魔王抓走了,有一天魔王出差去了,这可是Ignatius逃亡的好机会.\n\n魔王住在一个城堡里,城堡是一个A*B*C的立方体,可以被表示成A个B*C的矩阵,刚开始Ignatius被关在(0,0,0)的位置,离开城堡的门在(A-1,B-1,C-1)的位置,现在知道魔王将在T分钟后回到城堡,Ignatius每分钟能从一个坐标走到相邻的六个坐标中的其中一个.现在给你城堡的地图,请你计算出Ignatius能否在魔王回来前离开城堡(只要走到出口就算离开城堡,如果走到出口的时候魔王刚好回来也算逃亡成功),如果可以请输出需要多少分钟才能离开,如果不能则输出-1.\n![](http://img.blog.csdn.net/20150828102336698)\nInput\n输入数据的第一行是一个正整数K,表明测试数据的数量.每组测试数据的第一行是四个正整数A,B,C和T(1\u003c=A,B,C\u003c=50,1\u003c=T\u003c=1000),它们分别代表城堡的大小和魔王回来的时间.然后是A块输入数据(先是第0块,然后是第1块,第2块......),每块输入数据有B行,每行有C个正整数,代表迷宫的布局,其中0代表路,1代表墙.(如果对输入描述不清楚,可以参考Sample Input中的迷宫描述,它表示的就是上图中的迷宫)\n\n特别注意:本题的测试数据非常大,请使用scanf输入,我不能保证使用cin能不超时.在本OJ上请使用Visual C++提交.\n\n \n\nOutput\n对于每组测试数据,如果Ignatius能够在魔王回来前离开城堡,那么请输出他最少需要多少分钟,否则输出-1.\n\n \n\nSample Input\n1\n3 3 4 20\n0 1 1 1\n0 0 1 1\n0 1 1 1\n1 1 1 1\n1 0 0 1\n0 1 1 1\n0 0 0 0\n0 1 1 0\n0 1 1 0\n \n\nSample Output\n11\n \n \n\n```\n#include \u003ciostream\u003e\n#include \u003cstdio.h\u003e\n#include\u003cmemory.h\u003e\n#include \u003cqueue\u003e\n#include\u003calgorithm\u003e\n#include\u003cstring.h\u003e\n#include\u003cstdio.h\u003e\n#define N 50\nusing namespace std;\nstruct node\n{\n    int x,y,z;\n    int time;\n};\nint directions[6][3]={{1,0,0},{0,1,0},{0,0,1},{-1,0,0},{0,-1,0},{0,0,-1}};\nint a,b,c,t;\nint map[N][N][N];\nnode my,cur,nextt;\n//用next提交会ce，不能用next的原因是，next可能是其他意思\n\nint BFS(int x,int y,int z)\n{\n\n    queue\u003cnode\u003eq;/**queue类是为程序员提供了一个队列的功能的容器适配器，\n    具体而言，一个FIFO（先入先出）的数据结构**/\n    my.x=x;\n    my.y=y;\n    my.z=z;\n    my.time=0;\n    q.push(my);/**push()会将一个元素置入queue中。**/\n    while(!q.empty())/**empty()判断队列空，当队列空时，返回true。**/\n    {\n        cur=q.front();/**front()会返回queue内的第一个元素(也就是第一个被置入的元素)。**/\n        q.pop();\n        /**pop()会从queue中移除一个元素。\n注意：pop()虽然会移除下一个元素，但是并不返回它，\nfront()和back()返回下一个元素但并不移除该元素。**/\n        for(int i=0;i\u003c6;i++)\n        {\n            nextt.x=cur.x+directions[i][0];\n            nextt.y=cur.y+directions[i][1];\n            nextt.z=cur.z+directions[i][2];\n            if(nextt.x\u003ca&&nextt.y\u003cb&&nextt.z\u003cc&&nextt.x\u003e=0&&nextt.y\u003e=0&&nextt.z\u003e=0&&map[nextt.x][nextt.y][nextt.z]!=1&&nextt.time\u003c=t)\n            {\n\n                if(nextt.x==a-1&&nextt.y==b-1&&nextt.z==c-1)  /**如果找到了出口 返回当前走的步数**/\n                    return cur.time+1;\n                nextt.time=cur.time+1;                       /**下一步可以走该方向，将该方向的信息完善后打入队列中**/\n                q.push(nextt);/**push()会将一个元素置入queue中。**/\n                map[nextt.x][nextt.y][nextt.z]=1;              /**标记一下该方向的节点已经走过**/\n            }\n        }\n    }\n    return -1;\n}\n\nint main()\n{\n    int sum,i,j,x,k;\n    scanf(\"%d\",&x);\n    while(x--)\n    {\n        scanf(\"%d%d%d%d\",&a,&b,&c,&t);\n            for(i=0;i\u003ca;i++)\n                {\n                    for(k=0;k\u003cb;k++)\n                    {\n                        for(j=0;j\u003cc;j++)\n                        {\n                            scanf(\"%d\",&map[i][k][j]);\n                        }\n                    }\n                }\n        sum=BFS(0,0,0);\n        printf(\"%d\\n\",sum);\n    }\n\n    return 0;\n}\n\n```\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-664-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-654] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2015-08\2015-08-27-HDOJ1253 胜利大逃亡 BFS.markdown [pool-664-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《HDOJ1253 胜利大逃亡 BFS》成功 [pool-664-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51333789 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:25 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-665] [chx]
[INFO] 2017-07-28 12:29:25 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51333789 [pool-665-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51333789,"title":"Java---获得系统窗口的分辨率","create_at":"\/Date(1462530847000)\/","create":"2016-05-06 06:34:07","view_count":1945,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":1,"bury":0,"description":"//获得系统屏幕分辨率\n//得到当前屏幕的分辨率：Toolkit.getDafaultToolkit().getScreenSize()Toolkit t = Toolkit.getDefaultToolkit() ;\nDimension size=t.getScreenSize(); \n//如果系统屏幕分辨率是1024*768时，\n//size.getWidth()的值为1024\n//size.g","url":"http://blog.csdn.net/qq_26525215/article/details/51333789","categories":"❷ Java大学之行,----- ③、Java知识点及应用","tags":"","content":"\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e//获得系统屏幕分辨率\n//得到当前屏幕的分辨率：Toolkit\u003cspan class=\"hljs-preprocessor\"\u003e.getDafaultToolkit\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.getScreenSize\u003c/span\u003e()\n\nToolkit t = Toolkit\u003cspan class=\"hljs-preprocessor\"\u003e.getDefaultToolkit\u003c/span\u003e() \u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nDimension size=t\u003cspan class=\"hljs-preprocessor\"\u003e.getScreenSize\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e; \u003c/span\u003e\n\n\n//如果系统屏幕分辨率是\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e*\u003cspan class=\"hljs-number\"\u003e768\u003c/span\u003e时，\n//size\u003cspan class=\"hljs-preprocessor\"\u003e.getWidth\u003c/span\u003e()的值为\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e\n//size\u003cspan class=\"hljs-preprocessor\"\u003e.getHeight\u003c/span\u003e()的值为\u003cspan class=\"hljs-number\"\u003e768\u003c/span\u003e。\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"```\n//获得系统屏幕分辨率\n//得到当前屏幕的分辨率：Toolkit.getDafaultToolkit().getScreenSize()\n\nToolkit t = Toolkit.getDefaultToolkit() ;\nDimension size=t.getScreenSize(); \n\n\n//如果系统屏幕分辨率是1024*768时，\n//size.getWidth()的值为1024\n//size.getHeight()的值为768。\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-665-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-05\2016-05-06-Java---获得系统窗口的分辨率.markdown [pool-665-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java---获得系统窗口的分辨率》成功 [pool-665-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-655] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:52164182 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:25 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-666] [chx]
[INFO] 2017-07-28 12:29:25 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=52164182 [pool-666-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":52164182,"title":"MySQL---数据库从入门走向大神系列(八)-在java中执行MySQL的存储过程","create_at":"\/Date(1470767325000)\/","create":"2016-08-10 02:28:45","view_count":10315,"comment_count":1,"comment_allowed":"true","type":"original","channel":6,"digg":1,"bury":0,"description":"http://blog.csdn.net/qq_26525215/article/details/52143733在上面链接的博客中，写了如何用MySQL语句定义和执行存储过程Java执行存储过程：准备表stud：列类型分别为： \nvarchar,varchar,int定义的存储过程分别为：p1:-无参delimiter &&\ncreate procedure p1()\nbegin\n    inse","url":"http://blog.csdn.net/qq_26525215/article/details/52164182","categories":"❷ Java大学之行,----- ⑤、数据库","tags":"数据库,mysql,java,存储","content":"\u003cp\u003e\u003ca href=\"http://blog.csdn.net/qq_26525215/article/details/52143733\"\u003ehttp://blog.csdn.net/qq_26525215/article/details/52143733\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e在上面链接的博客中，写了如何用MySQL语句定义和执行存储过程\u003c/p\u003e\n\n\n\n\u003ch1 id=\"java执行存储过程\"\u003eJava执行存储过程：\u003c/h1\u003e\n\n\u003cp\u003e准备表stud：\u003c/p\u003e\n\n\u003cp\u003e列类型分别为： \u003cbr\u003e\nvarchar,varchar,int\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160809232759205\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003ch2 id=\"定义的存储过程分别为\"\u003e定义的存储过程分别为：\u003c/h2\u003e\n\n\u003cp\u003ep1:-无参\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs oxygene\"\u003edelimiter &amp;&amp;\n\u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprocedure\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ep1\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\n\u003cspan class=\"hljs-title\"\u003ebegin\u003c/span\u003e\n    \u003cspan class=\"hljs-title\"\u003einsert\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003einto\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003estud\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003evalues\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-string\"\u003e\u0027P100\u0027\u003c/span\u003e,\u003cspan class=\"hljs-string\"\u003e\u0027小李\u0027\u003c/span\u003e,43)\u003c/span\u003e;\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eselect\u003c/span\u003e * \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e stud;\n\u003cspan class=\"hljs-keyword\"\u003eend\u003c/span\u003e&amp;&amp;\ndelimiter ;\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ep2:-输入参数\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs oxygene\"\u003edelimiter &amp;&amp;\n\u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprocedure\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ep2\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e id varchar(32)\u003c/span\u003e,\u003cspan class=\"hljs-title\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esname\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003evarchar\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(32)\u003c/span\u003e,\u003cspan class=\"hljs-title\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eage\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eint\u003c/span\u003e)\n\u003cspan class=\"hljs-title\"\u003ebegin\u003c/span\u003e\n    \u003cspan class=\"hljs-title\"\u003einsert\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003einto\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003estud\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003evalues\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(id,sname,age)\u003c/span\u003e;\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eselect\u003c/span\u003e * \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e stud;\n\u003cspan class=\"hljs-keyword\"\u003eend\u003c/span\u003e &amp;&amp;\ndelimiter ;\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ep3:-输入输出参数：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003edelimiter &amp;&amp;\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eprocedure\u003c/span\u003e p3(\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e id \u003cspan class=\"hljs-keyword\"\u003evarchar\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e32\u003c/span\u003e) ,\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e sname \u003cspan class=\"hljs-keyword\"\u003evarchar\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e32\u003c/span\u003e),\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e age \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e ,out num \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e)\n\u003cspan class=\"hljs-keyword\"\u003ebegin\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003einsert\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e stud \u003cspan class=\"hljs-keyword\"\u003evalues\u003c/span\u003e(id,sname,age);\u003c/span\u003e\n    \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eselect\u003c/span\u003e * \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e stud;\u003c/span\u003e\n    \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-aggregate\"\u003ecount\u003c/span\u003e(*) \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e num \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e stud;\u003c/span\u003e\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eend\u003c/span\u003e&amp;&amp;\ndelimiter ;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch2 id=\"java演示执行不带参数的存储过程\"\u003eJava演示执行不带参数的存储过程：\u003c/h2\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e@Test\n    public void callProcedureDemo() throws Exception{\n        Connection con = ConnFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getConnection\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        String sql = \u003cspan class=\"hljs-string\"\u003e\"call p1()\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        CallableStatement cst = con\u003cspan class=\"hljs-preprocessor\"\u003e.prepareCall\u003c/span\u003e(sql)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        ResultSet rs = cst\u003cspan class=\"hljs-preprocessor\"\u003e.executeQuery\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        while(rs\u003cspan class=\"hljs-preprocessor\"\u003e.next\u003c/span\u003e()){\n            System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(rs\u003cspan class=\"hljs-preprocessor\"\u003e.getString\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+rs\u003cspan class=\"hljs-preprocessor\"\u003e.getString\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e)+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+rs\u003cspan class=\"hljs-preprocessor\"\u003e.getInt\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n    }\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e演示结果：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160810012502711\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003ch2 id=\"java演示执行带输入参数的存储过程\"\u003eJava演示执行带输入参数的存储过程：\u003c/h2\u003e\n\n\u003cp\u003e构造 call 转义序列时，请使用 ?（问号）字符来指定 IN 参数。此字符充当要传递给该存储过程的参数值的占位符。\u003c/p\u003e\n\n\u003cp\u003e可以使用 SQLServerPreparedStatement 类的 setter 方法之一为参数指定值。可使用的 setter 方法由 IN 参数的数据类型决定。\u003c/p\u003e\n\n\u003cp\u003e向 setter 方法传递值时，不仅需要指定要在参数中使用的实际值，还必须指定参数在存储过程中的序数位置。例如，如果存储过程包含单个 IN 参数，则其序数值为 1。如果存储过程包含两个参数，则第一个序数值为 1，第二个序数值为 2。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e@Test//带输入参数\n    public void callProcedureDemo2() throws Exception{\n        Connection con = ConnFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getConnection\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        String sql=\u003cspan class=\"hljs-string\"\u003e\"call p2(?,?,?)\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        CallableStatement cst = con\u003cspan class=\"hljs-preprocessor\"\u003e.prepareCall\u003c/span\u003e(sql)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        cst\u003cspan class=\"hljs-preprocessor\"\u003e.setString\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"P110\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        cst\u003cspan class=\"hljs-preprocessor\"\u003e.setString\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"段誉\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        cst\u003cspan class=\"hljs-preprocessor\"\u003e.setInt\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e43\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        ResultSet rs = cst\u003cspan class=\"hljs-preprocessor\"\u003e.executeQuery\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        while(rs\u003cspan class=\"hljs-preprocessor\"\u003e.next\u003c/span\u003e()){\n            System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(rs\u003cspan class=\"hljs-preprocessor\"\u003e.getString\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+rs\u003cspan class=\"hljs-preprocessor\"\u003e.getString\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e)+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+rs\u003cspan class=\"hljs-preprocessor\"\u003e.getInt\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n    }\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e演示结果：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160810020514983\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch2 id=\"java演示执行带输入输出参数的存储过程\"\u003eJava演示执行带输入输出参数的存储过程：\u003c/h2\u003e\n\n\u003cp\u003e构造 call 转义序列时，请使用 ?(问号)字符来指定 OUT 参数。 \u003cbr\u003e\n此字符充当要从该存储过程返回的参数值的占位符。 \u003cbr\u003e\n要为 OUT 参数指定值，必须在运行存储过程前使用 SQLServerCallableStatement 类的 registerOutParameter 方法指定各参数的数据类型。\u003c/p\u003e\n\n\u003cp\u003e使用 registerOutParameter 方法为 OUT 参数指定的值必须是 java.sql.Types 所包含的 JDBC 数据类型之一，而它又被映射成本地 SQL Server 数据类型之一。有关 JDBC 和 SQL Server 数据类型的详细信息，请参阅了解 JDBC 驱动程序数据类型。\u003c/p\u003e\n\n\u003cp\u003e当您对于 OUT 参数向 registerOutParameter 方法传递一个值时，不仅必须指定要用于此参数的数据类型，而且必须在存储过程中指定此参数的序号位置或此参数的名称。例如，如果存储过程包含单个 OUT 参数，则其序数值为 1;如果存储过程包含两个参数，则第一个序数值为 1，第二个序数值为 2。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e@Test//带输入输出参数-----第\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e个参数 是 输出参数\n    public void callProcedureDemo3() throws Exception{\n        Connection con = ConnFactory\u003cspan class=\"hljs-preprocessor\"\u003e.getConnection\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        String sql = \u003cspan class=\"hljs-string\"\u003e\"call p3(?,?,?,?)\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        CallableStatement cst =con\u003cspan class=\"hljs-preprocessor\"\u003e.prepareCall\u003c/span\u003e(sql)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        cst\u003cspan class=\"hljs-preprocessor\"\u003e.setString\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"P102\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        cst\u003cspan class=\"hljs-preprocessor\"\u003e.setString\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"小凯\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        cst\u003cspan class=\"hljs-preprocessor\"\u003e.setInt\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //将指定序号位置的 \u003cspan class=\"hljs-keyword\"\u003eOUT\u003c/span\u003e 参数注册为给定的JDBC 类型。\n        cst\u003cspan class=\"hljs-preprocessor\"\u003e.registerOutParameter\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e, Types\u003cspan class=\"hljs-preprocessor\"\u003e.INTEGER\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        cst\u003cspan class=\"hljs-preprocessor\"\u003e.execute\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //获取输出的参数\n        int count = cst\u003cspan class=\"hljs-preprocessor\"\u003e.getInt\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(count)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160810022202084\" alt=\"\" title=\"\"\u003e\u003c/p\u003e","markdowncontent":"\n\nhttp://blog.csdn.net/qq_26525215/article/details/52143733\n\n在上面链接的博客中，写了如何用MySQL语句定义和执行存储过程\n\nJava执行存储过程：\n================\n准备表stud：\n\n列类型分别为：\nvarchar,varchar,int\n\n![](http://img.blog.csdn.net/20160809232759205)\n\n定义的存储过程分别为：\n---------------------\np1:-无参\n```\ndelimiter &&\ncreate procedure p1()\nbegin\n    insert into stud values(\u0027P100\u0027,\u0027小李\u0027,43);\n    select * from stud;\nend&&\ndelimiter ;\n```\np2:-输入参数\n\n```\ndelimiter &&\ncreate procedure p2(in id varchar(32),in sname varchar(32),in age int)\nbegin\n    insert into stud values(id,sname,age);\n    select * from stud;\nend &&\ndelimiter ;\n```\np3:-输入输出参数：\n\n```\ndelimiter &&\ncreate procedure p3(in id varchar(32) ,in sname varchar(32),in age int ,out num int)\nbegin\n    insert into stud values(id,sname,age);\n    select * from stud;\n    select count(*) into num from stud;\nend&&\ndelimiter ;\n```\n\nJava演示执行不带参数的存储过程：\n-----------------------------------\n\n```\n@Test\n\tpublic void callProcedureDemo() throws Exception{\n\t\tConnection con = ConnFactory.getConnection();\n\t\t\n\t\tString sql = \"call p1()\";\n\t\tCallableStatement cst = con.prepareCall(sql);\n\t\t\n\t\tResultSet rs = cst.executeQuery();\n\t\t\n\t\twhile(rs.next()){\n\t\t\tSystem.out.println(rs.getString(1)+\",\"+rs.getString(2)+\",\"+rs.getInt(3));\n\t\t}\n\t}\n```\n\n演示结果：\n\n![](http://img.blog.csdn.net/20160810012502711)\n\n\nJava演示执行带输入参数的存储过程：\n-----------------------------------\n\n构造 call 转义序列时，请使用 ?（问号）字符来指定 IN 参数。此字符充当要传递给该存储过程的参数值的占位符。\n\n可以使用 SQLServerPreparedStatement 类的 setter 方法之一为参数指定值。可使用的 setter 方法由 IN 参数的数据类型决定。\n\n向 setter 方法传递值时，不仅需要指定要在参数中使用的实际值，还必须指定参数在存储过程中的序数位置。例如，如果存储过程包含单个 IN 参数，则其序数值为 1。如果存储过程包含两个参数，则第一个序数值为 1，第二个序数值为 2。\n\n```\n@Test//带输入参数\n\tpublic void callProcedureDemo2() throws Exception{\n\t\tConnection con = ConnFactory.getConnection();\n\t\t\n\t\tString sql=\"call p2(?,?,?)\";\n\t\t\n\t\tCallableStatement cst = con.prepareCall(sql);\n\t\t\n\t\tcst.setString(1, \"P110\");\n\t\tcst.setString(2, \"段誉\");\n\t\tcst.setInt(3, 43);\n\t\t\n\t\tResultSet rs = cst.executeQuery();\n\t\twhile(rs.next()){\n\t\t\tSystem.out.println(rs.getString(1)+\",\"+rs.getString(2)+\",\"+rs.getInt(3));\n\t\t}\n\t}\n```\n\n演示结果：\n\n![](http://img.blog.csdn.net/20160810020514983)\n\nJava演示执行带输入输出参数的存储过程：\n-----------------------------------------\n\n构造 call 转义序列时，请使用 ?(问号)字符来指定 OUT 参数。\n此字符充当要从该存储过程返回的参数值的占位符。\n要为 OUT 参数指定值，必须在运行存储过程前使用 SQLServerCallableStatement 类的 registerOutParameter 方法指定各参数的数据类型。\n\n使用 registerOutParameter 方法为 OUT 参数指定的值必须是 java.sql.Types 所包含的 JDBC 数据类型之一，而它又被映射成本地 SQL Server 数据类型之一。有关 JDBC 和 SQL Server 数据类型的详细信息，请参阅了解 JDBC 驱动程序数据类型。\n\n当您对于 OUT 参数向 registerOutParameter 方法传递一个值时，不仅必须指定要用于此参数的数据类型，而且必须在存储过程中指定此参数的序号位置或此参数的名称。例如，如果存储过程包含单个 OUT 参数，则其序数值为 1;如果存储过程包含两个参数，则第一个序数值为 1，第二个序数值为 2。\n\n\n\n```\n@Test//带输入输出参数-----第4个参数 是 输出参数\n\tpublic void callProcedureDemo3() throws Exception{\n\t\tConnection con = ConnFactory.getConnection();\n\t\t\n\t\tString sql = \"call p3(?,?,?,?)\";\n\t\t\n\t\tCallableStatement cst =con.prepareCall(sql);\n\t\t\n\t\tcst.setString(1, \"P102\");\n\t\tcst.setString(2, \"小凯\");\n\t\tcst.setInt(3, 23);\n\t\t\n\t\t//将指定序号位置的 OUT 参数注册为给定的JDBC 类型。\n\t\tcst.registerOutParameter(4, Types.INTEGER);\n\t\t\n\t\tcst.execute();\n\t\t\n\t\t//获取输出的参数\n\t\tint count = cst.getInt(4);\n\t\tSystem.out.println(count);\n\t}\n\t\n```\n\n![](http://img.blog.csdn.net/20160810022202084)\n\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-666-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-08\2016-08-10-MySQL---数据库从入门走向大神系列(八)-在java中执行MySQL的存储过程.markdown [pool-666-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《MySQL---数据库从入门走向大神系列(八)-在java中执行MySQL的存储过程》成功 [pool-666-thread-1] [chx]
[INFO] 2017-07-28 12:29:25 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-656] [chx]
[INFO] 2017-07-28 12:29:26 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51832369 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:26 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-667] [chx]
[INFO] 2017-07-28 12:29:26 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-657] [chx]
[INFO] 2017-07-28 12:29:26 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51832369 [pool-667-thread-1] [chx]
[INFO] 2017-07-28 12:29:26 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51832369,"title":"Java---XML的解析(2)-DOM4J解析/Xpath","create_at":"\/Date(1467706613000)\/","create":"2016-07-05 04:16:53","view_count":5682,"comment_count":0,"comment_allowed":"true","type":"original","channel":14,"digg":1,"bury":0,"description":"Dom4j:  \nDom　SUN \ndom在加载时，将所有元素全部加载内存 \nDOM4j  - 第三方。Dom4j是一个开源、灵活的XML API。 \n目前很多开源框架如struts,hibernate都使用dom4j做为解析其xml的工具。 \n支持文档的读写功能和Xpath快速查询操作。这个需要我们自己把它的包导入myeclipse中的。 \n准备DOM4j： \n包：dom4j.x.jar \n包结构","url":"http://blog.csdn.net/qq_26525215/article/details/51832369","categories":"❷ Java大学之行,----- ④、Web学习之旅,----- ----- JSP/XML知识点,----- ⑥、框架/第三方工具","tags":"xml,api,xpath,dom4j","content":"\u003cp\u003eDom4j:  \u003cbr\u003e\nDom　SUN \u003cbr\u003e\ndom在加载时，将所有元素全部加载内存 \u003cbr\u003e\nDOM4j  - 第三方。\u003c/p\u003e\n\n\u003cp\u003eDom4j是一个开源、灵活的XML API。 \u003cbr\u003e\n目前很多开源框架如struts,hibernate都使用dom4j做为解析其xml的工具。 \u003cbr\u003e\n支持文档的读写功能和Xpath快速查询操作。\u003c/p\u003e\n\n\u003cp\u003e这个需要我们自己把它的包导入myeclipse中的。 \u003cbr\u003e\n准备DOM4j： \u003cbr\u003e\n包：dom4j.x.jar \u003cbr\u003e\n包结构： \u003cbr\u003e\norg.dom4j \u003cbr\u003e\n类 \u003cbr\u003e\norg.dom4j.io.SAXReader –  xml文档解析器 \u003cbr\u003e\norg.dom4j.Document、Element　–　文档对像 \u003cbr\u003e\n需要知道的 Element的一些方法 \u003cbr\u003e\n\u003cfont color=\"red\"\u003eElement.element(“name”) –此元素下的第一个name元素。 \u003cbr\u003e\nElement.elementIterator(“name”) – 此元素下的所有name元素。返回Iterator \u003cbr\u003e\nElement.getText() – 返回元素包含的文本。 \u003cbr\u003e\nElement.getAttribute(“name”) – 返回名称为name的属性。 \u003cbr\u003e\nElement.addElement(“name”); - 添加一个name元素，同时返回name元素本身。 \u003cbr\u003e\norg.dom4j.io.XMLWriter – 将Document写出的对像。 \u003cbr\u003e\n\u003c/font\u003e\u003c/p\u003e\n\n\u003cp\u003eDOM4J的层次图：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160705160225953\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e使用UTF-8编码，解决中文乱码：\u003c/p\u003e\n\n\u003cpre\u003e\u003cfont color=\"green\"\u003e//声明编码格式\nOutputFormat    format = OutputFormat.createPrettyPrint();\nformat.setEncoding(\"UTF-8\");\n//保存（XMLWriter默认情况下即是使用UTF-8编码。所以，如果使用OutputStream保存，且正好是UTF-8编码，则不必担心乱码问题）\nXMLWriter xml = new XMLWriter(new FileOutputStream(\"./src/xml/a.xml\"),format);\nxml.write(doc);\n\u003c/font\u003e\u003c/pre\u003e\n\n\u003cp\u003eDom4j-保存节点-处理中文乱码：\u003c/p\u003e\n\n\u003cpre\u003e\u003cfont color=\"green\"\u003e在JavaIO中，writer总是本地编码格式处理数据。即GB2312\n所有，使用writer写出数据有可能会发生一些问题，如保存不完整，或是乱码：\nXMLWriter writer = new XMLWriter(new FileWriter(“a.xml”));\n//写出数据\nwriter.write(doc);\n所以，建议在写出数据时，使用OutputStream保存数据。\n\u003c/font\u003e\u003c/pre\u003e\n\n\u003cp\u003e记住：删除一个节点时，要用它的父节点删除它。\u003c/p\u003e\n\n\u003cp\u003e添加或修改属性的方法：addAttribute\u003c/p\u003e\n\n\u003cp\u003eDom4j-从没有到有生成一个新的xml:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs cs\"\u003e\u003cspan class=\"hljs-comment\"\u003e//通过DocumentHelper在内存中创建一个Document\u003c/span\u003e\nDocument doc = DocumentHelper.createDocument();\ndoc.setXMLEncoding(“UTF-\u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e”);\u003cspan class=\"hljs-comment\"\u003e//XML的编码格式\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//生成一个节点,生成的第一个节点也是根节点，此方法只使用一次\u003c/span\u003e\nElement root = doc.addElement(“users”);\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eXpath\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e\u003cspan class=\"hljs-built_in\"\u003eXML\u003c/span\u003e PATH Language。\n可以实现快速查询。\nXPATH包含\nXPath 使用路径表达式在 \u003cspan class=\"hljs-built_in\"\u003eXML\u003c/span\u003e 文档中进行导航 。\nXPath 包含一个标准函数库 \n准备Xpath的包：\njaxen\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003ejar\nXpath通过以下方法使用\ndom\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eselectNodes – 返回一个 \u003cspan class=\"hljs-built_in\"\u003eList\u003c/span\u003e对像\ndom\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eselectSingleNode – 返回一个Node对像\n\n\n\u003cspan class=\"hljs-comment\"\u003e//以下选择所有的user节点,处理不带命名空间的安以下原则\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003eList\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003eElement\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003elist\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e doc\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eselectNodes(\u003cspan class=\"hljs-string\"\u003e\"//user\"\u003c/span\u003e);\nSystem\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eerr\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eprintln(\u003cspan class=\"hljs-built_in\"\u003elist\u003c/span\u003e\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003esize());\n\u003cspan class=\"hljs-comment\"\u003e//以下选择所有name节点\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003elist\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e doc\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eselectNodes(\u003cspan class=\"hljs-string\"\u003e\"//name\"\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//或从要开始:/users//name\u003c/span\u003e\nSystem\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eerr\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eprintln(\u003cspan class=\"hljs-built_in\"\u003elist\u003c/span\u003e\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003esize());\n\n\u003cspan class=\"hljs-comment\"\u003e//以下选择所在带有country属性的节点\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003elist\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e doc\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eselectNodes(\u003cspan class=\"hljs-string\"\u003e\"//user[@country]\"\u003c/span\u003e);\nSystem\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eerr\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eprintln(\u003cspan class=\"hljs-built_in\"\u003elist\u003c/span\u003e\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003esize());\n\n\u003cspan class=\"hljs-comment\"\u003e//选择国家是 EN的节点,可以使用以下方法查询用户登录\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//如果country不能重复则可以使用selectSingleNode\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//使用双引号或单引号都可以：//user\u003c/span\u003e\nNode node \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e doc\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eselectSingleNode(\u003cspan class=\"hljs-string\"\u003e\"//user[@country=\\\"EN\\\"]\"\u003c/span\u003e);\nSystem\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eerr\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eprintln(node);\n\n\nXpath通过查询子元素的值，区别主要元素：\n如：\u003cspan class=\"hljs-built_in\"\u003eXML\u003c/span\u003e文档如下：\n\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003ebooks\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003ebook id\u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e“A001”\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e\n      \u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003ename\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003eOracle编程基础\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e/name\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e\n      \u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003eprice\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e89.99\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e/price\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e/book\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e/books\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e\n查询包含Oracle一词的所有book元素。\n\u003cspan class=\"hljs-comment\"\u003e//book[name=‘Oracle’]   //精确查询子元素name的值为Oracle的book元素\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//以下是模糊查询\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//book[contains(name,’Oracle’)]\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//也可以将name元素的值转成小写\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//book[contains(fn:lower-case(name),’oracle’]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个稍微了解一下： \u003cbr\u003e\nXpath处理带有命名空间的XML文档：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160705161546456\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003eSAXReader sax \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enew\u003c/span\u003e SAXReader();\n\u003cspan class=\"hljs-comment\"\u003e//声明一个map用于保存命名空间\u003c/span\u003e\n\u003cspan class=\"hljs-built_in\"\u003eMap\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e\u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e,\u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e uris \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enew\u003c/span\u003e HashMap\u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e\u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e, \u003cspan class=\"hljs-built_in\"\u003eString\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e();\n\u003cspan class=\"hljs-comment\"\u003e//给命名空间取一个别名\u003c/span\u003e\nuris\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eput(\u003cspan class=\"hljs-string\"\u003e\"a\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"http://www.itcast.cn\"\u003c/span\u003e);\n\u003cspan class=\"hljs-comment\"\u003e//设置命名空间后再读取xml文档\u003c/span\u003e\nsax\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003egetDocumentFactory()\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003esetXPathNamespaceURIs(uris);\nDocument dom \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e sax\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eread(\u003cspan class=\"hljs-string\"\u003e\"./xml2/a.xml\"\u003c/span\u003e);\n\u003cspan class=\"hljs-comment\"\u003e//然后使用带有命名空间的前缀查询即可。\u003c/span\u003e\ndom\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eselectNodes(“\u003cspan class=\"hljs-comment\"\u003e//a:book”);\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//带有属性的查询同前\u003c/span\u003e\ndom\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eselectNodes(\u003cspan class=\"hljs-comment\"\u003e//a:book[@id]\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e//带有元素的查询必须要添加命名空间的前缀\u003c/span\u003e\ndom\u003cspan class=\"hljs-built_in\"\u003e.\u003c/span\u003eseletNodes(“\u003cspan class=\"hljs-comment\"\u003e//a:book[a:name=‘oralce’]”);  //查询子元素值为oracle的book元素\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSAX，StAX读取速度快。都是JAXP的成员。 \u003cbr\u003e\nStAX－Iterator编程接口和Cursor编程接口。 \u003cbr\u003e\nDom4j。Dom。都会将所有节点加载加载到内存中。CRUD非常方便。 \u003cbr\u003e\nDom4j支持XPath.\u003c/p\u003e\n\n\u003cp\u003e演示代码：：：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003epackage cn\u003cspan class=\"hljs-preprocessor\"\u003e.hncu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.dom\u003c/span\u003e4j\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.io\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.FileNotFoundException\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.io\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.FileOutputStream\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.io\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.FileWriter\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.io\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.IOException\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.io\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.UnsupportedEncodingException\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Iterator\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.List\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Scanner\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\nimport org\u003cspan class=\"hljs-preprocessor\"\u003e.dom\u003c/span\u003e4j\u003cspan class=\"hljs-preprocessor\"\u003e.Document\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport org\u003cspan class=\"hljs-preprocessor\"\u003e.dom\u003c/span\u003e4j\u003cspan class=\"hljs-preprocessor\"\u003e.DocumentException\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport org\u003cspan class=\"hljs-preprocessor\"\u003e.dom\u003c/span\u003e4j\u003cspan class=\"hljs-preprocessor\"\u003e.DocumentHelper\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport org\u003cspan class=\"hljs-preprocessor\"\u003e.dom\u003c/span\u003e4j\u003cspan class=\"hljs-preprocessor\"\u003e.Element\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport org\u003cspan class=\"hljs-preprocessor\"\u003e.dom\u003c/span\u003e4j\u003cspan class=\"hljs-preprocessor\"\u003e.io\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.OutputFormat\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport org\u003cspan class=\"hljs-preprocessor\"\u003e.dom\u003c/span\u003e4j\u003cspan class=\"hljs-preprocessor\"\u003e.io\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.SAXReader\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport org\u003cspan class=\"hljs-preprocessor\"\u003e.dom\u003c/span\u003e4j\u003cspan class=\"hljs-preprocessor\"\u003e.io\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.XMLWriter\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\nimport org\u003cspan class=\"hljs-preprocessor\"\u003e.junit\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.Test\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\npublic class Dom4jDemo {\n\n    @Test\n    public void readDemo() throws Exception{\n        //声明SAXReader核心读取(xml)类，并获得dom对象\n        SAXReader sax = new SAXReader()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Document dom = sax\u003cspan class=\"hljs-preprocessor\"\u003e.read\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"xml5/users.xml\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        //获取根节点\n        Element root = dom\u003cspan class=\"hljs-preprocessor\"\u003e.getRootElement\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        //获取里面的第一个子元素\n        Element user = root\u003cspan class=\"hljs-preprocessor\"\u003e.element\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"user\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        String id = user\u003cspan class=\"hljs-preprocessor\"\u003e.attributeValue\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"id\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(id)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        String name = user\u003cspan class=\"hljs-preprocessor\"\u003e.element\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"name\"\u003c/span\u003e)\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;//获取子元素中的文本内容--法1\u003c/span\u003e\n        String age = user\u003cspan class=\"hljs-preprocessor\"\u003e.elementText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"age\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;//获取子元素中的文本内容--法2\u003c/span\u003e\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(name+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+age)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    //显示(遍历)所有用户\n    @Test\n    public void readAll() throws Exception{\n        SAXReader reader = new SAXReader()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Document document = reader\u003cspan class=\"hljs-preprocessor\"\u003e.read\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"xml5/users.xml\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Element root = document\u003cspan class=\"hljs-preprocessor\"\u003e.getRootElement\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        Iterator&lt;Element&gt; it = root\u003cspan class=\"hljs-preprocessor\"\u003e.elementIterator\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        while(it\u003cspan class=\"hljs-preprocessor\"\u003e.hasNext\u003c/span\u003e()){\n            Element e = it\u003cspan class=\"hljs-preprocessor\"\u003e.next\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            String id = e\u003cspan class=\"hljs-preprocessor\"\u003e.attributeValue\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"id\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            String name = e\u003cspan class=\"hljs-preprocessor\"\u003e.elementText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"name\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            String age = e\u003cspan class=\"hljs-preprocessor\"\u003e.element\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"age\"\u003c/span\u003e)\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"id:\"\u003c/span\u003e+id+\u003cspan class=\"hljs-string\"\u003e\",name:\"\u003c/span\u003e+name+\u003cspan class=\"hljs-string\"\u003e\",age:\"\u003c/span\u003e+age)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n\n    }\n\n    //添加一个user元素\n    @Test\n    public void addElement() throws Exception{\n        SAXReader sax= new SAXReader()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Document document = sax\u003cspan class=\"hljs-preprocessor\"\u003e.read\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"xml5/users.xml\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Element root = document\u003cspan class=\"hljs-preprocessor\"\u003e.getRootElement\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        Element e = root\u003cspan class=\"hljs-preprocessor\"\u003e.addElement\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"user\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        e\u003cspan class=\"hljs-preprocessor\"\u003e.addAttribute\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"id\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"C003\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        Element eName = e\u003cspan class=\"hljs-preprocessor\"\u003e.addElement\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"name\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        eName\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"张三\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Element eAge = e\u003cspan class=\"hljs-preprocessor\"\u003e.addElement\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"age\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        eAge\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"24\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //要把内存中的dom对象写到磁盘中\n        //法一---功能有限\n//      FileWriter fw = new FileWriter(\u003cspan class=\"hljs-string\"\u003e\"xml5/users.xml\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;//输出到控制台\u003c/span\u003e\n//      document\u003cspan class=\"hljs-preprocessor\"\u003e.write\u003c/span\u003e(fw)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n//      fw\u003cspan class=\"hljs-preprocessor\"\u003e.close\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //法二---功能更强\n        OutputFormat format = OutputFormat\u003cspan class=\"hljs-preprocessor\"\u003e.createCompactFormat\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        format\u003cspan class=\"hljs-preprocessor\"\u003e.setEncoding\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"utf-8\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        XMLWriter writer = new XMLWriter(new FileWriter(\u003cspan class=\"hljs-string\"\u003e\"xml5/users.xml\"\u003c/span\u003e), format)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        //以指定的输出格式，把dom输出到指定的目的地(文件)\n        writer\u003cspan class=\"hljs-preprocessor\"\u003e.write\u003c/span\u003e(document)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        writer\u003cspan class=\"hljs-preprocessor\"\u003e.close\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    //删除最后一个user元素\n    @Test\n    public void delElement() throws Exception{\n        SAXReader reader = new SAXReader()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Document document = reader\u003cspan class=\"hljs-preprocessor\"\u003e.read\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"xml5/users.xml\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Element root = document\u003cspan class=\"hljs-preprocessor\"\u003e.getRootElement\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        List&lt;Element&gt; list = root\u003cspan class=\"hljs-preprocessor\"\u003e.elements\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Element e = list\u003cspan class=\"hljs-preprocessor\"\u003e.get\u003c/span\u003e(list\u003cspan class=\"hljs-preprocessor\"\u003e.size\u003c/span\u003e()-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        e\u003cspan class=\"hljs-preprocessor\"\u003e.getParent\u003c/span\u003e()\u003cspan class=\"hljs-preprocessor\"\u003e.remove\u003c/span\u003e(e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //保存\n        XMLWriter writer = new XMLWriter(new FileWriter(\u003cspan class=\"hljs-string\"\u003e\"xml5/users.xml\"\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        writer\u003cspan class=\"hljs-preprocessor\"\u003e.write\u003c/span\u003e(document)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        writer\u003cspan class=\"hljs-preprocessor\"\u003e.close\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    //从零开始创建一个xml文档\n    @Test\n    public void createNewXml() throws IOException, FileNotFoundException{\n        Document document = DocumentHelper\u003cspan class=\"hljs-preprocessor\"\u003e.createDocument\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Element root = document\u003cspan class=\"hljs-preprocessor\"\u003e.addElement\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"hncu\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        root\u003cspan class=\"hljs-preprocessor\"\u003e.addElement\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"department\"\u003c/span\u003e)\u003cspan class=\"hljs-preprocessor\"\u003e.addAttribute\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"id\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"hncu001\"\u003c/span\u003e)\u003cspan class=\"hljs-preprocessor\"\u003e.addElement\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"xky\"\u003c/span\u003e)\u003cspan class=\"hljs-preprocessor\"\u003e.setText\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"信息科学与工程学院\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //保存\n        XMLWriter writer = new XMLWriter(new FileOutputStream(\u003cspan class=\"hljs-string\"\u003e\"xml5/hncu.xml\"\u003c/span\u003e))\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        writer\u003cspan class=\"hljs-preprocessor\"\u003e.write\u003c/span\u003e(document)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        writer\u003cspan class=\"hljs-preprocessor\"\u003e.close\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n    }\n\n    //xpath的用法\n    @Test\n    public void xpathDemo() throws Exception{\n        SAXReader sax = new SAXReader()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Document dom = sax\u003cspan class=\"hljs-preprocessor\"\u003e.read\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"xml5/contact.xml\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //String xpath = \u003cspan class=\"hljs-string\"\u003e\"/*/name\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;//第一个/表示当前元素\u003c/span\u003e\n        //String xpath=\u003cspan class=\"hljs-string\"\u003e\"//contact/name\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;//选择contact下面的name(儿子)\u003c/span\u003e\n        //String xpath=\u003cspan class=\"hljs-string\"\u003e\"//aaa/preceding::*\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;//选择&lt;aaa&gt;前面的所有元素\u003c/span\u003e\n        String xpath=\u003cspan class=\"hljs-string\"\u003e\"//*[@id]\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;//选择具有id属性的所有元素\u003c/span\u003e\n\n        Element root = dom\u003cspan class=\"hljs-preprocessor\"\u003e.getRootElement\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(root\u003cspan class=\"hljs-preprocessor\"\u003e.getName\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        List&lt;Element&gt; list = root\u003cspan class=\"hljs-preprocessor\"\u003e.selectNodes\u003c/span\u003e(xpath)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        for(Element e:list){\n            System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(e\u003cspan class=\"hljs-preprocessor\"\u003e.getName\u003c/span\u003e()+\u003cspan class=\"hljs-string\"\u003e\"--\"\u003c/span\u003e+e\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        }\n    }\n\n    //xpath用法\n\n    @Test\n    public void xpathDemo2() throws Exception {\n        SAXReader sax = new SAXReader()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Document dom = sax\u003cspan class=\"hljs-preprocessor\"\u003e.read\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"xml5/contact.xml\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        Scanner sc = new Scanner(System\u003cspan class=\"hljs-preprocessor\"\u003e.in\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        String name =sc\u003cspan class=\"hljs-preprocessor\"\u003e.next\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        //name=name\u003cspan class=\"hljs-preprocessor\"\u003e.toLowerCase\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        String pwd = sc\u003cspan class=\"hljs-preprocessor\"\u003e.next\u003c/span\u003e()\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n\n        //String xpath=\u003cspan class=\"hljs-string\"\u003e\"//user[@name][@pwd]\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;//选择同时包含name和pwd属性的user元素\u003c/span\u003e\n        //String xpath=\u003cspan class=\"hljs-string\"\u003e\"//user[@name=\u0027Jack\u0027][@pwd=\u00271234\u0027]\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;//选择name=\u0027Jack\u0027且pwd=\u00271234\u0027那个user元素\u003c/span\u003e\n        //String xpath=\u003cspan class=\"hljs-string\"\u003e\"//user[@name=\u0027\"\u003c/span\u003e+name+\u003cspan class=\"hljs-string\"\u003e\"\u0027][@pwd=\u0027\"\u003c/span\u003e+pwd+\u003cspan class=\"hljs-string\"\u003e\"\u0027]\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;//按照输入的name和ped查找那个user---name区分大小写\u003c/span\u003e\n        String xpath=\u003cspan class=\"hljs-string\"\u003e\"//user[fn:lower-case(@name)=\u0027\"\u003c/span\u003e+name+\u003cspan class=\"hljs-string\"\u003e\"\u0027][@pwd=\u0027\"\u003c/span\u003e+pwd+\u003cspan class=\"hljs-string\"\u003e\"\u0027]\"\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e;//按照输入的name和ped查找那个user---name不区分大小写\u003c/span\u003e\n        System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(xpath)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        List&lt;Element&gt; list = dom\u003cspan class=\"hljs-preprocessor\"\u003e.selectNodes\u003c/span\u003e(xpath)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n        for(Element e:list){\n            System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(e\u003cspan class=\"hljs-preprocessor\"\u003e.getName\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            List&lt;Element&gt; eList = e\u003cspan class=\"hljs-preprocessor\"\u003e.selectNodes\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"//contact/name\"\u003c/span\u003e)\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            for(Element e2:eList){\n                System\u003cspan class=\"hljs-preprocessor\"\u003e.out\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.println\u003c/span\u003e(e2\u003cspan class=\"hljs-preprocessor\"\u003e.getText\u003c/span\u003e())\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\n            }\n        }\n\n\n\n    }\n\n\n\n\n}\n\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"Dom4j: \nDom　SUN\ndom在加载时，将所有元素全部加载内存\nDOM4j  - 第三方。\n\nDom4j是一个开源、灵活的XML API。\n目前很多开源框架如struts,hibernate都使用dom4j做为解析其xml的工具。\n支持文档的读写功能和Xpath快速查询操作。\n\n\n这个需要我们自己把它的包导入myeclipse中的。\n准备DOM4j：\n包：dom4j.x.jar\n包结构：\norg.dom4j\n类\norg.dom4j.io.SAXReader –  xml文档解析器\norg.dom4j.Document、Element　–　文档对像\n需要知道的 Element的一些方法\n\u003cfont color=\"red\"\u003eElement.element(“name”) –此元素下的第一个name元素。\nElement.elementIterator(“name”) – 此元素下的所有name元素。返回Iterator\nElement.getText() – 返回元素包含的文本。\nElement.getAttribute(“name”) – 返回名称为name的属性。\nElement.addElement(“name”); - 添加一个name元素，同时返回name元素本身。\norg.dom4j.io.XMLWriter – 将Document写出的对像。\n\u003c/font\u003e\n\nDOM4J的层次图：\n\n![](http://img.blog.csdn.net/20160705160225953)\n\n\n使用UTF-8编码，解决中文乱码：\n\u003cpre\u003e\u003cfont color=\"green\"\u003e//声明编码格式\nOutputFormat    format = OutputFormat.createPrettyPrint();\nformat.setEncoding(\"UTF-8\");\n//保存（XMLWriter默认情况下即是使用UTF-8编码。所以，如果使用OutputStream保存，且正好是UTF-8编码，则不必担心乱码问题）\nXMLWriter xml = new XMLWriter(new FileOutputStream(\"./src/xml/a.xml\"),format);\nxml.write(doc);\n\u003c/font\u003e\u003c/pre\u003e\n\n\nDom4j-保存节点-处理中文乱码：\n\n\n\u003cpre\u003e\u003cfont color=\"green\"\u003e在JavaIO中，writer总是本地编码格式处理数据。即GB2312\n所有，使用writer写出数据有可能会发生一些问题，如保存不完整，或是乱码：\nXMLWriter writer = new XMLWriter(new FileWriter(“a.xml”));\n//写出数据\nwriter.write(doc);\n所以，建议在写出数据时，使用OutputStream保存数据。\n\u003c/font\u003e\u003c/pre\u003e\n\n\n记住：删除一个节点时，要用它的父节点删除它。\n\n添加或修改属性的方法：addAttribute\n\n\nDom4j-从没有到有生成一个新的xml:\n\n```\n//通过DocumentHelper在内存中创建一个Document\nDocument doc = DocumentHelper.createDocument();\ndoc.setXMLEncoding(“UTF-8”);//XML的编码格式\n//生成一个节点,生成的第一个节点也是根节点，此方法只使用一次\nElement root = doc.addElement(“users”);\n```\n\nXpath\n\n```\nXML PATH Language。\n可以实现快速查询。\nXPATH包含\nXPath 使用路径表达式在 XML 文档中进行导航 。\nXPath 包含一个标准函数库 \n准备Xpath的包：\njaxen.jar\nXpath通过以下方法使用\ndom.selectNodes – 返回一个 List对像\ndom.selectSingleNode – 返回一个Node对像\n\n\n//以下选择所有的user节点,处理不带命名空间的安以下原则\nList\u003cElement\u003e list = doc.selectNodes(\"//user\");\nSystem.err.println(list.size());\n//以下选择所有name节点\nlist = doc.selectNodes(\"//name\");//或从要开始:/users//name\nSystem.err.println(list.size());\n\n//以下选择所在带有country属性的节点\nlist = doc.selectNodes(\"//user[@country]\");\nSystem.err.println(list.size());\n\n//选择国家是 EN的节点,可以使用以下方法查询用户登录\n//如果country不能重复则可以使用selectSingleNode\n//使用双引号或单引号都可以：//user\nNode node = doc.selectSingleNode(\"//user[@country=\\\"EN\\\"]\");\nSystem.err.println(node);\n\n\nXpath通过查询子元素的值，区别主要元素：\n如：XML文档如下：\n\u003cbooks\u003e\n\u003cbook id=“A001”\u003e\n      \u003cname\u003eOracle编程基础\u003c/name\u003e\n      \u003cprice\u003e89.99\u003c/price\u003e\n\u003c/book\u003e\n\u003c/books\u003e\n查询包含Oracle一词的所有book元素。\n//book[name=‘Oracle’]   //精确查询子元素name的值为Oracle的book元素\n//以下是模糊查询\n//book[contains(name,’Oracle’)]\n//也可以将name元素的值转成小写\n//book[contains(fn:lower-case(name),’oracle’]\n\n```\n\n\n\n这个稍微了解一下：\nXpath处理带有命名空间的XML文档：\n\n![](http://img.blog.csdn.net/20160705161546456)\n\n\n```\nSAXReader sax = new SAXReader();\n//声明一个map用于保存命名空间\nMap\u003cString,String\u003e uris = new HashMap\u003cString, String\u003e();\n//给命名空间取一个别名\nuris.put(\"a\", \"http://www.itcast.cn\");\n//设置命名空间后再读取xml文档\nsax.getDocumentFactory().setXPathNamespaceURIs(uris);\nDocument dom = sax.read(\"./xml2/a.xml\");\n//然后使用带有命名空间的前缀查询即可。\ndom.selectNodes(“//a:book”);\n//带有属性的查询同前\ndom.selectNodes(//a:book[@id]\n//带有元素的查询必须要添加命名空间的前缀\ndom.seletNodes(“//a:book[a:name=‘oralce’]”);  //查询子元素值为oracle的book元素\n```\n\nSAX，StAX读取速度快。都是JAXP的成员。\nStAX－Iterator编程接口和Cursor编程接口。\nDom4j。Dom。都会将所有节点加载加载到内存中。CRUD非常方便。\nDom4j支持XPath.\n\n\n\n\n演示代码：：：\n\n```\npackage cn.hncu.dom4j;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.Element;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\nimport org.junit.Test;\n\npublic class Dom4jDemo {\n\t\n\t@Test\n\tpublic void readDemo() throws Exception{\n\t\t//声明SAXReader核心读取(xml)类，并获得dom对象\n\t\tSAXReader sax = new SAXReader();\n\t\tDocument dom = sax.read(\"xml5/users.xml\");\n\t\t//获取根节点\n\t\tElement root = dom.getRootElement();\n\t\t//获取里面的第一个子元素\n\t\tElement user = root.element(\"user\");\n\t\tString id = user.attributeValue(\"id\");\n\t\tSystem.out.println(id);\n\t\tString name = user.element(\"name\").getText();//获取子元素中的文本内容--法1\n\t\tString age = user.elementText(\"age\");//获取子元素中的文本内容--法2\n\t\tSystem.out.println(name+\",\"+age);\n\t}\n\t\n\t//显示(遍历)所有用户\n\t@Test\n\tpublic void readAll() throws Exception{\n\t\tSAXReader reader = new SAXReader();\n\t\tDocument document = reader.read(\"xml5/users.xml\");\n\t\tElement root = document.getRootElement();\n\t\t\n\t\tIterator\u003cElement\u003e it = root.elementIterator();\n\t\twhile(it.hasNext()){\n\t\t\tElement e = it.next();\n\t\t\tString id = e.attributeValue(\"id\");\n\t\t\tString name = e.elementText(\"name\");\n\t\t\tString age = e.element(\"age\").getText();\n\t\t\tSystem.out.println(\"id:\"+id+\",name:\"+name+\",age:\"+age);\n\t\t}\n\t\t\n\t}\n\t\n\t//添加一个user元素\n\t@Test\n\tpublic void addElement() throws Exception{\n\t\tSAXReader sax= new SAXReader();\n\t\tDocument document = sax.read(\"xml5/users.xml\");\n\t\tElement root = document.getRootElement();\n\t\t\n\t\tElement e = root.addElement(\"user\");\n\t\te.addAttribute(\"id\", \"C003\");\n\t\t\n\t\tElement eName = e.addElement(\"name\");\n\t\teName.setText(\"张三\");\n\t\tElement eAge = e.addElement(\"age\");\n\t\teAge.setText(\"24\");\n\t\t\n\t\t//要把内存中的dom对象写到磁盘中\n\t\t//法一---功能有限\n//\t\tFileWriter fw = new FileWriter(\"xml5/users.xml\");//输出到控制台\n//\t\tdocument.write(fw);\n//\t\tfw.close();\n\t\t\n\t\t//法二---功能更强\n\t\tOutputFormat format = OutputFormat.createCompactFormat();\n\t\tformat.setEncoding(\"utf-8\");\n\t\tXMLWriter writer = new XMLWriter(new FileWriter(\"xml5/users.xml\"), format);\n\t\t//以指定的输出格式，把dom输出到指定的目的地(文件)\n\t\twriter.write(document);\n\t\twriter.close();\n\t}\n\t\n\t//删除最后一个user元素\n\t@Test\n\tpublic void delElement() throws Exception{\n\t\tSAXReader reader = new SAXReader();\n\t\tDocument document = reader.read(\"xml5/users.xml\");\n\t\tElement root = document.getRootElement();\n\t\t\n\t\tList\u003cElement\u003e list = root.elements();\n\t\tElement e = list.get(list.size()-1);\n\t\te.getParent().remove(e);\n\t\t\n\t\t//保存\n\t\tXMLWriter writer = new XMLWriter(new FileWriter(\"xml5/users.xml\"));\n\t\twriter.write(document);\n\t\twriter.close();\n\t}\n\t\n\t//从零开始创建一个xml文档\n\t@Test\n\tpublic void createNewXml() throws IOException, FileNotFoundException{\n\t\tDocument document = DocumentHelper.createDocument();\n\t\tElement root = document.addElement(\"hncu\");\n\t\troot.addElement(\"department\").addAttribute(\"id\", \"hncu001\").addElement(\"xky\").setText(\"信息科学与工程学院\");\n\t\t\n\t\t//保存\n\t\tXMLWriter writer = new XMLWriter(new FileOutputStream(\"xml5/hncu.xml\"));\n\t\twriter.write(document);\n\t\twriter.close();\n\t}\n\t\n\t//xpath的用法\n\t@Test\n\tpublic void xpathDemo() throws Exception{\n\t\tSAXReader sax = new SAXReader();\n\t\tDocument dom = sax.read(\"xml5/contact.xml\");\n\t\t\n\t\t//String xpath = \"/*/name\";//第一个/表示当前元素\n\t\t//String xpath=\"//contact/name\";//选择contact下面的name(儿子)\n\t\t//String xpath=\"//aaa/preceding::*\";//选择\u003caaa\u003e前面的所有元素\n\t\tString xpath=\"//*[@id]\";//选择具有id属性的所有元素\n\t\t\n\t\tElement root = dom.getRootElement();\n\t\tSystem.out.println(root.getName());\n\t\tList\u003cElement\u003e list = root.selectNodes(xpath);\n\t\tfor(Element e:list){\n\t\t\tSystem.out.println(e.getName()+\"--\"+e.getText());\n\t\t}\n\t}\n\t\n\t//xpath用法\n\t\n\t@Test\n\tpublic void xpathDemo2() throws Exception {\n\t\tSAXReader sax = new SAXReader();\n\t\tDocument dom = sax.read(\"xml5/contact.xml\");\n\t\tScanner sc = new Scanner(System.in);\n\t\tString name =sc.next();\n\t\t//name=name.toLowerCase();\n\t\tString pwd = sc.next();\n\t\t\n\t\t//String xpath=\"//user[@name][@pwd]\";//选择同时包含name和pwd属性的user元素\n\t\t//String xpath=\"//user[@name=\u0027Jack\u0027][@pwd=\u00271234\u0027]\";//选择name=\u0027Jack\u0027且pwd=\u00271234\u0027那个user元素\n\t\t//String xpath=\"//user[@name=\u0027\"+name+\"\u0027][@pwd=\u0027\"+pwd+\"\u0027]\";//按照输入的name和ped查找那个user---name区分大小写\n\t\tString xpath=\"//user[fn:lower-case(@name)=\u0027\"+name+\"\u0027][@pwd=\u0027\"+pwd+\"\u0027]\";//按照输入的name和ped查找那个user---name不区分大小写\n\t\tSystem.out.println(xpath);\n\t\tList\u003cElement\u003e list = dom.selectNodes(xpath);\n\t\tfor(Element e:list){\n\t\t\tSystem.out.println(e.getName());\n\t\t\tList\u003cElement\u003e eList = e.selectNodes(\"//contact/name\");\n\t\t\tfor(Element e2:eList){\n\t\t\t\tSystem.out.println(e2.getText());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t}\n\t\n\t\n\t\n\t\n}\n\n```\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-667-thread-1] [chx]
[INFO] 2017-07-28 12:29:26 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-07\2016-07-05-Java---XML的解析(2)-DOM4J解析 Xpath.markdown [pool-667-thread-1] [chx]
[INFO] 2017-07-28 12:29:26 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《Java---XML的解析(2)-DOM4J解析 Xpath》成功 [pool-667-thread-1] [chx]
[INFO] 2017-07-28 12:29:26 [cn.chenhaoxiang.SaveBlogDataEntity.startGetBlogandSave(SaveBlogDataEntity.java:96)] -> 此次存储的文章ID:51598319 [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:29:26 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-668] [chx]
[INFO] 2017-07-28 12:29:26 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-658] [chx]
[INFO] 2017-07-28 12:29:26 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=51598319 [pool-668-thread-1] [chx]
[INFO] 2017-07-28 12:29:26 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":51598319,"title":"JavaScript---网络编程(4)-Date、Math、Global和自定义对象","create_at":"\/Date(1465299056000)\/","create":"2016-06-07 07:30:56","view_count":5206,"comment_count":0,"comment_allowed":"true","type":"original","channel":14,"digg":2,"bury":0,"description":"本节博客进行Date对象、Math对象、Global对象和自定义对象的用法演示。首先是一个out.js文件内容（输出到网页中的自定义输出方法）：function println(parma){\n    document.write(parma+\"\u003cbr/\u003e\");\n}\nfunction print(parma){\n    document.write(parma);\n}\nDate 对象启用基本存储器并","url":"http://blog.csdn.net/qq_26525215/article/details/51598319","categories":"❷ Java大学之行,----- ④、Web学习之旅,----- ----- HTML/CSS/JS网络编程","tags":"","content":"\u003cp\u003e本节博客进行Date对象、Math对象、Global对象和自定义对象的用法演示。\u003c/p\u003e\n\n\u003cp\u003e首先是一个out.js文件内容（输出到网页中的自定义输出方法）：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs javascript\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eprintln\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(parma)\u003c/span\u003e{\u003c/span\u003e\n    document.write(parma+\u003cspan class=\"hljs-string\"\u003e\"&lt;br/&gt;\"\u003c/span\u003e);\n}\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eprint\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(parma)\u003c/span\u003e{\u003c/span\u003e\n    document.write(parma);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch1 id=\"date-对象\"\u003e\u003cfont color=\"red\"\u003eDate 对象\u003c/font\u003e\u003c/h1\u003e\n\n\u003cp\u003e启用基本存储器并取得日期和时间。 \u003cbr\u003e\ndateObj = new Date() \u003cbr\u003e\ndateObj = new Date(dateVal) \u003cbr\u003e\n\u003cfont color=\"green\"\u003e\u003cstrong\u003edateVal\u003c/strong\u003e\u003c/font\u003e \u003cbr\u003e\n必选项。如果是数字值，dateVal 表示指定日期与 1970 年 1 月 1 日午夜间全球标准时间 的毫秒数。如果是字符串，则 dateVal 按照 parse 方法中的规则进行解析。dateVal 参数也可以是从某些 ActiveX(R) 对象返回的 VT_DATE 值。\u003c/p\u003e\n\n\u003cp\u003edateObj = new Date(year, month, date[, hours[, minutes[, seconds[,ms]]]]) \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e用[]括起来的是可选项（可写可不写）\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/font\u003e \u003cbr\u003e\nDate 对象保存以毫秒为单位表示特定时间段。如果某个参数的值大于其范围或为负数，则存储的其他值将做相应的调整。例如，如果指定 150 秒，JScript 将该数字重新定义为 2 分 30 秒。 \u003c/p\u003e\n\n\u003cp\u003e如果数字为 NaN，则表示该对象不代表特定的时间段。如果未向 Date 对象传递参数，它将被初始化为当前时间 (UTC)。在能够使用该对象前必须为其赋值。 \u003c/p\u003e\n\n\u003cp\u003eDate 对象能够表示的日期范围约等于 1970 年 1 月 1 日前后各 285,616 年。 \u003c/p\u003e\n\n\u003cp\u003eDate 对象具有两个不创建 Date 对象就可以调用的静态方法。它们是 parse 和 UTC。 \u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003e\u003cfont color=\"green\"\u003e演示代码：\u003c/font\u003e\u003c/b\u003e\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003eDate对象的用法演示\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Content-Type\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/html; charset=UTF-8\"\u003c/span\u003e /&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"out.js\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e date = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\u003cspan class=\"hljs-comment\"\u003e//当前日期时间，它的精确值= 从1970.1.1开始，到现在经过的毫秒数\u003c/span\u003e\n            println(date);\u003cspan class=\"hljs-comment\"\u003e//自带toString()\u003c/span\u003e\n            println(date.toString());\u003cspan class=\"hljs-comment\"\u003e//默认是GMT格式---Mon Jun 06 2016 20:03:45 GMT+0800 (中国标准时间)\u003c/span\u003e\n            println(date.toDateString());\u003cspan class=\"hljs-comment\"\u003e//默认是GMT格式---Mon Jun 06 2016\u003c/span\u003e\n            println(date.toLocaleString());\u003cspan class=\"hljs-comment\"\u003e//本地格式---2016/6/6 下午8:05:48\u003c/span\u003e\n            println(date.toLocaleDateString());\u003cspan class=\"hljs-comment\"\u003e//本地格式---2016/6/6---只有日期\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//综上，带Date的只显示日期\u003c/span\u003e\n            println(\u003cspan class=\"hljs-string\"\u003e\"&lt;hr/&gt;\"\u003c/span\u003e);\n\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e year = date.getFullYear();\u003cspan class=\"hljs-comment\"\u003e//获取现在的年份\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e month = date.getMonth() + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//跟java一样，返回的月份和我们平时用的小1---它是序号-所以加一才是真正的月份\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e day = date.getDate();\u003cspan class=\"hljs-comment\"\u003e//这才是我们要的日期---注意，getDay()返回的是星期几 \u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e weekDay = date.getDay();\u003cspan class=\"hljs-comment\"\u003e//星期几\u003c/span\u003e\n            println(year + \u003cspan class=\"hljs-string\"\u003e\"-\"\u003c/span\u003e + month + \u003cspan class=\"hljs-string\"\u003e\"-\"\u003c/span\u003e + day + \u003cspan class=\"hljs-string\"\u003e\",星期\"\u003c/span\u003e + weekDay);\n            println(year + \u003cspan class=\"hljs-string\"\u003e\"-\"\u003c/span\u003e + month + \u003cspan class=\"hljs-string\"\u003e\"-\"\u003c/span\u003e + day + \u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e + getWeekDay(weekDay));\n\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetWeekDay\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(weekDay)\u003c/span\u003e{\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e weeks = [\u003cspan class=\"hljs-string\"\u003e\"星期日\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"星期一\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"星期二\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"星期三\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"星期四\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"星期五\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"星期六\"\u003c/span\u003e];\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e weeks[weekDay];\n            }\n\n            \u003cspan class=\"hljs-comment\"\u003e//日期对象和毫秒值的转换\u003c/span\u003e\n\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e date2 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e();\n            date2.setFullYear(\u003cspan class=\"hljs-number\"\u003e2015\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//只更改年份\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e time = date2.getTime();\u003cspan class=\"hljs-comment\"\u003e//日期--&gt;毫秒值\u003c/span\u003e\n            println(\u003cspan class=\"hljs-string\"\u003e\"time=\"\u003c/span\u003e + time);\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e date3 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(time);\u003cspan class=\"hljs-comment\"\u003e//毫秒值--&gt;日期\u003c/span\u003e\n            println(date3.toLocaleString());\n\n            \u003cspan class=\"hljs-comment\"\u003e//字符串跟日期之间的转换\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//日期对象--&gt;字符串 ： 直接用toLocalString()，toLocalDateString()\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//字符串--&gt;日期对象\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e strDate = \u003cspan class=\"hljs-string\"\u003e\"6/4/2016\"\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//格式: 月份/日期/年份\u003c/span\u003e\n\n            \u003cspan class=\"hljs-comment\"\u003e//var strDate = \"6/4/19\";//不要这么写\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//格式: 月份/日期/年份  \u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//IE ：如果年份只给2位则前面默认是19**\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//360浏览器：如果年份只给2位则前面默认是20**---超过50就前面默认是19**\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//年份值可以用 2 位数字表示也可以用 4 位数字表示。如果使用 2 位数字来表示年份，\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//那么该年份必须大于或等于 70。 \u003c/span\u003e\n\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e time2 = \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e.parse(strDate);\u003cspan class=\"hljs-comment\"\u003e//静态方法，返回值是毫秒值\u003c/span\u003e\n            println(time2);\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e date4 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDate\u003c/span\u003e(time2);\n            println(date4.toLocaleString());\n\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n\n\n        \u003cspan class=\"hljs-comment\"\u003e&lt;!-- with语句演示 --&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//在with内部的方法调用时可以省略该date对象\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e(date){\n                \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e year = getFullYear();\n                \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e month = getMonth()+\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//注意加一\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e day = getDate();\n                println(year+\u003cspan class=\"hljs-string\"\u003e\"-\"\u003c/span\u003e+month+\u003cspan class=\"hljs-string\"\u003e\"-\"\u003c/span\u003e+day);\n            }\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n\n    \u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e360浏览器8.1 演示结果：\u003c/strong\u003e\u003c/font\u003e \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160606212101920\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch1 id=\"math-对象\"\u003e\u003cfont color=\"red\"\u003eMath 对象\u003c/font\u003e\u003c/h1\u003e\n\n\u003cp\u003e是一个固有对象，提供基本数学函数和常数。 \u003cbr\u003e\nMath.[{property | method}]\u003c/p\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e参数\u003c/strong\u003e\u003c/font\u003e \u003cbr\u003e\nproperty \u003cbr\u003e\n必选项。Math 对象的一个属性名。\u003c/p\u003e\n\n\u003cp\u003emethod \u003cbr\u003e\n必选项。Math.对象的一个方法名。\u003c/p\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/font\u003e \u003cbr\u003e\nMath 对象不能用 new 运算符创建，如果试图这样做则给出错误。该对象在装载脚本引擎时由该引擎创建。其所有方法和属性在脚本中总是可用。 \u003c/p\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e演示代码：\u003c/strong\u003e\u003c/font\u003e\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003eMath对象的用法演示\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"content-type\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/html; charset=UTF-8\"\u003c/span\u003e&gt;\u003c/span\u003e\n  \u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n\n  \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"out.js\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n    \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num1=\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.ceil(\u003cspan class=\"hljs-number\"\u003e23.456\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//返回大于等于其数字参数的最小整数。 \u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num2=\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(\u003cspan class=\"hljs-number\"\u003e23.456\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//返回小于等于其数值参数的最大整数。 \u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num3=\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.pow(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//表示2的3次方\u003c/span\u003e\n        println(num1+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+num2+\u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e+num3);\u003cspan class=\"hljs-comment\"\u003e//24,23,8\u003c/span\u003e\n\n        \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num4=\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.round(\u003cspan class=\"hljs-number\"\u003e7.46\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//四舍五入\u003c/span\u003e\n        println(num4);\u003cspan class=\"hljs-comment\"\u003e//7\u003c/span\u003e\n\n        \u003cspan class=\"hljs-comment\"\u003e//生成10个[0,10]范围内的随机整数\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e x=\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;x&lt;\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;x++){\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e n=\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.random()*\u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(n==\u003cspan class=\"hljs-number\"\u003e99\u003c/span\u003e){\n                \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;\n                x--;\n            }\n            n=\u003cspan class=\"hljs-built_in\"\u003eMath\u003c/span\u003e.floor(n/\u003cspan class=\"hljs-number\"\u003e9\u003c/span\u003e);\n            println(n);\n        }\n\n    \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n\n  \u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e360浏览器8.1 演示结果：\u003c/strong\u003e\u003c/font\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160607103808188\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch1 id=\"global-对象异常以及for-in语句\"\u003e\u003cfont color=\"red\"\u003eGlobal 对象–异常以及for-in语句\u003c/font\u003e\u003c/h1\u003e\n\n\u003cp\u003e是一个固有对象，目的是把所有全局方法集中在一个对象中。 \u003cbr\u003e\nGlobal 对象没有语法。直接调用其方法。 \u003c/p\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e说明\u003c/strong\u003e\u003c/font\u003e \u003cbr\u003e\nGlobal 对象从不直接使用，并且不能用 new 运算符创建。它在 Scripting 引擎被初始化时创建，并立即使其方法和属性可用。  \u003cbr\u003e\n也就是说，它的所有方法都是静态的，而且我们可以省略Global.直接调用它的方法。\u003c/p\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e演示代码：\u003c/strong\u003e\u003c/font\u003e\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs xml\"\u003e\u003cspan class=\"hljs-doctype\"\u003e&lt;!DOCTYPE html&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003eGlobal对象用法演示\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"content-type\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/html; charset=UTF-8\"\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"out.js\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            \u003cspan class=\"hljs-comment\"\u003e/*\n             Global对象中的属性和方法，调用时可以省略：Global.\n             */\u003c/span\u003e\n            println(\u003cspan class=\"hljs-string\"\u003e\"123\"\u003c/span\u003e + \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//1234\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//字符串输出\u003c/span\u003e\n\n            println(\u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"123\"\u003c/span\u003e) + \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//127\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//数值相加输出\u003c/span\u003e\n\n            \u003cspan class=\"hljs-comment\"\u003e//注意，parseInt()这个方法和Java不同的地方：\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//       1)不会抛异常(如果解析不了，它就返回NaN)\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//       2)如果解析串中前面有数字，那么这部分前导数字会被单独解析出来当作整个方法的返回结果。但后面有数字则无法解析\u003c/span\u003e\n\n            println(\u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"aaa123\"\u003c/span\u003e));\u003cspan class=\"hljs-comment\"\u003e//NaN--Not a Number --非法的意思\u003c/span\u003e\n            println(\u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"1234aaa\"\u003c/span\u003e));\u003cspan class=\"hljs-comment\"\u003e//1234\u003c/span\u003e\n            println(\u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"12345a1a1a123\"\u003c/span\u003e));\u003cspan class=\"hljs-comment\"\u003e//12345\u003c/span\u003e\n            println(\u003cspan class=\"hljs-string\"\u003e\"&lt;hr/&gt;\"\u003c/span\u003e);\n\n            \u003cspan class=\"hljs-comment\"\u003e//带进制的转换1： 把指定进制的格式串 转换成 十进制的整数 \u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//---利用Global中的 parseInt(numString, [radix]) 方法\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"110\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//以十进制来解析\u003c/span\u003e\n            println(num);\u003cspan class=\"hljs-comment\"\u003e//110---输出10进制\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"110\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//以二进制来解析\u003c/span\u003e\n            println(num);\u003cspan class=\"hljs-comment\"\u003e//6---输出10进制\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"210\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//以二进制来解析\u003c/span\u003e\n            println(num);\u003cspan class=\"hljs-comment\"\u003e//NaN---代表非法---解析出错\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"210\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//以16进制来解析\u003c/span\u003e\n            println(num);\u003cspan class=\"hljs-comment\"\u003e//528\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num = \u003cspan class=\"hljs-built_in\"\u003eparseInt\u003c/span\u003e(\u003cspan class=\"hljs-string\"\u003e\"0x210\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//以16进制来解析\u003c/span\u003e\n            println(num);\u003cspan class=\"hljs-comment\"\u003e//528---和前面一样\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//带进制的转换2：把 十进制的整数 转换成 其它进制的数 \u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//---利用Number对象中的  toString([radix]) 方法\u003c/span\u003e\n\n            \u003cspan class=\"hljs-comment\"\u003e//var num = new Number(528);//和下面一样的            \u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e num = \u003cspan class=\"hljs-number\"\u003e528\u003c/span\u003e;\n            println(num.toString(\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e)); \u003cspan class=\"hljs-comment\"\u003e//结果就是二进制的数： 1000010000\u003c/span\u003e\n            println(num.toString(\u003cspan class=\"hljs-number\"\u003e16\u003c/span\u003e)); \u003cspan class=\"hljs-comment\"\u003e//结果就是16进制的数： 210\u003c/span\u003e\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e&lt;!-- js中的异常处理及自定义异常 --&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\n            \u003cspan class=\"hljs-comment\"\u003e// fun(1);//没有异常\u003c/span\u003e\n            fun(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//有异常(自己抛出的异常)\u003c/span\u003e\n        } \n        \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (e) {\n            println(e);\n        }\n        \u003cspan class=\"hljs-keyword\"\u003efinally\u003c/span\u003e {\n            println(\u003cspan class=\"hljs-string\"\u003e\"bbbb\"\u003c/span\u003e);\u003cspan class=\"hljs-comment\"\u003e//不管有没有异常，都会执行\u003c/span\u003e\n        }\n\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(n)\u003c/span\u003e{\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (n == \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n                \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"exception 0\"\u003c/span\u003e;\u003cspan class=\"hljs-comment\"\u003e//相当于java中的手动抛自定义异常\u003c/span\u003e\n            }\n        }\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e&lt;!--  for-in语句  --&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            \u003cspan class=\"hljs-comment\"\u003e/*\n             for( 变量名  in 对象 ){\n             ...//分别对对象中的元素(属性)进行遍历操作\n             }\n             */\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//数组对象\u003c/span\u003e\n\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e arr = [\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e56\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e435\u003c/span\u003e,\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e];\n            \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e( x \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e arr){\u003cspan class=\"hljs-comment\"\u003e//注意，对于数组，这里的x是下标即是0,1,2,3,...\u003c/span\u003e\n                println( x+\u003cspan class=\"hljs-string\"\u003e\":  \"\u003c/span\u003e+ arr[x] );\n            }\n\n            \u003cspan class=\"hljs-comment\"\u003e//用for...in语句操作自定义对象---见后面部分的代码演示\u003c/span\u003e\n\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e360浏览器8.1 演示结果：\u003c/strong\u003e\u003c/font\u003e \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160607114159604\" alt=\"\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch1 id=\"自定义对象-for-in语句\"\u003e\u003cfont color=\"red\"\u003e自定义对象-for-in语句\u003c/font\u003e\u003c/h1\u003e\n\n\u003cp\u003e用js来描述我们自己的对象，如类似java当中的Person类 \u003c/p\u003e\n\n\u003cp\u003e这个功能很强大的，function中可以定义属性和方法！类似Java中class。\u003c/p\u003e\n\n\u003cp\u003e\u003cfont color=\"green\"\u003e\u003cstrong\u003e演示代码：\u003c/strong\u003e\u003c/font\u003e\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs xml\"\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003e自定义对象的用法演示\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003etitle\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003emeta\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ehttp-equiv\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"content-type\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003econtent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/html; charset=UTF-8\"\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehead\u003c/span\u003e&gt;\u003c/span\u003e\n    \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003esrc\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"out.js\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e&lt;!-- 用js来描述我们自己的对象，如类似java当中的Person类 --&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            \u003cspan class=\"hljs-comment\"\u003e/*  js是基于对象的，如果要描述对象，那么可以用function。因为js中的\n             function功能和java中的类(模板) 本质上是差不多的---里面可以添加变量，也可以添加自定义函数\n             */\u003c/span\u003e\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePerson\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e{\u003c/span\u003e\n                \u003cspan class=\"hljs-comment\"\u003e//alert(\"Person的构造方法...\");\u003c/span\u003e\n            }\n\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e p = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Person();\n            \u003cspan class=\"hljs-comment\"\u003e//给对象添加属性，直接采用“p.属性名=”的形式赋值就行---如果没有则是添加，如果有则是修改\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//※※方式1：在对象外面添加属性和方法\u003c/span\u003e\n            p.name = \u003cspan class=\"hljs-string\"\u003e\"Jack\"\u003c/span\u003e;\n            p.age = \u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e;\n            \u003cspan class=\"hljs-comment\"\u003e//alert(p.name+\",\"+p.age);\u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//给对象添加函数\u003c/span\u003e\n            p.info = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e{\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e//相当于toString()\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name + \u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age;\n            };\n\n            println(\u003cspan class=\"hljs-string\"\u003e\"p的信息:\"\u003c/span\u003e + p.info());\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e obj = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eObject\u003c/span\u003e();\n            \u003cspan class=\"hljs-comment\"\u003e//※※方式1：在对象外面添加属性和方法   \u003c/span\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//1给对象添加属性  \u003c/span\u003e\n            obj.name = \u003cspan class=\"hljs-string\"\u003e\"god\"\u003c/span\u003e;\n            obj.age = \u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e;\n\n            \u003cspan class=\"hljs-comment\"\u003e//2给对象添加属性\u003c/span\u003e\n            obj.toString = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e{\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name + \u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age;\n            }\n            println(obj);\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-comment\"\u003e&lt;!--\n        注意：前面用“对象.prototype.属性或函数名=***”的形式，更改的是原型对象\n        而本例用 “对象.属性或函数名=***”的形式，更改的是当前对象(原型对象的克隆体)\n        --&gt;\u003c/span\u003e\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            \u003cspan class=\"hljs-comment\"\u003e//js自定义对象的构造器+属性+方法\u003c/span\u003e\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ePerson\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(name, age)\u003c/span\u003e{\u003c/span\u003e\n                \u003cspan class=\"hljs-comment\"\u003e//※※方式2：在函数对象里面添加属性和方法\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age = age;\n\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.toString = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e{\u003c/span\u003e\n                    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name + \u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e + \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.age;\n                };\n\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.setName = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(name)\u003c/span\u003e{\u003c/span\u003e\n                    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\n                };\n                \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.getName = \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e{\u003c/span\u003e\n                    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name;\n                };\n            }\n\n            \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e p2 = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Person(\u003cspan class=\"hljs-string\"\u003e\"Tom\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e22\u003c/span\u003e);\n            println(\u003cspan class=\"hljs-string\"\u003e\"p2.name=\"\u003c/span\u003e + p2.name + \u003cspan class=\"hljs-string\"\u003e\", p2.age=\"\u003c/span\u003e + p2.age);\n            println(\u003cspan class=\"hljs-string\"\u003e\"p2= \"\u003c/span\u003e + p2);\n            p2.setName(\u003cspan class=\"hljs-string\"\u003e\"Rose\"\u003c/span\u003e);\n            println(\u003cspan class=\"hljs-string\"\u003e\"p2=\"\u003c/span\u003e + p2);\n            println(\u003cspan class=\"hljs-string\"\u003e\"p2.getName=\"\u003c/span\u003e + p2.getName());\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n\n        \u003cspan class=\"hljs-tag\"\u003e&lt;\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003etype\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"text/javascript\"\u003c/span\u003e&gt;\u003c/span\u003e\u003cspan class=\"javascript\"\u003e\n            println(\u003cspan class=\"hljs-string\"\u003e\"&lt;hr/&gt;\"\u003c/span\u003e);\n\n             \u003cspan class=\"hljs-comment\"\u003e//用for...in语句操作自定义对象\u003c/span\u003e\n             \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e( \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e x \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e p2){\u003cspan class=\"hljs-comment\"\u003e//x是函数中的成员变量与成员方法的名称\u003c/span\u003e\n                println(\u003cspan class=\"hljs-string\"\u003e\"x=\"\u003c/span\u003e+x+\u003cspan class=\"hljs-string\"\u003e\"-----\"\u003c/span\u003e+p2[x]);\u003cspan class=\"hljs-comment\"\u003e// p2[x]就是valeOf(x)\u003c/span\u003e\n             }\n\n        \u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003escript\u003c/span\u003e&gt;\u003c/span\u003e\n\n    \u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ebody\u003c/span\u003e&gt;\u003c/span\u003e\n\u003cspan class=\"hljs-tag\"\u003e&lt;/\u003cspan class=\"hljs-title\"\u003ehtml\u003c/span\u003e&gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cfont color=\"red\"\u003e\u003cstrong\u003e360浏览器8.1 演示结果：\u003c/strong\u003e\u003c/font\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160607193022873\" alt=\"\" title=\"\"\u003e\u003c/p\u003e","markdowncontent":"本节博客进行Date对象、Math对象、Global对象和自定义对象的用法演示。\n\n首先是一个out.js文件内容（输出到网页中的自定义输出方法）：\n\n```\nfunction println(parma){\n\tdocument.write(parma+\"\u003cbr/\u003e\");\n}\nfunction print(parma){\n\tdocument.write(parma);\n}\n\n```\n\n\u003cfont color=\"red\"\u003eDate 对象\u003c/font\u003e\n=======\n\n启用基本存储器并取得日期和时间。\ndateObj = new Date()\ndateObj = new Date(dateVal)\n\u003cfont color=\"green\"\u003e**dateVal**\u003c/font\u003e\n必选项。如果是数字值，dateVal 表示指定日期与 1970 年 1 月 1 日午夜间全球标准时间 的毫秒数。如果是字符串，则 dateVal 按照 parse 方法中的规则进行解析。dateVal 参数也可以是从某些 ActiveX(R) 对象返回的 VT_DATE 值。\n\ndateObj = new Date(year, month, date[, hours[, minutes[, seconds[,ms]]]]) \n\n**用[]括起来的是可选项（可写可不写）**\n\n\u003cfont color=\"green\"\u003e**说明**\u003c/font\u003e\nDate 对象保存以毫秒为单位表示特定时间段。如果某个参数的值大于其范围或为负数，则存储的其他值将做相应的调整。例如，如果指定 150 秒，JScript 将该数字重新定义为 2 分 30 秒。 \n\n如果数字为 NaN，则表示该对象不代表特定的时间段。如果未向 Date 对象传递参数，它将被初始化为当前时间 (UTC)。在能够使用该对象前必须为其赋值。 \n\nDate 对象能够表示的日期范围约等于 1970 年 1 月 1 日前后各 285,616 年。 \n\nDate 对象具有两个不创建 Date 对象就可以调用的静态方法。它们是 parse 和 UTC。 \n\n\u003cb\u003e\u003cfont color=\"green\"\u003e演示代码：\u003c/font\u003e\u003c/b\u003e\n\n```\n\u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eDate对象的用法演示\u003c/title\u003e\n        \u003cmeta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cscript type=\"text/javascript\" src=\"out.js\"\u003e\n        \u003c/script\u003e\n        \u003cscript type=\"text/javascript\"\u003e\n            var date = new Date();//当前日期时间，它的精确值= 从1970.1.1开始，到现在经过的毫秒数\n            println(date);//自带toString()\n            println(date.toString());//默认是GMT格式---Mon Jun 06 2016 20:03:45 GMT+0800 (中国标准时间)\n            println(date.toDateString());//默认是GMT格式---Mon Jun 06 2016\n            println(date.toLocaleString());//本地格式---2016/6/6 下午8:05:48\n            println(date.toLocaleDateString());//本地格式---2016/6/6---只有日期\n            //综上，带Date的只显示日期\n            println(\"\u003chr/\u003e\");\n            \n            var year = date.getFullYear();//获取现在的年份\n            var month = date.getMonth() + 1;//跟java一样，返回的月份和我们平时用的小1---它是序号-所以加一才是真正的月份\n            var day = date.getDate();//这才是我们要的日期---注意，getDay()返回的是星期几 \n            var weekDay = date.getDay();//星期几\n            println(year + \"-\" + month + \"-\" + day + \",星期\" + weekDay);\n            println(year + \"-\" + month + \"-\" + day + \",\" + getWeekDay(weekDay));\n            \n            function getWeekDay(weekDay){\n                var weeks = [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"];\n                return weeks[weekDay];\n            }\n            \n            //日期对象和毫秒值的转换\n            \n            var date2 = new Date();\n            date2.setFullYear(2015);//只更改年份\n            var time = date2.getTime();//日期--\u003e毫秒值\n            println(\"time=\" + time);\n            var date3 = new Date(time);//毫秒值--\u003e日期\n            println(date3.toLocaleString());\n            \n            //字符串跟日期之间的转换\n            //日期对象--\u003e字符串 ： 直接用toLocalString()，toLocalDateString()\n            //字符串--\u003e日期对象\n            var strDate = \"6/4/2016\";//格式: 月份/日期/年份\n            \n            //var strDate = \"6/4/19\";//不要这么写\n\t\t\t//格式: 月份/日期/年份  \n\t\t\t//IE ：如果年份只给2位则前面默认是19**\n\t\t\t//360浏览器：如果年份只给2位则前面默认是20**---超过50就前面默认是19**\n\t\t\t//年份值可以用 2 位数字表示也可以用 4 位数字表示。如果使用 2 位数字来表示年份，\n\t\t\t//那么该年份必须大于或等于 70。 \n\n            var time2 = Date.parse(strDate);//静态方法，返回值是毫秒值\n            println(time2);\n\t\t\tvar date4 = new Date(time2);\n\t\t\tprintln(date4.toLocaleString());\n            \n        \u003c/script\u003e\n\t\t\n\t\t\n\t\t\u003c!-- with语句演示 --\u003e\n\t\t\u003cscript type=\"text/javascript\"\u003e\n\t\t\t//在with内部的方法调用时可以省略该date对象\n\t\t\twith(date){\n\t\t\t\tvar year = getFullYear();\n\t\t\t\tvar month = getMonth()+1;//注意加一\n\t\t\t\tvar day = getDate();\n\t\t\t\tprintln(year+\"-\"+month+\"-\"+day);\n\t\t\t}\n\t\t\u003c/script\u003e\n\t\t\n    \u003c/body\u003e\n\u003c/html\u003e\n\n```\n\n\u003cfont color=\"green\"\u003e**360浏览器8.1 演示结果：**\u003c/font\u003e\n![](http://img.blog.csdn.net/20160606212101920)\n\n\n\u003cfont color=\"red\"\u003eMath 对象\u003c/font\u003e\n================================\n\n是一个固有对象，提供基本数学函数和常数。\nMath.[{property | method}]\n\n\u003cfont color=\"green\"\u003e**参数**\u003c/font\u003e\nproperty\n必选项。Math 对象的一个属性名。\n\nmethod\n必选项。Math.对象的一个方法名。\n\n\u003cfont color=\"green\"\u003e**说明**\u003c/font\u003e\nMath 对象不能用 new 运算符创建，如果试图这样做则给出错误。该对象在装载脚本引擎时由该引擎创建。其所有方法和属性在脚本中总是可用。 \n\n\u003cfont color=\"green\"\u003e**演示代码：**\u003c/font\u003e\n\n```\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003eMath对象的用法演示\u003c/title\u003e\n    \u003cmeta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"\u003e\n  \u003c/head\u003e\n  \n  \u003cbody\u003e\n  \t\u003cscript type=\"text/javascript\" src=\"out.js\"\u003e\n  \t\u003c/script\u003e\n\t\n\t\u003cscript type=\"text/javascript\"\u003e\n\t\tvar num1=Math.ceil(23.456);//返回大于等于其数字参数的最小整数。 \n\t\tvar num2=Math.floor(23.456);//返回小于等于其数值参数的最大整数。 \n\t\tvar num3=Math.pow(2,3);//表示2的3次方\n\t\tprintln(num1+\",\"+num2+\",\"+num3);//24,23,8\n\t\t\n\t\tvar num4=Math.round(7.46);//四舍五入\n\t\tprintln(num4);//7\n\t\t\n\t\t//生成10个[0,10]范围内的随机整数\n\t\tfor(var x=0;x\u003c10;x++){\n\t\t\tvar n=Math.random()*100;\n\t\t\tif(n==99){\n\t\t\t\tcontinue;\n\t\t\t\tx--;\n\t\t\t}\n\t\t\tn=Math.floor(n/9);\n\t\t\tprintln(n);\n\t\t}\n\t\t\t\t\n\t\u003c/script\u003e\n  \t\n  \u003c/body\u003e\n\u003c/html\u003e\n\n```\n\n\u003cfont color=\"green\"\u003e**360浏览器8.1 演示结果：**\u003c/font\u003e\n\n![](http://img.blog.csdn.net/20160607103808188)\n\n\n\u003cfont color=\"red\"\u003eGlobal 对象--异常以及for-in语句\u003c/font\u003e\n=========\n\n是一个固有对象，目的是把所有全局方法集中在一个对象中。\nGlobal 对象没有语法。直接调用其方法。 \n\n\u003cfont color=\"green\"\u003e**说明**\u003c/font\u003e\nGlobal 对象从不直接使用，并且不能用 new 运算符创建。它在 Scripting 引擎被初始化时创建，并立即使其方法和属性可用。 \n也就是说，它的所有方法都是静态的，而且我们可以省略Global.直接调用它的方法。\n\n\u003cfont color=\"green\"\u003e**演示代码：**\u003c/font\u003e\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eGlobal对象用法演示\u003c/title\u003e\n        \u003cmeta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cscript type=\"text/javascript\" src=\"out.js\"\u003e\n        \u003c/script\u003e\n        \u003cscript type=\"text/javascript\"\u003e\n            /*\n             Global对象中的属性和方法，调用时可以省略：Global.\n             */\n            println(\"123\" + 4);//1234\n            //字符串输出\n            \n            println(parseInt(\"123\") + 4);//127\n            //数值相加输出\n            \n            //注意，parseInt()这个方法和Java不同的地方：\n            //       1)不会抛异常(如果解析不了，它就返回NaN)\n            //       2)如果解析串中前面有数字，那么这部分前导数字会被单独解析出来当作整个方法的返回结果。但后面有数字则无法解析\n            \n            println(parseInt(\"aaa123\"));//NaN--Not a Number --非法的意思\n            println(parseInt(\"1234aaa\"));//1234\n            println(parseInt(\"12345a1a1a123\"));//12345\n            println(\"\u003chr/\u003e\");\n            \n            //带进制的转换1： 把指定进制的格式串 转换成 十进制的整数 \n            //---利用Global中的 parseInt(numString, [radix]) 方法\n            var num = parseInt(\"110\", 10);//以十进制来解析\n            println(num);//110---输出10进制\n            var num = parseInt(\"110\", 2);//以二进制来解析\n            println(num);//6---输出10进制\n            var num = parseInt(\"210\", 2);//以二进制来解析\n            println(num);//NaN---代表非法---解析出错\n            var num = parseInt(\"210\", 16);//以16进制来解析\n            println(num);//528\n            var num = parseInt(\"0x210\", 16);//以16进制来解析\n            println(num);//528---和前面一样\n            //带进制的转换2：把 十进制的整数 转换成 其它进制的数 \n            //---利用Number对象中的  toString([radix]) 方法\n            \n            //var num = new Number(528);//和下面一样的\t\t\t\n            var num = 528;\n            println(num.toString(2)); //结果就是二进制的数： 1000010000\n            println(num.toString(16)); //结果就是16进制的数： 210\n        \u003c/script\u003e\n        \u003c!-- js中的异常处理及自定义异常 --\u003e\n        \u003cscript type=\"text/javascript\"\u003e\n        try {\n            // fun(1);//没有异常\n            fun(0);//有异常(自己抛出的异常)\n        } \n        catch (e) {\n            println(e);\n        }\n        finally {\n            println(\"bbbb\");//不管有没有异常，都会执行\n        }\n        \n        function fun(n){\n            if (n == 0) {\n                throw \"exception 0\";//相当于java中的手动抛自定义异常\n            }\n        }\n        \u003c/script\u003e\n        \u003c!--  for-in语句  --\u003e\n        \u003cscript type=\"text/javascript\"\u003e\n            /*\n             for( 变量名  in 对象 ){\n             ...//分别对对象中的元素(属性)进行遍历操作\n             }\n             */\n            //数组对象\n\t\t\t\n\t\t\tvar arr = [1,2,3,56,435,3];\n\t\t\tfor( x in arr){//注意，对于数组，这里的x是下标即是0,1,2,3,...\n\t\t\t\tprintln( x+\":  \"+ arr[x] );\n\t\t\t}\n\t\t\t\n\t\t\t//用for...in语句操作自定义对象---见后面部分的代码演示\n\t\t\t\n        \u003c/script\u003e\n    \u003c/body\u003e\n\u003c/html\u003e\n\n```\n\n\u003cfont color=\"green\"\u003e**360浏览器8.1 演示结果：**\u003c/font\u003e\n![](http://img.blog.csdn.net/20160607114159604)\n\n\n\n\u003cfont color=\"red\"\u003e自定义对象-for-in语句\u003c/font\u003e\n=======================================\n\n 用js来描述我们自己的对象，如类似java当中的Person类 \n\n这个功能很强大的，function中可以定义属性和方法！类似Java中class。\n\n\u003cfont color=\"green\"\u003e**演示代码：**\u003c/font\u003e\n\n```\n\u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003e自定义对象的用法演示\u003c/title\u003e\n        \u003cmeta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cscript type=\"text/javascript\" src=\"out.js\"\u003e\n        \u003c/script\u003e\n        \u003c!-- 用js来描述我们自己的对象，如类似java当中的Person类 --\u003e\n        \u003cscript type=\"text/javascript\"\u003e\n            /*  js是基于对象的，如果要描述对象，那么可以用function。因为js中的\n             function功能和java中的类(模板) 本质上是差不多的---里面可以添加变量，也可以添加自定义函数\n             */\n            function Person(){\n                //alert(\"Person的构造方法...\");\n            }\n            \n            var p = new Person();\n            //给对象添加属性，直接采用“p.属性名=”的形式赋值就行---如果没有则是添加，如果有则是修改\n            //※※方式1：在对象外面添加属性和方法\n            p.name = \"Jack\";\n            p.age = 23;\n            //alert(p.name+\",\"+p.age);\n            //给对象添加函数\n            p.info = function(){//相当于toString()\n                return this.name + \",\" + this.age;\n            };\n            \n            println(\"p的信息:\" + p.info());\n        \u003c/script\u003e\n        \u003cscript type=\"text/javascript\"\u003e\n            var obj = new Object();\n            //※※方式1：在对象外面添加属性和方法   \n            //1给对象添加属性  \n            obj.name = \"god\";\n            obj.age = 10000;\n            \n            //2给对象添加属性\n            obj.toString = function(){\n                return this.name + \",\" + this.age;\n            }\n            println(obj);\n        \u003c/script\u003e\n        \u003c!--\n        注意：前面用“对象.prototype.属性或函数名=***”的形式，更改的是原型对象\n        而本例用 “对象.属性或函数名=***”的形式，更改的是当前对象(原型对象的克隆体)\n        --\u003e\n        \u003cscript type=\"text/javascript\"\u003e\n            //js自定义对象的构造器+属性+方法\n            function Person(name, age){\n                //※※方式2：在函数对象里面添加属性和方法\n                this.name = name;\n                this.age = age;\n                \n                this.toString = function(){\n                    return this.name + \",\" + this.age;\n                };\n                \n                this.setName = function(name){\n                    this.name = name;\n                };\n                this.getName = function(){\n                    return this.name;\n                };\n            }\n            \n            var p2 = new Person(\"Tom\", 22);\n            println(\"p2.name=\" + p2.name + \", p2.age=\" + p2.age);\n            println(\"p2= \" + p2);\n            p2.setName(\"Rose\");\n            println(\"p2=\" + p2);\n            println(\"p2.getName=\" + p2.getName());\n        \u003c/script\u003e\n\t\t\n\t\t\u003cscript type=\"text/javascript\"\u003e\n\t\t\tprintln(\"\u003chr/\u003e\");\n\t\t\t\n\t\t\t //用for...in语句操作自定义对象\n\t\t\t for( var x in p2){//x是函数中的成员变量与成员方法的名称\n\t\t\t \tprintln(\"x=\"+x+\"-----\"+p2[x]);// p2[x]就是valeOf(x)\n\t\t\t }\n\t\t\t\n\t\t\u003c/script\u003e\n\t\t\n    \u003c/body\u003e\n\u003c/html\u003e\n\n```\n\n\n\u003cfont color=\"red\"\u003e**360浏览器8.1 演示结果：**\u003c/font\u003e\n\n![](http://img.blog.csdn.net/20160607193022873)\n\n\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-668-thread-1] [chx]
[INFO] 2017-07-28 12:29:26 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2016-06\2016-06-07-JavaScript---网络编程(4)-Date、Math、Global和自定义对象.markdown [pool-668-thread-1] [chx]
[INFO] 2017-07-28 12:29:26 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《JavaScript---网络编程(4)-Date、Math、Global和自定义对象》成功 [pool-668-thread-1] [chx]
[INFO] 2017-07-28 12:29:26 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-659] [chx]
[INFO] 2017-07-28 12:29:27 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-660] [chx]
[INFO] 2017-07-28 12:29:27 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-661] [chx]
[INFO] 2017-07-28 12:29:27 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-662] [chx]
[INFO] 2017-07-28 12:29:27 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-663] [chx]
[INFO] 2017-07-28 12:29:28 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-664] [chx]
[INFO] 2017-07-28 12:29:28 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-665] [chx]
[INFO] 2017-07-28 12:29:28 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-666] [chx]
[INFO] 2017-07-28 12:29:29 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-667] [chx]
[INFO] 2017-07-28 12:29:29 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-668] [chx]
[INFO] 2017-07-28 12:37:48 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider blog.csdn.net started! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:37:48 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://blog.csdn.net/ohenry88/article/list/9999 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:29)] -> 开始获取ohenry88的所有博客文章ID... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76221465 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76100356 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75948544 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75905534 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75790969 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75769704 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75701576 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75451673 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75331436 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75267742 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75208757 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74937873 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74858141 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74619521 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74156876 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74132477 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73863848 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73744696 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73196798 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:41657169 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:38855273 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23599257 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23506175 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23220067 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23127865 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:48 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:50)] -> 获取所有的文章博客ID完成，您一共有25篇文章... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:37:53 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider blog.csdn.net closed! 1 pages downloaded. [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:40:21 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider blog.csdn.net started! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:40:21 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://blog.csdn.net/ohenry88/article/list/9999 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:29)] -> 开始获取ohenry88的所有博客文章ID... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76221465 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76100356 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75948544 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75905534 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75790969 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75769704 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75701576 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75451673 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75331436 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75267742 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75208757 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74937873 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74858141 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74619521 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74156876 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74132477 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73863848 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73744696 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73196798 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:41657169 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:38855273 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23599257 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23506175 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23220067 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23127865 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:21 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:50)] -> 获取所有的文章博客ID完成，您一共有25篇文章... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:40:26 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider blog.csdn.net closed! 1 pages downloaded. [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:41:30 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider blog.csdn.net started! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:41:30 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://blog.csdn.net/ohenry88/article/list/9999 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:29)] -> 开始获取ohenry88的所有博客文章ID... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76221465 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76100356 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75948544 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75905534 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75790969 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75769704 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75701576 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75451673 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75331436 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75267742 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75208757 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74937873 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74858141 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74619521 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74156876 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74132477 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73863848 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73744696 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73196798 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:41657169 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:38855273 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23599257 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23506175 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23220067 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23127865 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:30 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:50)] -> 获取所有的文章博客ID完成，您一共有25篇文章... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:41:35 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider blog.csdn.net closed! 1 pages downloaded. [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:42:23 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider blog.csdn.net started! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:42:23 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://blog.csdn.net/ohenry88/article/list/9999 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:23 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:29)] -> 开始获取ohenry88的所有博客文章ID... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76221465 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76100356 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75948544 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75905534 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75790969 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75769704 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75701576 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75451673 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75331436 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75267742 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75208757 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74937873 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74858141 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74619521 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74156876 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74132477 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73863848 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73744696 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73196798 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:41657169 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:38855273 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23599257 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23506175 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23220067 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23127865 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:24 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:50)] -> 获取所有的文章博客ID完成，您一共有25篇文章... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:42:29 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider blog.csdn.net closed! 1 pages downloaded. [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:42:29 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-2] [chx]
[INFO] 2017-07-28 12:42:29 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23220067 [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:42:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":23220067,"title":"寻找兄弟数字","create_at":"\/Date(1396971526000)\/","create":"2014-04-08 11:38:46","view_count":650,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"#ifndef _FIND_SIMILAR_WORD_H_\n#define _FIND_SIMILAR_WORD_H_\n#include \n#include \nusing namespace std;\n/* \n* 编程实现单链表的排序 \n*/ \nclass Brother{ \npublic :\n\tBrother(char *n) :data(n) {}\n\tBrother* addWord(char","url":"http://blog.csdn.net/BLACKMOON88/article/details/23220067","categories":"","tags":"单链表,map,编程,iterator,c","content":"\r\n\u003cpre code_snippet_id=\"282103\" snippet_file_name=\"blog_20140408_1_1902756\"  name=\"code\" class=\"cpp\"\u003e#ifndef _FIND_SIMILAR_WORD_H_\n#define _FIND_SIMILAR_WORD_H_\n#include &lt;string&gt;\n#include &lt;map&gt;\nusing namespace std;\n/* \n* 编程实现单链表的排序 \n*/ \nclass Brother{ \npublic :\n\tBrother(char *n) :data(n) {}\n\tBrother* addWord(char *word);\npublic :\n    char *data; \n    Brother *next; \n\tBrother *pre;\n};\n\nint compareSeq(char *srcWord, char *destWord){\n\tchar *srcChar=srcWord;\n\tchar *destChar=destWord;\n\twhile(*srcChar!=\u0027\\0\u0027){\n\t\tif (*srcChar&gt;*destChar){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(*srcChar&lt;*destChar){\n\t\t\treturn -1;\n\t\t}\n\t\telse{\n\t\t\tsrcChar++;\n\t\t\tdestChar++;\n\t\t}\n\t}\n\treturn 0;\n}\n\nBrother* Brother::addWord(char *srcWord){\n\t\tBrother* currentNode=this;\n\t\tint greaterThan=1;\n\t\tBrother *newWord=new Brother(srcWord);\n\t\tnewWord-&gt;next=NULL;\n\t\tnewWord-&gt;pre=NULL;\n\t\t//不大于后者\n\t\twhile(greaterThan!=-1){\n\t\t\tgreaterThan=compareSeq(srcWord,currentNode-&gt;data);\n\t\t\tif(greaterThan==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(greaterThan!=-1){\n\t\t\t\tif(currentNode-&gt;next!=NULL){\n\t\t\t\t\tcurrentNode=currentNode-&gt;next;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcurrentNode-&gt;next=newWord;\n\t\t\t\t\tnewWord-&gt;pre=currentNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t }\n\t\tif(greaterThan==-1){\n\t\t\tif(currentNode-&gt;pre==NULL){\n\t\t\t\tnewWord-&gt;next=currentNode;\n\t\t\t\tcurrentNode-&gt;pre=newWord;\n\t\t\t\treturn newWord;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcurrentNode-&gt;pre-&gt;next=newWord;\n\t\t\t\tnewWord-&gt;pre=currentNode-&gt;pre;\n\t\t\t\tnewWord-&gt;next=currentNode;\n\t\t\t\tcurrentNode-&gt;pre=newWord;\n\t\t\t}\n\t\t}\n\t\treturn NULL;\n}\n#endif \n\u003c/pre\u003e\u003cpre code_snippet_id=\"282103\" snippet_file_name=\"blog_20140408_2_6123660\"  name=\"code\" class=\"cpp\"\u003e/******************************************************************************\n\n  Copyright (C), 2001-2012, Huawei Tech. Co., Ltd.\n\n ******************************************************************************\n  File Name     : FindSimilarWord.cpp\n  Version       :\n  Author        :\n  Created       : 2012/09\n  Last Modified :\n  Description   :\n  Function List :\n\n  History       :\n  1.Date        : 2012/09\n    Author      :\n    Modification: Created file\n\n******************************************************************************/\n#include &quot;FindSimilarWord.h&quot;\n\ntypedef map&lt;string,Brother*&gt;::iterator DicPtrItr;\nmap&lt;string, Brother*&gt; dic;\n//生成Key\nstring generateKey(char srcWord[]){\n\tint length=(int)strlen(srcWord);\n\tchar srcWord2[60]={};\n\tchar tempChar;\n\tstrcpy(srcWord2,srcWord);\n\tfor(int i=0;i&lt;length-1;i++){\n\t\tfor(int j=0;j&lt;length-i-1;j++){\n\t\t\tif(srcWord2[j]&gt;srcWord2[j+1]){\n\t\t\t\ttempChar=srcWord2[j];\n\t\t\t\tsrcWord2[j]=srcWord2[j+1];\n\t\t\t\tsrcWord2[j+1]=tempChar;\n\t\t\t}\n\t\t}\n\t}\n\treturn string(srcWord2);\n}\n/******************************************************************************\n原    型：int AddOneWord (char* Word);\n功    能：在字典中增加一个单词\n输入参数： \n          Word 单词字符串，调用者保证Word指针不为空，指向的是合法单词\n输出参数：\n          无\n返回值：\n        -1 失败（单词在字典中已存在等情况）\n        0  成功\n********************************************************************************/\nint AddOneWord (char* Word)\n{\n    /* 在这里实现功能 */\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tBrother *brother,*head;\n\tif(dicPtrItr!=dic.end()){\n\t\tbrother=dicPtrItr-&gt;second;\n\t\thead=brother-&gt;addWord(Word);\n\t\tif (head!=NULL){\n\t\t\tdic[s]=head;\n\t\t}\n\t}\n\telse{\n\t\tbrother=new Brother(Word);\n\t\tbrother-&gt;next=NULL;\n\t\tbrother-&gt;pre=NULL;\n\t\tdic[s]=brother;\n\t}\n    return 0;\n}\n\n/******************************************************************************\n原    型：int FindSimilarWordNum (char* Word);\n功    能：查找指定单词在字典中的兄弟单词个数\n输入参数：\n          Word 指定单词字符串，调用者保证Word指针不为空，指向的是合法单词\n输出参数：\n          无\n返回值：\n          返回指定单词在字典中的兄弟单词总个数。如果不存在兄弟单词，返回0\n*******************************************************************************/\nint FindSimilarWordNum (char* Word)\n{\n\n    /* 在这里实现功能 */\n\tint i=0;\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tif(dicPtrItr==dic.end()){\n\t\treturn 0;\n\t}\n\tBrother *tempBro=dicPtrItr-&gt;second;\n\twhile(tempBro!=NULL){\n\t\tif(string(tempBro-&gt;data)!=string(Word)) {\n\t\t\ti++;\n\t\t}\n\t\ttempBro=tempBro-&gt;next;\n\t}\n    return i;\n}\n\n/******************************************************************************\n原    型：int FindOneSimilarWord (char* Word, int Seq, char* SimilarWord);\n功    能：查找指定单词的指定序号的兄弟单词，指定序号指字典中兄弟单词按字典顺序\n          排序后的序号（从1开始）\n输入参数：\n          Word 指定单词字符串，调用者保证Word指针不为空，指向的是合法单词\n          Seq 指定序号（大于等于1）\n输出参数：\n          SimilarWord 返回兄弟单词字符串，指针不为空，指向的内存由调用者预先分配，\n          占51个字节长度，输出的兄弟单词必须紧跟’\\0’结束。如果不存在指定序号的\n          兄弟单词，输出空串。\n返回值：\n          -1 失败（如果不存在指定序号的兄弟单词，返回失败）\n          0  成功\n*******************************************************************************/\nint FindOneSimilarWord (char* Word, int Seq, char* SimilarWord)\n{\n    /* 在这里实现功能 */\n\tif(FindSimilarWordNum(Word)&lt;Seq){\n\t\treturn -1;\n\t}\n\tint i=0;\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tBrother *tempBro=dicPtrItr-&gt;second;\n\twhile(tempBro!=NULL){\n\t\tif(string(tempBro-&gt;data)!=string(Word)) {\n\t\t\ti++;\n\t\t\tif(i==Seq){\n\t\t\t\tstrcpy(SimilarWord,tempBro-&gt;data);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\ttempBro=tempBro-&gt;next;\n\t}\n    return -1;\n}\n\n/******************************************************************************\n原    型：void ClearAllWords(void);\n功    能：清空字典中所有单词\n输入参数： \n          无\n输出参数：\n          无\n返回值：\n          无\n\n*******************************************************************************/\nvoid ClearWords(Brother *currentNode){\n\tBrother * pr=NULL;\n\twhile(currentNode!=NULL){\n\t\t\tpr=currentNode-&gt;next;\n\t\t\tdelete currentNode;\n\t\t\tcurrentNode=pr;\n\t\t}\n}\n\nvoid ClearAllWords(void)\n{\n    /* 在这里实现功能 */\n\tDicPtrItr dicPtrItr=dic.begin();\n\tBrother *currentNode;\n\twhile(dicPtrItr!=dic.end()){\n\t\tcurrentNode=dicPtrItr-&gt;second;\n\t\tClearWords(currentNode);\n\t\tdicPtrItr++;\n\t}\n\tdic.clear();\n}\n\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:42:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-08-寻找兄弟数字.markdown [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:42:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《寻找兄弟数字》成功 [pool-2-thread-1] [chx]
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/74132477 error [pool-2-thread-2] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75451673 error [pool-2-thread-17] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75948544 error [pool-2-thread-20] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/41657169 error [pool-2-thread-10] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/76221465 error [pool-2-thread-7] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/23506175 error [pool-2-thread-22] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/74156876 error [pool-2-thread-12] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75701576 error [pool-2-thread-8] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/74937873 error [pool-2-thread-13] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75331436 error [pool-2-thread-23] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75790969 error [pool-2-thread-4] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/38855273 error [pool-2-thread-6] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75905534 error [pool-2-thread-24] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75267742 error [pool-2-thread-21] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/23599257 error [pool-2-thread-16] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/23127865 error [pool-2-thread-3] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/74858141 error [pool-2-thread-18] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75769704 error [pool-2-thread-14] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/73196798 error [pool-2-thread-25] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/73744696 error [pool-2-thread-5] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/74619521 error [pool-2-thread-11] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/73863848 error [pool-2-thread-9] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/76100356 error [pool-2-thread-19] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:42:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75208757 error [pool-2-thread-15] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[INFO] 2017-07-28 12:42:40 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 25 pages downloaded. [Thread-2] [chx]
[INFO] 2017-07-28 12:43:10 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider blog.csdn.net started! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:43:10 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://blog.csdn.net/ohenry88/article/list/9999 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:29)] -> 开始获取ohenry88的所有博客文章ID... [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76221465 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76100356 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75948544 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75905534 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75790969 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75769704 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75701576 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75451673 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75331436 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75267742 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75208757 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74937873 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74858141 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74619521 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74156876 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74132477 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73863848 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73744696 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73196798 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:41657169 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:38855273 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23599257 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23506175 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23220067 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23127865 [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:10 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:50)] -> 获取所有的文章博客ID完成，您一共有25篇文章... [pool-3-thread-1] [chx]
[INFO] 2017-07-28 12:43:15 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider blog.csdn.net closed! 1 pages downloaded. [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:43:15 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-3] [chx]
[INFO] 2017-07-28 12:43:15 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23220067 [pool-4-thread-1] [chx]
[INFO] 2017-07-28 12:43:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":23220067,"title":"寻找兄弟数字","create_at":"\/Date(1396971526000)\/","create":"2014-04-08 11:38:46","view_count":650,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"#ifndef _FIND_SIMILAR_WORD_H_\n#define _FIND_SIMILAR_WORD_H_\n#include \n#include \nusing namespace std;\n/* \n* 编程实现单链表的排序 \n*/ \nclass Brother{ \npublic :\n\tBrother(char *n) :data(n) {}\n\tBrother* addWord(char","url":"http://blog.csdn.net/BLACKMOON88/article/details/23220067","categories":"","tags":"单链表,map,编程,iterator,c","content":"\r\n\u003cpre code_snippet_id=\"282103\" snippet_file_name=\"blog_20140408_1_1902756\"  name=\"code\" class=\"cpp\"\u003e#ifndef _FIND_SIMILAR_WORD_H_\n#define _FIND_SIMILAR_WORD_H_\n#include &lt;string&gt;\n#include &lt;map&gt;\nusing namespace std;\n/* \n* 编程实现单链表的排序 \n*/ \nclass Brother{ \npublic :\n\tBrother(char *n) :data(n) {}\n\tBrother* addWord(char *word);\npublic :\n    char *data; \n    Brother *next; \n\tBrother *pre;\n};\n\nint compareSeq(char *srcWord, char *destWord){\n\tchar *srcChar=srcWord;\n\tchar *destChar=destWord;\n\twhile(*srcChar!=\u0027\\0\u0027){\n\t\tif (*srcChar&gt;*destChar){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(*srcChar&lt;*destChar){\n\t\t\treturn -1;\n\t\t}\n\t\telse{\n\t\t\tsrcChar++;\n\t\t\tdestChar++;\n\t\t}\n\t}\n\treturn 0;\n}\n\nBrother* Brother::addWord(char *srcWord){\n\t\tBrother* currentNode=this;\n\t\tint greaterThan=1;\n\t\tBrother *newWord=new Brother(srcWord);\n\t\tnewWord-&gt;next=NULL;\n\t\tnewWord-&gt;pre=NULL;\n\t\t//不大于后者\n\t\twhile(greaterThan!=-1){\n\t\t\tgreaterThan=compareSeq(srcWord,currentNode-&gt;data);\n\t\t\tif(greaterThan==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(greaterThan!=-1){\n\t\t\t\tif(currentNode-&gt;next!=NULL){\n\t\t\t\t\tcurrentNode=currentNode-&gt;next;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcurrentNode-&gt;next=newWord;\n\t\t\t\t\tnewWord-&gt;pre=currentNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t }\n\t\tif(greaterThan==-1){\n\t\t\tif(currentNode-&gt;pre==NULL){\n\t\t\t\tnewWord-&gt;next=currentNode;\n\t\t\t\tcurrentNode-&gt;pre=newWord;\n\t\t\t\treturn newWord;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcurrentNode-&gt;pre-&gt;next=newWord;\n\t\t\t\tnewWord-&gt;pre=currentNode-&gt;pre;\n\t\t\t\tnewWord-&gt;next=currentNode;\n\t\t\t\tcurrentNode-&gt;pre=newWord;\n\t\t\t}\n\t\t}\n\t\treturn NULL;\n}\n#endif \n\u003c/pre\u003e\u003cpre code_snippet_id=\"282103\" snippet_file_name=\"blog_20140408_2_6123660\"  name=\"code\" class=\"cpp\"\u003e/******************************************************************************\n\n  Copyright (C), 2001-2012, Huawei Tech. Co., Ltd.\n\n ******************************************************************************\n  File Name     : FindSimilarWord.cpp\n  Version       :\n  Author        :\n  Created       : 2012/09\n  Last Modified :\n  Description   :\n  Function List :\n\n  History       :\n  1.Date        : 2012/09\n    Author      :\n    Modification: Created file\n\n******************************************************************************/\n#include &quot;FindSimilarWord.h&quot;\n\ntypedef map&lt;string,Brother*&gt;::iterator DicPtrItr;\nmap&lt;string, Brother*&gt; dic;\n//生成Key\nstring generateKey(char srcWord[]){\n\tint length=(int)strlen(srcWord);\n\tchar srcWord2[60]={};\n\tchar tempChar;\n\tstrcpy(srcWord2,srcWord);\n\tfor(int i=0;i&lt;length-1;i++){\n\t\tfor(int j=0;j&lt;length-i-1;j++){\n\t\t\tif(srcWord2[j]&gt;srcWord2[j+1]){\n\t\t\t\ttempChar=srcWord2[j];\n\t\t\t\tsrcWord2[j]=srcWord2[j+1];\n\t\t\t\tsrcWord2[j+1]=tempChar;\n\t\t\t}\n\t\t}\n\t}\n\treturn string(srcWord2);\n}\n/******************************************************************************\n原    型：int AddOneWord (char* Word);\n功    能：在字典中增加一个单词\n输入参数： \n          Word 单词字符串，调用者保证Word指针不为空，指向的是合法单词\n输出参数：\n          无\n返回值：\n        -1 失败（单词在字典中已存在等情况）\n        0  成功\n********************************************************************************/\nint AddOneWord (char* Word)\n{\n    /* 在这里实现功能 */\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tBrother *brother,*head;\n\tif(dicPtrItr!=dic.end()){\n\t\tbrother=dicPtrItr-&gt;second;\n\t\thead=brother-&gt;addWord(Word);\n\t\tif (head!=NULL){\n\t\t\tdic[s]=head;\n\t\t}\n\t}\n\telse{\n\t\tbrother=new Brother(Word);\n\t\tbrother-&gt;next=NULL;\n\t\tbrother-&gt;pre=NULL;\n\t\tdic[s]=brother;\n\t}\n    return 0;\n}\n\n/******************************************************************************\n原    型：int FindSimilarWordNum (char* Word);\n功    能：查找指定单词在字典中的兄弟单词个数\n输入参数：\n          Word 指定单词字符串，调用者保证Word指针不为空，指向的是合法单词\n输出参数：\n          无\n返回值：\n          返回指定单词在字典中的兄弟单词总个数。如果不存在兄弟单词，返回0\n*******************************************************************************/\nint FindSimilarWordNum (char* Word)\n{\n\n    /* 在这里实现功能 */\n\tint i=0;\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tif(dicPtrItr==dic.end()){\n\t\treturn 0;\n\t}\n\tBrother *tempBro=dicPtrItr-&gt;second;\n\twhile(tempBro!=NULL){\n\t\tif(string(tempBro-&gt;data)!=string(Word)) {\n\t\t\ti++;\n\t\t}\n\t\ttempBro=tempBro-&gt;next;\n\t}\n    return i;\n}\n\n/******************************************************************************\n原    型：int FindOneSimilarWord (char* Word, int Seq, char* SimilarWord);\n功    能：查找指定单词的指定序号的兄弟单词，指定序号指字典中兄弟单词按字典顺序\n          排序后的序号（从1开始）\n输入参数：\n          Word 指定单词字符串，调用者保证Word指针不为空，指向的是合法单词\n          Seq 指定序号（大于等于1）\n输出参数：\n          SimilarWord 返回兄弟单词字符串，指针不为空，指向的内存由调用者预先分配，\n          占51个字节长度，输出的兄弟单词必须紧跟’\\0’结束。如果不存在指定序号的\n          兄弟单词，输出空串。\n返回值：\n          -1 失败（如果不存在指定序号的兄弟单词，返回失败）\n          0  成功\n*******************************************************************************/\nint FindOneSimilarWord (char* Word, int Seq, char* SimilarWord)\n{\n    /* 在这里实现功能 */\n\tif(FindSimilarWordNum(Word)&lt;Seq){\n\t\treturn -1;\n\t}\n\tint i=0;\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tBrother *tempBro=dicPtrItr-&gt;second;\n\twhile(tempBro!=NULL){\n\t\tif(string(tempBro-&gt;data)!=string(Word)) {\n\t\t\ti++;\n\t\t\tif(i==Seq){\n\t\t\t\tstrcpy(SimilarWord,tempBro-&gt;data);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\ttempBro=tempBro-&gt;next;\n\t}\n    return -1;\n}\n\n/******************************************************************************\n原    型：void ClearAllWords(void);\n功    能：清空字典中所有单词\n输入参数： \n          无\n输出参数：\n          无\n返回值：\n          无\n\n*******************************************************************************/\nvoid ClearWords(Brother *currentNode){\n\tBrother * pr=NULL;\n\twhile(currentNode!=NULL){\n\t\t\tpr=currentNode-&gt;next;\n\t\t\tdelete currentNode;\n\t\t\tcurrentNode=pr;\n\t\t}\n}\n\nvoid ClearAllWords(void)\n{\n    /* 在这里实现功能 */\n\tDicPtrItr dicPtrItr=dic.begin();\n\tBrother *currentNode;\n\twhile(dicPtrItr!=dic.end()){\n\t\tcurrentNode=dicPtrItr-&gt;second;\n\t\tClearWords(currentNode);\n\t\tdicPtrItr++;\n\t}\n\tdic.clear();\n}\n\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-4-thread-1] [chx]
[INFO] 2017-07-28 12:43:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-08-寻找兄弟数字.markdown [pool-4-thread-1] [chx]
[INFO] 2017-07-28 12:43:15 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《寻找兄弟数字》成功 [pool-4-thread-1] [chx]
[INFO] 2017-07-28 12:43:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/75948544 [pool-4-thread-20] [chx]
[INFO] 2017-07-28 12:43:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> 






<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta property="qc:admins" content="24530273213633466654" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>帐号登录</title>
    
    
    <link type="text/css" rel="stylesheet" href="/css/bootstrap.css;jsessionid=77500D5417BD51CC22AE8F94568B46CA.tomcat2" />
    <link type="text/css" rel="stylesheet" href="/css/login.css;jsessionid=77500D5417BD51CC22AE8F94568B46CA.tomcat2" />
    <link type="text/css" rel="stylesheet" href="/css/weixinqr.css;jsessionid=77500D5417BD51CC22AE8F94568B46CA.tomcat2" />
    <script src="https://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js"></script>
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->
    <script>
	var _hmt = _hmt || [];
	(function() {
	  var hm = document.createElement("script");
	  hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
	  var s = document.getElementsByTagName("script")[0]; 
	  s.parentNode.insertBefore(hm, s);
	})();
	</script>
  </head>
  <body>
  	<div id="hidebg"></div>
	<div id="hidebox"><div id="close" onClick="hide();"></div><div id="wxqr" class="wxqr"></div></div>
  	<script type="text/javascript">
  		var protocol = window.location.protocol;
  		document.write('<script type="text/javascript" src="' +protocol+ '//csdnimg.cn/pubfooter/js/repoAddr2.js?v=' + Math.random() + '"></'+'script>');
	</script>
	
    <div class="header"></div>
    <div class="main">
      <div class="container container-custom">
        <div class="row wrap-login">
          <div class="login-banner col-sm-6 col-md-7 col-lg-7 hidden-xs"><a href="http://edu.csdn.net/huiyiCourse/series_detail/45" target="_blank"><img src=../bgimage/login-banner.png class="img-responsive"></a></div>
          <div class="login-user col-xs-12 col-sm-6 col-md-5 col-lg-5">
            <div class="login-part">
              <h3>帐号登录 </h3>
              <div class="user-info">
                <div class="user-pass">
                
                  <form id="fm1" action="/;jsessionid=77500D5417BD51CC22AE8F94568B46CA.tomcat2?service=http://write.blog.csdn.net/help/notfound?aspxerrorpath=/mdeditor/75948544" method="post">

                    <input id="username" name="username" tabindex="1" placeholder="输入用户名/邮箱/手机号" class="user-name" type="text" value=""/>
                    <div class="mobile-auth" style="display:none"><span>该手机已绑定账号，可使用  </span><a href="" id="mloginurl" class="mobile-btn" >手机验证码登录</a></div>
                    <input id="password" name="password" tabindex="2" placeholder="输入密码" class="pass-word" type="password" value="" autocomplete="off"/>
                   
                    
						
						
							<div class="error-mess" style="display:none;">
								<span class="error-icon"></span><span id="error-message"></span>
							</div>
						
					
					
                    <div class="row forget-password">
                    	<span class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        	<input type="checkbox" name="rememberMe" id="rememberMe" value="true" class="auto-login" tabindex="4"/>
                        	<label for="rememberMe">下次自动登录</label>
                        </span>
                        <span class="col-xs-6 col-sm-6 col-md-6 col-lg-6 forget tracking-ad" data-mod="popu_26">
                        	<a href="/account/fpwd?action=forgotpassword&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F75948544" tabindex="5">忘记密码</a>
                        </span>
                    </div>
                    <!-- 该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。 -->
					<input type="hidden" name="lt" value="LT-337554-3JAMeVWEpqRW2fFxADTPrr95Cdrd1w" />
			 		<input type="hidden" name="execution" value="e1s1" /> 
					<input type="hidden" name="_eventId" value="submit" /> 
					<input class="logging" accesskey="l" value="登 录" tabindex="6" type="button" /> 
                    
                  </form>
                </div>
              </div>
              <div class="line"></div>
              <div class="third-part tracking-ad" data-mod="popu_27">
              	<span style="width: 257px;">第三方帐号登录</span>
              	<span><font color="red">  </font></span>
              	<a id="qqAuthorizationUrl" href="https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=100270989&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DQQProvider&state=test" class="qq"></a>
              	
                   	<a id="wechatAuthorizationUrl" href="javascript:void(0)" onClick="show();" class="wechat" target="_parent"></a>
                   	<script src="/js/apps/weixinqr.js;jsessionid=77500D5417BD51CC22AE8F94568B46CA.tomcat2"></script>
				
              	<a id="sinaAuthorizationUrl" href="https://api.weibo.com/oauth2/authorize?client_id=2601122390&response_type=code&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DSinaWeiboProvider" class="sina"></a>
              	<a id="baiduAuthorizationUrl" href="https://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id=cePqkUpKCBrcnQtARTNPxxQG&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DBaiduProvider" class="baidu"></a>
              	<a id="osChinaAuthorizationUrl" href="https://www.oschina.net/action/oauth2/authorize?response_type=code&client_id=cIh1UuWvSyrYlbe93rM6&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DOsChinaProvider&state=test" class="cc"></a>
              	<a id="githubAuthorizationUrl" href="https://github.com/login/oauth/authorize?client_id=4bceac0b4d39cf045157&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DGitHubProvider" class="github"></a>
              	<a href="javascript:;" class="show_more"></a>
              	
                <div class="register-now"><span>还没有CSDN帐号？</span>
	                <span class="register tracking-ad" data-mod="popu_28">
	                	<a href="/account/mobileregister?action=mobileRegisterView&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F75948544">立即注册</a>
	                </span>
               	</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="footer"></div>
    <script data-main="/js/login-config.js;jsessionid=77500D5417BD51CC22AE8F94568B46CA.tomcat2" src="/js/libs/require.js;jsessionid=77500D5417BD51CC22AE8F94568B46CA.tomcat2"></script>
    <script type="text/javascript">
		document.write('<script type="text/javascript" src="//csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
	</script>
  </body>
</html> [pool-4-thread-20] [chx]
[ERROR] 2017-07-28 12:43:19 [us.codecraft.webmagic.Spider$1.run(Spider.java:324)] -> process request Request{url='http://write.blog.csdn.net/mdeditor/75948544', method='null', extras=null, priority=0, headers={}, cookies={}} error [pool-4-thread-20] [chx]
com.alibaba.fastjson.JSONException: syntax error, expect {, actual error, pos 7
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:343)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:948)
	at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_BlogEntity.deserialze(Unknown Source)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:184)
	at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:642)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:350)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:254)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:467)
	at cn.chenhaoxiang.utils.JSONUtils.json2obj(JSONUtils.java:148)
	at cn.chenhaoxiang.HttpUrlConn.json2BlogDataEntity(HttpUrlConn.java:184)
	at cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)
	at us.codecraft.webmagic.Spider.onDownloadSuccess(Spider.java:414)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:406)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[INFO] 2017-07-28 12:43:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/74619521 [pool-4-thread-11] [chx]
[INFO] 2017-07-28 12:43:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/75208757 [pool-4-thread-15] [chx]
[INFO] 2017-07-28 12:43:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> 






<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta property="qc:admins" content="24530273213633466654" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>帐号登录</title>
    
    
    <link type="text/css" rel="stylesheet" href="/css/bootstrap.css;jsessionid=18AF5E27FBF97193B18275807BE7A6F1.tomcat1" />
    <link type="text/css" rel="stylesheet" href="/css/login.css;jsessionid=18AF5E27FBF97193B18275807BE7A6F1.tomcat1" />
    <link type="text/css" rel="stylesheet" href="/css/weixinqr.css;jsessionid=18AF5E27FBF97193B18275807BE7A6F1.tomcat1" />
    <script src="https://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js"></script>
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->
    <script>
	var _hmt = _hmt || [];
	(function() {
	  var hm = document.createElement("script");
	  hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
	  var s = document.getElementsByTagName("script")[0]; 
	  s.parentNode.insertBefore(hm, s);
	})();
	</script>
  </head>
  <body>
  	<div id="hidebg"></div>
	<div id="hidebox"><div id="close" onClick="hide();"></div><div id="wxqr" class="wxqr"></div></div>
  	<script type="text/javascript">
  		var protocol = window.location.protocol;
  		document.write('<script type="text/javascript" src="' +protocol+ '//csdnimg.cn/pubfooter/js/repoAddr2.js?v=' + Math.random() + '"></'+'script>');
	</script>
	
    <div class="header"></div>
    <div class="main">
      <div class="container container-custom">
        <div class="row wrap-login">
          <div class="login-banner col-sm-6 col-md-7 col-lg-7 hidden-xs"><a href="http://edu.csdn.net/huiyiCourse/series_detail/45" target="_blank"><img src=../bgimage/login-banner.png class="img-responsive"></a></div>
          <div class="login-user col-xs-12 col-sm-6 col-md-5 col-lg-5">
            <div class="login-part">
              <h3>帐号登录 </h3>
              <div class="user-info">
                <div class="user-pass">
                
                  <form id="fm1" action="/;jsessionid=18AF5E27FBF97193B18275807BE7A6F1.tomcat1?service=http://write.blog.csdn.net/help/notfound?aspxerrorpath=/mdeditor/74619521" method="post">

                    <input id="username" name="username" tabindex="1" placeholder="输入用户名/邮箱/手机号" class="user-name" type="text" value=""/>
                    <div class="mobile-auth" style="display:none"><span>该手机已绑定账号，可使用  </span><a href="" id="mloginurl" class="mobile-btn" >手机验证码登录</a></div>
                    <input id="password" name="password" tabindex="2" placeholder="输入密码" class="pass-word" type="password" value="" autocomplete="off"/>
                   
                    
						
						
							<div class="error-mess" style="display:none;">
								<span class="error-icon"></span><span id="error-message"></span>
							</div>
						
					
					
                    <div class="row forget-password">
                    	<span class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        	<input type="checkbox" name="rememberMe" id="rememberMe" value="true" class="auto-login" tabindex="4"/>
                        	<label for="rememberMe">下次自动登录</label>
                        </span>
                        <span class="col-xs-6 col-sm-6 col-md-6 col-lg-6 forget tracking-ad" data-mod="popu_26">
                        	<a href="/account/fpwd?action=forgotpassword&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F74619521" tabindex="5">忘记密码</a>
                        </span>
                    </div>
                    <!-- 该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。 -->
					<input type="hidden" name="lt" value="LT-336942-3aifsbgbYFqQsA7GGfUndbXtU4dyLt" />
			 		<input type="hidden" name="execution" value="e1s1" /> 
					<input type="hidden" name="_eventId" value="submit" /> 
					<input class="logging" accesskey="l" value="登 录" tabindex="6" type="button" /> 
                    
                  </form>
                </div>
              </div>
              <div class="line"></div>
              <div class="third-part tracking-ad" data-mod="popu_27">
              	<span style="width: 257px;">第三方帐号登录</span>
              	<span><font color="red">  </font></span>
              	<a id="qqAuthorizationUrl" href="https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=100270989&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DQQProvider&state=test" class="qq"></a>
              	
                   	<a id="wechatAuthorizationUrl" href="javascript:void(0)" onClick="show();" class="wechat" target="_parent"></a>
                   	<script src="/js/apps/weixinqr.js;jsessionid=18AF5E27FBF97193B18275807BE7A6F1.tomcat1"></script>
				
              	<a id="sinaAuthorizationUrl" href="https://api.weibo.com/oauth2/authorize?client_id=2601122390&response_type=code&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DSinaWeiboProvider" class="sina"></a>
              	<a id="baiduAuthorizationUrl" href="https://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id=cePqkUpKCBrcnQtARTNPxxQG&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DBaiduProvider" class="baidu"></a>
              	<a id="osChinaAuthorizationUrl" href="https://www.oschina.net/action/oauth2/authorize?response_type=code&client_id=cIh1UuWvSyrYlbe93rM6&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DOsChinaProvider&state=test" class="cc"></a>
              	<a id="githubAuthorizationUrl" href="https://github.com/login/oauth/authorize?client_id=4bceac0b4d39cf045157&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DGitHubProvider" class="github"></a>
              	<a href="javascript:;" class="show_more"></a>
              	
                <div class="register-now"><span>还没有CSDN帐号？</span>
	                <span class="register tracking-ad" data-mod="popu_28">
	                	<a href="/account/mobileregister?action=mobileRegisterView&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F74619521">立即注册</a>
	                </span>
               	</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="footer"></div>
    <script data-main="/js/login-config.js;jsessionid=18AF5E27FBF97193B18275807BE7A6F1.tomcat1" src="/js/libs/require.js;jsessionid=18AF5E27FBF97193B18275807BE7A6F1.tomcat1"></script>
    <script type="text/javascript">
		document.write('<script type="text/javascript" src="//csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
	</script>
  </body>
</html> [pool-4-thread-11] [chx]
[INFO] 2017-07-28 12:43:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> 






<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta property="qc:admins" content="24530273213633466654" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>帐号登录</title>
    
    
    <link type="text/css" rel="stylesheet" href="/css/bootstrap.css;jsessionid=62387E43E1BF7D5F7957FD9254192FDD.tomcat1" />
    <link type="text/css" rel="stylesheet" href="/css/login.css;jsessionid=62387E43E1BF7D5F7957FD9254192FDD.tomcat1" />
    <link type="text/css" rel="stylesheet" href="/css/weixinqr.css;jsessionid=62387E43E1BF7D5F7957FD9254192FDD.tomcat1" />
    <script src="https://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js"></script>
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->
    <script>
	var _hmt = _hmt || [];
	(function() {
	  var hm = document.createElement("script");
	  hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
	  var s = document.getElementsByTagName("script")[0]; 
	  s.parentNode.insertBefore(hm, s);
	})();
	</script>
  </head>
  <body>
  	<div id="hidebg"></div>
	<div id="hidebox"><div id="close" onClick="hide();"></div><div id="wxqr" class="wxqr"></div></div>
  	<script type="text/javascript">
  		var protocol = window.location.protocol;
  		document.write('<script type="text/javascript" src="' +protocol+ '//csdnimg.cn/pubfooter/js/repoAddr2.js?v=' + Math.random() + '"></'+'script>');
	</script>
	
    <div class="header"></div>
    <div class="main">
      <div class="container container-custom">
        <div class="row wrap-login">
          <div class="login-banner col-sm-6 col-md-7 col-lg-7 hidden-xs"><a href="http://edu.csdn.net/huiyiCourse/series_detail/45" target="_blank"><img src=../bgimage/login-banner.png class="img-responsive"></a></div>
          <div class="login-user col-xs-12 col-sm-6 col-md-5 col-lg-5">
            <div class="login-part">
              <h3>帐号登录 </h3>
              <div class="user-info">
                <div class="user-pass">
                
                  <form id="fm1" action="/;jsessionid=62387E43E1BF7D5F7957FD9254192FDD.tomcat1?service=http://write.blog.csdn.net/help/notfound?aspxerrorpath=/mdeditor/75208757" method="post">

                    <input id="username" name="username" tabindex="1" placeholder="输入用户名/邮箱/手机号" class="user-name" type="text" value=""/>
                    <div class="mobile-auth" style="display:none"><span>该手机已绑定账号，可使用  </span><a href="" id="mloginurl" class="mobile-btn" >手机验证码登录</a></div>
                    <input id="password" name="password" tabindex="2" placeholder="输入密码" class="pass-word" type="password" value="" autocomplete="off"/>
                   
                    
						
						
							<div class="error-mess" style="display:none;">
								<span class="error-icon"></span><span id="error-message"></span>
							</div>
						
					
					
                    <div class="row forget-password">
                    	<span class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        	<input type="checkbox" name="rememberMe" id="rememberMe" value="true" class="auto-login" tabindex="4"/>
                        	<label for="rememberMe">下次自动登录</label>
                        </span>
                        <span class="col-xs-6 col-sm-6 col-md-6 col-lg-6 forget tracking-ad" data-mod="popu_26">
                        	<a href="/account/fpwd?action=forgotpassword&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F75208757" tabindex="5">忘记密码</a>
                        </span>
                    </div>
                    <!-- 该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。 -->
					<input type="hidden" name="lt" value="LT-336941-eG6aPa7zEzVCs9mcf5gtnobte726s4" />
			 		<input type="hidden" name="execution" value="e1s1" /> 
					<input type="hidden" name="_eventId" value="submit" /> 
					<input class="logging" accesskey="l" value="登 录" tabindex="6" type="button" /> 
                    
                  </form>
                </div>
              </div>
              <div class="line"></div>
              <div class="third-part tracking-ad" data-mod="popu_27">
              	<span style="width: 257px;">第三方帐号登录</span>
              	<span><font color="red">  </font></span>
              	<a id="qqAuthorizationUrl" href="https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=100270989&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DQQProvider&state=test" class="qq"></a>
              	
                   	<a id="wechatAuthorizationUrl" href="javascript:void(0)" onClick="show();" class="wechat" target="_parent"></a>
                   	<script src="/js/apps/weixinqr.js;jsessionid=62387E43E1BF7D5F7957FD9254192FDD.tomcat1"></script>
				
              	<a id="sinaAuthorizationUrl" href="https://api.weibo.com/oauth2/authorize?client_id=2601122390&response_type=code&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DSinaWeiboProvider" class="sina"></a>
              	<a id="baiduAuthorizationUrl" href="https://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id=cePqkUpKCBrcnQtARTNPxxQG&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DBaiduProvider" class="baidu"></a>
              	<a id="osChinaAuthorizationUrl" href="https://www.oschina.net/action/oauth2/authorize?response_type=code&client_id=cIh1UuWvSyrYlbe93rM6&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DOsChinaProvider&state=test" class="cc"></a>
              	<a id="githubAuthorizationUrl" href="https://github.com/login/oauth/authorize?client_id=4bceac0b4d39cf045157&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DGitHubProvider" class="github"></a>
              	<a href="javascript:;" class="show_more"></a>
              	
                <div class="register-now"><span>还没有CSDN帐号？</span>
	                <span class="register tracking-ad" data-mod="popu_28">
	                	<a href="/account/mobileregister?action=mobileRegisterView&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F75208757">立即注册</a>
	                </span>
               	</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="footer"></div>
    <script data-main="/js/login-config.js;jsessionid=62387E43E1BF7D5F7957FD9254192FDD.tomcat1" src="/js/libs/require.js;jsessionid=62387E43E1BF7D5F7957FD9254192FDD.tomcat1"></script>
    <script type="text/javascript">
		document.write('<script type="text/javascript" src="//csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
	</script>
  </body>
</html> [pool-4-thread-15] [chx]
[ERROR] 2017-07-28 12:43:19 [us.codecraft.webmagic.Spider$1.run(Spider.java:324)] -> process request Request{url='http://write.blog.csdn.net/mdeditor/74619521', method='null', extras=null, priority=0, headers={}, cookies={}} error [pool-4-thread-11] [chx]
com.alibaba.fastjson.JSONException: syntax error, expect {, actual error, pos 7
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:343)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:948)
	at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_BlogEntity.deserialze(Unknown Source)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:184)
	at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:642)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:350)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:254)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:467)
	at cn.chenhaoxiang.utils.JSONUtils.json2obj(JSONUtils.java:148)
	at cn.chenhaoxiang.HttpUrlConn.json2BlogDataEntity(HttpUrlConn.java:184)
	at cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)
	at us.codecraft.webmagic.Spider.onDownloadSuccess(Spider.java:414)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:406)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[ERROR] 2017-07-28 12:43:19 [us.codecraft.webmagic.Spider$1.run(Spider.java:324)] -> process request Request{url='http://write.blog.csdn.net/mdeditor/75208757', method='null', extras=null, priority=0, headers={}, cookies={}} error [pool-4-thread-15] [chx]
com.alibaba.fastjson.JSONException: syntax error, expect {, actual error, pos 7
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:343)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:948)
	at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_BlogEntity.deserialze(Unknown Source)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:184)
	at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:642)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:350)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:254)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:467)
	at cn.chenhaoxiang.utils.JSONUtils.json2obj(JSONUtils.java:148)
	at cn.chenhaoxiang.HttpUrlConn.json2BlogDataEntity(HttpUrlConn.java:184)
	at cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)
	at us.codecraft.webmagic.Spider.onDownloadSuccess(Spider.java:414)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:406)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[INFO] 2017-07-28 12:43:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/76221465 [pool-4-thread-7] [chx]
[INFO] 2017-07-28 12:43:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> 






<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta property="qc:admins" content="24530273213633466654" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>帐号登录</title>
    
    
    <link type="text/css" rel="stylesheet" href="/css/bootstrap.css;jsessionid=C0C8804F45EA6BF3F1D436A7AACC843F.tomcat2" />
    <link type="text/css" rel="stylesheet" href="/css/login.css;jsessionid=C0C8804F45EA6BF3F1D436A7AACC843F.tomcat2" />
    <link type="text/css" rel="stylesheet" href="/css/weixinqr.css;jsessionid=C0C8804F45EA6BF3F1D436A7AACC843F.tomcat2" />
    <script src="https://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js"></script>
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->
    <script>
	var _hmt = _hmt || [];
	(function() {
	  var hm = document.createElement("script");
	  hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
	  var s = document.getElementsByTagName("script")[0]; 
	  s.parentNode.insertBefore(hm, s);
	})();
	</script>
  </head>
  <body>
  	<div id="hidebg"></div>
	<div id="hidebox"><div id="close" onClick="hide();"></div><div id="wxqr" class="wxqr"></div></div>
  	<script type="text/javascript">
  		var protocol = window.location.protocol;
  		document.write('<script type="text/javascript" src="' +protocol+ '//csdnimg.cn/pubfooter/js/repoAddr2.js?v=' + Math.random() + '"></'+'script>');
	</script>
	
    <div class="header"></div>
    <div class="main">
      <div class="container container-custom">
        <div class="row wrap-login">
          <div class="login-banner col-sm-6 col-md-7 col-lg-7 hidden-xs"><a href="http://edu.csdn.net/huiyiCourse/series_detail/45" target="_blank"><img src=../bgimage/login-banner.png class="img-responsive"></a></div>
          <div class="login-user col-xs-12 col-sm-6 col-md-5 col-lg-5">
            <div class="login-part">
              <h3>帐号登录 </h3>
              <div class="user-info">
                <div class="user-pass">
                
                  <form id="fm1" action="/;jsessionid=C0C8804F45EA6BF3F1D436A7AACC843F.tomcat2?service=http://write.blog.csdn.net/help/notfound?aspxerrorpath=/mdeditor/76221465" method="post">

                    <input id="username" name="username" tabindex="1" placeholder="输入用户名/邮箱/手机号" class="user-name" type="text" value=""/>
                    <div class="mobile-auth" style="display:none"><span>该手机已绑定账号，可使用  </span><a href="" id="mloginurl" class="mobile-btn" >手机验证码登录</a></div>
                    <input id="password" name="password" tabindex="2" placeholder="输入密码" class="pass-word" type="password" value="" autocomplete="off"/>
                   
                    
						
						
							<div class="error-mess" style="display:none;">
								<span class="error-icon"></span><span id="error-message"></span>
							</div>
						
					
					
                    <div class="row forget-password">
                    	<span class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        	<input type="checkbox" name="rememberMe" id="rememberMe" value="true" class="auto-login" tabindex="4"/>
                        	<label for="rememberMe">下次自动登录</label>
                        </span>
                        <span class="col-xs-6 col-sm-6 col-md-6 col-lg-6 forget tracking-ad" data-mod="popu_26">
                        	<a href="/account/fpwd?action=forgotpassword&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F76221465" tabindex="5">忘记密码</a>
                        </span>
                    </div>
                    <!-- 该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。 -->
					<input type="hidden" name="lt" value="LT-337555-Oc51cFwbuifv9I2oKZNXBMIKj3QHed" />
			 		<input type="hidden" name="execution" value="e1s1" /> 
					<input type="hidden" name="_eventId" value="submit" /> 
					<input class="logging" accesskey="l" value="登 录" tabindex="6" type="button" /> 
                    
                  </form>
                </div>
              </div>
              <div class="line"></div>
              <div class="third-part tracking-ad" data-mod="popu_27">
              	<span style="width: 257px;">第三方帐号登录</span>
              	<span><font color="red">  </font></span>
              	<a id="qqAuthorizationUrl" href="https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=100270989&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DQQProvider&state=test" class="qq"></a>
              	
                   	<a id="wechatAuthorizationUrl" href="javascript:void(0)" onClick="show();" class="wechat" target="_parent"></a>
                   	<script src="/js/apps/weixinqr.js;jsessionid=C0C8804F45EA6BF3F1D436A7AACC843F.tomcat2"></script>
				
              	<a id="sinaAuthorizationUrl" href="https://api.weibo.com/oauth2/authorize?client_id=2601122390&response_type=code&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DSinaWeiboProvider" class="sina"></a>
              	<a id="baiduAuthorizationUrl" href="https://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id=cePqkUpKCBrcnQtARTNPxxQG&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DBaiduProvider" class="baidu"></a>
              	<a id="osChinaAuthorizationUrl" href="https://www.oschina.net/action/oauth2/authorize?response_type=code&client_id=cIh1UuWvSyrYlbe93rM6&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DOsChinaProvider&state=test" class="cc"></a>
              	<a id="githubAuthorizationUrl" href="https://github.com/login/oauth/authorize?client_id=4bceac0b4d39cf045157&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DGitHubProvider" class="github"></a>
              	<a href="javascript:;" class="show_more"></a>
              	
                <div class="register-now"><span>还没有CSDN帐号？</span>
	                <span class="register tracking-ad" data-mod="popu_28">
	                	<a href="/account/mobileregister?action=mobileRegisterView&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F76221465">立即注册</a>
	                </span>
               	</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="footer"></div>
    <script data-main="/js/login-config.js;jsessionid=C0C8804F45EA6BF3F1D436A7AACC843F.tomcat2" src="/js/libs/require.js;jsessionid=C0C8804F45EA6BF3F1D436A7AACC843F.tomcat2"></script>
    <script type="text/javascript">
		document.write('<script type="text/javascript" src="//csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
	</script>
  </body>
</html> [pool-4-thread-7] [chx]
[ERROR] 2017-07-28 12:43:19 [us.codecraft.webmagic.Spider$1.run(Spider.java:324)] -> process request Request{url='http://write.blog.csdn.net/mdeditor/76221465', method='null', extras=null, priority=0, headers={}, cookies={}} error [pool-4-thread-7] [chx]
com.alibaba.fastjson.JSONException: syntax error, expect {, actual error, pos 7
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:343)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:948)
	at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_BlogEntity.deserialze(Unknown Source)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:184)
	at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:642)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:350)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:254)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:467)
	at cn.chenhaoxiang.utils.JSONUtils.json2obj(JSONUtils.java:148)
	at cn.chenhaoxiang.HttpUrlConn.json2BlogDataEntity(HttpUrlConn.java:184)
	at cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)
	at us.codecraft.webmagic.Spider.onDownloadSuccess(Spider.java:414)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:406)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[INFO] 2017-07-28 12:43:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/23599257 [pool-4-thread-16] [chx]
[INFO] 2017-07-28 12:43:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> 






<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta property="qc:admins" content="24530273213633466654" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>帐号登录</title>
    
    
    <link type="text/css" rel="stylesheet" href="/css/bootstrap.css;jsessionid=3F6CAFCFA5C5089A63C436AD9E6E7F4D.tomcat2" />
    <link type="text/css" rel="stylesheet" href="/css/login.css;jsessionid=3F6CAFCFA5C5089A63C436AD9E6E7F4D.tomcat2" />
    <link type="text/css" rel="stylesheet" href="/css/weixinqr.css;jsessionid=3F6CAFCFA5C5089A63C436AD9E6E7F4D.tomcat2" />
    <script src="https://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js"></script>
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->
    <script>
	var _hmt = _hmt || [];
	(function() {
	  var hm = document.createElement("script");
	  hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
	  var s = document.getElementsByTagName("script")[0]; 
	  s.parentNode.insertBefore(hm, s);
	})();
	</script>
  </head>
  <body>
  	<div id="hidebg"></div>
	<div id="hidebox"><div id="close" onClick="hide();"></div><div id="wxqr" class="wxqr"></div></div>
  	<script type="text/javascript">
  		var protocol = window.location.protocol;
  		document.write('<script type="text/javascript" src="' +protocol+ '//csdnimg.cn/pubfooter/js/repoAddr2.js?v=' + Math.random() + '"></'+'script>');
	</script>
	
    <div class="header"></div>
    <div class="main">
      <div class="container container-custom">
        <div class="row wrap-login">
          <div class="login-banner col-sm-6 col-md-7 col-lg-7 hidden-xs"><a href="http://edu.csdn.net/huiyiCourse/series_detail/45" target="_blank"><img src=../bgimage/login-banner.png class="img-responsive"></a></div>
          <div class="login-user col-xs-12 col-sm-6 col-md-5 col-lg-5">
            <div class="login-part">
              <h3>帐号登录 </h3>
              <div class="user-info">
                <div class="user-pass">
                
                  <form id="fm1" action="/;jsessionid=3F6CAFCFA5C5089A63C436AD9E6E7F4D.tomcat2?service=http://write.blog.csdn.net/help/notfound?aspxerrorpath=/mdeditor/23599257" method="post">

                    <input id="username" name="username" tabindex="1" placeholder="输入用户名/邮箱/手机号" class="user-name" type="text" value=""/>
                    <div class="mobile-auth" style="display:none"><span>该手机已绑定账号，可使用  </span><a href="" id="mloginurl" class="mobile-btn" >手机验证码登录</a></div>
                    <input id="password" name="password" tabindex="2" placeholder="输入密码" class="pass-word" type="password" value="" autocomplete="off"/>
                   
                    
						
						
							<div class="error-mess" style="display:none;">
								<span class="error-icon"></span><span id="error-message"></span>
							</div>
						
					
					
                    <div class="row forget-password">
                    	<span class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        	<input type="checkbox" name="rememberMe" id="rememberMe" value="true" class="auto-login" tabindex="4"/>
                        	<label for="rememberMe">下次自动登录</label>
                        </span>
                        <span class="col-xs-6 col-sm-6 col-md-6 col-lg-6 forget tracking-ad" data-mod="popu_26">
                        	<a href="/account/fpwd?action=forgotpassword&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F23599257" tabindex="5">忘记密码</a>
                        </span>
                    </div>
                    <!-- 该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。 -->
					<input type="hidden" name="lt" value="LT-337556-EK911PitsXlceSAXY3hs7qF0UfdecS" />
			 		<input type="hidden" name="execution" value="e1s1" /> 
					<input type="hidden" name="_eventId" value="submit" /> 
					<input class="logging" accesskey="l" value="登 录" tabindex="6" type="button" /> 
                    
                  </form>
                </div>
              </div>
              <div class="line"></div>
              <div class="third-part tracking-ad" data-mod="popu_27">
              	<span style="width: 257px;">第三方帐号登录</span>
              	<span><font color="red">  </font></span>
              	<a id="qqAuthorizationUrl" href="https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=100270989&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DQQProvider&state=test" class="qq"></a>
              	
                   	<a id="wechatAuthorizationUrl" href="javascript:void(0)" onClick="show();" class="wechat" target="_parent"></a>
                   	<script src="/js/apps/weixinqr.js;jsessionid=3F6CAFCFA5C5089A63C436AD9E6E7F4D.tomcat2"></script>
				
              	<a id="sinaAuthorizationUrl" href="https://api.weibo.com/oauth2/authorize?client_id=2601122390&response_type=code&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DSinaWeiboProvider" class="sina"></a>
              	<a id="baiduAuthorizationUrl" href="https://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id=cePqkUpKCBrcnQtARTNPxxQG&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DBaiduProvider" class="baidu"></a>
              	<a id="osChinaAuthorizationUrl" href="https://www.oschina.net/action/oauth2/authorize?response_type=code&client_id=cIh1UuWvSyrYlbe93rM6&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DOsChinaProvider&state=test" class="cc"></a>
              	<a id="githubAuthorizationUrl" href="https://github.com/login/oauth/authorize?client_id=4bceac0b4d39cf045157&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DGitHubProvider" class="github"></a>
              	<a href="javascript:;" class="show_more"></a>
              	
                <div class="register-now"><span>还没有CSDN帐号？</span>
	                <span class="register tracking-ad" data-mod="popu_28">
	                	<a href="/account/mobileregister?action=mobileRegisterView&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F23599257">立即注册</a>
	                </span>
               	</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="footer"></div>
    <script data-main="/js/login-config.js;jsessionid=3F6CAFCFA5C5089A63C436AD9E6E7F4D.tomcat2" src="/js/libs/require.js;jsessionid=3F6CAFCFA5C5089A63C436AD9E6E7F4D.tomcat2"></script>
    <script type="text/javascript">
		document.write('<script type="text/javascript" src="//csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
	</script>
  </body>
</html> [pool-4-thread-16] [chx]
[ERROR] 2017-07-28 12:43:19 [us.codecraft.webmagic.Spider$1.run(Spider.java:324)] -> process request Request{url='http://write.blog.csdn.net/mdeditor/23599257', method='null', extras=null, priority=0, headers={}, cookies={}} error [pool-4-thread-16] [chx]
com.alibaba.fastjson.JSONException: syntax error, expect {, actual error, pos 7
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:343)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:948)
	at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_BlogEntity.deserialze(Unknown Source)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:184)
	at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:642)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:350)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:254)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:467)
	at cn.chenhaoxiang.utils.JSONUtils.json2obj(JSONUtils.java:148)
	at cn.chenhaoxiang.HttpUrlConn.json2BlogDataEntity(HttpUrlConn.java:184)
	at cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)
	at us.codecraft.webmagic.Spider.onDownloadSuccess(Spider.java:414)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:406)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[INFO] 2017-07-28 12:43:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/75905534 [pool-4-thread-24] [chx]
[INFO] 2017-07-28 12:43:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> 






<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta property="qc:admins" content="24530273213633466654" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>帐号登录</title>
    
    
    <link type="text/css" rel="stylesheet" href="/css/bootstrap.css;jsessionid=8105CBF3CB833C8A91C7FAF91BB36C95.tomcat2" />
    <link type="text/css" rel="stylesheet" href="/css/login.css;jsessionid=8105CBF3CB833C8A91C7FAF91BB36C95.tomcat2" />
    <link type="text/css" rel="stylesheet" href="/css/weixinqr.css;jsessionid=8105CBF3CB833C8A91C7FAF91BB36C95.tomcat2" />
    <script src="https://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js"></script>
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->
    <script>
	var _hmt = _hmt || [];
	(function() {
	  var hm = document.createElement("script");
	  hm.src = "https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac";
	  var s = document.getElementsByTagName("script")[0]; 
	  s.parentNode.insertBefore(hm, s);
	})();
	</script>
  </head>
  <body>
  	<div id="hidebg"></div>
	<div id="hidebox"><div id="close" onClick="hide();"></div><div id="wxqr" class="wxqr"></div></div>
  	<script type="text/javascript">
  		var protocol = window.location.protocol;
  		document.write('<script type="text/javascript" src="' +protocol+ '//csdnimg.cn/pubfooter/js/repoAddr2.js?v=' + Math.random() + '"></'+'script>');
	</script>
	
    <div class="header"></div>
    <div class="main">
      <div class="container container-custom">
        <div class="row wrap-login">
          <div class="login-banner col-sm-6 col-md-7 col-lg-7 hidden-xs"><a href="http://edu.csdn.net/huiyiCourse/series_detail/45" target="_blank"><img src=../bgimage/login-banner.png class="img-responsive"></a></div>
          <div class="login-user col-xs-12 col-sm-6 col-md-5 col-lg-5">
            <div class="login-part">
              <h3>帐号登录 </h3>
              <div class="user-info">
                <div class="user-pass">
                
                  <form id="fm1" action="/;jsessionid=8105CBF3CB833C8A91C7FAF91BB36C95.tomcat2?service=http://write.blog.csdn.net/help/notfound?aspxerrorpath=/mdeditor/75905534" method="post">

                    <input id="username" name="username" tabindex="1" placeholder="输入用户名/邮箱/手机号" class="user-name" type="text" value=""/>
                    <div class="mobile-auth" style="display:none"><span>该手机已绑定账号，可使用  </span><a href="" id="mloginurl" class="mobile-btn" >手机验证码登录</a></div>
                    <input id="password" name="password" tabindex="2" placeholder="输入密码" class="pass-word" type="password" value="" autocomplete="off"/>
                   
                    
						
						
							<div class="error-mess" style="display:none;">
								<span class="error-icon"></span><span id="error-message"></span>
							</div>
						
					
					
                    <div class="row forget-password">
                    	<span class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        	<input type="checkbox" name="rememberMe" id="rememberMe" value="true" class="auto-login" tabindex="4"/>
                        	<label for="rememberMe">下次自动登录</label>
                        </span>
                        <span class="col-xs-6 col-sm-6 col-md-6 col-lg-6 forget tracking-ad" data-mod="popu_26">
                        	<a href="/account/fpwd?action=forgotpassword&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F75905534" tabindex="5">忘记密码</a>
                        </span>
                    </div>
                    <!-- 该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。 -->
					<input type="hidden" name="lt" value="LT-337557-xZuWog53qcxctjg1tBv97axfO2FotS" />
			 		<input type="hidden" name="execution" value="e1s1" /> 
					<input type="hidden" name="_eventId" value="submit" /> 
					<input class="logging" accesskey="l" value="登 录" tabindex="6" type="button" /> 
                    
                  </form>
                </div>
              </div>
              <div class="line"></div>
              <div class="third-part tracking-ad" data-mod="popu_27">
              	<span style="width: 257px;">第三方帐号登录</span>
              	<span><font color="red">  </font></span>
              	<a id="qqAuthorizationUrl" href="https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=100270989&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DQQProvider&state=test" class="qq"></a>
              	
                   	<a id="wechatAuthorizationUrl" href="javascript:void(0)" onClick="show();" class="wechat" target="_parent"></a>
                   	<script src="/js/apps/weixinqr.js;jsessionid=8105CBF3CB833C8A91C7FAF91BB36C95.tomcat2"></script>
				
              	<a id="sinaAuthorizationUrl" href="https://api.weibo.com/oauth2/authorize?client_id=2601122390&response_type=code&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DSinaWeiboProvider" class="sina"></a>
              	<a id="baiduAuthorizationUrl" href="https://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id=cePqkUpKCBrcnQtARTNPxxQG&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DBaiduProvider" class="baidu"></a>
              	<a id="osChinaAuthorizationUrl" href="https://www.oschina.net/action/oauth2/authorize?response_type=code&client_id=cIh1UuWvSyrYlbe93rM6&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DOsChinaProvider&state=test" class="cc"></a>
              	<a id="githubAuthorizationUrl" href="https://github.com/login/oauth/authorize?client_id=4bceac0b4d39cf045157&redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DGitHubProvider" class="github"></a>
              	<a href="javascript:;" class="show_more"></a>
              	
                <div class="register-now"><span>还没有CSDN帐号？</span>
	                <span class="register tracking-ad" data-mod="popu_28">
	                	<a href="/account/mobileregister?action=mobileRegisterView&service=http%3A%2F%2Fwrite.blog.csdn.net%2Fhelp%2Fnotfound%3Faspxerrorpath%3D%2Fmdeditor%2F75905534">立即注册</a>
	                </span>
               	</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="footer"></div>
    <script data-main="/js/login-config.js;jsessionid=8105CBF3CB833C8A91C7FAF91BB36C95.tomcat2" src="/js/libs/require.js;jsessionid=8105CBF3CB833C8A91C7FAF91BB36C95.tomcat2"></script>
    <script type="text/javascript">
		document.write('<script type="text/javascript" src="//csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
	</script>
  </body>
</html> [pool-4-thread-24] [chx]
[ERROR] 2017-07-28 12:43:19 [us.codecraft.webmagic.Spider$1.run(Spider.java:324)] -> process request Request{url='http://write.blog.csdn.net/mdeditor/75905534', method='null', extras=null, priority=0, headers={}, cookies={}} error [pool-4-thread-24] [chx]
com.alibaba.fastjson.JSONException: syntax error, expect {, actual error, pos 7
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:343)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.parseRest(JavaBeanDeserializer.java:948)
	at com.alibaba.fastjson.parser.deserializer.FastjsonASMDeserializer_1_BlogEntity.deserialze(Unknown Source)
	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:184)
	at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:642)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:350)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:254)
	at com.alibaba.fastjson.JSON.parseObject(JSON.java:467)
	at cn.chenhaoxiang.utils.JSONUtils.json2obj(JSONUtils.java:148)
	at cn.chenhaoxiang.HttpUrlConn.json2BlogDataEntity(HttpUrlConn.java:184)
	at cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)
	at us.codecraft.webmagic.Spider.onDownloadSuccess(Spider.java:414)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:406)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:23 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/23127865 error [pool-4-thread-3] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:23 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/73863848 error [pool-4-thread-9] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:23 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75331436 error [pool-4-thread-23] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/73744696 error [pool-4-thread-5] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/41657169 error [pool-4-thread-10] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/74858141 error [pool-4-thread-18] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75451673 error [pool-4-thread-17] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75790969 error [pool-4-thread-4] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75701576 error [pool-4-thread-8] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75769704 error [pool-4-thread-14] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/74156876 error [pool-4-thread-12] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/38855273 error [pool-4-thread-6] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/76100356 error [pool-4-thread-19] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/23506175 error [pool-4-thread-22] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/74132477 error [pool-4-thread-2] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/73196798 error [pool-4-thread-25] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/74937873 error [pool-4-thread-13] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[WARN] 2017-07-28 12:43:24 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)] -> download page http://write.blog.csdn.net/mdeditor/75267742 error [pool-4-thread-21] [chx]
java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at org.apache.http.impl.conn.LoggingInputStream.read(LoggingInputStream.java:87)
	at org.apache.http.impl.io.SessionInputBufferImpl.streamRead(SessionInputBufferImpl.java:139)
	at org.apache.http.impl.io.SessionInputBufferImpl.fillBuffer(SessionInputBufferImpl.java:155)
	at org.apache.http.impl.io.SessionInputBufferImpl.readLine(SessionInputBufferImpl.java:284)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)
	at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)
	at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:85)
	at us.codecraft.webmagic.Spider.processRequest(Spider.java:404)
	at us.codecraft.webmagic.Spider.access$000(Spider.java:61)
	at us.codecraft.webmagic.Spider$1.run(Spider.java:320)
	at us.codecraft.webmagic.thread.CountableThreadPool$1.run(CountableThreadPool.java:74)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[INFO] 2017-07-28 12:43:27 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 25 pages downloaded. [Thread-3] [chx]
[INFO] 2017-07-28 12:44:19 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider blog.csdn.net started! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:44:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://blog.csdn.net/ohenry88/article/list/9999 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:29)] -> 开始获取ohenry88的所有博客文章ID... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76221465 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76100356 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75948544 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75905534 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75790969 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75769704 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75701576 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75451673 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75331436 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75267742 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75208757 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74937873 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74858141 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74619521 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74156876 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74132477 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73863848 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73744696 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73196798 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:41657169 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:38855273 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23599257 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23506175 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23220067 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23127865 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:19 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:50)] -> 获取所有的文章博客ID完成，您一共有25篇文章... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:44:24 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider blog.csdn.net closed! 1 pages downloaded. [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:44:24 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-2] [chx]
[INFO] 2017-07-28 12:44:25 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23220067 [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:44:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":23220067,"title":"寻找兄弟数字","create_at":"\/Date(1396971526000)\/","create":"2014-04-08 11:38:46","view_count":650,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"#ifndef _FIND_SIMILAR_WORD_H_\n#define _FIND_SIMILAR_WORD_H_\n#include \n#include \nusing namespace std;\n/* \n* 编程实现单链表的排序 \n*/ \nclass Brother{ \npublic :\n\tBrother(char *n) :data(n) {}\n\tBrother* addWord(char","url":"http://blog.csdn.net/BLACKMOON88/article/details/23220067","categories":"","tags":"单链表,map,编程,iterator,c","content":"\r\n\u003cpre code_snippet_id=\"282103\" snippet_file_name=\"blog_20140408_1_1902756\"  name=\"code\" class=\"cpp\"\u003e#ifndef _FIND_SIMILAR_WORD_H_\n#define _FIND_SIMILAR_WORD_H_\n#include &lt;string&gt;\n#include &lt;map&gt;\nusing namespace std;\n/* \n* 编程实现单链表的排序 \n*/ \nclass Brother{ \npublic :\n\tBrother(char *n) :data(n) {}\n\tBrother* addWord(char *word);\npublic :\n    char *data; \n    Brother *next; \n\tBrother *pre;\n};\n\nint compareSeq(char *srcWord, char *destWord){\n\tchar *srcChar=srcWord;\n\tchar *destChar=destWord;\n\twhile(*srcChar!=\u0027\\0\u0027){\n\t\tif (*srcChar&gt;*destChar){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(*srcChar&lt;*destChar){\n\t\t\treturn -1;\n\t\t}\n\t\telse{\n\t\t\tsrcChar++;\n\t\t\tdestChar++;\n\t\t}\n\t}\n\treturn 0;\n}\n\nBrother* Brother::addWord(char *srcWord){\n\t\tBrother* currentNode=this;\n\t\tint greaterThan=1;\n\t\tBrother *newWord=new Brother(srcWord);\n\t\tnewWord-&gt;next=NULL;\n\t\tnewWord-&gt;pre=NULL;\n\t\t//不大于后者\n\t\twhile(greaterThan!=-1){\n\t\t\tgreaterThan=compareSeq(srcWord,currentNode-&gt;data);\n\t\t\tif(greaterThan==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(greaterThan!=-1){\n\t\t\t\tif(currentNode-&gt;next!=NULL){\n\t\t\t\t\tcurrentNode=currentNode-&gt;next;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcurrentNode-&gt;next=newWord;\n\t\t\t\t\tnewWord-&gt;pre=currentNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t }\n\t\tif(greaterThan==-1){\n\t\t\tif(currentNode-&gt;pre==NULL){\n\t\t\t\tnewWord-&gt;next=currentNode;\n\t\t\t\tcurrentNode-&gt;pre=newWord;\n\t\t\t\treturn newWord;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcurrentNode-&gt;pre-&gt;next=newWord;\n\t\t\t\tnewWord-&gt;pre=currentNode-&gt;pre;\n\t\t\t\tnewWord-&gt;next=currentNode;\n\t\t\t\tcurrentNode-&gt;pre=newWord;\n\t\t\t}\n\t\t}\n\t\treturn NULL;\n}\n#endif \n\u003c/pre\u003e\u003cpre code_snippet_id=\"282103\" snippet_file_name=\"blog_20140408_2_6123660\"  name=\"code\" class=\"cpp\"\u003e/******************************************************************************\n\n  Copyright (C), 2001-2012, Huawei Tech. Co., Ltd.\n\n ******************************************************************************\n  File Name     : FindSimilarWord.cpp\n  Version       :\n  Author        :\n  Created       : 2012/09\n  Last Modified :\n  Description   :\n  Function List :\n\n  History       :\n  1.Date        : 2012/09\n    Author      :\n    Modification: Created file\n\n******************************************************************************/\n#include &quot;FindSimilarWord.h&quot;\n\ntypedef map&lt;string,Brother*&gt;::iterator DicPtrItr;\nmap&lt;string, Brother*&gt; dic;\n//生成Key\nstring generateKey(char srcWord[]){\n\tint length=(int)strlen(srcWord);\n\tchar srcWord2[60]={};\n\tchar tempChar;\n\tstrcpy(srcWord2,srcWord);\n\tfor(int i=0;i&lt;length-1;i++){\n\t\tfor(int j=0;j&lt;length-i-1;j++){\n\t\t\tif(srcWord2[j]&gt;srcWord2[j+1]){\n\t\t\t\ttempChar=srcWord2[j];\n\t\t\t\tsrcWord2[j]=srcWord2[j+1];\n\t\t\t\tsrcWord2[j+1]=tempChar;\n\t\t\t}\n\t\t}\n\t}\n\treturn string(srcWord2);\n}\n/******************************************************************************\n原    型：int AddOneWord (char* Word);\n功    能：在字典中增加一个单词\n输入参数： \n          Word 单词字符串，调用者保证Word指针不为空，指向的是合法单词\n输出参数：\n          无\n返回值：\n        -1 失败（单词在字典中已存在等情况）\n        0  成功\n********************************************************************************/\nint AddOneWord (char* Word)\n{\n    /* 在这里实现功能 */\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tBrother *brother,*head;\n\tif(dicPtrItr!=dic.end()){\n\t\tbrother=dicPtrItr-&gt;second;\n\t\thead=brother-&gt;addWord(Word);\n\t\tif (head!=NULL){\n\t\t\tdic[s]=head;\n\t\t}\n\t}\n\telse{\n\t\tbrother=new Brother(Word);\n\t\tbrother-&gt;next=NULL;\n\t\tbrother-&gt;pre=NULL;\n\t\tdic[s]=brother;\n\t}\n    return 0;\n}\n\n/******************************************************************************\n原    型：int FindSimilarWordNum (char* Word);\n功    能：查找指定单词在字典中的兄弟单词个数\n输入参数：\n          Word 指定单词字符串，调用者保证Word指针不为空，指向的是合法单词\n输出参数：\n          无\n返回值：\n          返回指定单词在字典中的兄弟单词总个数。如果不存在兄弟单词，返回0\n*******************************************************************************/\nint FindSimilarWordNum (char* Word)\n{\n\n    /* 在这里实现功能 */\n\tint i=0;\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tif(dicPtrItr==dic.end()){\n\t\treturn 0;\n\t}\n\tBrother *tempBro=dicPtrItr-&gt;second;\n\twhile(tempBro!=NULL){\n\t\tif(string(tempBro-&gt;data)!=string(Word)) {\n\t\t\ti++;\n\t\t}\n\t\ttempBro=tempBro-&gt;next;\n\t}\n    return i;\n}\n\n/******************************************************************************\n原    型：int FindOneSimilarWord (char* Word, int Seq, char* SimilarWord);\n功    能：查找指定单词的指定序号的兄弟单词，指定序号指字典中兄弟单词按字典顺序\n          排序后的序号（从1开始）\n输入参数：\n          Word 指定单词字符串，调用者保证Word指针不为空，指向的是合法单词\n          Seq 指定序号（大于等于1）\n输出参数：\n          SimilarWord 返回兄弟单词字符串，指针不为空，指向的内存由调用者预先分配，\n          占51个字节长度，输出的兄弟单词必须紧跟’\\0’结束。如果不存在指定序号的\n          兄弟单词，输出空串。\n返回值：\n          -1 失败（如果不存在指定序号的兄弟单词，返回失败）\n          0  成功\n*******************************************************************************/\nint FindOneSimilarWord (char* Word, int Seq, char* SimilarWord)\n{\n    /* 在这里实现功能 */\n\tif(FindSimilarWordNum(Word)&lt;Seq){\n\t\treturn -1;\n\t}\n\tint i=0;\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tBrother *tempBro=dicPtrItr-&gt;second;\n\twhile(tempBro!=NULL){\n\t\tif(string(tempBro-&gt;data)!=string(Word)) {\n\t\t\ti++;\n\t\t\tif(i==Seq){\n\t\t\t\tstrcpy(SimilarWord,tempBro-&gt;data);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\ttempBro=tempBro-&gt;next;\n\t}\n    return -1;\n}\n\n/******************************************************************************\n原    型：void ClearAllWords(void);\n功    能：清空字典中所有单词\n输入参数： \n          无\n输出参数：\n          无\n返回值：\n          无\n\n*******************************************************************************/\nvoid ClearWords(Brother *currentNode){\n\tBrother * pr=NULL;\n\twhile(currentNode!=NULL){\n\t\t\tpr=currentNode-&gt;next;\n\t\t\tdelete currentNode;\n\t\t\tcurrentNode=pr;\n\t\t}\n}\n\nvoid ClearAllWords(void)\n{\n    /* 在这里实现功能 */\n\tDicPtrItr dicPtrItr=dic.begin();\n\tBrother *currentNode;\n\twhile(dicPtrItr!=dic.end()){\n\t\tcurrentNode=dicPtrItr-&gt;second;\n\t\tClearWords(currentNode);\n\t\tdicPtrItr++;\n\t}\n\tdic.clear();\n}\n\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:44:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-08-寻找兄弟数字.markdown [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:44:25 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《寻找兄弟数字》成功 [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=73744696 [pool-2-thread-5] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":73744696,"title":"【OpenVswitch源码分析之一】背景","create_at":"\/Date(1498484653000)\/","create":"2017-06-26 09:44:13","view_count":194,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"什么是OpenVswitch \nOpen vSwitch是基于开源Apache 2 license的多层软件交换机，其目的是实现一个产品级质量的交换平台，其支持标准的管理接口，并开放转发功能接口供编程扩展和控制。 \nOpen vSwitch适于VM环境中的虚拟交换，除了开放标准的控制和可视化接口给虚拟网络层，它还支持跨多个物理服务器的分布式部署，另外OpenVswitch还兼容多个基于Linux的虚","url":"http://blog.csdn.net/BLACKMOON88/article/details/73744696","categories":"云计算,OpenVswitch,C语言算法","tags":"交换机,服务器,分布式,apache","content":"\u003ch2 id=\"什么是openvswitch\"\u003e什么是OpenVswitch\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://docs.openvswitch.org/en/latest/_images/overview.png\" alt=\"OpenVswitch Overview\" title=\"\"\u003e \u003cbr\u003e\nOpen vSwitch是基于开源Apache 2 license的多层软件交换机，其目的是实现一个产品级质量的交换平台，其支持标准的管理接口，并开放转发功能接口供编程扩展和控制。 \u003cbr\u003e\nOpen vSwitch适于VM环境中的虚拟交换，除了开放标准的控制和可视化接口给虚拟网络层，它还支持跨多个物理服务器的分布式部署，另外OpenVswitch还兼容多个基于Linux的虚拟化技术包括Xen,KVM,VirtualBox。 \u003cbr\u003e\n代码块使用与平台无关的C写成，易于安装在其他环境。当前的Release支持如下特性：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e标准802.1Q VLAN，端口模式有trunk和access。\u003c/li\u003e\n\u003cli\u003e有链路聚合和无链路聚合的网卡绑定\u003c/li\u003e\n\u003cli\u003eNetFlow, sFlow(R), 和镜像功能用以增加可视化\u003c/li\u003e\n\u003cli\u003eQoS (Quality of Service) 配置, 流量整形\u003c/li\u003e\n\u003cli\u003eGeneve, GRE, VXLAN, STT, 和 LISP 隧道支持\u003c/li\u003e\n\u003cli\u003e支持BFD和802.1ag连通性故障管理。\u003c/li\u003e\n\u003cli\u003eOpenFlow 1.0 以上版本及相关扩展的支持\u003c/li\u003e\n\u003cli\u003e使用C和Python绑定的事务配置数据库\u003c/li\u003e\n\u003cli\u003e使用Linux内核模块的高性能转发\u003c/li\u003e\n\u003cli\u003e支持IPV6\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"为什么需要openvswitch\"\u003e为什么需要OpenVswitch\u003c/h2\u003e\n\n\u003cp\u003e虚拟机管理程序（Hypervisor）需要桥接宿主内的虚拟机以及其与外部世界通信的能力。这意味着需要一个Linux内置的L2交换机（Linux网桥），而且这个交换机需要是快速和可靠的。这是Open vSwitch产生的最大需求 \u003cbr\u003e\nOpenVswitch瞄准的是多服务器的虚拟化部署，这种场景下传统的技术栈并不好处理，这些环境通常是高度动态的，需要逻辑抽象网络的维护，并且有大量和专用交换硬件集成或者把以前CPU的工作Offload到专用硬件上的工作。 \u003cbr\u003e\n对于上述需求，OpenVswitch通过如下的设计理念以及特征来达到目标：\u003c/p\u003e\n\n\n\n\u003ch3 id=\"状态的移动\"\u003e状态的移动\u003c/h3\u003e\n\n\u003cp\u003e所有和网络实体相关（比如虚拟机）的网络状态都应易于识别并且可以在不同主机之间迁移。这可能包括传统的“软状态”（如在L2学习表项），L3转发状态、策略路由、ACL、QoS，监控配置（如NetFlow、sFlow IPFIX，），等。 \u003cbr\u003e\nOpen vSwitch为已经支持不同实例配置和迁移Slow（配置）和Fast网络的网络状态。例如，如果一个VM在不同的服务器上迁移，不仅可以迁移相关的配置（跨规则，ACL，QoS）也可以迁移任何运行时的网络状态。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"网络动态变化的响应\"\u003e网络动态变化的响应\u003c/h3\u003e\n\n\u003cp\u003e虚拟环境通常以高变化率为特征。VMS来回运行，改变逻辑网络环境，等等。 \u003cbr\u003e\nOpen vSwitch有许多特性来实现网络控制系统响应和适应网络环境的变化。这包括简单的统计和可视化支持如NetFlow和sFlow，IPFIX。更有用的是，Open vSwitch支持网络状态数据库（OVSDB），支持远程触发。因此，一个编排层可以“监视”网络的各个方面并在它们发生变化时作出响应。例如，这在今天被大量使用的响应和跟踪VM迁移情况。 \u003cbr\u003e\nOpen vSwitch也支持OpenFlow把远程访问导出到控制层的方法。比如可以用于导出链路状态流量和链路发现流量（例如LLDP、CDP、OSPF等）。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"逻辑标签的维护\"\u003e逻辑标签的维护\u003c/h3\u003e\n\n\u003cp\u003e分布式虚拟交换机（如VMware VDS和思科的Nexus 1000V）经常通过在网络数据包中追加或者修改标签来承载网络的逻辑上下文。这种方式可以用来唯一地标识VM（以抵抗硬件欺骗的方式），或者持有只在逻辑域中相关的其他上下文。构建分布式虚拟交换机的大部分问题是如何高效而正确地管理这些标签。 \u003cbr\u003e\nOpen vSwitch有多个指定和维护标注的规则，这些都可以被远程的协同层所访问处理。此外，在许多情况下，这些标记规则存储在优化的表单中，因此它们不必与重量级网络设备耦合。这允许，例如，成千上万的标签或地址映射规则进行配置，更改，和迁移。 \u003cbr\u003e\n同理，Open vSwitch支持GRE的实现，可以同时处理成千上万支持GRE隧道隧道创建，远程配置，并推倒。例如，它可以用于连接不同数据中心的私有VM网络。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"硬件集成\"\u003e硬件集成\u003c/h3\u003e\n\n\u003cp\u003eOpen vSwitch的转发面（Linux Kernel datapath）的设计是可以做到把报文处理“委托”给硬件芯片来做的，无论这个硬件芯片是装在一个经典的硬件交换机框中还是在终端主机的网卡里。这使得Open vSwitch控制面能够控制一个纯软件实现同时也兼容硬件实现。 \u003cbr\u003e\n有许多公司正在进行努力把Open vSwitch移植到硬件芯片上运行。包括多个芯片商（Broadcom和Marvell），以及一些厂商定制的平台。文档中的“移植”部分讨论了如何去做这样一个移植。 \u003cbr\u003e\n硬件集成的优点不仅仅是在于虚拟环境中的性能。如果物理交换机也暴露Open vSwitch的控制抽象，那么裸机和虚拟宿主环境可以使用相同的自动化网络管控机制来管理。\u003c/p\u003e\n\n\n\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\n\u003cp\u003e在许多方面，Open vSwitch不同于之前Hypervisor网络栈的设计目标，其专注于满足大规模的基于Linux的虚拟化环境的自动化与动态网络控制需求。 \u003cbr\u003e\nOpen vSwitch的目标是保持内核代码量尽可能小（满足必要的性能即可）和重用现有系统的可用部件（例如Open vSwitch使用现有的QoS协议栈）。在Linux 3.3版本，Open vSwitch作为内核和用户空间工具包装的一部分在大部分的发行版中发布\u003c/p\u003e","markdowncontent":"## 什么是OpenVswitch\n![OpenVswitch Overview](http://docs.openvswitch.org/en/latest/_images/overview.png)\nOpen vSwitch是基于开源Apache 2 license的多层软件交换机，其目的是实现一个产品级质量的交换平台，其支持标准的管理接口，并开放转发功能接口供编程扩展和控制。\nOpen vSwitch适于VM环境中的虚拟交换，除了开放标准的控制和可视化接口给虚拟网络层，它还支持跨多个物理服务器的分布式部署，另外OpenVswitch还兼容多个基于Linux的虚拟化技术包括Xen,KVM,VirtualBox。\n代码块使用与平台无关的C写成，易于安装在其他环境。当前的Release支持如下特性：\n\n\n- 标准802.1Q VLAN，端口模式有trunk和access。\n- 有链路聚合和无链路聚合的网卡绑定\n- NetFlow, sFlow(R), 和镜像功能用以增加可视化\n- QoS (Quality of Service) 配置, 流量整形\n- Geneve, GRE, VXLAN, STT, 和 LISP 隧道支持\n- 支持BFD和802.1ag连通性故障管理。\n- OpenFlow 1.0 以上版本及相关扩展的支持\n- 使用C和Python绑定的事务配置数据库\n- 使用Linux内核模块的高性能转发\n- 支持IPV6\n\n\n## 为什么需要OpenVswitch\n虚拟机管理程序（Hypervisor）需要桥接宿主内的虚拟机以及其与外部世界通信的能力。这意味着需要一个Linux内置的L2交换机（Linux网桥），而且这个交换机需要是快速和可靠的。这是Open vSwitch产生的最大需求\nOpenVswitch瞄准的是多服务器的虚拟化部署，这种场景下传统的技术栈并不好处理，这些环境通常是高度动态的，需要逻辑抽象网络的维护，并且有大量和专用交换硬件集成或者把以前CPU的工作Offload到专用硬件上的工作。\n对于上述需求，OpenVswitch通过如下的设计理念以及特征来达到目标：\n### 状态的移动\n所有和网络实体相关（比如虚拟机）的网络状态都应易于识别并且可以在不同主机之间迁移。这可能包括传统的“软状态”（如在L2学习表项），L3转发状态、策略路由、ACL、QoS，监控配置（如NetFlow、sFlow IPFIX，），等。\nOpen vSwitch为已经支持不同实例配置和迁移Slow（配置）和Fast网络的网络状态。例如，如果一个VM在不同的服务器上迁移，不仅可以迁移相关的配置（跨规则，ACL，QoS）也可以迁移任何运行时的网络状态。\n### 网络动态变化的响应\n虚拟环境通常以高变化率为特征。VMS来回运行，改变逻辑网络环境，等等。\nOpen vSwitch有许多特性来实现网络控制系统响应和适应网络环境的变化。这包括简单的统计和可视化支持如NetFlow和sFlow，IPFIX。更有用的是，Open vSwitch支持网络状态数据库（OVSDB），支持远程触发。因此，一个编排层可以“监视”网络的各个方面并在它们发生变化时作出响应。例如，这在今天被大量使用的响应和跟踪VM迁移情况。\nOpen vSwitch也支持OpenFlow把远程访问导出到控制层的方法。比如可以用于导出链路状态流量和链路发现流量（例如LLDP、CDP、OSPF等）。\n### 逻辑标签的维护\n分布式虚拟交换机（如VMware VDS和思科的Nexus 1000V）经常通过在网络数据包中追加或者修改标签来承载网络的逻辑上下文。这种方式可以用来唯一地标识VM（以抵抗硬件欺骗的方式），或者持有只在逻辑域中相关的其他上下文。构建分布式虚拟交换机的大部分问题是如何高效而正确地管理这些标签。\nOpen vSwitch有多个指定和维护标注的规则，这些都可以被远程的协同层所访问处理。此外，在许多情况下，这些标记规则存储在优化的表单中，因此它们不必与重量级网络设备耦合。这允许，例如，成千上万的标签或地址映射规则进行配置，更改，和迁移。\n同理，Open vSwitch支持GRE的实现，可以同时处理成千上万支持GRE隧道隧道创建，远程配置，并推倒。例如，它可以用于连接不同数据中心的私有VM网络。\n### 硬件集成\nOpen vSwitch的转发面（Linux Kernel datapath）的设计是可以做到把报文处理“委托”给硬件芯片来做的，无论这个硬件芯片是装在一个经典的硬件交换机框中还是在终端主机的网卡里。这使得Open vSwitch控制面能够控制一个纯软件实现同时也兼容硬件实现。\n有许多公司正在进行努力把Open vSwitch移植到硬件芯片上运行。包括多个芯片商（Broadcom和Marvell），以及一些厂商定制的平台。文档中的“移植”部分讨论了如何去做这样一个移植。\n硬件集成的优点不仅仅是在于虚拟环境中的性能。如果物理交换机也暴露Open vSwitch的控制抽象，那么裸机和虚拟宿主环境可以使用相同的自动化网络管控机制来管理。\n## 总结\n在许多方面，Open vSwitch不同于之前Hypervisor网络栈的设计目标，其专注于满足大规模的基于Linux的虚拟化环境的自动化与动态网络控制需求。\nOpen vSwitch的目标是保持内核代码量尽可能小（满足必要的性能即可）和重用现有系统的可用部件（例如Open vSwitch使用现有的QoS协议栈）。在Linux 3.3版本，Open vSwitch作为内核和用户空间工具包装的一部分在大部分的发行版中发布\n\n\n\n\n\n\n\n\n[1]: http://docs.openvswitch.org/en/latest/intro/why-ovs/","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-5] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-06\2017-06-26-【OpenVswitch源码分析之一】背景.markdown [pool-2-thread-5] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenVswitch源码分析之一】背景》成功 [pool-2-thread-5] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23127865 [pool-2-thread-3] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":23127865,"title":"内存文件操作系统","create_at":"\/Date(1396875210000)\/","create":"2014-04-07 08:53:30","view_count":684,"comment_count":1,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"模拟实现的一个文件操作系统","url":"http://blog.csdn.net/BLACKMOON88/article/details/23127865","categories":"","tags":"文件系统,c,iterator,map","content":"\r\n模拟实现的一个文件操作系统，头文件如下：\u003cpre code_snippet_id=\"279549\" snippet_file_name=\"blog_20140407_2_4615976\"  class=\"cpp\" name=\"code\" snippet_file_name=\"blog_20140407_2_4615976\" code_snippet_id=\"279549\"\u003e#ifndef _FILE_MANAGER_H_\n#define _FILE_MANAGER_H_\n#include &lt;map&gt;\n#include &lt;string&gt;\nclass Dir;\n//文件节点\nclass File{\npublic:\n\tFile() {\n\t\tparent = NULL;\n\t}\n\tFile(const std::string &amp;n) : fileName(n) {}\n\tbool operator == (const File &amp;other) const{\n\t\tif(fileName == other.fileName) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\npublic: \n    std::string fileName;  \n\tDir *parent;\n};\n//目录节点\nclass Dir{\npublic:\n\tDir() {\n\t\tparent = NULL;\n\t}\n\tDir(const std::string &amp;n) : dirName(n) {}\n\tbool operator == (const Dir &amp;other) const{\n\t\tif(dirName == other.dirName) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\npublic:\n\tstd::string dirName;\n\tDir *parent;\n\tstd::map&lt;std::string, Dir *&gt; subDirs;\n\tstd::map&lt;std::string, File *&gt; files;\n};\nint CreateDir(const char * ParentDirName, const char * DirName);\n\nvoid DeleteDir(const char * DirName);\n\nint MoveDir(const char * SrcDirName, const char * DestDirName);\n\nint CreateFile(const char * DirName, const char * FileName);\n\nvoid DeleteFile(const char * FileName);\n\nunsigned int GetFileNum(const char * DirName);\n\nvoid Clear(void);\n\n#endif\n\u003c/pre\u003e\r\n\u003cp\u003e具体实现代码如下：\u003c/p\u003e\r\n\u003cp\u003e\u003cpre code_snippet_id=\"279549\" snippet_file_name=\"blog_20140407_3_3503943\"  class=\"cpp\" name=\"code\" snippet_file_name=\"blog_20140407_3_3503943\" code_snippet_id=\"279549\"\u003e/******************************************************************************\n\nCopyright (C), 2001-2013, Huawei Tech. Co., Ltd.\n\n******************************************************************************\nFile Name     :\nVersion       :\nAuthor        :\nCreated       : 2013/9\nLast Modified :\nDescription   :\nFunction List :\n\nHistory       :\n1.Date        : 2013/9\nAuthor      :\nModification: Created file\n\n******************************************************************************/\n#include &quot;FileManager.h&quot;\nusing namespace std;\ntypedef map&lt;string, Dir&gt;::iterator DirItr;\ntypedef map&lt;string, File&gt;::iterator FileItr;\ntypedef map&lt;string, Dir*&gt;::iterator DirPtrItr;\ntypedef map&lt;string, File*&gt;::iterator FilePtrItr;\n//维护一个hash的目录索引\nmap&lt;string, Dir*&gt; dirs;\nmap&lt;string, File*&gt; files;\n//定义用于表示文件系统的树结构   \nDir *Root=new Dir(&quot;root&quot;);\nDir *CurrentDir;\nFile *CurrentFile;\nstring getString(const char *s) {\n\treturn string(s);\n}\n\nDir* FindDir(const char * DirName)\n{\n\tif(getString(DirName) == &quot;root&quot;) {\n\t\treturn Root;\n\t}\n\n\tDirPtrItr itr = dirs.find(getString(DirName));\n\tif(itr == dirs.end()) {\n\t\treturn NULL;\n\t}\n\treturn itr-&gt;second;\n}\n\nFile* FindFile(const char *FileName) {\n\tFilePtrItr itr = files.find(getString(FileName));\n\tif(itr == files.end()) {\n\t\treturn NULL;\n\t}\n\treturn itr-&gt;second;\n}\n\nint CreateDir(const char * ParentDirName, const char * DirName)\n{\n\tCurrentDir=FindDir(ParentDirName);\n\tif(CurrentDir==NULL){\n\t\treturn -1;\n\t}\n\tDir *TemptDir=FindDir(DirName);\n\tif(TemptDir!=NULL){\n\t\treturn -1;\n\t}\n\tDir *NewDir=new Dir(getString(DirName));\n\tCurrentDir-&gt;subDirs[getString(DirName)]=NewDir;\n\tNewDir-&gt;parent=CurrentDir;\n\tdirs[getString(DirName)]=NewDir;\n\treturn 0;\n}\n\nDir* RemoveFile(const char *FileName) {\n\tFile *filePtr = FindFile(FileName);\n\tif(filePtr == NULL) {\n\t\treturn NULL;\n\t}\n\tDir *parentPtr = filePtr-&gt;parent;\n\tfiles.erase(getString(FileName));\n\treturn parentPtr;\n}\n\nDir* RemoveDir(const char *DirName) {\n\tDir *pDir = FindDir(DirName);\n\tif(pDir == NULL) {\n\t\treturn NULL;\n\t}\n\tif( !(pDir-&gt;subDirs.empty())){\n\t\tDirPtrItr sItr = pDir-&gt;subDirs.begin();\n\t\t//后序删除所有子目录节点\n\t\twhile(sItr != pDir-&gt;subDirs.end()) {\n\t\t\tRemoveDir(sItr-&gt;first.c_str());\n\t\t\tsItr++;\n\t\t}\n\t}\n\t\t//后序删除所有子文件节点\n\t\tFilePtrItr fItr = pDir-&gt;files.begin();\n\t\twhile(fItr != pDir-&gt;files.end()) {\n\t\t\tRemoveFile(fItr-&gt;first.c_str());\n\t\t\tif( !(pDir-&gt;files.empty())) fItr++;\n\t\t\telse break;\n\t\t}\n\t\tDir *parentPtr = pDir-&gt;parent;\n\t\tdelete pDir;\n\t\tdirs.erase(getString(DirName));\n\t\treturn parentPtr;\n}\n\n\nvoid DeleteDir(const char * DirName)\n{\n\tDir *parentPtr = RemoveDir(DirName);\n\tif(parentPtr != NULL) {\n\t\tparentPtr-&gt;subDirs.erase(getString(DirName));\n\t}\n    return;\n}\n\nint MoveDir(const char * SrcDirName, const char * DestDirName)\n{\n    Dir *srcDir = FindDir(SrcDirName);\n\tDir *destDir = FindDir(DestDirName);\n\tif(srcDir == NULL || destDir == NULL) {\n\t\treturn -1;\n\t}\n\tif(srcDir-&gt;parent == destDir) {\n\t\treturn -1;\n\t}\n\tDir *tempDir = destDir;\n\twhile(tempDir != Root) {\n\t\tif(tempDir == srcDir) {\n\t\t\treturn -1;\n\t\t}\n\t\ttempDir = tempDir-&gt;parent;\n\t}\n\n\tDir *srcParent = srcDir-&gt;parent;\n\tsrcParent-&gt;subDirs.erase(srcDir-&gt;dirName);\n\tsrcDir-&gt;parent = destDir;\n\tdestDir-&gt;subDirs[srcDir-&gt;dirName] = srcDir;\n    return 0;\n}\n\nint CreateFile(const char * DirName, const char * FileName)\n{\n    File *filePtr = FindFile(FileName);\n\tif(filePtr != NULL) {\n\t\treturn -1;\n\t}\n\tDir *dirPtr = FindDir(DirName);\n\tif(dirPtr == NULL) {\n\t\treturn -1;\n\t}\n\tFile *f=new File(getString(FileName));\n\tfiles[getString(FileName)] = f;\n\tfilePtr = files[getString(FileName)];\n\tfilePtr-&gt;parent = dirPtr;\n\tdirPtr-&gt;files[getString(FileName)] = filePtr;\n    return 0;\n}\n\n\nvoid DeleteFile(const char * FileName)\n{\n    Dir *parentPtr = RemoveFile(FileName);\n\tif(parentPtr != NULL) {\n\t\tparentPtr-&gt;files.erase(getString(FileName));\n\t}\n\treturn;\n}\n\nunsigned int GetFileNum(const char * DirName)\n{\n    Dir *dirPtr = FindDir(DirName);\n\tif(dirPtr == NULL) {\n\t\treturn 0;\n\t}\n\tunsigned int fileNum = dirPtr-&gt;files.size();\n\tDirPtrItr itr = dirPtr-&gt;subDirs.begin();\n\twhile(itr != dirPtr-&gt;subDirs.end()) {\n\t\tfileNum += GetFileNum(itr-&gt;first.c_str());\n\t\titr++;\n\t}\n    return fileNum;\n}\n\nvoid Clear(void)\n{\n    dirs.clear();\n\tfiles.clear();\n\tRoot-&gt;files.clear();\n\tRoot-&gt;subDirs.clear();\n    return;\n}\n\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\r\n\u003c/p\u003e\r\n\u003cdiv style=\"top:0px\"\u003e&#65279;&#65279;\u003c/div\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-3] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-07-内存文件操作系统.markdown [pool-2-thread-3] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=73863848 [pool-2-thread-9] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":73863848,"title":"【OpenVswitch源码分析之二】架构","create_at":"\/Date(1498653902000)\/","create":"2017-06-28 08:45:02","view_count":230,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"OpenVswitch架构概览 \n        Open vSwitch的架构和模块与传统的物理交换机是一一对应的，包括控制面和数据平台，只是传统的物理交换机通常使用NP芯片来进行转发，而Openvswitch使用Linux内核模块做数据平面。OpenVswitch包括三个核心模块：ovs-vswitchd，ovsdb-server以及内核模块openvswitch datapath。每个模块有不","url":"http://blog.csdn.net/BLACKMOON88/article/details/73863848","categories":"OpenVswitch,云计算","tags":"linux kernel,交换机,架构,源码","content":"\u003ch2 id=\"openvswitch架构概览\"\u003eOpenVswitch架构概览\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://images2015.cnblogs.com/blog/635909/201609/635909-20160907114623473-1291020451.png\" alt=\"OpenVswitch Architecture\" title=\"\"\u003e \u003cbr\u003e\nOpen vSwitch的架构和模块与传统的物理交换机是一一对应的，包括控制面和数据平台，只是传统的物理交换机通常使用NP芯片来进行转发，而Openvswitch使用Linux内核模块做数据平面。OpenVswitch包括三个核心模块：ovs-vswitchd，ovsdb-server以及内核模块openvswitch datapath。每个模块有不同的功能\u003c/p\u003e\n\n\u003ch3 id=\"ovs-vswitchd功能模块介绍\"\u003eovs-vswitchd功能模块介绍\u003c/h3\u003e\n\n\u003cp\u003eovs-vswitchd是一个守护进程，在用户启动该组件不久其就会脱离控制终端，作为OVS的管理和控制进程对外提供服务，一方面它通过unix Socket和OVSDB通信，加载OVSDB内的配置信息，也能把设备信息更新到服务器中，这部分属于设备的配置管理能力。另一方面其内置了多个协议的支持，包括MAC Learning, LLDP, STP等，同时其支持和拉远的控制器建立Openflow连接，通过Openflow协议下发控制流表给内核模块。内核模块和OVS-Vswitchd通过Netlink进行通信，Netlink相较于其他的IPC通信方式，其支持双工，而且是异步通信，支持组播，另外可以自定义协议族。总而言之，Netlink是一个高效的内核态和用户态通信方式，同时其可扩展性也很好。\u003c/p\u003e\n\n\u003ch3 id=\"ovsdb-server功能模块介绍\"\u003eOvsdb-server功能模块介绍\u003c/h3\u003e\n\n\u003cp\u003eovsdb-server是一个轻量级的数据库服务，主要保存了整个OVS的配置信息，包括接口，交换内容，VLAN等等。其数据库结构如图所示： \u003cbr\u003e\n\u003cimg src=\"http://images2015.cnblogs.com/blog/635909/201609/635909-20160907114625238-1863348603.png\" alt=\"OVSDB Database Schema\" title=\"\"\u003e \u003cbr\u003e\n从OVSDB的数据库结构可以看出网桥是支持SFlow，QoS, Mirror等可视化和调优功能，OVSDB对外提供Json RPC接口，提供CURD接口供客户端对数据库进行操作。\u003c/p\u003e\n\n\u003ch3 id=\"openvswitch-datapath\"\u003eopenvswitch datapath\u003c/h3\u003e\n\n\u003cp\u003eopenvswitchd.ko是内核中负责vswitch的快转面，根据openflow流表转发，并接收ovs-vswitchd的配置，内核模块在初始化以及做Port binding时，会注册钩子函数，把端口的报文处理接管到内核模块。当Datapath出现table miss情况时会把报文送入队列供用户控件的vswitchd模块读取，在用户空间有slow path的exact table的精确匹配与wildcard table的模糊匹配。而当Datapath配置了sflow时，也会将报文上送到控制面进行处理。\u003c/p\u003e\n\n\u003ch2 id=\"openvswitch-模块概述\"\u003eOpenVswitch 模块概述\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003e           |   +-------------------+\n           |   |    ovs-vswitchd   |&lt;--&gt;ovsdb-server\n           |   +-------------------+\n           |   |      ofproto      |&lt;--&gt;OpenFlow controllers\n           |   +--------+-+--------+  _\n           |   | netdev | |ofproto-|   |\n userspace |   +--------+ |  dpif  |   |\n           |   | netdev | +--------+   |\n           |   |provider| |  dpif  |   |\n           |   +---||---+ +--------+   |\n           |       ||     |  dpif  |   | implementation of\n           |       ||     |provider|   | ofproto provider\n           |_      ||     +---||---+   |\n                   ||         ||       |\n            _  +---||-----+---||---+   |\n           |   |          |datapath|   |\n    kernel |   |          +--------+  _|\n           |   |                   |\n           |_  +--------||---------+\n                        ||\n                     physical\n                       NIC\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e从上图可以看出vswitchd本身是分层的结构，最上面的daemon层主要用于和ovsdb通信，做配置的下发和更新等，中间是ofproto层，ofproto是交换机的控制平面实现，通过该模块可以和外界的SDN控制器建立Openflow通道，而在ofproto下层有两个插件，分别是ofproto provider和netdev，ofproto provider对接datapath，负责流表以及datapath的配置下发，以及报文上送等。在ovs的定义里，netdev代表了具体平台的设备实现，e.g. linux内核的net_device或者移植到交换机平台下的port等，struct netdev_class定义了netdev-provider的具体实现需要的接口，具体的平台实现需要支持这些统一的接口，从而完成netdev设备的创建，销毁，打开，关闭等一系列操作。\u003c/p\u003e","markdowncontent":"## OpenVswitch架构概览\n\n![OpenVswitch Architecture](http://images2015.cnblogs.com/blog/635909/201609/635909-20160907114623473-1291020451.png)\nOpen vSwitch的架构和模块与传统的物理交换机是一一对应的，包括控制面和数据平台，只是传统的物理交换机通常使用NP芯片来进行转发，而Openvswitch使用Linux内核模块做数据平面。OpenVswitch包括三个核心模块：ovs-vswitchd，ovsdb-server以及内核模块openvswitch datapath。每个模块有不同的功能\n\n### ovs-vswitchd功能模块介绍\novs-vswitchd是一个守护进程，在用户启动该组件不久其就会脱离控制终端，作为OVS的管理和控制进程对外提供服务，一方面它通过unix Socket和OVSDB通信，加载OVSDB内的配置信息，也能把设备信息更新到服务器中，这部分属于设备的配置管理能力。另一方面其内置了多个协议的支持，包括MAC Learning, LLDP, STP等，同时其支持和拉远的控制器建立Openflow连接，通过Openflow协议下发控制流表给内核模块。内核模块和OVS-Vswitchd通过Netlink进行通信，Netlink相较于其他的IPC通信方式，其支持双工，而且是异步通信，支持组播，另外可以自定义协议族。总而言之，Netlink是一个高效的内核态和用户态通信方式，同时其可扩展性也很好。\n\n### Ovsdb-server功能模块介绍\novsdb-server是一个轻量级的数据库服务，主要保存了整个OVS的配置信息，包括接口，交换内容，VLAN等等。其数据库结构如图所示：\n![OVSDB Database Schema](http://images2015.cnblogs.com/blog/635909/201609/635909-20160907114625238-1863348603.png)\n从OVSDB的数据库结构可以看出网桥是支持SFlow，QoS, Mirror等可视化和调优功能，OVSDB对外提供Json RPC接口，提供CURD接口供客户端对数据库进行操作。\n\n###openvswitch datapath\nopenvswitchd.ko是内核中负责vswitch的快转面，根据openflow流表转发，并接收ovs-vswitchd的配置，内核模块在初始化以及做Port binding时，会注册钩子函数，把端口的报文处理接管到内核模块。当Datapath出现table miss情况时会把报文送入队列供用户控件的vswitchd模块读取，在用户空间有slow path的exact table的精确匹配与wildcard table的模糊匹配。而当Datapath配置了sflow时，也会将报文上送到控制面进行处理。\n##OpenVswitch 模块概述\n               |   +-------------------+\n               |   |    ovs-vswitchd   |\u003c--\u003eovsdb-server\n               |   +-------------------+\n               |   |      ofproto      |\u003c--\u003eOpenFlow controllers\n               |   +--------+-+--------+  _\n               |   | netdev | |ofproto-|   |\n     userspace |   +--------+ |  dpif  |   |\n               |   | netdev | +--------+   |\n               |   |provider| |  dpif  |   |\n               |   +---||---+ +--------+   |\n               |       ||     |  dpif  |   | implementation of\n               |       ||     |provider|   | ofproto provider\n               |_      ||     +---||---+   |\n                       ||         ||       |\n                _  +---||-----+---||---+   |\n               |   |          |datapath|   |\n        kernel |   |          +--------+  _|\n               |   |                   |\n               |_  +--------||---------+\n                            ||\n                         physical\n                           NIC\n从上图可以看出vswitchd本身是分层的结构，最上面的daemon层主要用于和ovsdb通信，做配置的下发和更新等，中间是ofproto层，ofproto是交换机的控制平面实现，通过该模块可以和外界的SDN控制器建立Openflow通道，而在ofproto下层有两个插件，分别是ofproto provider和netdev，ofproto provider对接datapath，负责流表以及datapath的配置下发，以及报文上送等。在ovs的定义里，netdev代表了具体平台的设备实现，e.g. linux内核的net_device或者移植到交换机平台下的port等，struct netdev_class定义了netdev-provider的具体实现需要的接口，具体的平台实现需要支持这些统一的接口，从而完成netdev设备的创建，销毁，打开，关闭等一系列操作。","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-9] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《内存文件操作系统》成功 [pool-2-thread-3] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-06\2017-06-28-【OpenVswitch源码分析之二】架构.markdown [pool-2-thread-9] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenVswitch源码分析之二】架构》成功 [pool-2-thread-9] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23506175 [pool-2-thread-22] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":23506175,"title":"计算二叉树的深度和宽度","create_at":"\/Date(1397259096000)\/","create":"2014-04-12 07:31:36","view_count":1194,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"如何求解二叉树的深度，可以先分析一下下图：\r\n\r\n\r\n在这个图中，根节点R的高度H1=max{左子节点高度H2，右子节点高度H3}+1;可以得出H1=H3+1;\r\n而H2=max{H4,0}+1;H3=H5+1;\r\n....;...\r\n所以可以看出对高度的求解可以满足以下递归：\r\n求得左子树的高度 LHeight;\r\n求得右子树的高度RHeight;\r\n根的高度为max（LHeight+1,RHe","url":"http://blog.csdn.net/BLACKMOON88/article/details/23506175","categories":"","tags":"c,二叉树,算法,递归","content":"\r\n\u003cp\u003e如何求解二叉树的深度，可以先分析一下下图：\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20140412010646484?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"\u003e\u003cbr\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e在这个图中，根节点R的高度H1=max{左子节点高度H2，右子节点高度H3}&#43;1;可以得出H1=H3&#43;1;\u003c/p\u003e\r\n\u003cp\u003e而H2=max{H4,0}&#43;1;H3=H5&#43;1;\u003c/p\u003e\r\n\u003cp\u003e....;...\u003c/p\u003e\r\n\u003cp\u003e所以可以看出对高度的求解可以满足以下递归：\u003c/p\u003e\r\n\u003cp\u003e求得左子树的高度 LHeight;\u003c/p\u003e\r\n\u003cp\u003e求得右子树的高度RHeight;\u003c/p\u003e\r\n\u003cp\u003e根的高度为max（LHeight&#43;1,RHeight;&#43;1）.\u003c/p\u003e\r\n\u003cp\u003e具体代码如下：\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cpre name=\"code\" class=\"cpp\"\u003eint GetHeightInfo(BiNode *head){\n\tint LHeight,RHeight;\n\t//边界条件\n\tif (head==NULL) return 0;\n\t//得到左子树的高度\n\tLHeight=GetHeightInfo(head-&gt;left);\n\t//得到右子树的高度\n\tRHeight=GetHeightInfo(head-&gt;right);\n\t//取左右子树高度的最大值+1\n\treturn LHeight&gt;RHeight? LHeight+1:RHeight+1;\n}\u003c/pre\u003e二叉树的深度求解，也可以先分析啊下图：\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20140412011321687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"\u003e\u003c/p\u003e\r\n\u003cp\u003e求宽度本质上还是求各层的节点数，对宽度优先遍历算法稍微改进，可以得到各层的节点&#20540;，宽度优先算法需要队列，而层数的计算可以采用两个参数来维持：\u003c/p\u003e\r\n\u003cp\u003e上层的节点数LastLayerValue;本层的节点数CurrentLayerValue;这样就可以确定各层的节点数。\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cpre code_snippet_id=\"287717\" snippet_file_name=\"blog_20140412_2_43016\"  name=\"code\" class=\"cpp\"\u003eint GetWidthInfo(BiNode *head){\n\t//需要保存的三个数据\n\tint LastLayerValue;\n\tint CurrentLayerValue;\n\tint maxWidth=0;\n\n\t//维护队列\n\tqueue&lt;BiNode *&gt; myQueue;  \n\t\n\tif(head-&gt;data==NULL)\n\t{\n\t\treturn 0;\n\t}\n\telse \n\t{\n\t\tLastLayerValue=1;\n\t\tmyQueue.push(head);\n\t}\n\twhile(!myQueue.empty())\n\t{\n\t\twhile(LastLayerValue!=0)\n\t\t{\n\t\t\thead=myQueue.front();\n\t\t\tmyQueue.pop();\n\t\t\tif(head-&gt;left!=NULL)\n\t\t\t{\n\t\t\t\tmyQueue.push(head-&gt;left);\n\t\t\t}\n\t\t\tif(head-&gt;right!=NULL)\n\t\t\t{\n\t\t\t\tmyQueue.push(head-&gt;right);\n\t\t\t}\n\t\t\tLastLayerValue--;\n\t\t}\n\t\tCurrentLayerValue=myQueue.size();\n\t\tLastLayerValue=CurrentLayerValue;\n\t\tmaxWidth=maxWidth&gt;CurrentLayerValue? maxWidth:CurrentLayerValue;\n\t}\n\treturn maxWidth;\n}\u003c/pre\u003e最后给出求解两者的函数：\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cpre code_snippet_id=\"287717\" snippet_file_name=\"blog_20140412_3_3391869\"  name=\"code\" class=\"cpp\"\u003e/*\nDescription  \n         给定一个二叉树，获取该二叉树的宽度深度。\nPrototype\n         int GetBiNodeInfo(BiNode &amp;head, unsigned int *pulWidth, unsigned int *pulHeight)\nInput Param \n         head   需要获取深度的二叉树头结点\nOutput Param \n         pulWidth   宽度\n         pulHeight  高度\nReturn Value\n         0          成功\n         1          失败或其他异常\n*/\nint GetBiNodeInfo(BiNode &amp;head, unsigned int *pulWidth, unsigned int *pulHeight)\n{\n\t/*在这里实现功能*/\n\n    *pulWidth=GetWidthInfo(&amp;head);\n\t*pulHeight=GetHeightInfo(&amp;head);\n\treturn 0;\n}\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-22] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75331436 [pool-2-thread-23] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":75331436,"title":"【OpenStack源码分析之四】WSGI与Nova API服务启动","create_at":"\/Date(1500389370000)\/","create":"2017-07-18 10:49:30","view_count":175,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前言前文已经介绍了RPC Server的启动，而Nova API启动的是WSGI服务，所以先介绍一下WSGI。WSGIWeb服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。WSGI是作为Web服务器","url":"http://blog.csdn.net/BLACKMOON88/article/details/75331436","categories":"Python相关,云计算,OpenStack","tags":"openstack,api,python,源码","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e前文已经介绍了RPC Server的启动，而Nova API启动的是WSGI服务，所以先介绍一下WSGI。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"wsgi\"\u003eWSGI\u003c/h3\u003e\n\n\u003cp\u003eWeb服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。WSGI是作为Web服务器与Web应用程序或应用框架之间的一种低级别的接口，以提升可移植Web应用开发的共同点。WSGI是基于现存的CGI标准而设计的。\u003c/p\u003e\n\n\u003cp\u003eWSGI区分为两个部份：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e重写环境变量，根据目标URL，将请求消息路由到不同的应用对象。\u003c/li\u003e\n\u003cli\u003e允许在一个进程中同时运行多个应用程序或应用框架。\u003c/li\u003e\n\u003cli\u003e负载均衡和远程处理，通过在网络上转发请求和响应消息。\u003c/li\u003e\n\u003cli\u003e进行内容后处理，例如应用XSLT样式表。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e以前，如何选择合适的Web应用程序框架成为困扰Python初学者的一个问题，这是因为，一般而言，Web应用框架的选择将限制可用的Web服务器的选择，反之亦然。那时的Python应用程序通常是为CGI，FastCGI，mod_python中的一个而设计，甚至是为特定Web服务器的自定义的API接口而设计的。WSGI没有官方的实现, 因为WSGI更像一个协议。只要遵照这些协议,WSGI应用(Application)都可以在任何服务器(Server)上运行, 反之亦然。WSGI就是Python的CGI包装，相对于Fastcgi是PHP的CGI包装。\u003c/p\u003e\n\n\u003cp\u003eWSGI将 web 组件分为三类： web服务器，web中间件,web应用程序， wsgi基本处理模式为 ： WSGI Server -&gt; (WSGI Middleware)* -&gt; WSGI Application 。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWSGI Server/gateway\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ewsgi server可以理解为一个符合wsgi规范的web server，接收request请求，封装一系列环境变量，按照wsgi规范调用注册的wsgi app，最后将response返回给客户端。文字很难解释清楚wsgi server到底是什么东西，以及做些什么事情，最直观的方式还是看wsgi server的实现代码。以python自带的wsgiref为例，wsgiref是按照wsgi规范实现的一个简单wsgi server。它的代码也不复杂。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.biaodianfu.com/wp-content/uploads/2014/08/wsgi-gateway.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e服务器创建socket，监听端口，等待客户端连接。\u003c/li\u003e\n\u003cli\u003e当有请求来时，服务器解析客户端信息放到环境变量environ中，并调用绑定的handler来处理请求。\u003c/li\u003e\n\u003cli\u003ehandler解析这个http请求，将请求信息例如method，path等放到environ中。\u003c/li\u003e\n\u003cli\u003ewsgi handler再将一些服务器端信息也放到environ中，最后服务器信息，客户端信息，本次请求信息全部都保存到了环境变量environ中。\u003c/li\u003e\n\u003cli\u003ewsgi handler 调用注册的wsgi app，并将environ和回调函数传给wsgi app\u003c/li\u003e\n\u003cli\u003ewsgi app 将reponse header/status/body 回传给wsgi handler\u003c/li\u003e\n\u003cli\u003e最终handler还是通过socket将response信息塞回给客户端。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWSGI Application\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ewsgi application就是一个普通的callable对象，当有请求到来时，wsgi server会调用这个wsgi app。这个对象接收两个参数，通常为environ,start_response。environ就像前面介绍的，可以理解为环境变量，跟一次请求相关的所有信息都保存在了这个环境变量中，包括服务器信息，客户端信息，请求信息。start_response是一个callback函数，wsgi application通过调用start_response，将response headers/status 返回给wsgi server。此外这个wsgi app会return 一个iterator对象 ，这个iterator就是response body。这么空讲感觉很虚，对着下面这个简单的例子看就明白很多了。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWSGI MiddleWare\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e有些功能可能介于服务器程序和应用程序之间，例如，服务器拿到了客户端请求的URL, 不同的URL需要交由不同的函数处理，这个功能叫做 URL Routing，这个功能就可以放在二者中间实现，这个中间层就是 middleware。middleware对服务器程序和应用是透明的，也就是说，服务器程序以为它就是应用程序，而应用程序以为它就是服务器。这就告诉我们，middleware需要把自己伪装成一个服务器，接受应用程序，调用它，同时middleware还需要把自己伪装成一个应用程序，传给服务器程序。 \u003cbr\u003e\n其实无论是服务器程序，middleware 还是应用程序，都在服务端，为客户端提供服务，之所以把他们抽象成不同层，就是为了控制复杂度，使得每一次都不太复杂，各司其职\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eCGI\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n关于CGI的解释，知乎上有位hellocode兄弟在 \u003cbr\u003e\n\u003ca href=\"https://www.zhihu.com/question/19998865/answer/29395327\" target=\"_blank\"\u003ehttps://www.zhihu.com/question/19998865/answer/29395327\u003c/a\u003e 讲的比较清楚，我摘抄如下：\u003c/p\u003e\n\n\u003cp\u003eCGI是比较原始的开发动态网站的方式。你可以想象一下，一个网站的动态内容肯定是程序生成的，光是静态的html页面无法达到这个效果。那么，这个程序就需要接受客户端的请求，然后进行相应处理，再返回给客户端，客户端和服务端的通信当然是通过HTTP协议。\u003c/p\u003e\n\n\u003cp\u003e然后我们会发现，这个程序在处理客户端请求的时候，大部分时候会进行很多重复的工作，比如说HTTP请求的解析。也就是说，你的程序需要解析HTTP请求，我的程序也需要解析。\u003c/p\u003e\n\n\u003cp\u003e于是为了DRY原则，Web服务器诞生了。（以下所说的都是CGI的工作模式）于是Web服务器可以解析这个HTTP请求，然后把这个请求的各种参数写进进程的环境变量，比如REQUEST_METHOD，PATH_INFO之类的。之后呢，服务器会调用相应的程序来处理这个请求，这个程序也就是我们所要写的CGI程序了。它会负责生成动态内容，然后返回给服务器，再由服务器转交给客户端。服务器和CGI程序之间通信，一般是通过进程的环境变量和管道。\u003c/p\u003e\n\n\u003cp\u003e这样做虽然很清晰，但缺点就是每次有请求，服务器都会fork and exec，每次都会有一个新的进程产生，开销还是比较大的。原因在与CGI程序是一个独立的程序，它是可以独立运行的（在提供HTTP请求的情况下），它可以用几乎所有语言来写，包括perl，c，lua，python等等。所以对于一个程序，服务器只能以fork and exec的方式来调用它了。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"nova-api-服务启动流程\"\u003eNova API 服务启动流程\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eOpenStack api-paste.ini 详解\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n这里先摘抄 Nova模块的api-paste.ini文件如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e\u003cspan class=\"hljs-preprocessor\"\u003e############\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# Metadata #\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e############\u003c/span\u003e\n[composite:metadata]\nuse = egg:Paste\u003cspan class=\"hljs-preprocessor\"\u003e#urlmap\u003c/span\u003e\n/: meta\n\n[pipeline:meta]\npipeline = cors metaapp\n\n[app:metaapp]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.app\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.metadata\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.handler\u003c/span\u003e:MetadataRequestHandler\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n\u003cspan class=\"hljs-preprocessor\"\u003e#############\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# OpenStack #\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#############\u003c/span\u003e\n\n[composite:osapi_compute]\nuse = \u003cspan class=\"hljs-keyword\"\u003ecall\u003c/span\u003e:nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.urlmap\u003c/span\u003e:urlmap_factory\n/: oscomputeversions\n\u003cspan class=\"hljs-preprocessor\"\u003e# v21 is an exactly feature match for v2, except it has more stringent\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# input validation on the wsgi surface (prevents fuzzing early on the\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# API). It also provides new features via API microversions which are\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# opt into for clients. Unaware clients will receive the same frozen\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# v2 API feature set, but with some relaxed validation\u003c/span\u003e\n/v2: openstack_compute_api_v21_legacy_v2_compatible\n/v2\u003cspan class=\"hljs-number\"\u003e.1\u003c/span\u003e: openstack_compute_api_v21\n\n[composite:openstack_compute_api_v21]\nuse = \u003cspan class=\"hljs-keyword\"\u003ecall\u003c/span\u003e:nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e:pipeline_factory_v21\nnoauth2 = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler noauth2 osapi_compute_app_v21\nkeystone = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext osapi_compute_app_v21\n\n[composite:openstack_compute_api_v21_legacy_v2_compatible]\nuse = \u003cspan class=\"hljs-keyword\"\u003ecall\u003c/span\u003e:nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e:pipeline_factory_v21\nnoauth2 = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler noauth2 legacy_v2_compatible osapi_compute_app_v21\nkeystone = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext legacy_v2_compatible osapi_compute_app_v21\n\n[filter:request_id]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = oslo_middleware:RequestId\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:compute_req_id]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e_req_id:ComputeReqIdMiddleware\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:faultwrap]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e:FaultWrapper\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:noauth2]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e:NoAuthMiddleware\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:osprofiler]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.profiler\u003c/span\u003e:WsgiMiddleware\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:sizelimit]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = oslo_middleware:RequestBodySizeLimiter\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:http_proxy_to_wsgi]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = oslo_middleware\u003cspan class=\"hljs-preprocessor\"\u003e.http\u003c/span\u003e_proxy_to_wsgi:HTTPProxyToWSGI\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:legacy_v2_compatible]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e:LegacyV2CompatibleWrapper\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[app:osapi_compute_app_v21]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.app\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e:APIRouterV21\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[pipeline:oscomputeversions]\npipeline = cors faultwrap http_proxy_to_wsgi oscomputeversionapp\n\n[app:oscomputeversionapp]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.app\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.versions\u003c/span\u003e:Versions\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n\u003cspan class=\"hljs-preprocessor\"\u003e##########\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# Shared #\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e##########\u003c/span\u003e\n\n[filter:cors]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = oslo_middleware\u003cspan class=\"hljs-preprocessor\"\u003e.cors\u003c/span\u003e:filter_factory\noslo_config_project = nova\n\n[filter:keystonecontext]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e:NovaKeystoneContext\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:authtoken]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = keystonemiddleware\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e_token:filter_factory\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这里面涉及到几个术语，分别解释一下：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ecomposite section：Request 进来后第一个通过的 Section，表示需要将一个 HTTP URL Request 调度到一个或者多种 Application 上。\u003c/li\u003e\n\u003cli\u003euse：是一个关键字，指定处理请求的代码，这里表示我们使用 Paste egg包中 urlmap 来实现 composite 请求分发方式。 ==&gt; 决定请求的分发方式为 urlmap(urlmap 算是一个通用的请求分发程序)。\u003c/li\u003e\n\u003cli\u003epipeline section : 指定的 section 有如下要求： \u003cbr\u003e\n\u003cul\u003e\u003cli\u003e1.最后一个名字对应的 section 一定要是一个 app 类型。\u003c/li\u003e\n\u003cli\u003e2.非最后一个名字对应的 section 一定要是一个 filter 类型。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003efilter section: 是一个实现了过滤器功能的中间件(将 Application 进行进一步的封装)，用于过滤 Request 和 Response。\u003c/li\u003e\n\u003cli\u003eApp: 一个 app 就是一个实现主要功能的具体的 application 。所以 app 必须是 Callable Object 类型，接受的参数(environ,start_response)，这是WSGI Server交给Application的符合WSGI规范的参数。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEXAMPLE: Keystone Request URL 为 \u003ca href=\"http://homename:35357/v3/auth/tokens\" target=\"_blank\"\u003ehttp://homename:35357/v3/auth/tokens\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eStep1. （hostname:35357）： 这一部分由 Web Server 来获取并处理的(EG.虚拟机功能)。\u003c/p\u003e\n\n\u003cp\u003eStep2. （/v3/auth/tokens）: 根据 paste.ini 中的配置来对剩下的 URL（/v3/auth/tokens）部分进行处理。首先请求的 Port =35357 决定了会经过 [composite:admin] section 。\u003c/p\u003e\n\n\u003cp\u003eStep3. （/v3）: composite section 会根据 /v3 这个 URL 前缀来决定将 Request 路由到哪一个 pipeline secion，这里就把请求转发给 [pipeline:api_v3] 处理，转发之前，会把 /v3 这个部分的 URL 去掉。\u003c/p\u003e\n\n\u003cp\u003eStep4. （/auth/tokens） : [pipeline:api_v3] 收到请求，URL_Path是 （/auth/tokens），然后开始调用各个 filter(中间件) 来处理请求。最后会把请求交给 [app:service_v3] 进行处理。\u003c/p\u003e\n\n\u003cp\u003eStep5. （/auth/tokens）: [app:service_v3] 收到请求，URL_Path是 (/auth/tokens)，最后交由的 WSGI Application:keystone.service:v3_app_factory 去处理。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"服务如何部署\"\u003e服务如何部署？\u003c/h3\u003e\n\n\u003cp\u003e目前Python有两种方式来开发和部署一个Web应用：用WSGI和不用WSGI。OpenStack的API服务都是使用WSGI的方式来部署的。在生产环境中部署WSGI，一般会考虑使用Web服务器 + 应用服务器 + 应用(框架)的方案。OpenStack官方推荐的是使用Apache + mod_wsgi的方案，不过这个要换成其他方案也很容易，你也可以选nginx + uWSGI。对于开发调试的目的，有些项目也会提供使用eventlet的单进程部署方案，比如Keystone项目的keystone-all命令。采用eventlet这种异步架构来进行应用开发也是一个比较大的话题，本文不覆盖这方面的内容。\u003c/p\u003e\n\n\u003cp\u003e当然，也可以不用WSGI。在Python中，如果不使用WSGI的化，一般开发者会选择一些专门的服务器和框架，比如Tornado，或者最新最潮的aiohttp。不过在OpenStack的项目中我还没见过不使用WSGI的。\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"https://www.biaodianfu.com/cgi-fastcgi-wsgi.html\"\u003ehttps://www.biaodianfu.com/cgi-fastcgi-wsgi.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/Jmilk/article/details/52081748\"\u003ehttp://blog.csdn.net/Jmilk/article/details/52081748\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"https://segmentfault.com/a/1190000003718598\"\u003ehttps://segmentfault.com/a/1190000003718598\u003c/a\u003e\u003c/p\u003e","markdowncontent":"###前言\n前文已经介绍了RPC Server的启动，而Nova API启动的是WSGI服务，所以先介绍一下WSGI。\n###WSGI\nWeb服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。WSGI是作为Web服务器与Web应用程序或应用框架之间的一种低级别的接口，以提升可移植Web应用开发的共同点。WSGI是基于现存的CGI标准而设计的。\n\nWSGI区分为两个部份：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：\n\n- 重写环境变量，根据目标URL，将请求消息路由到不同的应用对象。\n- 允许在一个进程中同时运行多个应用程序或应用框架。\n- 负载均衡和远程处理，通过在网络上转发请求和响应消息。\n- 进行内容后处理，例如应用XSLT样式表。\n\n以前，如何选择合适的Web应用程序框架成为困扰Python初学者的一个问题，这是因为，一般而言，Web应用框架的选择将限制可用的Web服务器的选择，反之亦然。那时的Python应用程序通常是为CGI，FastCGI，mod_python中的一个而设计，甚至是为特定Web服务器的自定义的API接口而设计的。WSGI没有官方的实现, 因为WSGI更像一个协议。只要遵照这些协议,WSGI应用(Application)都可以在任何服务器(Server)上运行, 反之亦然。WSGI就是Python的CGI包装，相对于Fastcgi是PHP的CGI包装。\n\nWSGI将 web 组件分为三类： web服务器，web中间件,web应用程序， wsgi基本处理模式为 ： WSGI Server -\u003e (WSGI Middleware)* -\u003e WSGI Application 。\n\n***WSGI Server/gateway***\n\nwsgi server可以理解为一个符合wsgi规范的web server，接收request请求，封装一系列环境变量，按照wsgi规范调用注册的wsgi app，最后将response返回给客户端。文字很难解释清楚wsgi server到底是什么东西，以及做些什么事情，最直观的方式还是看wsgi server的实现代码。以python自带的wsgiref为例，wsgiref是按照wsgi规范实现的一个简单wsgi server。它的代码也不复杂。\n\n![这里写图片描述](https://www.biaodianfu.com/wp-content/uploads/2014/08/wsgi-gateway.png)\n\n- 服务器创建socket，监听端口，等待客户端连接。\n- 当有请求来时，服务器解析客户端信息放到环境变量environ中，并调用绑定的handler来处理请求。\n- handler解析这个http请求，将请求信息例如method，path等放到environ中。\n- wsgi handler再将一些服务器端信息也放到environ中，最后服务器信息，客户端信息，本次请求信息全部都保存到了环境变量environ中。\n- wsgi handler 调用注册的wsgi app，并将environ和回调函数传给wsgi app\n- wsgi app 将reponse header/status/body 回传给wsgi handler\n- 最终handler还是通过socket将response信息塞回给客户端。\n\n***WSGI Application***\n\nwsgi application就是一个普通的callable对象，当有请求到来时，wsgi server会调用这个wsgi app。这个对象接收两个参数，通常为environ,start_response。environ就像前面介绍的，可以理解为环境变量，跟一次请求相关的所有信息都保存在了这个环境变量中，包括服务器信息，客户端信息，请求信息。start_response是一个callback函数，wsgi application通过调用start_response，将response headers/status 返回给wsgi server。此外这个wsgi app会return 一个iterator对象 ，这个iterator就是response body。这么空讲感觉很虚，对着下面这个简单的例子看就明白很多了。\n\n***WSGI MiddleWare***\n\n有些功能可能介于服务器程序和应用程序之间，例如，服务器拿到了客户端请求的URL, 不同的URL需要交由不同的函数处理，这个功能叫做 URL Routing，这个功能就可以放在二者中间实现，这个中间层就是 middleware。middleware对服务器程序和应用是透明的，也就是说，服务器程序以为它就是应用程序，而应用程序以为它就是服务器。这就告诉我们，middleware需要把自己伪装成一个服务器，接受应用程序，调用它，同时middleware还需要把自己伪装成一个应用程序，传给服务器程序。\n其实无论是服务器程序，middleware 还是应用程序，都在服务端，为客户端提供服务，之所以把他们抽象成不同层，就是为了控制复杂度，使得每一次都不太复杂，各司其职\n\n***CGI***\n关于CGI的解释，知乎上有位hellocode兄弟在\nhttps://www.zhihu.com/question/19998865/answer/29395327 讲的比较清楚，我摘抄如下：\n\nCGI是比较原始的开发动态网站的方式。你可以想象一下，一个网站的动态内容肯定是程序生成的，光是静态的html页面无法达到这个效果。那么，这个程序就需要接受客户端的请求，然后进行相应处理，再返回给客户端，客户端和服务端的通信当然是通过HTTP协议。\n\n然后我们会发现，这个程序在处理客户端请求的时候，大部分时候会进行很多重复的工作，比如说HTTP请求的解析。也就是说，你的程序需要解析HTTP请求，我的程序也需要解析。\n\n于是为了DRY原则，Web服务器诞生了。（以下所说的都是CGI的工作模式）于是Web服务器可以解析这个HTTP请求，然后把这个请求的各种参数写进进程的环境变量，比如REQUEST_METHOD，PATH_INFO之类的。之后呢，服务器会调用相应的程序来处理这个请求，这个程序也就是我们所要写的CGI程序了。它会负责生成动态内容，然后返回给服务器，再由服务器转交给客户端。服务器和CGI程序之间通信，一般是通过进程的环境变量和管道。\n\n这样做虽然很清晰，但缺点就是每次有请求，服务器都会fork and exec，每次都会有一个新的进程产生，开销还是比较大的。原因在与CGI程序是一个独立的程序，它是可以独立运行的（在提供HTTP请求的情况下），它可以用几乎所有语言来写，包括perl，c，lua，python等等。所以对于一个程序，服务器只能以fork and exec的方式来调用它了。\n\n###Nova API 服务启动流程\n***OpenStack api-paste.ini 详解***\n这里先摘抄 Nova模块的api-paste.ini文件如下：\n\n```\n############\n# Metadata #\n############\n[composite:metadata]\nuse = egg:Paste#urlmap\n/: meta\n\n[pipeline:meta]\npipeline = cors metaapp\n\n[app:metaapp]\npaste.app_factory = nova.api.metadata.handler:MetadataRequestHandler.factory\n\n#############\n# OpenStack #\n#############\n\n[composite:osapi_compute]\nuse = call:nova.api.openstack.urlmap:urlmap_factory\n/: oscomputeversions\n# v21 is an exactly feature match for v2, except it has more stringent\n# input validation on the wsgi surface (prevents fuzzing early on the\n# API). It also provides new features via API microversions which are\n# opt into for clients. Unaware clients will receive the same frozen\n# v2 API feature set, but with some relaxed validation\n/v2: openstack_compute_api_v21_legacy_v2_compatible\n/v2.1: openstack_compute_api_v21\n\n[composite:openstack_compute_api_v21]\nuse = call:nova.api.auth:pipeline_factory_v21\nnoauth2 = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler noauth2 osapi_compute_app_v21\nkeystone = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext osapi_compute_app_v21\n\n[composite:openstack_compute_api_v21_legacy_v2_compatible]\nuse = call:nova.api.auth:pipeline_factory_v21\nnoauth2 = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler noauth2 legacy_v2_compatible osapi_compute_app_v21\nkeystone = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext legacy_v2_compatible osapi_compute_app_v21\n\n[filter:request_id]\npaste.filter_factory = oslo_middleware:RequestId.factory\n\n[filter:compute_req_id]\npaste.filter_factory = nova.api.compute_req_id:ComputeReqIdMiddleware.factory\n\n[filter:faultwrap]\npaste.filter_factory = nova.api.openstack:FaultWrapper.factory\n\n[filter:noauth2]\npaste.filter_factory = nova.api.openstack.auth:NoAuthMiddleware.factory\n\n[filter:osprofiler]\npaste.filter_factory = nova.profiler:WsgiMiddleware.factory\n\n[filter:sizelimit]\npaste.filter_factory = oslo_middleware:RequestBodySizeLimiter.factory\n\n[filter:http_proxy_to_wsgi]\npaste.filter_factory = oslo_middleware.http_proxy_to_wsgi:HTTPProxyToWSGI.factory\n\n[filter:legacy_v2_compatible]\npaste.filter_factory = nova.api.openstack:LegacyV2CompatibleWrapper.factory\n\n[app:osapi_compute_app_v21]\npaste.app_factory = nova.api.openstack.compute:APIRouterV21.factory\n\n[pipeline:oscomputeversions]\npipeline = cors faultwrap http_proxy_to_wsgi oscomputeversionapp\n\n[app:oscomputeversionapp]\npaste.app_factory = nova.api.openstack.compute.versions:Versions.factory\n\n##########\n# Shared #\n##########\n\n[filter:cors]\npaste.filter_factory = oslo_middleware.cors:filter_factory\noslo_config_project = nova\n\n[filter:keystonecontext]\npaste.filter_factory = nova.api.auth:NovaKeystoneContext.factory\n\n[filter:authtoken]\npaste.filter_factory = keystonemiddleware.auth_token:filter_factory\n\n```\n这里面涉及到几个术语，分别解释一下：\n\n-  composite section：Request 进来后第一个通过的 Section，表示需要将一个 HTTP URL Request 调度到一个或者多种 Application 上。\n-  use：是一个关键字，指定处理请求的代码，这里表示我们使用 Paste egg包中 urlmap 来实现 composite 请求分发方式。 ==\u003e 决定请求的分发方式为 urlmap(urlmap 算是一个通用的请求分发程序)。\n- pipeline section : 指定的 section 有如下要求：\n\t- 1.最后一个名字对应的 section 一定要是一个 app 类型。\n\t- 2.非最后一个名字对应的 section 一定要是一个 filter 类型。\n- filter section: 是一个实现了过滤器功能的中间件(将 Application 进行进一步的封装)，用于过滤 Request 和 Response。\n- App: 一个 app 就是一个实现主要功能的具体的 application 。所以 app 必须是 Callable Object 类型，接受的参数(environ,start_response)，这是WSGI Server交给Application的符合WSGI规范的参数。\n\nEXAMPLE: Keystone Request URL 为 http://homename:35357/v3/auth/tokens\n\nStep1. （hostname:35357）： 这一部分由 Web Server 来获取并处理的(EG.虚拟机功能)。\n\nStep2. （/v3/auth/tokens）: 根据 paste.ini 中的配置来对剩下的 URL（/v3/auth/tokens）部分进行处理。首先请求的 Port =35357 决定了会经过 [composite:admin] section 。\n\nStep3. （/v3）: composite section 会根据 /v3 这个 URL 前缀来决定将 Request 路由到哪一个 pipeline secion，这里就把请求转发给 [pipeline:api_v3] 处理，转发之前，会把 /v3 这个部分的 URL 去掉。\n\nStep4. （/auth/tokens） : [pipeline:api_v3] 收到请求，URL_Path是 （/auth/tokens），然后开始调用各个 filter(中间件) 来处理请求。最后会把请求交给 [app:service_v3] 进行处理。\n\nStep5. （/auth/tokens）: [app:service_v3] 收到请求，URL_Path是 (/auth/tokens)，最后交由的 WSGI Application:keystone.service:v3_app_factory 去处理。\n\n###服务如何部署？\n目前Python有两种方式来开发和部署一个Web应用：用WSGI和不用WSGI。OpenStack的API服务都是使用WSGI的方式来部署的。在生产环境中部署WSGI，一般会考虑使用Web服务器 + 应用服务器 + 应用(框架)的方案。OpenStack官方推荐的是使用Apache + mod_wsgi的方案，不过这个要换成其他方案也很容易，你也可以选nginx + uWSGI。对于开发调试的目的，有些项目也会提供使用eventlet的单进程部署方案，比如Keystone项目的keystone-all命令。采用eventlet这种异步架构来进行应用开发也是一个比较大的话题，本文不覆盖这方面的内容。\n\n当然，也可以不用WSGI。在Python中，如果不使用WSGI的化，一般开发者会选择一些专门的服务器和框架，比如Tornado，或者最新最潮的aiohttp。不过在OpenStack的项目中我还没见过不使用WSGI的。\n\n参考文献：\nhttps://www.biaodianfu.com/cgi-fastcgi-wsgi.html\nhttp://blog.csdn.net/Jmilk/article/details/52081748\nhttps://segmentfault.com/a/1190000003718598","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-23] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=41657169 [pool-2-thread-10] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":41657169,"title":"tarjan算法的原理和实现","create_at":"\/Date(1417444999000)\/","create":"2014-12-01 10:43:19","view_count":484,"comment_count":0,"comment_allowed":"true","type":"original","channel":17,"digg":0,"bury":0,"description":"Tarjan算法的操作原理如下：\n\n在任何深度优先搜索中，同一强连通分量内的所有顶点均在同一棵深度优先搜索树中。也就是说，强连通分量一定是有向图的某个深度搜树子树。我们用low值记录该点所在强连通子图对应的搜索子树的根节点的Dfn值。注意，该子树中的元素在栈中一定是相邻的，且根节点在栈中一定位于所有子树元素的最下方。强连通分量是由若干个环组成的。所以，当有环形成时（也就是搜索的下一个点已在栈中","url":"http://blog.csdn.net/BLACKMOON88/article/details/41657169","categories":"C语言算法","tags":"编程,算法,algorithm,递归,栈","content":"\r\n\u003cp style=\"margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px\"\u003e\r\nTarjan算法的操作原理如下：\u003c/p\u003e\r\n\u003col style=\"font-family:Arial; font-size:14px; line-height:26px\"\u003e\r\n\u003cli\u003e在任何深度优先搜索中，同一强连通分量内的所有顶点均在同一棵深度优先搜索树中。也就是说，强连通分量一定是有向图的某个深度搜树子树。\u003c/li\u003e\u003cli\u003e我们用\u003cspan style=\"color:#ff0000\"\u003elow&#20540;记录该点所在强连通子图对应的搜索子树的根节点的Dfn&#20540;\u003c/span\u003e。注意，该子树中的元素在栈中一定是相邻的，且根节点在栈中一定位于所有子树元素的最下方。\u003c/li\u003e\u003cli\u003e强连通分量是由若干个环组成的。所以，当有环形成时（也就是搜索的下一个点已在栈中），我们将这一条路径的low&#20540;统一，即这条路径上的点属于同一个强连通分量。\u003c/li\u003e\u003cli\u003e如果遍历完整个搜索树后某个点的dfn&#20540;等于low&#20540;，则它是该搜索子树的根。这时，它以上（包括它自己）一直到栈顶的所有元素组成一个强连通分量。\u003c/li\u003e\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:Arial; font-size:12px\"\u003e\u003cspan style=\"line-height:26px\"\u003elow&#20540;和Dfn&#20540;各代表什么：\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:Arial; font-size:12px\"\u003e\u003cspan style=\"line-height:26px\"\u003eDfn&#20540;代表在一次深度优先搜索中各节点所处的次序，如果一个图是强连通的，它必然是可以被一个环串起所有的点，反之则不然，所以叶子节点必然是存在的。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:Arial; font-size:12px\"\u003e\u003cspan style=\"line-height:26px\"\u003e什么样的节点可以看成根节点：low[v]=Dfn[v]。这个根节点是强连通子图的根节点。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:Arial; font-size:12px\"\u003e\u003cspan style=\"line-height:26px\"\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre code_snippet_id=\"2445889\" snippet_file_name=\"blog_20170613_1_7330485\"  name=\"code\" class=\"plain\"\u003e== 伪代码 ==\n \u0027\u0027\u0027algorithm\u0027\u0027\u0027 tarjan \u0027\u0027\u0027is\u0027\u0027\u0027\n   \u0027\u0027\u0027input:\u0027\u0027\u0027 图 \u0027\u0027G\u0027\u0027 = (\u0027\u0027V\u0027\u0027, \u0027\u0027E\u0027\u0027)\n   \u0027\u0027\u0027output:\u0027\u0027\u0027 以所在的强连通分量划分的顶点集\n \n   \u0027\u0027index\u0027\u0027 := 0\n   \u0027\u0027S\u0027\u0027 := empty    \u0027\u0027// 置栈为空\u0027\u0027\n   \u0027\u0027\u0027for each\u0027\u0027\u0027 \u0027\u0027v\u0027\u0027 \u0027\u0027\u0027in\u0027\u0027\u0027 \u0027\u0027V\u0027\u0027 \u0027\u0027\u0027do\u0027\u0027\u0027\n     \u0027\u0027\u0027if\u0027\u0027\u0027 (\u0027\u0027v\u0027\u0027.index is undefined)\n       strongconnect(\u0027\u0027v\u0027\u0027)\n     \u0027\u0027\u0027end if\u0027\u0027\u0027\n \n   \u0027\u0027\u0027function\u0027\u0027\u0027 strongconnect(\u0027\u0027v\u0027\u0027)\n     \u0027\u0027// 将未使用的最小index值作为结点v的index\u0027\u0027\n     \u0027\u0027v\u0027\u0027.index := \u0027\u0027index\u0027\u0027\n     \u0027\u0027v\u0027\u0027.lowlink := \u0027\u0027index\u0027\u0027\n     \u0027\u0027index\u0027\u0027 := \u0027\u0027index\u0027\u0027 + 1\n     \u0027\u0027S\u0027\u0027.push(\u0027\u0027v\u0027\u0027)\n \n     \u0027\u0027// 考虑v的后继结点\u0027\u0027\n     \u0027\u0027\u0027for each\u0027\u0027\u0027 (\u0027\u0027v\u0027\u0027, \u0027\u0027w\u0027\u0027) \u0027\u0027\u0027in\u0027\u0027\u0027 \u0027\u0027E\u0027\u0027 \u0027\u0027\u0027do\u0027\u0027\u0027\n       \u0027\u0027\u0027if\u0027\u0027\u0027 (\u0027\u0027w\u0027\u0027.index is undefined) \u0027\u0027\u0027then\u0027\u0027\u0027\n         \u0027\u0027// 后继结点w未访问，递归调用\u0027\u0027\n         strongconnect(\u0027\u0027w\u0027\u0027)\n         \u0027\u0027v\u0027\u0027.lowlink := min(\u0027\u0027v\u0027\u0027.lowlink, \u0027\u0027w\u0027\u0027.lowlink)\n       \u0027\u0027\u0027else if\u0027\u0027\u0027 (\u0027\u0027w\u0027\u0027 is in \u0027\u0027S\u0027\u0027) \u0027\u0027\u0027then\u0027\u0027\u0027\n         \u0027\u0027// w已在栈S中，亦即在当前强连通分量中\u0027\u0027\n         \u0027\u0027v\u0027\u0027.lowlink := min(\u0027\u0027v\u0027\u0027.lowlink, \u0027\u0027w\u0027\u0027.index)\n       \u0027\u0027\u0027end if\u0027\u0027\u0027\n \n     \u0027\u0027// 若v是根则出栈，并求得一个强连通分量\u0027\u0027\n     \u0027\u0027\u0027if\u0027\u0027\u0027 (\u0027\u0027v\u0027\u0027.lowlink = \u0027\u0027v\u0027\u0027.index) \u0027\u0027\u0027then\u0027\u0027\u0027\n       start a new strongly connected component\n       \u0027\u0027\u0027repeat\u0027\u0027\u0027\n         \u0027\u0027w\u0027\u0027 := \u0027\u0027S\u0027\u0027.pop()\n         add \u0027\u0027w\u0027\u0027 to current strongly connected component\n       \u0027\u0027\u0027until\u0027\u0027\u0027 (\u0027\u0027w\u0027\u0027 = \u0027\u0027v\u0027\u0027)\n       output the current strongly connected component\n     \u0027\u0027\u0027end if\u0027\u0027\u0027\n   \u0027\u0027\u0027end function\u0027\u0027\u0027\n\n变量&lt;tt&gt;index&lt;/tt&gt;是深度优先搜索的结点计数器。&lt;tt&gt;S&lt;/tt&gt;是栈，初始为空，用于存储已经访问但未被判定属于任一强连通分量的结点。注意这并非一个一般深度优先搜索的栈，结点不是在以它为根的子树搜索完成后出栈，而是在整个强连通分量被找到时。\n\n最外层循环用于查找未访问的结点，以保证所有结点最终都会被访问。&lt;tt&gt;strongconnect&lt;/tt&gt;进行一次深度优先搜索，并找到结点&lt;tt&gt;v&lt;/tt&gt;的后继结点构成的子图中所有的强连通分量。\n\n当一个结点完成递归时，若它的&lt;tt&gt;lowlink&lt;/tt&gt;仍等于&lt;tt&gt;index&lt;/tt&gt;，那么它就是强连通分量的根。算法将在此结点之后入栈（包含此结点）且仍在栈中的结点出栈，并作为一个强连通分量输出。\n\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-10] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-12\2014-12-01-tarjan算法的原理和实现.markdown [pool-2-thread-10] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-18-【OpenStack源码分析之四】WSGI与Nova API服务启动.markdown [pool-2-thread-23] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-12-计算二叉树的深度和宽度.markdown [pool-2-thread-22] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之四】WSGI与Nova API服务启动》成功 [pool-2-thread-23] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《tarjan算法的原理和实现》成功 [pool-2-thread-10] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《计算二叉树的深度和宽度》成功 [pool-2-thread-22] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23599257 [pool-2-thread-16] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75905534 [pool-2-thread-24] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":75905534,"title":"【OpenStack源码分析之九】看 nova-scheduler 如何选择计算节点","create_at":"\/Date(1500785432000)\/","create":"2017-07-23 12:50:32","view_count":154,"comment_count":0,"comment_allowed":"true","type":"repost","channel":2,"digg":0,"bury":0,"description":"本节重点介绍 nova-scheduler 的调度机制和实现方法：即解决如何选择在哪个计算节点上启动 instance 的问题。创建 Instance 时，用户会提出资源需求，例如 CPU、内存、磁盘各需要多少。OpenStack 将这些需求定义在 flavor 中，用户只需要指定用哪个 flavor 就可以了。  \n \n可用的 flavor 在 System-\u003eFlavors 中管理。  \n \nF","url":"http://blog.csdn.net/BLACKMOON88/article/details/75905534","categories":"云计算,OpenStack","tags":"openstack,源码","content":"\u003cp\u003e转自：\u003ca href=\"http://cloudman.blog.51cto.com/10425448/1768866\" target=\"_blank\"\u003ehttp://cloudman.blog.51cto.com/10425448/1768866\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e本节重点介绍 nova-scheduler 的调度机制和实现方法：即解决如何选择在哪个计算节点上启动 instance 的问题。\u003c/p\u003e\n\n\u003cp\u003e创建 Instance 时，用户会提出资源需求，例如 CPU、内存、磁盘各需要多少。\u003c/p\u003e\n\n\u003cp\u003eOpenStack 将这些需求定义在 flavor 中，用户只需要指定用哪个 flavor 就可以了。  \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696174053384.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n可用的 flavor 在 System-&gt;Flavors 中管理。  \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696325049036.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nFlavor 主要定义了 VCPU，RAM，DISK 和 Metadata 这四类。 nova-scheduler 会按照 flavor 去选择合适的计算节点。 VCPU，RAM，DISK 比较好理解，而 Metatdata 比较有意思，我们后面会具体讨论。 \u003c/p\u003e\n\n\u003cp\u003e下面介绍 nova-scheduler 是如何实现调度的。 \u003c/p\u003e\n\n\u003cp\u003e在 /etc/nova/nova.conf 中，nova 通过 scheduler_driver，scheduler_available_filters 和 scheduler\u003c/p\u003e\n\n\n\n\u003ch3 id=\"filter-scheduler\"\u003eFilter scheduler\u003c/h3\u003e\n\n\u003cp\u003eFilter scheduler 是 nova-scheduler 默认的调度器，调度过程分为两步： \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e通过过滤器（filter）选择满足条件的计算节点（运行 nova-compute）\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e通过权重计算（weighting）选择在最优（权重值最大）的计算节点上创建 Instance。\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003escheduler_driver=nova.scheduler.filter_scheduler.FilterScheduler \u003cbr\u003e\nNova 允许使用第三方 scheduler，配置 scheduler_driver 即可。 这又一次体现了OpenStack的开放性。 \u003c/p\u003e\n\n\u003cp\u003eScheduler 可以使用多个 filter 依次进行过滤，过滤之后的节点再通过计算权重选出最适合的节点。 \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696491079257.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e上图是调度过程的一个示例： \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e最开始有 6 个计算节点 Host1-Host6\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e通过多个 filter 层层过滤，Host2 和 Host4 没有通过，被刷掉了\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHost1，Host3，Host5，Host6 计算权重，结果 Host5 得分最高，最终入选\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"filter\"\u003eFilter\u003c/h3\u003e\n\n\u003cp\u003e当 Filter scheduler 需要执行调度操作时，会让 filter 对计算节点进行判断，filter 返回 True 或 False。 \u003c/p\u003e\n\n\u003cp\u003eNova.conf 中的 scheduler_available_filters 选项用于配置 scheduler 可用的 filter，默认是所有 nova \u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003escheduler_available_filters = nova\u003cspan class=\"hljs-preprocessor\"\u003e.scheduler\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.filters\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.all\u003c/span\u003e_filters\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e另外还有一个选项 scheduler_default_filters，用于指定 scheduler 真正使用的 filter，默认值如下 \u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003escheduler_default_filters \u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e RetryFilter, AvailabilityZoneFilter, RamFilter, DiskFilter, Compute\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFilter scheduler 将按照列表中的顺序依次过滤。 下面依次介绍每个 filter。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"retryfilter\"\u003eRetryFilter\u003c/h4\u003e\n\n\u003cp\u003eRetryFilter 的作用是刷掉之前已经调度过的节点。 \u003c/p\u003e\n\n\u003cp\u003e举个例子方便大家理解： 假设 A,B,C 三个节点都通过了过滤，最终 A 因为权重值最大被选中执行操作。 但由于某个原因，操作在 A 上失败了。 默认情况下，nova-scheduler 会重新执行过滤操作（重复次数由 scheduler_max_attempts 选项指定，默认是 3）。 那么这时候 RetryFilter 就会将 A 直接刷掉，避免操作再次失败。 RetryFilter 通常作为第一个 filter。 \u003c/p\u003e\n\n\n\n\u003ch4 id=\"availabilityzonefilter\"\u003eAvailabilityZoneFilter\u003c/h4\u003e\n\n\u003cp\u003e为提高容灾性和提供隔离服务，可以将计算节点划分到不同的Availability Zone中。 \u003c/p\u003e\n\n\u003cp\u003e例如把一个机架上的机器划分在一个 Availability Zone 中。 OpenStack 默认有一个命名为 “Nova” \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696674029728.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e创建 Instance 时，需要指定将 Instance 部署到在哪个 Availability Zone中。 \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696804076285.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003enova-scheduler 在做 filtering 时，会使用 AvailabilityZoneFilter 将不属于指定 Availability Zone 的Host过滤掉\u003c/p\u003e\n\n\n\n\u003ch4 id=\"ramfilter\"\u003eRamFilter\u003c/h4\u003e\n\n\u003cp\u003eRamFilter 将不能满足 flavor 内存需求的计算节点过滤掉。 \u003c/p\u003e\n\n\u003cp\u003e对于内存有一点需要注意： 为了提高系统的资源使用率，OpenStack 在计算节点可用内存时允许Overcommit。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003eram_allocation_ratio \u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e 1.5\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e其含义是：如果计算节点的内存有 10GB，OpenStack 则会认为它有 15GB（10*1.5）的内存。 \u003c/p\u003e\n\n\n\n\u003ch4 id=\"diskfilter\"\u003eDiskFilter\u003c/h4\u003e\n\n\u003cp\u003eDiskFilter 将不能满足 flavor 磁盘需求的计算节点过滤掉。 \u003c/p\u003e\n\n\u003cp\u003eDisk 同样允许 overcommit，通过 nova.conf 中 disk_allocation_ratio 控制，默认值为 1 \u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisk_allocation_ratio \u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e 1.0\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch4 id=\"corefilter\"\u003eCoreFilter\u003c/h4\u003e\n\n\u003cp\u003eCoreFilter 将不能满足 flavor vCPU 需求的计算节点过滤掉。 \u003c/p\u003e\n\n\u003cp\u003evCPU 同样允许 overcommit，通过 nova.conf 中 cpu_allocation_ratio 控制，默认值为 16 \u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecpu_allocation_ratio \u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e 16.0\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这意味着一个 8 vCPU 的计算节点，nova-scheduler 在调度时认为它有 128 个 vCPU。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"computefilter\"\u003eComputeFilter\u003c/h4\u003e\n\n\u003cp\u003eComputeFilter 保证只有 nova-compute 服务正常工作的计算节点才能够被 nova-scheduler调度。 \u003cbr\u003e\nComputeFilter 显然是必选的 filter。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"computecapabilitiesfilter\"\u003eComputeCapabilitiesFilter\u003c/h4\u003e\n\n\u003cp\u003eComputeCapabilitiesFilter 根据计算节点的特性来筛选。\u003c/p\u003e\n\n\u003cp\u003e这个比较高级，我们举例说明。 \u003cbr\u003e\n例如我们的节点有 x86_64 和 ARM 架构的，如果想将 Instance 指定部署到 x86_64 架构的节点上，就可以利用到 ComputeCapabilitiesFilter。\u003c/p\u003e\n\n\u003cp\u003e还记得 flavor 中有个 Metadata 吗，Compute 的 Capabilitie s就在 Metadata中 指定。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696981049450.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e“Compute Host Capabilities” 列出了所有可设置 Capabilities。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697223063965.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n点击 “Architecture” 后面的 “+”，就可以在右边的列表中指定具体的架构。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697342039435.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e配置好后，ComputeCapabilitiesFilter 在调度时只会筛选出 x86_64 的节点。 \u003cbr\u003e\n如果没有设置 Metadata，ComputeCapabilitiesFilter 不会起作用，所有节点都会通过筛选。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"imagepropertiesfilter\"\u003eImagePropertiesFilter\u003c/h4\u003e\n\n\u003cp\u003eImagePropertiesFilter 根据所选 image 的属性来筛选匹配的计算节点。 \u003cbr\u003e\n跟 flavor 类似，image 也有 metadata，用于指定其属性。 \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697471014542.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n例如希望某个 image 只能运行在 kvm 的 hypervisor 上，可以通过 “Hypervisor Type” 属性来指定 \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697570006487.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n点击 “+”，然后在右边的列表中选择 “kvm”。 \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697690933206.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n配置好后，ImagePropertiesFilter 在调度时只会筛选出 kvm 的节点。 \u003cbr\u003e\n如果没有设置 Image 的Metadata，ImagePropertiesFilter 不会起作用，所有节点都会通过筛选。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"servergroupantiaffinityfilter\"\u003eServerGroupAntiAffinityFilter\u003c/h4\u003e\n\n\u003cp\u003eServerGroupAntiAffinityFilter 可以尽量将 Instance 分散部署到不同的节点上。\u003c/p\u003e\n\n\u003cp\u003e例如有 inst1，inst2 和 inst3 三个 instance，计算节点有 A,B 和 C。 \u003cbr\u003e\n为保证分散部署，进行如下操作：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e创建一个 anti-affinity 策略的 server group “group-1”\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003enova server\u003cspan class=\"hljs-attribute\"\u003e-group\u003c/span\u003e\u003cspan class=\"hljs-attribute\"\u003e-create\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003epolicy anti\u003cspan class=\"hljs-attribute\"\u003e-affinity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003egroup\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e请注意，这里的 server group 其实是 instance group，并不是计算节点的 group。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e依次创建 Instance，将inst1, inst2和inst3放到group-1中\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs brainfuck\"\u003e\u003cspan class=\"hljs-comment\"\u003enova\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eboot\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eimage\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eIMAGE_ID\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eflavor\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003ehint\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003egroup=group\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003einst1\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003enova\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eboot\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eimage\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eIMAGE_ID\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eflavor\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003ehint\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003egroup=group\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003einst2\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003enova\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eboot\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eimage\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eIMAGE_ID\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eflavor\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003ehint\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003egroup=group\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003einst3\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e因为 group-1 的策略是 AntiAffinity，调度时 ServerGroupAntiAffinityFilter 会将 inst1, inst2 和 inst3 部署到不同计算节点 A, B 和 C。\u003c/p\u003e\n\n\u003cp\u003e目前只能在 CLI 中指定 server group 来创建 instance。\u003c/p\u003e\n\n\u003cp\u003e创建 instance 时如果没有指定 server group，ServerGroupAntiAffinityFilter 会直接通过。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"weight\"\u003eWeight\u003c/h3\u003e\n\n\u003cp\u003e经过前面一堆 filter 的过滤，nova-scheduler 选出了能够部署 instance 的计算节点。 \u003cbr\u003e\n如果有多个计算节点通过了过滤，那么最终选择哪个节点呢？\u003c/p\u003e\n\n\u003cp\u003eScheduler 会对每个计算节点打分，得分最高的获胜。 \u003cbr\u003e\n打分的过程就是 weight，翻译过来就是计算权重值，那么 scheduler 是根据什么来计算权重值呢？\u003c/p\u003e\n\n\u003cp\u003e目前 nova-scheduler 的默认实现是根据计算节点空闲的内存量计算权重值： \u003cbr\u003e\n空闲内存越多，权重越大，instance 将被部署到当前空闲内存最多的计算节点上。\u003c/p\u003e\n\n\u003ch3 id=\"日志\"\u003e日志\u003c/h3\u003e\n\n\u003cp\u003e是时候完整的回顾一下 nova-scheduler 的工作过程了。 \u003cbr\u003e\n整个过程都被记录到 nova-scheduler 的日志中。 \u003cbr\u003e\n比如当我们部署一个 instance 时\u003c/p\u003e\n\n\u003cp\u003e打开 nova-scheduler 的日志 /opt/stack/logs/n-sch.log\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697818083020.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n日志显示初始有两个 host（在我们的实验环境中就是 devstack-controller 和 devstack-compute1），依次经过 9 个 filter 的过滤（RetryFilter, AvailabilityZoneFilter, RamFilter, \u003cbr\u003e\nDiskFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, \u003cbr\u003e\nServerGroupAntiAffinityFilter, ServerGroupAffinityFilter），两个计算节点都通过了。\u003c/p\u003e\n\n\u003cp\u003e那么接下来就该 weight 了： \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697965069919.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n可以看到因为 devstack-controller 的空闲内存比 devstack-compute1 多（7466 &gt; 3434），权重值更大（1.0 &gt; 0.4599），最终选择 devstack-controller。\u003c/p\u003e\n\n\u003cp\u003e注：要显示 DEBUG 日志，需要在 /etc/nova/nova.conf 中打开 debug 选项。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs ini\"\u003e\u003cspan class=\"hljs-title\"\u003e[DEFAULT]\u003c/span\u003e\n\u003cspan class=\"hljs-setting\"\u003edebug = \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"转自：http://cloudman.blog.51cto.com/10425448/1768866\n\n本节重点介绍 nova-scheduler 的调度机制和实现方法：即解决如何选择在哪个计算节点上启动 instance 的问题。\n\n创建 Instance 时，用户会提出资源需求，例如 CPU、内存、磁盘各需要多少。\n\nOpenStack 将这些需求定义在 flavor 中，用户只需要指定用哪个 flavor 就可以了。 \n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696174053384.jpg)\n可用的 flavor 在 System-\u003eFlavors 中管理。 \n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696325049036.jpg)\nFlavor 主要定义了 VCPU，RAM，DISK 和 Metadata 这四类。 nova-scheduler 会按照 flavor 去选择合适的计算节点。 VCPU，RAM，DISK 比较好理解，而 Metatdata 比较有意思，我们后面会具体讨论。 \n\n下面介绍 nova-scheduler 是如何实现调度的。 \n\n在 /etc/nova/nova.conf 中，nova 通过 scheduler_driver，scheduler_available_filters 和 scheduler\n\n###Filter scheduler\nFilter scheduler 是 nova-scheduler 默认的调度器，调度过程分为两步： \n\n- 通过过滤器（filter）选择满足条件的计算节点（运行 nova-compute）\n\n- 通过权重计算（weighting）选择在最优（权重值最大）的计算节点上创建 Instance。\n\nscheduler_driver=nova.scheduler.filter_scheduler.FilterScheduler\nNova 允许使用第三方 scheduler，配置 scheduler_driver 即可。 这又一次体现了OpenStack的开放性。 \n\nScheduler 可以使用多个 filter 依次进行过滤，过滤之后的节点再通过计算权重选出最适合的节点。 \n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696491079257.jpg)\n\n上图是调度过程的一个示例： \n\n- 最开始有 6 个计算节点 Host1-Host6\n\n- 通过多个 filter 层层过滤，Host2 和 Host4 没有通过，被刷掉了\n\n- Host1，Host3，Host5，Host6 计算权重，结果 Host5 得分最高，最终入选\n\n###Filter\n当 Filter scheduler 需要执行调度操作时，会让 filter 对计算节点进行判断，filter 返回 True 或 False。 \n\nNova.conf 中的 scheduler_available_filters 选项用于配置 scheduler 可用的 filter，默认是所有 nova \n```\nscheduler_available_filters = nova.scheduler.filters.all_filters\n```\n另外还有一个选项 scheduler_default_filters，用于指定 scheduler 真正使用的 filter，默认值如下 \n```\nscheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, DiskFilter, Compute\n```\nFilter scheduler 将按照列表中的顺序依次过滤。 下面依次介绍每个 filter。\n\n####RetryFilter\n\nRetryFilter 的作用是刷掉之前已经调度过的节点。 \n\n举个例子方便大家理解： 假设 A,B,C 三个节点都通过了过滤，最终 A 因为权重值最大被选中执行操作。 但由于某个原因，操作在 A 上失败了。 默认情况下，nova-scheduler 会重新执行过滤操作（重复次数由 scheduler_max_attempts 选项指定，默认是 3）。 那么这时候 RetryFilter 就会将 A 直接刷掉，避免操作再次失败。 RetryFilter 通常作为第一个 filter。 \n\n####AvailabilityZoneFilter\n\n为提高容灾性和提供隔离服务，可以将计算节点划分到不同的Availability Zone中。 \n\n例如把一个机架上的机器划分在一个 Availability Zone 中。 OpenStack 默认有一个命名为 “Nova”\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696674029728.jpg)\n\n创建 Instance 时，需要指定将 Instance 部署到在哪个 Availability Zone中。 \n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696804076285.jpg)\n\nnova-scheduler 在做 filtering 时，会使用 AvailabilityZoneFilter 将不属于指定 Availability Zone 的Host过滤掉\n\n####RamFilter\nRamFilter 将不能满足 flavor 内存需求的计算节点过滤掉。 \n\n对于内存有一点需要注意： 为了提高系统的资源使用率，OpenStack 在计算节点可用内存时允许Overcommit。\n\n```\nram_allocation_ratio = 1.5\n```\n其含义是：如果计算节点的内存有 10GB，OpenStack 则会认为它有 15GB（10*1.5）的内存。 \n\n####DiskFilter\nDiskFilter 将不能满足 flavor 磁盘需求的计算节点过滤掉。 \n\nDisk 同样允许 overcommit，通过 nova.conf 中 disk_allocation_ratio 控制，默认值为 1 \n```\ndisk_allocation_ratio = 1.0\n```\n####CoreFilter\nCoreFilter 将不能满足 flavor vCPU 需求的计算节点过滤掉。 \n\nvCPU 同样允许 overcommit，通过 nova.conf 中 cpu_allocation_ratio 控制，默认值为 16 \n\n```\ncpu_allocation_ratio = 16.0\n```\n这意味着一个 8 vCPU 的计算节点，nova-scheduler 在调度时认为它有 128 个 vCPU。\n\n####ComputeFilter\n\nComputeFilter 保证只有 nova-compute 服务正常工作的计算节点才能够被 nova-scheduler调度。\nComputeFilter 显然是必选的 filter。\n\n####ComputeCapabilitiesFilter\nComputeCapabilitiesFilter 根据计算节点的特性来筛选。\n\n这个比较高级，我们举例说明。\n例如我们的节点有 x86_64 和 ARM 架构的，如果想将 Instance 指定部署到 x86_64 架构的节点上，就可以利用到 ComputeCapabilitiesFilter。\n\n还记得 flavor 中有个 Metadata 吗，Compute 的 Capabilitie s就在 Metadata中 指定。\n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696981049450.jpg)\n\n“Compute Host Capabilities” 列出了所有可设置 Capabilities。\n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697223063965.jpg)\n点击 “Architecture” 后面的 “+”，就可以在右边的列表中指定具体的架构。\n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697342039435.jpg)\n\n配置好后，ComputeCapabilitiesFilter 在调度时只会筛选出 x86_64 的节点。\n如果没有设置 Metadata，ComputeCapabilitiesFilter 不会起作用，所有节点都会通过筛选。\n####ImagePropertiesFilter\nImagePropertiesFilter 根据所选 image 的属性来筛选匹配的计算节点。\n跟 flavor 类似，image 也有 metadata，用于指定其属性。\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697471014542.jpg)\n例如希望某个 image 只能运行在 kvm 的 hypervisor 上，可以通过 “Hypervisor Type” 属性来指定\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697570006487.jpg)\n点击 “+”，然后在右边的列表中选择 “kvm”。\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697690933206.jpg)\n配置好后，ImagePropertiesFilter 在调度时只会筛选出 kvm 的节点。\n如果没有设置 Image 的Metadata，ImagePropertiesFilter 不会起作用，所有节点都会通过筛选。\n####ServerGroupAntiAffinityFilter\n\nServerGroupAntiAffinityFilter 可以尽量将 Instance 分散部署到不同的节点上。\n\n例如有 inst1，inst2 和 inst3 三个 instance，计算节点有 A,B 和 C。\n为保证分散部署，进行如下操作：\n\n- 创建一个 anti-affinity 策略的 server group “group-1”\n\n```\nnova server-group-create --policy anti-affinity group-1\n```\n请注意，这里的 server group 其实是 instance group，并不是计算节点的 group。\n\n- 依次创建 Instance，将inst1, inst2和inst3放到group-1中\n\n```\nnova boot --image IMAGE_ID --flavor 1 --hint group=group-1 inst1\nnova boot --image IMAGE_ID --flavor 1 --hint group=group-1 inst2\nnova boot --image IMAGE_ID --flavor 1 --hint group=group-1 inst3\n```\n因为 group-1 的策略是 AntiAffinity，调度时 ServerGroupAntiAffinityFilter 会将 inst1, inst2 和 inst3 部署到不同计算节点 A, B 和 C。\n\n目前只能在 CLI 中指定 server group 来创建 instance。\n\n创建 instance 时如果没有指定 server group，ServerGroupAntiAffinityFilter 会直接通过。\n\n###Weight\n\n经过前面一堆 filter 的过滤，nova-scheduler 选出了能够部署 instance 的计算节点。\n如果有多个计算节点通过了过滤，那么最终选择哪个节点呢？\n\nScheduler 会对每个计算节点打分，得分最高的获胜。\n打分的过程就是 weight，翻译过来就是计算权重值，那么 scheduler 是根据什么来计算权重值呢？\n\n目前 nova-scheduler 的默认实现是根据计算节点空闲的内存量计算权重值：\n空闲内存越多，权重越大，instance 将被部署到当前空闲内存最多的计算节点上。\n\n###日志\n是时候完整的回顾一下 nova-scheduler 的工作过程了。\n整个过程都被记录到 nova-scheduler 的日志中。\n比如当我们部署一个 instance 时\n\n打开 nova-scheduler 的日志 /opt/stack/logs/n-sch.log\n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697818083020.jpg)\n日志显示初始有两个 host（在我们的实验环境中就是 devstack-controller 和 devstack-compute1），依次经过 9 个 filter 的过滤（RetryFilter, AvailabilityZoneFilter, RamFilter,\nDiskFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter,\nServerGroupAntiAffinityFilter, ServerGroupAffinityFilter），两个计算节点都通过了。\n\n那么接下来就该 weight 了：\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697965069919.jpg)\n可以看到因为 devstack-controller 的空闲内存比 devstack-compute1 多（7466 \u003e 3434），权重值更大（1.0 \u003e 0.4599），最终选择 devstack-controller。\n\n注：要显示 DEBUG 日志，需要在 /etc/nova/nova.conf 中打开 debug 选项。\n\n```\n[DEFAULT]\ndebug = True\n```\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-24] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75769704 [pool-2-thread-14] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=38855273 [pool-2-thread-6] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-23-【OpenStack源码分析之九】看 nova-scheduler 如何选择计算节点.markdown [pool-2-thread-24] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":23599257,"title":"开心的小明——动态规划","create_at":"\/Date(1397367124000)\/","create":"2014-04-13 01:32:04","view_count":708,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"问题描述：\r\n\r\n\r\n小明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早小明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的N元。\r\n\r\n于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的","url":"http://blog.csdn.net/BLACKMOON88/article/details/23599257","categories":"","tags":"c,二维数组,动态规划","content":"\r\n\u003cp\u003e问题描述：\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"font-size:12px; color:#000099\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e小明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003eN\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e元钱就行”。今天一早小明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003eN\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e元。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"font-size:12px; color:#000099\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e于是，他把每件物品规定了一个重要度，分为\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e5\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e等：用整数\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e1\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e~\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e表示，第\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e5\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e等最重要。他还从因特网上查到了每件物品的价&#26684;（都是整数元）。他希望在不超过\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003eN\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e元（可以等于\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003eN\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e元）的前提下，使每件物品的价&#26684;与重要度的乘积的总和最大。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"font-size:12px; color:#000099\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e设第\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ej\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e件物品的价&#26684;为\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ev[j]\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，重要度为\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ew[j]\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，共选中了\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ek\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e件物品，编号依次为\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ej\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e1\u003c/span\u003e\u003c/sub\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ej\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e2\u003c/span\u003e\u003c/sub\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，……，\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ej\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ek\u003c/span\u003e\u003c/sub\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，则所求的总和为：\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"font-size:12px; color:#000099\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003ev[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]*w[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]&#43;v[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]*w[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]&#43;&nbsp;\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:宋体,simsun\"\u003e…\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e&#43;v[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003ek\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]*w[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003ek\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e。（其中\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e*\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e为乘号）\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"font-size:12px; color:#000099\"\u003e请你帮助小明设计一个满足要求的购物单。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n初看这个问题，和0-1背包问题很相&#20284;，可以采用动态规划方法来求解：\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e什么是动态规划（DP）？\u003c/span\u003e\u003cbr style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e\r\n\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e非常重要！，不要认为概念不重要，理解的深刻，你才知道\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(255,0,0)\"\u003e对于什么样的问题去考虑有没有动态规划的方法，以及如何去使用动态规划\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e。\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cbr\u003e\r\n\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e1）动态规划是运筹学中用于求\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e解决策过程中的最优化数学方法\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e。\r\n 当然，我们在这里关注的是作为一种算法设计技术，作为一种使用\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(128,0,128)\"\u003e多阶段决策过程最优的通用方法\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e。\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e它是应用数学中用于\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(128,0,128)\"\u003e解决某类最优化问题\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e的重要工具。\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cbr\u003e\r\n\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e2）如果问题是由\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(128,0,128)\"\u003e交叠的子问题\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e所构成，我们就可以用动态规划技术来解决它，一般来说，这样的子问题出现在对给定问题求解的\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(153,51,102)\"\u003e递推关系\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e中，\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e这个递推关系包含了相\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e同问题的更小子问题的解\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e。动态规划法建议，与其对交叠子问题一次又一次的求解，不如把每个较小子问题只求解一次并把结果记录在表中（动态规划也是空间换时间\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; white-space:pre\"\u003e的），这样就可以从表中得到原始问题的解。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"white-space:pre\"\u003e\u003c/span\u003e由于动态规划具备最优子结构的性质，这意味着它属于递归的一种。\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"white-space:pre\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre code_snippet_id=\"289566\" snippet_file_name=\"blog_20140413_1_6361701\"  name=\"code\" class=\"cpp\"\u003e#include &quot;OJ.h&quot;\n#include &lt;stdlib.h&gt;\nint** initStateMatrix(int*p)\n{\n\tint** StateMatrix=(int **)malloc(sizeof(int*)*(*(p+1)));\n\tint No=0,money=0;\n\t//int 状态矩阵\n\tfor(No=0;No&lt;=*(p+1);No++)\n\t{\n\t\tStateMatrix[No]=(int*)malloc(*p*sizeof(int));\n\t\tfor(money=0;money&lt;=*p;money++)\n\t\t{\n\t\t\tStateMatrix[No][money]=0;\n\t\t}\n\t}\n\tfor(No=1;No&lt;=*(p+1);No++)\n\t{\n\t\tfor(money=1;money&lt;=*p;money++)\n\t\t{\n\t\t\tif(*(p+No*2)&lt;=money)\n\t\t\t{\n\t\t\t\tStateMatrix[No][money]=StateMatrix[No-1][money]&gt;(StateMatrix[No-1][money-*(p+No*2)]+(*(p+No*2)*(*(p+No*2+1))))?StateMatrix[No-1][money]:StateMatrix[No-1][money-*(p+No*2)]+(*(p+No*2)*(*(p+No*2+1)));\n\t\t\t}\n\t\t\telse StateMatrix[No][money]=StateMatrix[No-1][money];\n\t\t}\n\t}\n\treturn StateMatrix;\n} \n/*\n功能:\n\n输入参数：int*p 指向二维数组的首地址，该二维数组第0行的两个数分别表示：总钱数&lt;30000，和希望购买物品的个数&lt;25;\n          该数组从第1行到第m行(1&lt;=j&lt;=m)中给出了编号为j的物品的基本数据，每行有2个非负整数，\n\t\t  表示该物品的价格(&lt;=10000)和该物品的重要度(1~5)。\n\n\t\t  GetResult表示不超过总钱数的物品的价格与重要度乘积的总和的最大值(&lt;100000000)。\n\n\t\t  不需做入参检查，测试用例可以保证～\n\t\t  \n    例如：4000 8（第0行）\n\t\t  821 3  （第1行）\n\t\t  422 5\n\t\t  458 5\n\t\t  500 3\n\t\t  200 2\n\t\t  430 4\n\t\t  530 3\n\t\t  239 3\n\t\t \n\t\t  则表示 总钱数为4000，希望购买物品个数为8个，因此从第1行到第8行表示编号为j的物品的价格及物品的重要度。\n\t \t\n          \n\n\t \t\t\n返回值：无\n\n温馨提示：根据题意可知，该二维数组只有两列，且行数为第0行的第二个元素数值+1;入参p不能按照二维数组的方法来取值，要将\n          二维的转换成一维的哦～\n\n*/\n\nvoid GetResult(int*p,int&amp; Get_Result)\n{\t \n    //\t在这里实现功能\n\tint i;\n\tint** StateMatrix=initStateMatrix(p);\n\tfor(int i=0;i&lt;=*(p+1);i++)\n\t{\n\t\tGet_Result=StateMatrix[i][*p]&gt;Get_Result?StateMatrix[i][*p]:Get_Result;\n\t}\n} \n\n\t\u003c/pre\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-16] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":38855273,"title":"关于有限状态机","create_at":"\/Date(1409062712000)\/","create":"2014-08-26 10:18:32","view_count":939,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"一 有限状态机的实现方式\r\n\r\n\r\n有限状态机（Finite State Machine或者Finite State Automata)是软件领域中一种重要的工具，很多东西的模型实际上就是有限状态机。\r\nFSM的实现方式：\r\n1） switch/case或者if/else\r\n这无意是最直观的方式，使用一堆条件判断，会编程的人都可以做到，对简单小巧的状态机来说最合适，但是毫无疑问，这样的方式比较原始","url":"http://blog.csdn.net/BLACKMOON88/article/details/38855273","categories":"","tags":"c,编程,计算机,结构,设计","content":"\r\n\u003cdiv style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cp align=\"left\"\u003e\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e\u003cstrong\u003e一 有限状态机的实现方式\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp align=\"left\" style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e有限状态机（Finite State Machine或者Finite State Automata)是软件领域中一种重要的工具，很多东西的模型实际上就是有限状态机。\u003cbr\u003e\r\nFSM的实现方式：\u003cbr\u003e\r\n1） switch/case或者if/else\u003cbr\u003e\r\n这无意是最直观的方式，使用一堆条件判断，会编程的人都可以做到，对简单小巧的状态机来说最合适，但是毫无疑问，这样的方式比较原始，对庞大的状态机难以维护。\u003cbr\u003e\r\n2） 状态表\u003cbr\u003e\r\n维护一个二维状态表，横坐标表示当前状态，纵坐标表示输入，表中一个元素存储下一个状态和对应的操作。这一招易于维护，但是运行时间和存储空间的代价较大。\u003cbr\u003e\r\n3） 使用State Pattern\u003cbr\u003e\r\n使用State Pattern使得代码的维护比switch/case方式稍好，性能上也不会有很多的影响，但是也不是100％完美。不过Robert C. Martin做了两个自动产生FSM代码的工具，for java和for C&#43;&#43;各一个，在http://www.objectmentor.com/resources/index上有免费下载，这个工具的输入是纯文本的状态机描述，自动产生符合State Pattern的代码，这样developer的工作只需要维护状态机的文本描述，每必要冒引入bug的风险去维护code。\u003cbr\u003e\r\n4） 使用宏定义描述状态机\u003cbr\u003e\r\n一般来说，C&#43;&#43;编程中应该避免使用#define，但是这主要是因为如果用宏来定义函数的话，很容易产生这样那样的问题，但是巧妙的使用,还是能够产生奇妙的效果。MFC就是使用宏定义来实现大的架构的。\u003cbr\u003e\r\n在实现FSM的时候，可以把一些繁琐无比的if/else还有花括号的组合放在宏中，这样，在代码中可以3）中状态机描述文本一样写，通过编译器的预编译处理产生1）一样的效果，我见过产生C代码的宏，如果要产生C&#43;&#43;代码，己软MFC可以，那么理论上也是可行的。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e\u003cstrong\u003e二 状态机的两种写法&#43;实例\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 有限状态机FSM思想广泛应用于硬件控制电路设计，也是软件上常用的一种处理方法(软件上称为FMM--有限消息机)。它把复杂的控制逻辑分解成有限个稳定状态，在每个状态上判断事件，变连续处理为离散数字处理，符合计算机的工作特点。同时，因为有限状态机具有有限个状态，所以可以在实际的工程上实现。但这并不意味着其只能进行有限次的处理，相反，有限状态机是闭环系统，有限无穷，可以用有限的状态，处理无穷的事务。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 有限状态机的工作原理如图1所示，发生事件(event)后，根据当前状态(cur_state)，决定执行的动作(action)，并设置下一个状态号(nxt_state)。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |--------&gt;执行动作action\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp; 发生事件event -----&gt;| cur_state |\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |--------&gt;设置下一状态号nxt_state\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当前状态\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 图1 有限状态机工作原理\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e0/a0\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ---&gt;--\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; |\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------&gt;----------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e0/a0 |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; S0&nbsp;&nbsp; |-----\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; -&lt;------------&nbsp;&nbsp;&nbsp; | e1/a1\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; | e2/a2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----------&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; S2&nbsp;&nbsp; |-----&lt;-----|&nbsp;&nbsp; S1&nbsp;&nbsp; |\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----------&nbsp;&nbsp; e2/a2&nbsp;&nbsp; ----------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 图2 一个有限状态机实例\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当前状态&nbsp;&nbsp; s0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s2&nbsp;&nbsp;&nbsp;&nbsp; | 事件\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a0/s0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a0/s0&nbsp;&nbsp; |&nbsp; e0\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a1/s1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; e1\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a2/s2&nbsp;&nbsp;&nbsp;&nbsp; a2/s2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; e2\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 表1 图2状态机实例的二维表&#26684;表示(动作/下一状态)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 图2为一个状态机实例的状态转移图，它的含义是：\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在s0状态，如果发生e0事件，那么就执行a0动作，并保持状态不变；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果发生e1事件，那么就执行a1动作，并将状态转移到s1态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在s1状态，如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在s2状态，如果发生e0事件，那么就执行a0动作，并将状态转移到s0态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 有限状态机不仅能够用状态转移图表示，还可以用二维的表&#26684;代表。一般将当前状态号写在横行上，将事件写在纵列上，如表1所示。其中“--”表示空(不执行动作，也不进行状态转移)，“an/sn”表示执行动作an,同时将下一状态设置为sn。表1和图2表示的含义是完全相同的。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 观察表1可知，状态机可以用两种方法实现：竖着写(在状态中判断事件)和横着写(在事件中判断状态)。这两种实现在本质上是完全等效的，但在实际操作中，效果却截然不同。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e==================================\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e竖着写(在状态中判断事件)C代码片段\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003ecur_state = nxt_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003eswitch(cur_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //在当前状态中判断事件\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s0:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //在s0状态\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(e0_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{ //如果发生e0事件，那么就执行a0动作，并保持状态不变；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a0动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//nxt_state = s0; //因为状态号是自身，所以可以删除此句，以提高运行速度。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if(e1_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{//如果发生e1事件，那么就执行a1动作，并将状态转移到s1态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a1动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nxt_state = s1;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if(e2_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{ //如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a2动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nxt_state = s2;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s1:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //在s1状态\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e2_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{&nbsp;&nbsp;&nbsp; //如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a2动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nxt_state = s2;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //在s2状态\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e0_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{ //如果发生e0事件，那么就执行a0动作，并将状态转移到s0态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a0动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nxt_state = s0;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e==================================\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e横着写(在事件中判断状态)C代码片段\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e==================================\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e//e0事件发生时，执行的函数\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003evoid e0_event_function(int * nxt_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; int cur_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; cur_state = *nxt_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003eswitch(cur_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s0:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//观察表1，在e0事件发生时，s1处为空\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s2:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a0动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *nxt_state = s0;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e}\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e//e1事件发生时，执行的函数\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003evoid e1_event_function(int * nxt_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; int cur_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; cur_state = *nxt_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003eswitch(cur_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s0:&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//观察表1，在e1事件发生时，s1和s2处为空\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a1动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *nxt_state = s1;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e}\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e//e2事件发生时，执行的函数\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003evoid e2_event_function(int * nxt_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; int cur_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; cur_state = *nxt_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003eswitch(cur_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s0:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //观察表1，在e2事件发生时，s2处为空\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s1:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a2动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *nxt_state = s2;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e}\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 上面横竖两种写法的代码片段，实现的功能完全相同，但是，横着写的效果明显好于竖着写的效果。理由如下：\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 1、竖着写隐含了优先级排序(其实各个事件是同优先级的)，排在前面的事件判断将毫无疑问地优先于排在后面的事件判断。这种if/else if写法上的限制将破坏事件间原有的关系。而横着写不存在此问题。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 2、由于处在每个状态时的事件数目不一致，而且事件发生的时间是随机的，无法预先确定，导致竖着写沦落为顺序查询方式，结构上的缺陷使得大量时间被浪费。对于横着写，在某个时间点，状态是唯一确定的，在事件里查找状态只要使用switch语句，就能一步定位到相应的状态，延迟时间可以预先准确估算。而且在事件发生时，调用事件函数，在函数里查找唯一确定的状态，并根据其执行动作和状态转移的思路清晰简洁，效率高，富有美感。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 总之，我个人认为，在软件里写状态机，使用横着写的方法比较妥帖。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; color:rgb(51,51,51)\"\u003e\u003cspan style=\"font-family:Microsoft YaHei; font-size:14px\"\u003e下面给出一个计算输入密码的两种状态机的实现：\u003cbr\u003e\r\n1.使用switch/case的状态机实现\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; color:rgb(51,51,51)\"\u003e\u003cspan style=\"font-family:Microsoft YaHei; font-size:14px\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre class=\"cpp\" name=\"code\"\u003e//使用switch/case或者if/else实现的基于状态机(FSM)的密码锁\r\n//只有正确输入密码 2479 才能解锁 \r\n#include &lt;stdio.h&gt;  \r\n#include &lt;stdlib.h&gt;  \r\n#include &lt;string.h&gt;   \r\n\r\ntypedef enum{   \r\n\tSTATE0 = 0,   \r\n\tSTATE1,   \r\n\tSTATE2,  \r\n\tSTATE3,   \r\n\tSTATE4,  \r\n}STATE;\r\n  \r\n\r\nint main()   \r\n\r\n{   \r\n\tchar ch; \r\n\tSTATE current_state = STATE0;    \r\n\twhile(1){   \r\n\t\tprintf(&quot;In put password:&quot;);   \r\n\t\twhile((ch = getchar()) != &#39;\\n&#39;)\r\n\t\t{   \r\n\t\t\tif((ch &lt; &#39;0&#39;) || (ch &gt; &#39;9&#39;))\r\n\t\t\t{   \r\n\t\t\t\tprintf(&quot;Input num,ok?/n&quot;);   \r\n\t\t\t\tbreak;   \r\n\t\t\t}   \r\n\t\t\tswitch(current_state){   \r\n\t\t\tcase STATE0:   \r\n\t\t\t\tif(ch == &#39;2&#39;)   current_state = STATE1;   \r\n\t\t\t\tbreak;   \r\n\t\t\tcase STATE1:   \r\n\t\t\t\tif(ch == &#39;4&#39;)   current_state = STATE2;   \r\n\t\t\t\tbreak;   \r\n\t\t\tcase STATE2:   \r\n\t\t\t\tif(ch == &#39;7&#39;)   current_state = STATE3;   \r\n\t\t\t\tbreak;   \r\n\t\t\tcase STATE3:   \r\n\t\t\t\tif(ch == &#39;9&#39;)   current_state = STATE4;   \r\n\t\t\t\tbreak;   \r\n\t\t\tdefault:   \r\n\t\t\t\tcurrent_state = STATE0;   \r\n\t\t\t\tbreak;   \r\n\t\t\t}   \r\n\t\t}   //end inner while \r\n\r\n\t\tif(current_state == STATE4){   \r\n\t\t\tprintf(&quot;Correct, lock is open!\\n&quot;);   \r\n\t\t\tcurrent_state =   STATE0;\r\n\t\t\t\r\n\t\t}else\r\n\t\t{\r\n\t\t\tprintf(&quot;Wrong, locked!\\n&quot;);   \r\n\t\t\tcurrent_state =   STATE0;\r\n\t\t\t\r\n\t\t}\r\n\t\tbreak;\r\n\t}   \r\n\treturn 0;   \r\n} \r\n\u003c/pre\u003e2.使用竖排方式写的状态机\r\n\u003cp\u003e\u003cpre class=\"cpp\" name=\"code\"\u003e&lt;p&gt;//使用函数指针实现的基于状态机(FSM)的密码锁\r\n//只有正确输入密码 2479 才能解锁 \r\n#include &lt;stdio.h&gt;&#160; \r\n//这个秘密锁的密码是xxxx2479,就是说最后4位是2479,前面若干为为0~9里的数字,也可没有 \r\n#include &lt;stdlib.h&gt;&#160; \r\n#include &lt;string.h&gt;&#160;&#160; &lt;/p&gt;&lt;p&gt;//定义锁事件处理函数的函数指针类型\r\ntypedef void (*lock_func)(char c);&lt;/p&gt;&lt;p&gt;typedef enum{&#160;&#160; \r\n&#160;\r\n&#160;STATE1 = 0, \r\n&#160;STATE2,&#160;&#160; \r\n&#160;STATE3, \r\n&#160;STATE4, \r\n&#160;STATE5,//password pass&#160; \r\n&#160;//...ADD here&#160;&#160; \r\n&#160;}STATE;&#160; \r\nSTATE state;\r\n//状态1 \r\nvoid fp_Press2(char ch)\r\n{\r\n&#160;if (state==STATE1)\r\n&#160;{\r\n&#160;&#160;//do sth here \r\n&#160;&#160;state=STATE2;\r\n&#160;&#160;printf(&quot;Correct, current state is STATE2!&quot;); \r\n&#160;} \r\n&#160;else \r\n&#160;{\r\n&#160;&#160;printf(&quot;Wrong, current state is not STATTE2!&quot;); \r\n&#160;}\r\n}&lt;/p&gt;&lt;p&gt;//状态2 \r\nvoid fp_Press4(char ch)\r\n{\r\n&#160;if (state==STATE2)\r\n&#160;{\r\n&#160;&#160;printf(&quot;Correct, current state is STATE3!&quot;); \r\n&#160;&#160;state=STATE3;&#160;&#160;\r\n&#160;} \r\n&#160;else \r\n&#160;{\r\n&#160;}&#160;\r\n}&lt;/p&gt;&lt;p&gt;//状态3 \r\nvoid fp_Press7(char ch)\r\n{\r\n&#160;if (state==STATE3)\r\n&#160;{\r\n&#160;&#160;printf(&quot;Correct, current state is STATE4!&quot;); \r\n&#160;&#160;state=STATE4;&#160;&#160;\r\n&#160;} \r\n&#160;else \r\n&#160;{\r\n&#160;}\r\n}&lt;/p&gt;&lt;p&gt;//状态4 \r\nvoid&#160; fp_Press9(char ch)\r\n{\r\n&#160;if (state==STATE4)\r\n&#160;{\r\n&#160;&#160;printf(&quot;Correct, lock is open!&quot;); \r\n&#160;&#160;state=STATE5;&#160;&#160;\r\n&#160;} \r\n&#160;else \r\n&#160;{\r\n&#160;}\r\n}&lt;/p&gt;&lt;p&gt;\r\nlock_func g_MatrixArr[5][1] = \r\n{\r\n&#160;&#160;&#160; /*输入2*/\r\n&#160;&#160;&#160; {fp_Press2},&lt;/p&gt;&lt;p&gt;&#160;&#160;&#160; /*输入4*/\r\n&#160;&#160;&#160; {fp_Press4},&lt;/p&gt;&lt;p&gt;&#160;&#160;&#160; /*输入7*/\r\n&#160;&#160;&#160; {fp_Press7},\r\n&#160;&#160;&#160; \r\n&#160;&#160;&#160; /*输入9*/\r\n&#160;{fp_Press9},&lt;/p&gt;&lt;p&gt;&#160;/*输入其他*/\r\n&#160;{fp_Press2}\r\n};\r\n//结束状态是NULL\r\n//就是通过 return NULL;表达的结束状态. \r\n&#160;\r\n//状态转换在这里 \r\nvoid lock_handle (void)\r\n{\r\n&#160;char ch;\r\n&#160;while(state!=STATE5)\r\n&#160;{\r\n&#160;&#160;ch = getchar();\r\n&#160;&#160;switch(ch)\r\n&#160;&#160;{\r\n&#160;&#160;&#160;case &#39;2&#39;:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[0][0](ch);\r\n&#160;&#160;&#160;&#160;break;\r\n&#160;&#160;&#160;case &#39;4&#39;:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[1][0](ch);\r\n&#160;&#160;&#160;&#160;break;\r\n&#160;&#160;&#160;case &#39;7&#39;:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[2][0](ch);\r\n&#160;&#160;&#160;&#160;break;\r\n&#160;&#160;&#160;case &#39;9&#39;:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[3][0](ch);\r\n&#160;&#160;&#160;&#160;break;\r\n&#160;&#160;&#160;default:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[4][0](ch);\r\n&#160;&#160;&#160;&#160;break;&#160;&#160;\r\n&#160;&#160;}\r\n&#160;}\r\n} &lt;/p&gt;&lt;p&gt;&#160;\r\nint main()&#160;&#160; \r\n{&#160;&#160;&#160;&#160; &#160;\r\n&#160;lock_handle();\r\n} \r\n&lt;/p&gt;\r\n\u003c/pre\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; color:rgb(51,51,51)\"\u003e\u003cspan style=\"font-family:Microsoft YaHei; font-size:14px\"\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003c/span\u003e\u003c/p\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-6] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":75769704,"title":"【OpenStack源码分析之七】openstack中的RPC请求分析","create_at":"\/Date(1500714228000)\/","create":"2017-07-22 05:03:48","view_count":169,"comment_count":0,"comment_allowed":"true","type":"repost","channel":2,"digg":0,"bury":0,"description":"转自：http://blog.csdn.net/hhp_hhp/article/details/51497560概述在OpenStack各个项目中，我们通常会用到如下几种RPC请求：RPC.call：发送请求到消息队列，等待返回最终结果。 \nRPC.cast：发送请求到消息队列，不需要等待最终返回的结果。 \nRPC.Notifier：发送各类操作消息到队列，不需要等待最终的返回结果。 \nRPC.ca","url":"http://blog.csdn.net/BLACKMOON88/article/details/75769704","categories":"云计算,OpenStack","tags":"openstack,源码","content":"\u003cp\u003e转自：\u003ca href=\"http://blog.csdn.net/hhp_hhp/article/details/51497560\"\u003ehttp://blog.csdn.net/hhp_hhp/article/details/51497560\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3 id=\"概述\"\u003e概述\u003c/h3\u003e\n\n\u003cp\u003e在OpenStack各个项目中，我们通常会用到如下几种RPC请求：\u003c/p\u003e\n\n\u003cp\u003eRPC.call：发送请求到消息队列，等待返回最终结果。 \u003cbr\u003e\nRPC.cast：发送请求到消息队列，不需要等待最终返回的结果。 \u003cbr\u003e\nRPC.Notifier：发送各类操作消息到队列，不需要等待最终的返回结果。 \u003cbr\u003e\nRPC.call、RPC.cast一般用于同一个项目下的服务之间进行的“内部“请求；RPC.Notifier发送的操作消息，目前被ceilometer notification服务所接收。\u003c/p\u003e\n\n\u003ch3 id=\"rpccall-rpccast\"\u003eRPC.call &amp; RPC.cast\u003c/h3\u003e\n\n\u003cp\u003e一般情况下，openstack各个项目之间通过RestAPI接口进行相互访问，而项目内部服务之间则通过RPC请求的方式进行通信。\u003c/p\u003e\n\n\u003cp\u003eRPC.call 请求\u003c/p\u003e\n\n\u003cp\u003e对于RPC.call请求，借助官方一张经典的图来描述：  \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160525105930045\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e以nova-compute服务调用nova-network服务分配网络为例：  \u003cbr\u003e\n1. nova-compute服务向消息队列服务的compute.node队列发送RPC请求，并等待请求的最终回复。  \u003cbr\u003e\n2. nova-network服务通过nova exchange（topic exchange）从compute.node队列中获取消息并作出相应的处理。  \u003cbr\u003e\n3. nova-network服务消息处理完了之后，向reply_XXX队列发送一条回复消息  \u003cbr\u003e\n4. nova-compute服务通过reply_XXX exchange（direct exchange）接受从nova-network发送的RPC消息。\u003c/p\u003e\n\n\u003ch3 id=\"rpccast请求\"\u003eRPC.cast请求\u003c/h3\u003e\n\n\u003cp\u003e对于RPC.cast请求，同样借助官方一张经典的图来描述：  \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160525112836506\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e以nova-conductor服务调用nova-compute服务build_and_run_instance为例：  \u003cbr\u003e\n1. nova-conductor服务向消息队列服务的compute队列发送RPC请求，请求结束，不需要等待请求的最终回复。  \u003cbr\u003e\n2. nova-compute服务通过nova exchange（topic exchange）从compute队列中获取消息并作出相应的处理。\u003c/p\u003e\n\n\u003cp\u003e在openstack项目中，一般情况下，RPC server端发送一个请求到消息队列，一般只有一个消费者（及时有多个消费者）接受并处理这条消息，还有一种类型的RPC.cast请求，也称为fanout_cast请求，fanout_cast发送的是广播请求，所有对应的consumer都能接收到。\u003c/p\u003e\n\n\u003ch3 id=\"rpcnotifier\"\u003eRPC.Notifier\u003c/h3\u003e\n\n\u003cp\u003eopenstack中对于资源的操作，如创建虚拟机，会向向消息队列的notifications.info，notifications.warn，notifications.error等队列发送对应的RPC消息，而ceilometer的notification服务会充当RPC 消费者端，获取对应的操作消息进行处理。  \u003cbr\u003e\nRPC.Notifier提供的notifier消息有如下几种：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eaudit：审计类消息，如compute.instance.exist\u003c/li\u003e\n\u003cli\u003einfo：正常操作消息，如compute.instance.create.end\u003c/li\u003e\n\u003cli\u003ewarn：告警类操作消息，暂无\u003c/li\u003e\n\u003cli\u003eerror：错误类操作消息，如scheduler.run_instance\u003c/li\u003e\n\u003cli\u003ecritical：严重错误，暂无\u003c/li\u003e\n\u003cli\u003esample：sample消息，ceilometer中使用\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e实际上openstack RPC notifier消息就是topic类型的消息，以虚拟机开始创建为例：  \u003cbr\u003e\n1. nova-compute服务向消息队列服务的notifications.info队列发送RPC消息。  \u003cbr\u003e\n2. ceilometer-agent-notification服务通过nova exchange（topic exchange）从notifications.info队列中获取消息并作出相应的处理。\u003c/p\u003e","markdowncontent":"转自：http://blog.csdn.net/hhp_hhp/article/details/51497560\n\n###概述\n在OpenStack各个项目中，我们通常会用到如下几种RPC请求：\n\nRPC.call：发送请求到消息队列，等待返回最终结果。\nRPC.cast：发送请求到消息队列，不需要等待最终返回的结果。\nRPC.Notifier：发送各类操作消息到队列，不需要等待最终的返回结果。\nRPC.call、RPC.cast一般用于同一个项目下的服务之间进行的“内部“请求；RPC.Notifier发送的操作消息，目前被ceilometer notification服务所接收。\n\n###RPC.call & RPC.cast\n\n一般情况下，openstack各个项目之间通过RestAPI接口进行相互访问，而项目内部服务之间则通过RPC请求的方式进行通信。\n\nRPC.call 请求\n\n对于RPC.call请求，借助官方一张经典的图来描述： \n![这里写图片描述](http://img.blog.csdn.net/20160525105930045)\n\n以nova-compute服务调用nova-network服务分配网络为例： \n1. nova-compute服务向消息队列服务的compute.node队列发送RPC请求，并等待请求的最终回复。 \n2. nova-network服务通过nova exchange（topic exchange）从compute.node队列中获取消息并作出相应的处理。 \n3. nova-network服务消息处理完了之后，向reply_XXX队列发送一条回复消息 \n4. nova-compute服务通过reply_XXX exchange（direct exchange）接受从nova-network发送的RPC消息。\n\n###RPC.cast请求\n\n对于RPC.cast请求，同样借助官方一张经典的图来描述： \n![这里写图片描述](http://img.blog.csdn.net/20160525112836506)\n\n以nova-conductor服务调用nova-compute服务build_and_run_instance为例： \n1. nova-conductor服务向消息队列服务的compute队列发送RPC请求，请求结束，不需要等待请求的最终回复。 \n2. nova-compute服务通过nova exchange（topic exchange）从compute队列中获取消息并作出相应的处理。\n\n在openstack项目中，一般情况下，RPC server端发送一个请求到消息队列，一般只有一个消费者（及时有多个消费者）接受并处理这条消息，还有一种类型的RPC.cast请求，也称为fanout_cast请求，fanout_cast发送的是广播请求，所有对应的consumer都能接收到。\n\n###RPC.Notifier\n\nopenstack中对于资源的操作，如创建虚拟机，会向向消息队列的notifications.info，notifications.warn，notifications.error等队列发送对应的RPC消息，而ceilometer的notification服务会充当RPC 消费者端，获取对应的操作消息进行处理。 \nRPC.Notifier提供的notifier消息有如下几种：\n\n- audit：审计类消息，如compute.instance.exist\n- info：正常操作消息，如compute.instance.create.end\n- warn：告警类操作消息，暂无\n- error：错误类操作消息，如scheduler.run_instance\n- critical：严重错误，暂无\n- sample：sample消息，ceilometer中使用\n\n实际上openstack RPC notifier消息就是topic类型的消息，以虚拟机开始创建为例： \n1. nova-compute服务向消息队列服务的notifications.info队列发送RPC消息。 \n2. ceilometer-agent-notification服务通过nova exchange（topic exchange）从notifications.info队列中获取消息并作出相应的处理。","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-14] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之九】看 nova-scheduler 如何选择计算节点》成功 [pool-2-thread-24] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-13-开心的小明——动态规划.markdown [pool-2-thread-16] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-22-【OpenStack源码分析之七】openstack中的RPC请求分析.markdown [pool-2-thread-14] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-08\2014-08-26-关于有限状态机.markdown [pool-2-thread-6] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75451673 [pool-2-thread-17] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之七】openstack中的RPC请求分析》成功 [pool-2-thread-14] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《关于有限状态机》成功 [pool-2-thread-6] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75948544 [pool-2-thread-20] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":75948544,"title":"【OpenStack源码分析之十】虚机启动流程中Nova Compute与周边组件的交互","create_at":"\/Date(1500816579000)\/","create":"2017-07-23 09:29:39","view_count":120,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前文也讲述过 【OpenStack源码分析之三】Nova-Compute启动流程分析Nova Compute组件在整个Nova里面是一个核心角色，控制节点上的Nova-api，Nova-Conductor, Nova-Scheduler在虚机启动流程中主要只做了一个事情，就是选出了启动虚机的Host，剩下的网络资源的搭建，Image的下载，卷的申请等工作都是通过Nova-compute来做，所以说它","url":"http://blog.csdn.net/BLACKMOON88/article/details/75948544","categories":"云计算,OpenStack","tags":"openstack,nova,网络","content":"\u003cp\u003e前文也讲述过 \u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75267742\" target=\"_blank\"\u003e【OpenStack源码分析之三】Nova-Compute启动流程分析\u003c/a\u003eNova Compute组件在整个Nova里面是一个核心角色，控制节点上的Nova-api，Nova-Conductor, Nova-Scheduler在虚机启动流程中主要只做了一个事情，就是选出了启动虚机的Host，剩下的网络资源的搭建，Image的下载，卷的申请等工作都是通过Nova-compute来做，所以说它真正管理着虚机的生命周期。而关于虚拟机启动的整个流程也已经在\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75701576\" target=\"_blank\"\u003e【OpenStack源码分析之六】从虚拟机启动流程看安全认证\u003c/a\u003e 的图中详细介绍，建议读者看这篇文章时同时对照那张图来看\u003c/p\u003e\n\n\n\n\u003ch3 id=\"libvirt背景介绍\"\u003eLibvirt背景介绍\u003c/h3\u003e\n\n\n\n\u003ch4 id=\"什么是libvirt\"\u003e什么是libvirt\u003c/h4\u003e\n\n\u003cp\u003e虚拟云实现的三部曲：虚拟化技术实现–&gt;虚拟机管理–&gt;集群资源管理(云管理)。各种不同的虚拟化技术都提供了基本的管理工具。比如，启动，停用，配置，连接控制台等。这样在构建云管理的时候就造成了多厂家适配问题，通常为了做多厂家适配，都是增加一个中间层，使Hypervisor和云管理相互透明。libvirt就是扮演的这个角色。libvirt提供各种API，供上层来管理不同的虚拟机。\u003c/p\u003e\n\n\u003cp\u003eLibvirt是管理虚拟机和其他虚拟化功能，比如存储管理，网络管理的软件集合。它包括一个API库，一个守护程序（libvirtd）和一个命令行工具（virsh）；libvirt本身构建于一种抽象的概念之上。它为受支持的虚拟机监控程序实现的常用功能提供通用的API。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"libvirt主要支持的功能\"\u003eLibvirt主要支持的功能\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e虚拟机管理：包括不同的领域生命周期操作，比如：启动、停止、暂停、保存、恢复和迁移。支持多种设备类型的热插拔操作，包括：磁盘、网卡、内存和CPU。\u003c/li\u003e\n\u003cli\u003e远程机器支持：只要机器上运行了libvirt daemon，包括远程机器，所有的libvirt功能就都可以访问和使用。支持多种网络远程传输，使用最简单的SSH，不需要额外配置工作。\u003c/li\u003e\n\u003cli\u003e存储管理：任何运行了libvirt daemon的主机都可以用来管理不同类型的存储：创建不同格式的文件镜像（qcow2、vmdk、raw等）、挂接NFS共享、列出现有的LVM卷组、创建新的LVM卷组和逻辑卷、对未处理过的磁盘设备分区、挂接iSCSI共享，等等等等。因为libvirt可以远程工作，所有这些都可以通过远程主机使用。\u003c/li\u003e\n\u003cli\u003e网络接口管理：任何运行了libvirt daemon的主机都可以用来管理物理和逻辑的网络接口。\u003c/li\u003e\n\u003cli\u003e虚拟NAT和基于路由的网络：任何运行了libvirt daemon的主机都可以用来管理和创建虚拟网络。\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch4 id=\"libvirt支持的虚拟机\"\u003eLibvirt支持的虚拟机\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20130731232408656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FveGluZ25lbmdqaXN1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"libvirt-api\"\u003eLibvirt API\u003c/h4\u003e\n\n\u003cp\u003elibvirt API 大致可划分为如下8个大的部分：\u003c/p\u003e\n\n\u003cp\u003e（1）连接 Hypervisor 相关的API：以virConnect 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003e只有与 Hypervisor 建立了连接之后，才能进行虚拟机管理操作，所以连接 Hypervisor 的API是其他所有API使用的前提条件。与 Hypervisor 建立的连接是为其他API的执行提供了路径，是其他虚拟化管理功能的基础。通过调用 virConnectOpen 函数可以建立一个连接，其返回值是一个virConnectPtr 对象，该对象就代表到 Hypervisor 的一个连接；如果连接出错，则返回空值（NULL）。而 virConnectOpenReadOnly 函数会建立一个只读的连接，在该连接上可以使用一些查询的功能，而不使用创建、修改等功能。 virConnectOpenAuth 函数提供了更具认证建立的连接。 virConnectGetCapabilities 函数是返回对 Hypervisor 和驱动的功能的描述的 XML 格式的字符串。virConnectListDomains函数返回一列域标识符，它们代表该 Hypervisor 上的活动域。\u003c/p\u003e\n\n\u003cp\u003e（2）域管理的 API：以virDomain 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003e虚拟机的管理，最基本的职能就是对各个节点上的域的管理，故 libvirt API 中实现了很多针对域管理的函数。要管理域，首先就要获取virDomainPtr 这个域对象，然后才能对域进行操作。有很多种方式来获取域对象，如 virDomainPtr virDomainLookupByID (virConnectPtr conn, int id) 函数是根据域的 id 值到 conn 这个连接上去查找相应的域。类似地，virDomainLookupByName、virDomainLookupByUUID 等函数分别是根据域的名称和 UUID 去查找相应的域。在得到了某个域的对象后，就可以进行很多的操作，可以是查询域的信息（如：virDomainGetHostname、virDomainGetInfo、virDomainGetVcpus、virDomainGetVcpusFlags、virDomainGetCPUStats，等等），也可以是控制域的生命周期（如：virDomainCreate 、virDomainSuspend 、virDomainResume 、virDomainDestroy 、virDomainMigrate，等等）。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20130731235248250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FveGluZ25lbmdqaXN1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n（3）节点管理的 API：以virNode 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003e域是运行在物理节点之上，libvirt也提供了对节点的信息查询和控制的功能。节点管理的多数函数都需要使用一个连接 Hypervisor 的对象作为其中的一个传入参数，以便可以查询或修改到该连接上的节点的信息。virNodeGetInfo函数是获取节点的物理硬件信息，virNodeGetCPUStats 函数可以获取节点上各个 CPU 的使用统计信息，virNodeGetMemoryStats 函数可以获取节点上的内存的使用统计信息，virNodeGetFreeMemory 函数可以获取节点上可用的空闲内存大小。也有一些设置或者控制节点的函数，如virNodeSetMemoryParameters 函数可以设置节点上的内存调度的参数，virNodeSuspendForDuration 函数可以让节点（宿主机）暂停运行一段时间。\u003c/p\u003e\n\n\u003cp\u003e（4）网络管理的 API：以 virNetwork 开头的一系列函数和部分以 virInterface 开头的函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 对虚拟化环境中的网络管理也提供了丰富的API。libvirt 首先需要创建virNetworkPtr 对象，然后才能查询或控制虚拟网络。一些查询网络相关信息的函数，如：virNetworkGetName 函数可以获取网络的名称，virNetworkGetBridgeName 函数可以获取该网络中网桥的名称，virNetworkGetUUID 函数可以获取网络的 UUID 标识，virNetworkGetXMLDesc 函数可以获取网络的以 XML 格式的描述信息，virNetworkIsActive 函数可以查询网络是否正在使用中。一些控制或更改网络设置的函数，有：virNetworkCreateXML 函数可以根据提供的 XML 格式的字符串创建一个网络（返回 virNetworkPtr 对象），virNetworkDestroy 函数可以销毁一个网络（同时也会关闭使用该网络的域），virNetworkFree 函数可以回收一个网络（但不会关闭正在运行的域），virNetworkUpdate 函数可根据提供的 XML 格式的网络配置来更新一个已存在的网络。另外，virInterfaceCreate、virInterfaceFree、virInterfaceDestroy、virInterfaceGetName、virInterfaceIsActive 等函数可以用于创建、释放和销毁网络接口，以及查询网络接口的名称和激活状态。\u003c/p\u003e\n\n\u003cp\u003e（5）存储卷管理的 API：以 virStorageVol 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 对存储卷（volume）的管理，主要是对域的镜像文件的管理，这些镜像文件可能是 raw、qcow2、vmdk、qed等各种格式。libvirt 对存储卷的管理，首先需要创建virStorageVolPtr 这个存储卷的对象，然后才能对其进行查询或控制操作。libvirt 提供了3个函数来分别通过不同的方式来获取存储卷对象，如：virStorageVolLookupByKey 函数可以根据全局唯一的键值来获得一个存储卷对象，virStorageVolLookupByName 函数可以根据名称在一个存储资源池（storage pool）中获取一个存储卷对象，virStorageVolLookupByPath 函数可以根据它在节点上路径来获取一个存储卷对象。有一些函数用于查询存储卷的信息，如：virStorageVolGetInfo 函数可以查询某个存储卷的使用情况，virStorageVolGetName 函数可以获取存储卷的名称，virStorageVolGetPath 函数可以获取存储卷的路径，virStorageVolGetConnect 函数可以查询存储卷的连接。一些函数用于创建和修改存储卷，如：virStorageVolCreateXML 函数可以根据提供的 XML 描述来创建一个存储卷，virStorageVolFree 函数可以释放存储卷的句柄（但是存储卷依然存在），virStorageVolDelete 函数可以删除一个存储卷，virStorageVolResize 函数可以调整存储卷的大小。\u003c/p\u003e\n\n\u003cp\u003e（6）存储池管理的 API：以virStoragePool 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 对存储池（pool）的管理，包括对本地的基本文件系统、普通网络共享文件系统、iSCSI共享文件系统、LVM分区等的管理。libvirt 需要基于 virStoragePoolPtr 这个存储池对象才能进行查询和控制操作。一些函数可以通过查询获取一个存储池对象，如：virStoragePoolLookupByName 函数可以根据存储池的名称来获取一个存储池对象，virStoragePoolLookupByVolume 可以根据一个存储卷返回其对应的存储池对象。virStoragePoolCreateXML 函数可以根据 XML 描述来创建一个存储池（默认已激活），virStoragePoolDefineXML 函数可以根据 XML 描述信息静态地定义个存储池（尚未激活），virStoragePoolCreate 函数可以激活一个存储池。virStoragePoolGetInfo、virStoragePoolGetName、virStoragePoolGetUUID等函数可以分别获取存储池的信息、名称和 UUID 标识。virStoragePoolIsActive函数可以查询存储池是否处于使用中状态。virStoragePoolFree 函数可以释放存储池相关的内存（但是不改变其在宿主机中的状态），virStoragePoolDestroy 函数可以用于销毁一个存储池（但并没有释放virStoragePoolPtr 对象，之后还可以用virStoragePoolCreate 函数重新激活它），virStoragePoolDelete 函数可以物理删除一个存储池资源（该操作不可恢复）。\u003c/p\u003e\n\n\u003cp\u003e（7）事件管理的API：以virEvent 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 支持事件机制，使用该机制注册之后，可以在发生特定的事件（如：域的启动、暂停、恢复、停止等）之时，得到自己定义的一些通知。\u003c/p\u003e\n\n\u003cp\u003e（8）数据流管理的API：以virStream 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 还提供了一系列函数用于数据流的传输。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"nova-compute与周边的交互\"\u003eNova Compute与周边的交互\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNeutron\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nNova Compute首先会与Neutron交互：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e调用Neutron API配置Network，虚拟机处于Networking的状态\u003c/li\u003e\n\u003cli\u003eNeutron 生成 MAC Address\u003c/li\u003e\n\u003cli\u003e获取Neutron DHCP Server的配置\u003c/li\u003e\n\u003cli\u003e获取Neutron Network的信息\u003c/li\u003e\n\u003cli\u003e获取Neutron Security Group的信息\u003c/li\u003e\n\u003cli\u003eNeutron 创建Port对象，是一个Tap device，当然真正的设备还没有创建\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eCinder\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nNova Compute在与Neutron交互的过程中，也会与Cinder交互，申请块存储资源:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCinder API请求创建一个Volume\u003c/li\u003e\n\u003cli\u003eCinder Scheduler在多个Cinder Volume里面选择一个，也是先Filter再weighting的过程，可以根据总空间的大小，也可以根据分配的情况\u003c/li\u003e\n\u003cli\u003eCinder Volume创建一个iscsi target\u003c/li\u003e\n\u003cli\u003eCinder Volume创建一个LVM volume，加入iscsi target\u003c/li\u003e\n\u003cli\u003ecompute节点连接iscsi target，从而volume出现在compute节点上\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eLibvert Driver\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n在与上述两个组件交互完毕之后，已经获取了网络资源和块存储，Nova Compute就会调用Libvirt Driver创建虚拟机。\u003c/p\u003e\n\n\u003cp\u003eLibvert Driver首先会和Glance交互申请镜像下载：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e从Glance下载Image，作为base\u003c/li\u003e\n\u003cli\u003e基于base image，创建qcow2的image\u003c/li\u003e\n\u003cli\u003eresize image的大小，和filesystem的大小无关\u003c/li\u003e\n\u003cli\u003e配置configuration drive\u003c/li\u003e\n\u003cli\u003e配置文件注入\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e就这样，所有的信息都已经齐全，生成了虚拟机的libvert配置xml文件，可以调用Libvert来创建虚拟机。\u003c/p\u003e\n\n\u003cp\u003e在创建虚拟机的过程中，有非常重要的两步，Libvert会把虚机Plug到bridge上生成一个Tap口，同时也会挂载从Cinder申请的块存储。此后虚拟机会通过网络DHCP服务，Metadata服务等获取配置。\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://smilejay.com/2013/03/libvirt-api-introduction/\"\u003ehttp://smilejay.com/2013/03/libvirt-api-introduction/\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/gaoxingnengjisuan/article/details/9674315\"\u003ehttp://blog.csdn.net/gaoxingnengjisuan/article/details/9674315\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://smilejay.com/2013/03/libvirt-configuration-and-usage/\"\u003e(KVM连载) 6.1.3 libvirt、libvirtd的配置和使用\u003c/a\u003e\u003c/p\u003e","markdowncontent":"前文也讲述过 [【OpenStack源码分析之三】Nova-Compute启动流程分析](http://blog.csdn.net/ohenry88/article/details/75267742)Nova Compute组件在整个Nova里面是一个核心角色，控制节点上的Nova-api，Nova-Conductor, Nova-Scheduler在虚机启动流程中主要只做了一个事情，就是选出了启动虚机的Host，剩下的网络资源的搭建，Image的下载，卷的申请等工作都是通过Nova-compute来做，所以说它真正管理着虚机的生命周期。而关于虚拟机启动的整个流程也已经在[【OpenStack源码分析之六】从虚拟机启动流程看安全认证](http://blog.csdn.net/ohenry88/article/details/75701576) 的图中详细介绍，建议读者看这篇文章时同时对照那张图来看\n###Libvirt背景介绍\n####什么是libvirt\n虚拟云实现的三部曲：虚拟化技术实现--\u003e虚拟机管理--\u003e集群资源管理(云管理)。各种不同的虚拟化技术都提供了基本的管理工具。比如，启动，停用，配置，连接控制台等。这样在构建云管理的时候就造成了多厂家适配问题，通常为了做多厂家适配，都是增加一个中间层，使Hypervisor和云管理相互透明。libvirt就是扮演的这个角色。libvirt提供各种API，供上层来管理不同的虚拟机。\n\nLibvirt是管理虚拟机和其他虚拟化功能，比如存储管理，网络管理的软件集合。它包括一个API库，一个守护程序（libvirtd）和一个命令行工具（virsh）；libvirt本身构建于一种抽象的概念之上。它为受支持的虚拟机监控程序实现的常用功能提供通用的API。\n\n####Libvirt主要支持的功能\n\n- 虚拟机管理：包括不同的领域生命周期操作，比如：启动、停止、暂停、保存、恢复和迁移。支持多种设备类型的热插拔操作，包括：磁盘、网卡、内存和CPU。\n- 远程机器支持：只要机器上运行了libvirt daemon，包括远程机器，所有的libvirt功能就都可以访问和使用。支持多种网络远程传输，使用最简单的SSH，不需要额外配置工作。\n- 存储管理：任何运行了libvirt daemon的主机都可以用来管理不同类型的存储：创建不同格式的文件镜像（qcow2、vmdk、raw等）、挂接NFS共享、列出现有的LVM卷组、创建新的LVM卷组和逻辑卷、对未处理过的磁盘设备分区、挂接iSCSI共享，等等等等。因为libvirt可以远程工作，所有这些都可以通过远程主机使用。\n- 网络接口管理：任何运行了libvirt daemon的主机都可以用来管理物理和逻辑的网络接口。\n- 虚拟NAT和基于路由的网络：任何运行了libvirt daemon的主机都可以用来管理和创建虚拟网络。\n\n####Libvirt支持的虚拟机\n![这里写图片描述](http://img.blog.csdn.net/20130731232408656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FveGluZ25lbmdqaXN1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n####Libvirt API\nlibvirt API 大致可划分为如下8个大的部分：\n\n（1）连接 Hypervisor 相关的API：以virConnect 开头的一系列函数。\n\n只有与 Hypervisor 建立了连接之后，才能进行虚拟机管理操作，所以连接 Hypervisor 的API是其他所有API使用的前提条件。与 Hypervisor 建立的连接是为其他API的执行提供了路径，是其他虚拟化管理功能的基础。通过调用 virConnectOpen 函数可以建立一个连接，其返回值是一个virConnectPtr 对象，该对象就代表到 Hypervisor 的一个连接；如果连接出错，则返回空值（NULL）。而 virConnectOpenReadOnly 函数会建立一个只读的连接，在该连接上可以使用一些查询的功能，而不使用创建、修改等功能。 virConnectOpenAuth 函数提供了更具认证建立的连接。 virConnectGetCapabilities 函数是返回对 Hypervisor 和驱动的功能的描述的 XML 格式的字符串。virConnectListDomains函数返回一列域标识符，它们代表该 Hypervisor 上的活动域。\n\n（2）域管理的 API：以virDomain 开头的一系列函数。\n\n虚拟机的管理，最基本的职能就是对各个节点上的域的管理，故 libvirt API 中实现了很多针对域管理的函数。要管理域，首先就要获取virDomainPtr 这个域对象，然后才能对域进行操作。有很多种方式来获取域对象，如 virDomainPtr virDomainLookupByID (virConnectPtr conn, int id) 函数是根据域的 id 值到 conn 这个连接上去查找相应的域。类似地，virDomainLookupByName、virDomainLookupByUUID 等函数分别是根据域的名称和 UUID 去查找相应的域。在得到了某个域的对象后，就可以进行很多的操作，可以是查询域的信息（如：virDomainGetHostname、virDomainGetInfo、virDomainGetVcpus、virDomainGetVcpusFlags、virDomainGetCPUStats，等等），也可以是控制域的生命周期（如：virDomainCreate 、virDomainSuspend 、virDomainResume 、virDomainDestroy 、virDomainMigrate，等等）。\n\n![这里写图片描述](http://img.blog.csdn.net/20130731235248250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FveGluZ25lbmdqaXN1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n（3）节点管理的 API：以virNode 开头的一系列函数。\n\n域是运行在物理节点之上，libvirt也提供了对节点的信息查询和控制的功能。节点管理的多数函数都需要使用一个连接 Hypervisor 的对象作为其中的一个传入参数，以便可以查询或修改到该连接上的节点的信息。virNodeGetInfo函数是获取节点的物理硬件信息，virNodeGetCPUStats 函数可以获取节点上各个 CPU 的使用统计信息，virNodeGetMemoryStats 函数可以获取节点上的内存的使用统计信息，virNodeGetFreeMemory 函数可以获取节点上可用的空闲内存大小。也有一些设置或者控制节点的函数，如virNodeSetMemoryParameters 函数可以设置节点上的内存调度的参数，virNodeSuspendForDuration 函数可以让节点（宿主机）暂停运行一段时间。\n\n（4）网络管理的 API：以 virNetwork 开头的一系列函数和部分以 virInterface 开头的函数。\n\nlibvirt 对虚拟化环境中的网络管理也提供了丰富的API。libvirt 首先需要创建virNetworkPtr 对象，然后才能查询或控制虚拟网络。一些查询网络相关信息的函数，如：virNetworkGetName 函数可以获取网络的名称，virNetworkGetBridgeName 函数可以获取该网络中网桥的名称，virNetworkGetUUID 函数可以获取网络的 UUID 标识，virNetworkGetXMLDesc 函数可以获取网络的以 XML 格式的描述信息，virNetworkIsActive 函数可以查询网络是否正在使用中。一些控制或更改网络设置的函数，有：virNetworkCreateXML 函数可以根据提供的 XML 格式的字符串创建一个网络（返回 virNetworkPtr 对象），virNetworkDestroy 函数可以销毁一个网络（同时也会关闭使用该网络的域），virNetworkFree 函数可以回收一个网络（但不会关闭正在运行的域），virNetworkUpdate 函数可根据提供的 XML 格式的网络配置来更新一个已存在的网络。另外，virInterfaceCreate、virInterfaceFree、virInterfaceDestroy、virInterfaceGetName、virInterfaceIsActive 等函数可以用于创建、释放和销毁网络接口，以及查询网络接口的名称和激活状态。\n\n（5）存储卷管理的 API：以 virStorageVol 开头的一系列函数。\n\nlibvirt 对存储卷（volume）的管理，主要是对域的镜像文件的管理，这些镜像文件可能是 raw、qcow2、vmdk、qed等各种格式。libvirt 对存储卷的管理，首先需要创建virStorageVolPtr 这个存储卷的对象，然后才能对其进行查询或控制操作。libvirt 提供了3个函数来分别通过不同的方式来获取存储卷对象，如：virStorageVolLookupByKey 函数可以根据全局唯一的键值来获得一个存储卷对象，virStorageVolLookupByName 函数可以根据名称在一个存储资源池（storage pool）中获取一个存储卷对象，virStorageVolLookupByPath 函数可以根据它在节点上路径来获取一个存储卷对象。有一些函数用于查询存储卷的信息，如：virStorageVolGetInfo 函数可以查询某个存储卷的使用情况，virStorageVolGetName 函数可以获取存储卷的名称，virStorageVolGetPath 函数可以获取存储卷的路径，virStorageVolGetConnect 函数可以查询存储卷的连接。一些函数用于创建和修改存储卷，如：virStorageVolCreateXML 函数可以根据提供的 XML 描述来创建一个存储卷，virStorageVolFree 函数可以释放存储卷的句柄（但是存储卷依然存在），virStorageVolDelete 函数可以删除一个存储卷，virStorageVolResize 函数可以调整存储卷的大小。\n\n（6）存储池管理的 API：以virStoragePool 开头的一系列函数。\n\nlibvirt 对存储池（pool）的管理，包括对本地的基本文件系统、普通网络共享文件系统、iSCSI共享文件系统、LVM分区等的管理。libvirt 需要基于 virStoragePoolPtr 这个存储池对象才能进行查询和控制操作。一些函数可以通过查询获取一个存储池对象，如：virStoragePoolLookupByName 函数可以根据存储池的名称来获取一个存储池对象，virStoragePoolLookupByVolume 可以根据一个存储卷返回其对应的存储池对象。virStoragePoolCreateXML 函数可以根据 XML 描述来创建一个存储池（默认已激活），virStoragePoolDefineXML 函数可以根据 XML 描述信息静态地定义个存储池（尚未激活），virStoragePoolCreate 函数可以激活一个存储池。virStoragePoolGetInfo、virStoragePoolGetName、virStoragePoolGetUUID等函数可以分别获取存储池的信息、名称和 UUID 标识。virStoragePoolIsActive函数可以查询存储池是否处于使用中状态。virStoragePoolFree 函数可以释放存储池相关的内存（但是不改变其在宿主机中的状态），virStoragePoolDestroy 函数可以用于销毁一个存储池（但并没有释放virStoragePoolPtr 对象，之后还可以用virStoragePoolCreate 函数重新激活它），virStoragePoolDelete 函数可以物理删除一个存储池资源（该操作不可恢复）。\n\n（7）事件管理的API：以virEvent 开头的一系列函数。\n\nlibvirt 支持事件机制，使用该机制注册之后，可以在发生特定的事件（如：域的启动、暂停、恢复、停止等）之时，得到自己定义的一些通知。\n\n（8）数据流管理的API：以virStream 开头的一系列函数。\n\nlibvirt 还提供了一系列函数用于数据流的传输。\n\n###Nova Compute与周边的交互\n\n***Neutron***\nNova Compute首先会与Neutron交互：\n\n- 调用Neutron API配置Network，虚拟机处于Networking的状态\n- Neutron 生成 MAC Address\n- 获取Neutron DHCP Server的配置\n- 获取Neutron Network的信息\n- 获取Neutron Security Group的信息\n- Neutron 创建Port对象，是一个Tap device，当然真正的设备还没有创建\n\n***Cinder***\nNova Compute在与Neutron交互的过程中，也会与Cinder交互，申请块存储资源:\n\n- Cinder API请求创建一个Volume\n- Cinder Scheduler在多个Cinder Volume里面选择一个，也是先Filter再weighting的过程，可以根据总空间的大小，也可以根据分配的情况\n- Cinder Volume创建一个iscsi target\n- Cinder Volume创建一个LVM volume，加入iscsi target\n- compute节点连接iscsi target，从而volume出现在compute节点上\n\n***Libvert Driver***\n在与上述两个组件交互完毕之后，已经获取了网络资源和块存储，Nova Compute就会调用Libvirt Driver创建虚拟机。\n\nLibvert Driver首先会和Glance交互申请镜像下载：\n\n- 从Glance下载Image，作为base\n- 基于base image，创建qcow2的image\n- resize image的大小，和filesystem的大小无关\n- 配置configuration drive\n- 配置文件注入\n\n就这样，所有的信息都已经齐全，生成了虚拟机的libvert配置xml文件，可以调用Libvert来创建虚拟机。\n\n在创建虚拟机的过程中，有非常重要的两步，Libvert会把虚机Plug到bridge上生成一个Tap口，同时也会挂载从Cinder申请的块存储。此后虚拟机会通过网络DHCP服务，Metadata服务等获取配置。\n\n\n\n参考文献：\nhttp://smilejay.com/2013/03/libvirt-api-introduction/\nhttp://blog.csdn.net/gaoxingnengjisuan/article/details/9674315\n[(KVM连载) 6.1.3 libvirt、libvirtd的配置和使用](http://smilejay.com/2013/03/libvirt-configuration-and-usage/)","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-20] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《开心的小明——动态规划》成功 [pool-2-thread-16] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-23-【OpenStack源码分析之十】虚机启动流程中Nova Compute与周边组件的交互.markdown [pool-2-thread-20] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74858141 [pool-2-thread-18] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之十】虚机启动流程中Nova Compute与周边组件的交互》成功 [pool-2-thread-20] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":75451673,"title":"【OpenStack源码分析之五】Nova API 的插件管理","create_at":"\/Date(1500469518000)\/","create":"2017-07-19 09:05:18","view_count":82,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"Openstack使用 stevedore作为其第三方开发和加载的框架，其使用setuptools的entry points来定义并加载插件。entry point引用的是定义在模块中的对象，比如类、函数、实例等，只要在import模块时能够被创建的对象都可以。[nova.api.v21.extensions]\nremote_consoles = nova.api.openstack.compute","url":"http://blog.csdn.net/BLACKMOON88/article/details/75451673","categories":"云计算,Python相关,OpenStack","tags":"openstack,api,插件,源码","content":"\u003cp\u003eOpenstack使用 stevedore作为其第三方开发和加载的框架，其使用setuptools的entry points来定义并加载插件。entry point引用的是定义在模块中的对象，比如类、函数、实例等，只要在import模块时能够被创建的对象都可以。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e[nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.v\u003c/span\u003e21\u003cspan class=\"hljs-preprocessor\"\u003e.extensions\u003c/span\u003e]\nremote_consoles = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.remote\u003c/span\u003e_consoles:RemoteConsoles\nnetworks = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.networks\u003c/span\u003e:Networks\nconsoles = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.consoles\u003c/span\u003e:Consoles\nconsole_auth_tokens = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.console\u003c/span\u003e_auth_tokens:ConsoleAuthTokens\nquota_classes = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.quota\u003c/span\u003e_classes:QuotaClasses\nimages = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.images\u003c/span\u003e:Images\nversions = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.versionsV\u003c/span\u003e21:Versions\nvolumes = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.volumes\u003c/span\u003e:Volumes\nserver_groups = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.server\u003c/span\u003e_groups:ServerGroups\nextension_info = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.extension\u003c/span\u003e_info:ExtensionInfo\nbaremetal_nodes = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.baremetal\u003c/span\u003e_nodes:BareMetalNodes\nsecurity_group_default_rules = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.security\u003c/span\u003e_group_default_rules:SecurityGroupDefaultRules\nblock_device_mapping = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.block\u003c/span\u003e_device_mapping:BlockDeviceMapping\nimage_size = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.image\u003c/span\u003e_size:ImageSize\nuser_data = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.user\u003c/span\u003e_data:UserData\nimage_metadata = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.image\u003c/span\u003e_metadata:ImageMetadata\ncloudpipe = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.cloudpipe\u003c/span\u003e:Cloudpipe\nnetworks_associate = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.networks\u003c/span\u003e_associate:NetworksAssociate\nsecurity_groups = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.security\u003c/span\u003e_groups:SecurityGroups\nmultiple_create = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.multiple\u003c/span\u003e_create:MultipleCreate\ntenant_networks = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.tenant\u003c/span\u003e_networks:TenantNetworks\ncells = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.cells\u003c/span\u003e:Cells\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e上面的代码可以看出在Nova api模块要启动的plugin列表。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"插件的使用方式\"\u003e插件的使用方式\u003c/h3\u003e\n\n\u003cp\u003e在stevedore中，有三种使用插件的方式：Drivers、Hooks、Extensions \u003cbr\u003e\n1：Drivers \u003cbr\u003e\n         一个名字对应一个entry point。使用时根据插件的命名空间和名字，定位到单独的插件： \u003cbr\u003e\n         \u003cimg src=\"http://img.blog.csdn.net/20151103184426775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e2：Hooks，一个名字对应多个entry point。允许同一个命名空间中的插件具有相同的名字，根据给定的命名空间和名字，加载该名字对应的多个插件。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20151103184441892?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e3：Extensions，多个名字，多个entry point。给定命名空间，加载该命名空间中所有的插件，当然也允许同一个命名空间中的插件具有相同的名字。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20151103184454565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"openstack的实现\"\u003eOpenstack的实现\u003c/h3\u003e\n\n\u003cp\u003eOpenstack 在Rest Call上选择的是第三种方式，通过给定的命名空间 nova.api.v21.extensions，再加上entrypoint名称定为到对应的插件。但是通过前一篇介绍\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75331436\" target=\"_blank\"\u003eNova-API启动\u003c/a\u003e的文章我们看到Restful URL还会通过APIRouterV21这个WSGI middleware来进行request和应用的处理映射。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160607143425699\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n那么API Router通过哪些Key值来做的映射呢？\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs vala\"\u003e\u003cspan class=\"hljs-preprocessor\"\u003e#(\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#     (\u0027Route path\u0027: {\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#         \u0027HTTP method: [\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#             \u0027Controller\u0027,\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#             \u0027The method of controller is used to handle this route\u0027\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#         ],\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#         ...\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#     }),\u003c/span\u003e\n(\u003cspan class=\"hljs-string\"\u003e\u0027/flavors\u0027\u003c/span\u003e, {\n        \u003cspan class=\"hljs-string\"\u003e\u0027GET\u0027\u003c/span\u003e: [flavor_controller, \u003cspan class=\"hljs-string\"\u003e\u0027index\u0027\u003c/span\u003e],\n        \u003cspan class=\"hljs-string\"\u003e\u0027POST\u0027\u003c/span\u003e: [flavor_controller, \u003cspan class=\"hljs-string\"\u003e\u0027create\u0027\u003c/span\u003e]\n    }),\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e最终的Route会包含类似信息(path, method, controller, action)，正是通过这个组合Key值来寻找对应的Controller。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"自定义api\"\u003e自定义API\u003c/h3\u003e\n\n\u003cp\u003e自定义API分为三种可能性，分别如下： \u003cbr\u003e\n- 在原有的资源上增加函数，例如在servers上增加一个接口，查看虚拟机的资源利用情况 \u003cbr\u003e\n- 添加扩展资源，定义新的扩展资源 \u003cbr\u003e\n- 添加核心资源,定义新的核心资源\u003c/p\u003e\n\n\u003cp\u003e对于第一种情况，应该是最简单的，我们想在现有的servers上添加一个接口，意味着在servers的controller中添加一个函数，如何能够正确的添加了，我们需要像下图一样，给该函数添加几个装饰器，其中@wsgi.action装饰器需要起一个短名字，然后再http请求的body中添加一条记录{action:name}，这样就OK了。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions09.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e第二种情况下，添加新的扩展资源，我们需要写一个py文件，定义一个class，将其放在nova.api.openstack.compute.contrib目录下面，文件名小写，然后再文件中定义一个class，类名和文件一样，只是首字母大写，该class要继承于ExtensionDescriptor,并且定义四个变量，name,alias,updated,namespace,并且要保证alias不和其他的冲突，唯一性。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e1.如果新定义的扩展资源只是扩展以存在的核心资源，需要重写get_controller_extensions方法，该方法需要有一个新的Controller class，该class 继承于所扩展的核心资源的controller，并且该class的成员函数需要添加@wsgi.extends装饰器 \u003c/li\u003e\n\u003cli\u003e2.如果新定义的扩展资源也定义了新的资源，那么需要再定义个属于自己的Controller类，包含，index，create，delete等等函数\u003c/li\u003e\n\u003cli\u003e3.以上可以二者兼备\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions10.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions11.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions12.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e对于第三种情况，定义一个新的核心资源，我们需要在nova.api.openstack.compute目录下面创建一个新的py文件，按照servers这样的文件来写一个自己的核心资源，大家可以参考servers.py的方法，还有上面两种方法，最复杂的是在nova.api.openstack.compute.init.py文件中的APIRouter class中使用mapper.resource方法\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions13.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://www.choudan.net/2013/07/31/OpenStack-API%E5%88%86%E6%9E%90(%E4%B8%89).html\"\u003ehttp://www.choudan.net/2013/07/31/OpenStack-API%E5%88%86%E6%9E%90(%E4%B8%89).html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/gtt116/article/details/51603543\"\u003ehttp://blog.csdn.net/gtt116/article/details/51603543\u003c/a\u003e\u003c/p\u003e","markdowncontent":"Openstack使用 stevedore作为其第三方开发和加载的框架，其使用setuptools的entry points来定义并加载插件。entry point引用的是定义在模块中的对象，比如类、函数、实例等，只要在import模块时能够被创建的对象都可以。\n\n```\n[nova.api.v21.extensions]\nremote_consoles = nova.api.openstack.compute.remote_consoles:RemoteConsoles\nnetworks = nova.api.openstack.compute.networks:Networks\nconsoles = nova.api.openstack.compute.consoles:Consoles\nconsole_auth_tokens = nova.api.openstack.compute.console_auth_tokens:ConsoleAuthTokens\nquota_classes = nova.api.openstack.compute.quota_classes:QuotaClasses\nimages = nova.api.openstack.compute.images:Images\nversions = nova.api.openstack.compute.versionsV21:Versions\nvolumes = nova.api.openstack.compute.volumes:Volumes\nserver_groups = nova.api.openstack.compute.server_groups:ServerGroups\nextension_info = nova.api.openstack.compute.extension_info:ExtensionInfo\nbaremetal_nodes = nova.api.openstack.compute.baremetal_nodes:BareMetalNodes\nsecurity_group_default_rules = nova.api.openstack.compute.security_group_default_rules:SecurityGroupDefaultRules\nblock_device_mapping = nova.api.openstack.compute.block_device_mapping:BlockDeviceMapping\nimage_size = nova.api.openstack.compute.image_size:ImageSize\nuser_data = nova.api.openstack.compute.user_data:UserData\nimage_metadata = nova.api.openstack.compute.image_metadata:ImageMetadata\ncloudpipe = nova.api.openstack.compute.cloudpipe:Cloudpipe\nnetworks_associate = nova.api.openstack.compute.networks_associate:NetworksAssociate\nsecurity_groups = nova.api.openstack.compute.security_groups:SecurityGroups\nmultiple_create = nova.api.openstack.compute.multiple_create:MultipleCreate\ntenant_networks = nova.api.openstack.compute.tenant_networks:TenantNetworks\ncells = nova.api.openstack.compute.cells:Cells\n```\n上面的代码可以看出在Nova api模块要启动的plugin列表。\n###插件的使用方式\n在stevedore中，有三种使用插件的方式：Drivers、Hooks、Extensions\n1：Drivers      \n         一个名字对应一个entry point。使用时根据插件的命名空间和名字，定位到单独的插件：\n         ![这里写图片描述](http://img.blog.csdn.net/20151103184426775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n2：Hooks，一个名字对应多个entry point。允许同一个命名空间中的插件具有相同的名字，根据给定的命名空间和名字，加载该名字对应的多个插件。\n![这里写图片描述](http://img.blog.csdn.net/20151103184441892?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n3：Extensions，多个名字，多个entry point。给定命名空间，加载该命名空间中所有的插件，当然也允许同一个命名空间中的插件具有相同的名字。\n![这里写图片描述](http://img.blog.csdn.net/20151103184454565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n###Openstack的实现\nOpenstack 在Rest Call上选择的是第三种方式，通过给定的命名空间 nova.api.v21.extensions，再加上entrypoint名称定为到对应的插件。但是通过前一篇介绍[Nova-API启动](http://blog.csdn.net/ohenry88/article/details/75331436)的文章我们看到Restful URL还会通过APIRouterV21这个WSGI middleware来进行request和应用的处理映射。\n![这里写图片描述](http://img.blog.csdn.net/20160607143425699)\n那么API Router通过哪些Key值来做的映射呢？\n```\n#(\n#     (\u0027Route path\u0027: {\n#         \u0027HTTP method: [\n#             \u0027Controller\u0027,\n#             \u0027The method of controller is used to handle this route\u0027\n#         ],\n#         ...\n#     }),\n(\u0027/flavors\u0027, {\n        \u0027GET\u0027: [flavor_controller, \u0027index\u0027],\n        \u0027POST\u0027: [flavor_controller, \u0027create\u0027]\n    }),\n```\n最终的Route会包含类似信息(path, method, controller, action)，正是通过这个组合Key值来寻找对应的Controller。\n\n###自定义API\n自定义API分为三种可能性，分别如下：\n- 在原有的资源上增加函数，例如在servers上增加一个接口，查看虚拟机的资源利用情况\n- 添加扩展资源，定义新的扩展资源\n- 添加核心资源,定义新的核心资源\n\n对于第一种情况，应该是最简单的，我们想在现有的servers上添加一个接口，意味着在servers的controller中添加一个函数，如何能够正确的添加了，我们需要像下图一样，给该函数添加几个装饰器，其中@wsgi.action装饰器需要起一个短名字，然后再http请求的body中添加一条记录{action:name}，这样就OK了。\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions09.png)\n\n第二种情况下，添加新的扩展资源，我们需要写一个py文件，定义一个class，将其放在nova.api.openstack.compute.contrib目录下面，文件名小写，然后再文件中定义一个class，类名和文件一样，只是首字母大写，该class要继承于ExtensionDescriptor,并且定义四个变量，name,alias,updated,namespace,并且要保证alias不和其他的冲突，唯一性。\n\n- 1.如果新定义的扩展资源只是扩展以存在的核心资源，需要重写get_controller_extensions方法，该方法需要有一个新的Controller class，该class 继承于所扩展的核心资源的controller，并且该class的成员函数需要添加@wsgi.extends装饰器 \n- 2.如果新定义的扩展资源也定义了新的资源，那么需要再定义个属于自己的Controller类，包含，index，create，delete等等函数\n- 3.以上可以二者兼备\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions10.png)\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions11.png)\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions12.png)\n\n对于第三种情况，定义一个新的核心资源，我们需要在nova.api.openstack.compute目录下面创建一个新的py文件，按照servers这样的文件来写一个自己的核心资源，大家可以参考servers.py的方法，还有上面两种方法，最复杂的是在nova.api.openstack.compute.init.py文件中的APIRouter class中使用mapper.resource方法\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions13.png)\n\n参考文献：\nhttp://www.choudan.net/2013/07/31/OpenStack-API%E5%88%86%E6%9E%90(%E4%B8%89).html\nhttp://blog.csdn.net/gtt116/article/details/51603543\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-17] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-19-【OpenStack源码分析之五】Nova API 的插件管理.markdown [pool-2-thread-17] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=73196798 [pool-2-thread-25] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":73196798,"title":"对Python协程的理解","create_at":"\/Date(1497370467000)\/","create":"2017-06-14 12:14:27","view_count":152,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"前言之前看Python教程的时候了解了一些协程的概念，相对还是比较肤浅，但是协程对Python语言而言是一个很重要的特性，加上近期看了我司架构师标哥的一篇讲协程的文章，感觉豁然开朗。为什么需要协程协程这东西，不是Python独有的，在很多其他脚本语言比如Lua也有，协程的存在，让单线程跑出了并发的效果，对计算资源的利用率高，开销小。但是说起来和Python解释器的设计也有关系，Python解释器对于","url":"http://blog.csdn.net/BLACKMOON88/article/details/73196798","categories":"Python相关","tags":"python,协程,线程","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e之前看Python教程的时候了解了一些协程的概念，相对还是比较肤浅，但是协程对Python语言而言是一个很重要的特性，加上近期看了我司架构师标哥的一篇讲协程的文章，感觉豁然开朗。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"为什么需要协程\"\u003e为什么需要协程\u003c/h3\u003e\n\n\u003cp\u003e协程这东西，不是Python独有的，在很多其他脚本语言比如Lua也有，协程的存在，让单线程跑出了并发的效果，对计算资源的利用率高，开销小。但是说起来和Python解释器的设计也有关系，Python的多线程并不支持多核，因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。\u003c/p\u003e\n\n\u003cp\u003eGIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"实现一个协程\"\u003e实现一个协程\u003c/h3\u003e\n\n\u003cp\u003e协程是一种用户态的轻量级线程。本篇主要研究协程的C/C++的实现。\u003c/p\u003e\n\n\u003cp\u003e首先我们可以看看有哪些语言已经具备协程语义：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e比较重量级的有C#、erlang、golang*\u003c/li\u003e\n\u003cli\u003e轻量级有python、lua、javascript、ruby\u003c/li\u003e\n\u003cli\u003e还有函数式的scala、scheme等。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e目前看到大概有四种实现协程的方式：\u003c/p\u003e\n\n\u003cp\u003e第一种：利用glibc 的 ucontext组件(云风的库) \u003cbr\u003e\n第二种：使用汇编代码来切换上下文(实现c协程) \u003cbr\u003e\n第三种：利用C语言语法switch-case的奇淫技巧来实现（Protothreads) \u003cbr\u003e\n第四种：利用了 C 语言的 setjmp 和 longjmp（ 一种协程的 C/C++ 实现,要求函数里面使用 static local 的变量来保存协程内部的数据）\u003c/p\u003e\n\n\u003cp\u003e这里有一个兄弟已经使用ucontext来实现简单的协程库（\u003ca href=\"http://blog.csdn.net/qq910894904/article/details/41911175\" target=\"_blank\"\u003ehttp://blog.csdn.net/qq910894904/article/details/41911175\u003c/a\u003e），我就不Copy了。\u003c/p\u003e\n\n\u003cp\u003e可以看出来，协程相对线程而言，有一定的相似性，它是借助用户空间的上下文切换调度来达到调用者与被调用者之间多次协同的目的。但是调度的主动权却在用户，以下是进程，线程，协程的一个对比。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170714202328915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e协程最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。\u003c/p\u003e\n\n\u003cp\u003e第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。\u003c/p\u003e\n\n\u003cp\u003e因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"协程的使用场景\"\u003e协程的使用场景\u003c/h3\u003e\n\n\u003cp\u003e前面介绍了协程的概念，但是，协程在什么情况下使用呢？协程既然诞生了，总有它的理由。前面我们看到，一个线程内的多个协程是串行执行的，不能利用多核，所以，显然，协程不适合计算密集型的场景。那么，协程适合什么场景呢？\u003c/p\u003e\n\n\u003cp\u003e异步非阻塞式I/O。\u003c/p\u003e\n\n\u003cp\u003eI/O 本来是阻塞的（相较于 CPU 的时间世界而言），就目前而言，无论 I/O 的速度多块，也比不上 CPU 的速度，所以一个 I/O 相关的程序，当其在进行 I/O 操作时，CPU 实际上是空闲的。我们假设这样的场景： 1个线程有5个 I/O 相关的事情（子程序）要处理。如果我们绝对的串行化，那么当其中一个 I/O 阻塞时，其他4个 I/O 并不能得到执行，因为程序是绝对串行的，5个 I/O 必须一个一个排队等候处理，当一个 I/O 阻塞时，其它四个也得在那傻等着。如下图所示： \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170714202732340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e而协程则能比较好地解决这个问题，当一个协程（特殊的子程序）阻塞时，它可以切换到其他没有阻塞的协程上去继续执行，这样就能得到比较高的效率。如下图所示：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20170714202941159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e还有一个简单的例子证明协程的实用性。假设你有一个生产者－消费者的关系，这里一个协程生产产品并将它们加入队列，另一个协程从队列中取出产品并使用它。为了提高效率，你想一次增加或删除多个产品。代码可能是这样的：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-python hljs \"\u003evar q := new queue\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e生产者协程\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-python hljs \"\u003eloop\n       \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e q \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e full\n           create some new items\n           add the items to q\n       \u003cspan class=\"hljs-keyword\"\u003eyield\u003c/span\u003e to consume\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e消费者协程\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-python hljs \"\u003e  loop\n       \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e q \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e empty\n           remove some items \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e q\n           use the items\n       \u003cspan class=\"hljs-keyword\"\u003eyield\u003c/span\u003e to produce\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e详细比较： \u003cbr\u003e\n因为相对于子例程，协程可以有多个入口和出口点，可以用协程来实现任何的子例程。事实上，正如Knuth所说：“子例程是协程的特例。”\u003c/p\u003e\n\n\u003cp\u003e每当子例程被调用时，执行从被调用子例程的起始处开始；然而，接下来的每次协程被调用时，从协程返回（或yield）的位置接着执行。\u003c/p\u003e\n\n\u003cp\u003e因为子例程只返回一次，要返回多个值就要通过集合的形式。这在有些语言，如Forth里很方便；而其他语言，如C，只允许单一的返回值，所以就需要引用一个集合。相反地，因为协程可以返回多次，返回多个值只需要在后继的协程调用中返回附加的值即可。在后继调用中返回附加值的协程常被称为产生器。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"python协程库eventlet\"\u003ePython协程库Eventlet\u003c/h3\u003e\n\n\u003cp\u003e前文也讲了，协程在异步IO上是能提升很多效率的，Python在这块就有一个针对异步IO的协程库Eventlet，eventlet是一个用来处理和网络相关的Python库函数，而且可以通过协程来实现并发，在eventlet里，把“协程”叫做greenthread(绿色线程)。所谓并发，就是开启了多个greenthread，并且对这些greenthread进行管理，以实现非阻塞式的I/O。比如说用eventlet可以很方便的写一个性能很好的web服务器，或者是一个效率很高的网页爬虫，这都归功于eventlet的“绿色线程”，以及对“绿色线程”的管理机制。更让人不可思议的是，eventlet为了实现“绿色线程”，竟然对python的和网络相关的几个标准库函数进行了改写，并且可以以补丁（patch）的方式导入到程序中，因为python的库函数只支持普通的线程，而不支持协程，eventlet称之为“绿化”。\u003c/p\u003e\n\n\u003cp\u003e这里要注意的是Eventlet的使用场景，因为异步IO的多个协程之间的调度相对而言规则比较简单，所以其调度是由Eventlet里的Hub组件完成的，而完全定制化的由用户来做调度，并不能使用Eventlet\u003c/p\u003e\n\n\n\n\u003ch3 id=\"eventlet-api分析\"\u003eEventlet API分析\u003c/h3\u003e\n\n\n\n\u003ch4 id=\"1-greenthread-spawn-生成函数\"\u003e1. Greenthread Spawn 生成函数\u003c/h4\u003e\n\n\u003cp\u003e（1）Greenthread Spawn（spawn，孵化的意思，即如何产生greenthread） \u003cbr\u003e\n       主要有3个函数可以创建绿色线程：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e    \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e）spawn(func, \u003cspan class=\"hljs-variable\"\u003e*args\u003c/span\u003e, \u003cspan class=\"hljs-variable\"\u003e**\u003c/span\u003ekwargs)：\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e创建一个绿色线程去运行func这个函数，后面的参数是传递给这个函数的参数。返回值是一个eventlet.GreenThread对象，这个对象可以用来接受func函数运行的返回值。在绿色线程池还没有满的情况下，这个绿色线程一被创建就立刻被执行。其实，用这种方法去创建线程也是可以理解的，线程被创建出来，肯定是有一定的任务要去执行，这里直接把函数当作参数传递进去，去执行一定的任务，就好像标准库中的线程用run()方法去执行任务一样。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e    \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e）spawn_n(func, \u003cspan class=\"hljs-variable\"\u003e*args\u003c/span\u003e, \u003cspan class=\"hljs-variable\"\u003e**\u003c/span\u003ekwargs)：\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个函数和spawn()类似，不同的就是它没有返回值，因而更加高效，这种特性，使它也有存在的价值。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs livecodeserver\"\u003e    \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e）spawn_after(\u003cspan class=\"hljs-built_in\"\u003eseconds\u003c/span\u003e, func, *args, **kwargs)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个函数和spawn()基本上一样，都有一样的返回值，不同的是它可以限定在什么时候执行这个绿色线程，即在seconds秒之后，启动这个绿色线程。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"2-greenthread-control-协程控制函数\"\u003e2. Greenthread Control 协程控制函数\u003c/h4\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003e    1）sleep(seconds\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e0)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e中止当前的绿色线程，以允许其它的绿色线程执行。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs oxygene\"\u003e    \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e）eventlet.GreenPool \n        starmap(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eiterable\u003c/span\u003e)和\u003cspan class=\"hljs-title\"\u003eimap\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e, *iterables)\u003c/span\u003e：\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这是一个类，在这个类中用set集合来容纳所创建的绿色线程，并且可以指定容纳线程的最大数量（默认是1000个），它的内部是用Semaphore和Event这两个类来对池进行控制的，这样就构成了线程池。\u003c/p\u003e\n\n\u003cp\u003eStarmap和imap这两个函数和标准的库函数中的这两个函数实现的功能是一样的，所不同的是这里将这两个函数的执行放到了绿色线程中。前者实现的是从iterable中取出每一项作为function的参数来执行，后者则是分别从iterables中各取一项，作为function的参数去执行。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs avrasm\"\u003e    \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e）eventlet\u003cspan class=\"hljs-preprocessor\"\u003e.GreenPile\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这也是一个类，而且是一个很有用的类，在它内部维护了一个GreenPool对象和一个Queue对象。这个GreenPool对象可以是从外部传递进来的，也可以是在类内部创建的，GreenPool对象主要是用来创建绿色线程的，即在GreenPile内部调用了GreenPool.spawn()方法。而Queue对象则是用来保存spawn()方法的返回值的，即Queue中保存的是GreenThread对象。并且它还实现了next()方法，也就意味着GreenPile对象具有了迭代器的性质。所以如果我们要对绿色线程的返回值进行操作的话，用这个类是再好不过的了。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs avrasm\"\u003e    \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e）eventlet\u003cspan class=\"hljs-preprocessor\"\u003e.Queue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e说到队列就不得不画个类图了，基类是LightQueue，它实现了大部分的队列的常用方法。它是用collections做为实现队列的基本数据结构的。而且这个LightQueue的实现，不单单实现了存取操作，我觉得在本质上它实现了一个生产者和消费者问题，定义了两个set()类型的成员变量putters和getters，前者用来存放在队列满时，被阻塞的绿色线程，后者用来存放当队列空时，被阻塞的绿色线程。类中的putting()和getting()方法就是分别得到被阻塞的绿色线程的数量。 \u003cbr\u003e\nQueue继承了LightQueue，并且又增加了它自己的两个方法：task_done()和join()。task_done()是被消费者的绿色线程所调用的，表示在这个项上的所有工作都做完了，join()是阻塞，直到队列中所有的任务都完成。LifoQueue和PriorityQueue是存放数据的两种不同的方式。 \u003cbr\u003e\n\u003cimg src=\"http://my.csdn.net/uploads/201208/07/1344276770_7117.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"3-network-convenience-functions和网络相关的函数\"\u003e3. Network Convenience Functions（和网络相关的函数）\u003c/h4\u003e\n\n\u003cp\u003e这些函数定义在convenience.py文件中，对和socket相关的网络通信进行了包装，注意，这里用的socket是经过修改后的socket，以使它使用绿色线程，主要有以下一个函数：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e      \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e）\u003cspan class=\"hljs-keyword\"\u003econnect\u003c/span\u003e(addr, family=\u003cspan class=\"hljs-keyword\"\u003esocket\u003c/span\u003e.AF_INET, \u003cspan class=\"hljs-keyword\"\u003ebind\u003c/span\u003e=None)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e主要执行了以下几个步骤：新建了一个TCP类型的socket，绑定本地的ip和端口，和远程的地址进行连接，源码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003econnect\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(addr, family=socket.AF_INET, bind=None)\u003c/span\u003e:\u003c/span\u003e  \n    sock = socket.socket(family, socket.SOCK_STREAM)  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e bind \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e:  \n        sock.bind(bind)  \n    sock.connect(addr)  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sock\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e     \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e）\u003cspan class=\"hljs-keyword\"\u003elisten\u003c/span\u003e(addr, family=\u003cspan class=\"hljs-keyword\"\u003esocket\u003c/span\u003e.AF_INET, backlog=\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e过程和connect()类似，只是把connect()换成了listen()，backlog指定了最大的连接数量，源码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elisten\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(addr, family=socket.AF_INET, backlog=\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e)\u003c/span\u003e:\u003c/span\u003e  \n    sock = socket.socket(family, socket.SOCK_STREAM)  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e sys.platform[:\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]==\u003cspan class=\"hljs-string\"\u003e\"win\"\u003c/span\u003e:  \n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) \n    sock.bind(addr)  \n    sock.listen(backlog)  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sock  \u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003e     3）serve(sock, handle, concurrency\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e1000)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个函数直接创建了一个socket服务器，在它内部创建了一个GreenPool对象，默认的最大绿色线程数是1000，然后是一个循环来接受连接，源码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eserve\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(sock, handle, concurrency=\u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e)\u003c/span\u003e:\u003c/span\u003e  \n    pool = greenpool.GreenPool(concurrency)  \n    server_gt = greenthread.getcurrent()  \n\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e:  \n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e:  \n            conn, addr = sock.accept()  \n            gt = pool.spawn(handle, conn, addr)  \n            gt.link(_stop_checker, server_gt, conn)  \n            conn, addr, gt = \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003eexcept\u003c/span\u003e StopServe:  \n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs markdown\"\u003e 4）wrap_ssl(sock, \u003cspan class=\"hljs-emphasis\"\u003e*a, *\u003c/span\u003e*kw)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e给socket加上ssl(安全套接层)，对数据进行加密。 \u003cbr\u003e\n 还有几个比较重要的API这里就不罗列了，等以后用到了再进行分析吧，下面看几个官方的例子：\u003c/p\u003e\n\n\n\n\u003ch4 id=\"4-use-case\"\u003e4. Use Case\u003c/h4\u003e\n\n\u003cp\u003e（1）官方上引以为傲的“网页爬虫”，用到了绿色线程池和imap()函数\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003eurls = [\u003cspan class=\"hljs-string\"\u003e\"http://www.google.com/intl/en_ALL/images/logo.gif\"\u003c/span\u003e,  \n     \u003cspan class=\"hljs-string\"\u003e\"https://wiki.secondlife.com/w/images/secondlife.jpg\"\u003c/span\u003e,  \n     \u003cspan class=\"hljs-string\"\u003e\"http://us.i1.yimg.com/us.yimg.com/i/ww/beta/y3.gif\"\u003c/span\u003e]  \n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e eventlet  \n\u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e eventlet.green \u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e urllib2    \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efetch\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(url)\u003c/span\u003e:\u003c/span\u003e  \n  \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"opening\"\u003c/span\u003e, url  \n  body = urllib2.urlopen(url).read()  \n  \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"done with\"\u003c/span\u003e, url  \n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e url, body  \n\npool = eventlet.GreenPool(\u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e)  \n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e url, body \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e pool.imap(fetch, urls):  \n  \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"got body from\"\u003c/span\u003e, url, \u003cspan class=\"hljs-string\"\u003e\"of length\"\u003c/span\u003e, len(body)  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e（2）socket服务器\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e eventlet  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehandle\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(fd)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"client connected\"\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e:  \n        \u003cspan class=\"hljs-comment\"\u003e# pass through every non-eof line  \u003c/span\u003e\n        x = fd.readline()  \n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e x: \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e  \n        fd.write(x)  \n        fd.flush()  \n        \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"echoed\"\u003c/span\u003e, x,  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"client disconnected\"\u003c/span\u003e  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"server socket listening on port 6000\"\u003c/span\u003e  \nserver = eventlet.listen((\u003cspan class=\"hljs-string\"\u003e\u00270.0.0.0\u0027\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e6000\u003c/span\u003e))  \npool = eventlet.GreenPool()  \n\u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e:  \n    \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e:  \n        new_sock, address = server.accept()  \n        \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"accepted\"\u003c/span\u003e, address  \n        pool.spawn_n(handle, new_sock.makefile(\u003cspan class=\"hljs-string\"\u003e\u0027rw\u0027\u003c/span\u003e))  \n    \u003cspan class=\"hljs-keyword\"\u003eexcept\u003c/span\u003e (SystemExit, KeyboardInterrupt):  \n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e（3）使用GreenPile的例子\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs python\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e eventlet  \n\u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e eventlet.green \u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e socket  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egeturl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(url)\u003c/span\u003e:\u003c/span\u003e  \n    c = socket.socket()  \n    ip = socket.gethostbyname(url)  \n    c.connect((ip, \u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e))  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027%s connected\u0027\u003c/span\u003e % url  \n    c.sendall(\u003cspan class=\"hljs-string\"\u003e\u0027GET /\\r\\n\\r\\n\u0027\u003c/span\u003e)  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e c.recv(\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e)  \n\nurls = [\u003cspan class=\"hljs-string\"\u003e\u0027www.google.com\u0027\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\u0027www.yandex.ru\u0027\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\u0027www.python.org\u0027\u003c/span\u003e]  \npile = eventlet.GreenPile()  \n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e x \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e urls:  \n    pile.spawn(geturl, x)  \n\n\u003cspan class=\"hljs-comment\"\u003e# note that the pile acts as a collection of return values from the functions  \u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e# if any exceptions are raised by the function they\u0027ll get raised here  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e url, result \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e zip(urls, pile):  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027%s: %s\u0027\u003c/span\u003e % (url, repr(result)[:\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e])  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e参考资料： \u003cbr\u003e\n\u003ca href=\"http://eventlet.net/doc/index.html\" target=\"_blank\"\u003ehttp://eventlet.net/doc/index.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/hackerain/article/details/7836993\" target=\"_blank\"\u003ehttp://blog.csdn.net/hackerain/article/details/7836993\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://mp.weixin.qq.com/s?__biz=MzAwNDAxOTM5Mw==&amp;mid=508479846&amp;idx=5&amp;sn=ee86e3914c01bf290b6da1a61b96e343&amp;chksm=00882cc837ffa5de480c3b7674832d182562bf35e78eac9eb8094c5001093efd20bbfb631126&amp;mpshare=1&amp;scene=23&amp;srcid=0712c6k1wJ1QCYISc3m4m8FP#rd\" target=\"_blank\"\u003ehttp://mp.weixin.qq.com/s?__biz=MzAwNDAxOTM5Mw==&amp;mid=508479846&amp;idx=5&amp;sn=ee86e3914c01bf290b6da1a61b96e343&amp;chksm=00882cc837ffa5de480c3b7674832d182562bf35e78eac9eb8094c5001093efd20bbfb631126&amp;mpshare=1&amp;scene=23&amp;srcid=0712c6k1wJ1QCYISc3m4m8FP#rd\u003c/a\u003e\u003c/p\u003e","markdowncontent":"###前言\n之前看Python教程的时候了解了一些协程的概念，相对还是比较肤浅，但是协程对Python语言而言是一个很重要的特性，加上近期看了我司架构师标哥的一篇讲协程的文章，感觉豁然开朗。\n###为什么需要协程\n协程这东西，不是Python独有的，在很多其他脚本语言比如Lua也有，协程的存在，让单线程跑出了并发的效果，对计算资源的利用率高，开销小。但是说起来和Python解释器的设计也有关系，Python的多线程并不支持多核，因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。\n\nGIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。\n\n###实现一个协程\n协程是一种用户态的轻量级线程。本篇主要研究协程的C/C++的实现。\n\n首先我们可以看看有哪些语言已经具备协程语义：\n\n- 比较重量级的有C#、erlang、golang*\n- 轻量级有python、lua、javascript、ruby\n- 还有函数式的scala、scheme等。\n\n目前看到大概有四种实现协程的方式：\n\n第一种：利用glibc 的 ucontext组件(云风的库)\n第二种：使用汇编代码来切换上下文(实现c协程)\n第三种：利用C语言语法switch-case的奇淫技巧来实现（Protothreads)\n第四种：利用了 C 语言的 setjmp 和 longjmp（ 一种协程的 C/C++ 实现,要求函数里面使用 static local 的变量来保存协程内部的数据）\n\n这里有一个兄弟已经使用ucontext来实现简单的协程库（http://blog.csdn.net/qq910894904/article/details/41911175），我就不Copy了。\n\n可以看出来，协程相对线程而言，有一定的相似性，它是借助用户空间的上下文切换调度来达到调用者与被调用者之间多次协同的目的。但是调度的主动权却在用户，以下是进程，线程，协程的一个对比。\n![这里写图片描述](http://img.blog.csdn.net/20170714202328915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n协程最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。\n\n第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。\n\n因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。\n\n###协程的使用场景\n前面介绍了协程的概念，但是，协程在什么情况下使用呢？协程既然诞生了，总有它的理由。前面我们看到，一个线程内的多个协程是串行执行的，不能利用多核，所以，显然，协程不适合计算密集型的场景。那么，协程适合什么场景呢？\n\n异步非阻塞式I/O。\n\nI/O 本来是阻塞的（相较于 CPU 的时间世界而言），就目前而言，无论 I/O 的速度多块，也比不上 CPU 的速度，所以一个 I/O 相关的程序，当其在进行 I/O 操作时，CPU 实际上是空闲的。我们假设这样的场景： 1个线程有5个 I/O 相关的事情（子程序）要处理。如果我们绝对的串行化，那么当其中一个 I/O 阻塞时，其他4个 I/O 并不能得到执行，因为程序是绝对串行的，5个 I/O 必须一个一个排队等候处理，当一个 I/O 阻塞时，其它四个也得在那傻等着。如下图所示：\n![这里写图片描述](http://img.blog.csdn.net/20170714202732340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n而协程则能比较好地解决这个问题，当一个协程（特殊的子程序）阻塞时，它可以切换到其他没有阻塞的协程上去继续执行，这样就能得到比较高的效率。如下图所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170714202941159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n还有一个简单的例子证明协程的实用性。假设你有一个生产者－消费者的关系，这里一个协程生产产品并将它们加入队列，另一个协程从队列中取出产品并使用它。为了提高效率，你想一次增加或删除多个产品。代码可能是这样的：\n``` python\nvar q := new queue\n``` \n生产者协程\n``` python\nloop\n       while q is not full\n           create some new items\n           add the items to q\n       yield to consume\n``` \n消费者协程\n``` python\n  loop\n       while q is not empty\n           remove some items from q\n           use the items\n       yield to produce\n``` \n\n详细比较：\n因为相对于子例程，协程可以有多个入口和出口点，可以用协程来实现任何的子例程。事实上，正如Knuth所说：“子例程是协程的特例。”\n\n每当子例程被调用时，执行从被调用子例程的起始处开始；然而，接下来的每次协程被调用时，从协程返回（或yield）的位置接着执行。\n\n因为子例程只返回一次，要返回多个值就要通过集合的形式。这在有些语言，如Forth里很方便；而其他语言，如C，只允许单一的返回值，所以就需要引用一个集合。相反地，因为协程可以返回多次，返回多个值只需要在后继的协程调用中返回附加的值即可。在后继调用中返回附加值的协程常被称为产生器。\n\n###Python协程库Eventlet\n前文也讲了，协程在异步IO上是能提升很多效率的，Python在这块就有一个针对异步IO的协程库Eventlet，eventlet是一个用来处理和网络相关的Python库函数，而且可以通过协程来实现并发，在eventlet里，把“协程”叫做greenthread(绿色线程)。所谓并发，就是开启了多个greenthread，并且对这些greenthread进行管理，以实现非阻塞式的I/O。比如说用eventlet可以很方便的写一个性能很好的web服务器，或者是一个效率很高的网页爬虫，这都归功于eventlet的“绿色线程”，以及对“绿色线程”的管理机制。更让人不可思议的是，eventlet为了实现“绿色线程”，竟然对python的和网络相关的几个标准库函数进行了改写，并且可以以补丁（patch）的方式导入到程序中，因为python的库函数只支持普通的线程，而不支持协程，eventlet称之为“绿化”。\n\n这里要注意的是Eventlet的使用场景，因为异步IO的多个协程之间的调度相对而言规则比较简单，所以其调度是由Eventlet里的Hub组件完成的，而完全定制化的由用户来做调度，并不能使用Eventlet\n###Eventlet API分析\n####1. Greenthread Spawn 生成函数\n（1）Greenthread Spawn（spawn，孵化的意思，即如何产生greenthread）\n       主要有3个函数可以创建绿色线程：\n   \n\n``` Python\n    1）spawn(func, *args, **kwargs)：\n```\n创建一个绿色线程去运行func这个函数，后面的参数是传递给这个函数的参数。返回值是一个eventlet.GreenThread对象，这个对象可以用来接受func函数运行的返回值。在绿色线程池还没有满的情况下，这个绿色线程一被创建就立刻被执行。其实，用这种方法去创建线程也是可以理解的，线程被创建出来，肯定是有一定的任务要去执行，这里直接把函数当作参数传递进去，去执行一定的任务，就好像标准库中的线程用run()方法去执行任务一样。\n``` Python\n    2）spawn_n(func, *args, **kwargs)：\n```\n这个函数和spawn()类似，不同的就是它没有返回值，因而更加高效，这种特性，使它也有存在的价值。\n``` Python\n    3）spawn_after(seconds, func, *args, **kwargs)\n```\n\n这个函数和spawn()基本上一样，都有一样的返回值，不同的是它可以限定在什么时候执行这个绿色线程，即在seconds秒之后，启动这个绿色线程。\n\n####2. Greenthread Control 协程控制函数\n\n``` Python\n    1）sleep(seconds=0)\n```\n中止当前的绿色线程，以允许其它的绿色线程执行。\n``` Python\n\t2）eventlet.GreenPool \n\t    starmap(self, function, iterable)和imap(self, function, *iterables)：\n```\n这是一个类，在这个类中用set集合来容纳所创建的绿色线程，并且可以指定容纳线程的最大数量（默认是1000个），它的内部是用Semaphore和Event这两个类来对池进行控制的，这样就构成了线程池。\n\nStarmap和imap这两个函数和标准的库函数中的这两个函数实现的功能是一样的，所不同的是这里将这两个函数的执行放到了绿色线程中。前者实现的是从iterable中取出每一项作为function的参数来执行，后者则是分别从iterables中各取一项，作为function的参数去执行。\n``` Python\n\t3）eventlet.GreenPile\n```\n这也是一个类，而且是一个很有用的类，在它内部维护了一个GreenPool对象和一个Queue对象。这个GreenPool对象可以是从外部传递进来的，也可以是在类内部创建的，GreenPool对象主要是用来创建绿色线程的，即在GreenPile内部调用了GreenPool.spawn()方法。而Queue对象则是用来保存spawn()方法的返回值的，即Queue中保存的是GreenThread对象。并且它还实现了next()方法，也就意味着GreenPile对象具有了迭代器的性质。所以如果我们要对绿色线程的返回值进行操作的话，用这个类是再好不过的了。\n``` Python\n    4）eventlet.Queue\n```\n说到队列就不得不画个类图了，基类是LightQueue，它实现了大部分的队列的常用方法。它是用collections做为实现队列的基本数据结构的。而且这个LightQueue的实现，不单单实现了存取操作，我觉得在本质上它实现了一个生产者和消费者问题，定义了两个set()类型的成员变量putters和getters，前者用来存放在队列满时，被阻塞的绿色线程，后者用来存放当队列空时，被阻塞的绿色线程。类中的putting()和getting()方法就是分别得到被阻塞的绿色线程的数量。\nQueue继承了LightQueue，并且又增加了它自己的两个方法：task_done()和join()。task_done()是被消费者的绿色线程所调用的，表示在这个项上的所有工作都做完了，join()是阻塞，直到队列中所有的任务都完成。LifoQueue和PriorityQueue是存放数据的两种不同的方式。\n![这里写图片描述](http://my.csdn.net/uploads/201208/07/1344276770_7117.png)\n\n####3. Network Convenience Functions（和网络相关的函数）\n这些函数定义在convenience.py文件中，对和socket相关的网络通信进行了包装，注意，这里用的socket是经过修改后的socket，以使它使用绿色线程，主要有以下一个函数：\n``` Python\n      1）connect(addr, family=socket.AF_INET, bind=None)\n```\n主要执行了以下几个步骤：新建了一个TCP类型的socket，绑定本地的ip和端口，和远程的地址进行连接，源码如下：\n\n``` Python\ndef connect(addr, family=socket.AF_INET, bind=None):  \n    sock = socket.socket(family, socket.SOCK_STREAM)  \n    if bind is not None:  \n        sock.bind(bind)  \n    sock.connect(addr)  \n    return sock\n```\n``` Python\n\t 2）listen(addr, family=socket.AF_INET, backlog=50)\n```\n过程和connect()类似，只是把connect()换成了listen()，backlog指定了最大的连接数量，源码如下：\n\n``` Python\ndef listen(addr, family=socket.AF_INET, backlog=50):  \n    sock = socket.socket(family, socket.SOCK_STREAM)  \n    if sys.platform[:3]==\"win\":  \n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) \n    sock.bind(addr)  \n    sock.listen(backlog)  \n    return sock  \n```\n``` Python\n\t 3）serve(sock, handle, concurrency=1000)\n```\n这个函数直接创建了一个socket服务器，在它内部创建了一个GreenPool对象，默认的最大绿色线程数是1000，然后是一个循环来接受连接，源码如下：\n\n``` Python\ndef serve(sock, handle, concurrency=1000):  \n    pool = greenpool.GreenPool(concurrency)  \n    server_gt = greenthread.getcurrent()  \n   \n    while True:  \n        try:  \n            conn, addr = sock.accept()  \n            gt = pool.spawn(handle, conn, addr)  \n            gt.link(_stop_checker, server_gt, conn)  \n            conn, addr, gt = None, None, None  \n        except StopServe:  \n            return  \n```\n\n``` Python\n 4）wrap_ssl(sock, *a, **kw)\n```\n 给socket加上ssl(安全套接层)，对数据进行加密。\n 还有几个比较重要的API这里就不罗列了，等以后用到了再进行分析吧，下面看几个官方的例子：\n####4. Use Case\n（1）官方上引以为傲的“网页爬虫”，用到了绿色线程池和imap()函数\n\n``` Python\nurls = [\"http://www.google.com/intl/en_ALL/images/logo.gif\",  \n     \"https://wiki.secondlife.com/w/images/secondlife.jpg\",  \n     \"http://us.i1.yimg.com/us.yimg.com/i/ww/beta/y3.gif\"]  \n  \nimport eventlet  \nfrom eventlet.green import urllib2    \n  \ndef fetch(url):  \n  print \"opening\", url  \n  body = urllib2.urlopen(url).read()  \n  print \"done with\", url  \n  return url, body  \n  \npool = eventlet.GreenPool(200)  \nfor url, body in pool.imap(fetch, urls):  \n  print \"got body from\", url, \"of length\", len(body)  \n```\n（2）socket服务器\n\n``` Python\nimport eventlet  \n  \ndef handle(fd):  \n    print \"client connected\"  \n    while True:  \n        # pass through every non-eof line  \n        x = fd.readline()  \n        if not x: break  \n        fd.write(x)  \n        fd.flush()  \n        print \"echoed\", x,  \n    print \"client disconnected\"  \n  \nprint \"server socket listening on port 6000\"  \nserver = eventlet.listen((\u00270.0.0.0\u0027, 6000))  \npool = eventlet.GreenPool()  \nwhile True:  \n    try:  \n        new_sock, address = server.accept()  \n        print \"accepted\", address  \n        pool.spawn_n(handle, new_sock.makefile(\u0027rw\u0027))  \n    except (SystemExit, KeyboardInterrupt):  \n        break  \n```\n（3）使用GreenPile的例子\n\n```\nimport eventlet  \nfrom eventlet.green import socket  \n  \ndef geturl(url):  \n    c = socket.socket()  \n    ip = socket.gethostbyname(url)  \n    c.connect((ip, 80))  \n    print \u0027%s connected\u0027 % url  \n    c.sendall(\u0027GET /\\r\\n\\r\\n\u0027)  \n    return c.recv(1024)  \n  \nurls = [\u0027www.google.com\u0027, \u0027www.yandex.ru\u0027, \u0027www.python.org\u0027]  \npile = eventlet.GreenPile()  \nfor x in urls:  \n    pile.spawn(geturl, x)  \n  \n# note that the pile acts as a collection of return values from the functions  \n# if any exceptions are raised by the function they\u0027ll get raised here  \nfor url, result in zip(urls, pile):  \n    print \u0027%s: %s\u0027 % (url, repr(result)[:50])  \n```\n参考资料：\nhttp://eventlet.net/doc/index.html\nhttp://blog.csdn.net/hackerain/article/details/7836993\nhttp://mp.weixin.qq.com/s?__biz=MzAwNDAxOTM5Mw==&mid=508479846&idx=5&sn=ee86e3914c01bf290b6da1a61b96e343&chksm=00882cc837ffa5de480c3b7674832d182562bf35e78eac9eb8094c5001093efd20bbfb631126&mpshare=1&scene=23&srcid=0712c6k1wJ1QCYISc3m4m8FP#rd\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-25] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":74858141,"title":"【OpenVswitch源码分析之六】内核空间转发面数据结构与流程","create_at":"\/Date(1499593934000)\/","create":"2017-07-09 05:52:14","view_count":82,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"内核态的报文处理起始有不少人已经写了比较详细的分析，这里有SDNLAB的一篇文章（http://www.sdnlab.com/15713.html），这里只是对那些文章再做些总结；内核对报文的处理整体上分为三个大的步骤：\n报文头的提取\n流表项的匹配\n动作的执行 \n对于报文头的提取，与传统的路由器、交换机不同，OpenFlow的匹配域包含了L2-L4等匹配域。所以其设计了一个数据结构sw_flow_k","url":"http://blog.csdn.net/BLACKMOON88/article/details/74858141","categories":"云计算,C语言算法,OpenVswitch","tags":"数据结构,内核,源码,交换机","content":"\u003cp\u003e内核态的报文处理起始有不少人已经写了比较详细的分析，这里有SDNLAB的一篇文章（\u003ca href=\"http://www.sdnlab.com/15713.html\"\u003ehttp://www.sdnlab.com/15713.html\u003c/a\u003e），这里只是对那些文章再做些总结；内核对报文的处理整体上分为三个大的步骤：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e报文头的提取\u003c/li\u003e\n\u003cli\u003e流表项的匹配\u003c/li\u003e\n\u003cli\u003e动作的执行\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e对于报文头的提取，与传统的路由器、交换机不同，OpenFlow的匹配域包含了L2-L4等匹配域。所以其设计了一个数据结构sw_flow_key来做提取 \u003cbr\u003e\n \u003cimg src=\"http://img1.sdnlab.com/wp-content/uploads/2014/11/Open-vSwitch%E7%9A%84%E6%95%B4%E4%B8%AA%E6%A1%86%E6%9E%B6%E5%9B%BE.png\" alt=\"OVS Datapeth数据结构\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs d\"\u003e\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e sw_flow_key {\n    u8 tun_opts[\u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e];\n    u8 tun_opts_len;\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e ip_tunnel_key tun_key;  \u003cspan class=\"hljs-comment\"\u003e/* Encapsulating tunnel key. */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n        u32 priority;   \u003cspan class=\"hljs-comment\"\u003e/* Packet QoS priority. */\u003c/span\u003e\n        u32 skb_mark;   \u003cspan class=\"hljs-comment\"\u003e/* SKB mark. */\u003c/span\u003e\n        u16 in_port;    \u003cspan class=\"hljs-comment\"\u003e/* Input switch port (or DP_MAX_PORTS). */\u003c/span\u003e\n    } __packed phy; \u003cspan class=\"hljs-comment\"\u003e/* Safe when right after \u0027tun_key\u0027. */\u003c/span\u003e\n    u8 tun_proto;                   \u003cspan class=\"hljs-comment\"\u003e/* Protocol of encapsulating tunnel. */\u003c/span\u003e\n    u32 ovs_flow_hash;      \u003cspan class=\"hljs-comment\"\u003e/* Datapath computed hash value.  */\u003c/span\u003e\n    u32 recirc_id;          \u003cspan class=\"hljs-comment\"\u003e/* Recirculation ID.  */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n        u8     src[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* Ethernet source address. */\u003c/span\u003e\n        u8     dst[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* Ethernet destination address. */\u003c/span\u003e\n        __be16 tci;     \u003cspan class=\"hljs-comment\"\u003e/* 0 if no VLAN, VLAN_TAG_PRESENT set otherwise. */\u003c/span\u003e\n        __be16 type;        \u003cspan class=\"hljs-comment\"\u003e/* Ethernet frame type. */\u003c/span\u003e\n    } eth;\n    \u003cspan class=\"hljs-keyword\"\u003eunion\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n            __be32 top_lse; \u003cspan class=\"hljs-comment\"\u003e/* top label stack entry */\u003c/span\u003e\n        } mpls;\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n            u8     proto;   \u003cspan class=\"hljs-comment\"\u003e/* IP protocol or lower 8 bits of ARP opcode. */\u003c/span\u003e\n            u8     tos;     \u003cspan class=\"hljs-comment\"\u003e/* IP ToS. */\u003c/span\u003e\n            u8     ttl;     \u003cspan class=\"hljs-comment\"\u003e/* IP TTL/hop limit. */\u003c/span\u003e\n            u8     frag;    \u003cspan class=\"hljs-comment\"\u003e/* One of OVS_FRAG_TYPE_*. */\u003c/span\u003e\n        } ip;\n    };\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n        __be16 src;     \u003cspan class=\"hljs-comment\"\u003e/* TCP/UDP/SCTP source port. */\u003c/span\u003e\n        __be16 dst;     \u003cspan class=\"hljs-comment\"\u003e/* TCP/UDP/SCTP destination port. */\u003c/span\u003e\n        __be16 flags;       \u003cspan class=\"hljs-comment\"\u003e/* TCP flags. */\u003c/span\u003e\n    } tp;\n    \u003cspan class=\"hljs-keyword\"\u003eunion\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n            \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n                __be32 src; \u003cspan class=\"hljs-comment\"\u003e/* IP source address. */\u003c/span\u003e\n                __be32 dst; \u003cspan class=\"hljs-comment\"\u003e/* IP destination address. */\u003c/span\u003e\n            } addr;\n            \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n                u8 sha[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* ARP source hardware address. */\u003c/span\u003e\n                u8 tha[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* ARP target hardware address. */\u003c/span\u003e\n            } arp;\n        } ipv4;\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n            \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n                \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr src;    \u003cspan class=\"hljs-comment\"\u003e/* IPv6 source address. */\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr dst;    \u003cspan class=\"hljs-comment\"\u003e/* IPv6 destination address. */\u003c/span\u003e\n            } addr;\n            __be32 label;           \u003cspan class=\"hljs-comment\"\u003e/* IPv6 flow label. */\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n                \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr target; \u003cspan class=\"hljs-comment\"\u003e/* ND target address. */\u003c/span\u003e\n                u8 sll[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* ND source link layer address. */\u003c/span\u003e\n                u8 tll[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* ND target link layer address. */\u003c/span\u003e\n            } nd;\n        } ipv6;\n    };\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n        \u003cspan class=\"hljs-comment\"\u003e/* Connection tracking fields. */\u003c/span\u003e\n        u16 zone;\n        u32 mark;\n        u8 state;\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e ovs_key_ct_labels labels;\n    } ct;\n\n} __aligned(BITS_PER_LONG/\u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e/* Ensure that we can do comparisons as longs. */\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs applescript\"\u003estruct sw_flow {\n    struct rcu_head rcu;\n    struct {\n        struct hlist_node node[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\n        u32 hash;\n    } flow_table, ufid_table;\n    int stats_last_writer;      /* NUMA-node \u003cspan class=\"hljs-property\"\u003eid\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elast\u003c/span\u003e writer \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e\n                     * \u0027stats[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\u0027.\n                     */\n    struct sw_flow_key key;\n    struct sw_flow_id \u003cspan class=\"hljs-property\"\u003eid\u003c/span\u003e;\n    struct sw_flow_mask *mask;\n    struct sw_flow_actions __rcu *sf_acts;\n    struct flow_stats __rcu *stats[]; /* One \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e each NUMA node.  First one\n                       * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e allocated \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e flow creation \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e,\n                       * \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-property\"\u003erest\u003c/span\u003e are allocated \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e demand\n                       * \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e holding \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u0027stats[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].lock\u0027.\n                       */\n};\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e相关数据结构的关系及详细内容都在上面有表述，下面讲讲具体的工作步骤：\u003c/p\u003e\n\n\u003cp\u003e第一步，它会根据网桥上的流表结构体（table）中的mask_list成员来遍历，这个mask_list成员是一条链表的头结点，这条链表是由mask元素链接组成（里面的list是没有数据的链表结构，作用就是负责链接多个mask结构，是mask的成员）；流表查询函数开始就是循环遍历这条链表，每遍历到得到一个mask结构体，就调用函数进入第二步。\u003c/p\u003e\n\n\u003cp\u003e第二步，是操作key值，调用函数让从数据包提取到的key值和第一步得到的mask中的key值，进行与操作，然后把结构存放到另外一个key值中（masked_key）。顺序执行第三步。\u003c/p\u003e\n\n\u003cp\u003e第三步，把第二步中得到的那个与操作后的key值（masked_key），传入 jhash2()算法函数中，该算法是经典的哈希算法，想深入了解可以自己查资料（不过都是些数学推理，感觉挺难的），linux内核中也多处使用到了这个算法函数。通过这个函数把key值（masked_key）转换成hash关键字。\u003c/p\u003e\n\n\u003cp\u003e第四步，把第三步得到的hash值，传入 find_bucket()函数中，在该函数中再通过jhash_1word()算法函数，把hash关键字再次哈希得到一个全新的hash关键字。这个函数和第三步的哈希算法函数类似，只是参数不同，多了一个word。经过两个哈希算法函数的计算得到一个新的hash值。\u003c/p\u003e\n\n\u003cp\u003e第五步，把第四步得到的hash关键字，传入到flex_array_get()函数中，这个函数的作用就是找到对应的哈希头位置。具体的请看上面的图，流表结构（table）中有个buckets成员，该成员称作为哈希桶，哈希桶里面存放的是成员字段和弹性数组parts[n]，而这个parts[n]数组里面存放的就是所要找的哈希头指针，这个哈希头指针指向了一个流表项链表（在图中的最下面struct sw_flow），所以这个才是我们等下要匹配的流表项。（这个哈希桶到弹性数组这一段，我有点疑问，不是很清楚，在下一篇blog中会分析下这个疑问，大家看到如果和源代码有出入，请按源代码来分析），这一步就是根据hash关键字查找到流表项的链表头指针。\u003c/p\u003e\n\n\u003cp\u003e第六步，由第五步得到的流表项链表头指针，根据这个指针遍历整个流表项节点元素（就是struct sw_flow结构体元素），每遍历得到一个流表项sw_flow结构体元素，就把流表项中的mask成员和第一步遍历得到的mask变量（忘记了可以重新回到第一步去看下）进行比较；比较完后还要让流表项sw_flow结构体元素中的key值成员和第二步中得到的key值（masked_key）进行比较；只有当上面两个比较都相等时，这个流表项才是我们要匹配查询的流表项了。然后直接返回该流表项的地址。如果找到了，很好说明用户态的流表已经放入内核，则走fast path就可了。于是直接调用ovs_execute_actions，执行这个key对应的action。\u003c/p\u003e\n\n\u003cp\u003e如果不能找到，则只好调用ovs_dp_upcall，让用户态去查找流表。会调用static int queue_userspace_packet(struct datapath *dp, struct sk_buff *skb, const struct sw_flow_key *key, const struct dp_upcall_info *upcall_info)\u003c/p\u003e\n\n\u003cp\u003e它会调用err = genlmsg_unicast(ovs_dp_get_net(dp), user_skb, upcall_info-&gt;portid);通过netlink将消息发送给用户态。在用户态，有线程监听消息，一旦有消息，则触发udpif_upcall_handler。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://images2015.cnblogs.com/blog/635909/201609/635909-20160913232546570-59130550.png\" alt=\"OVS Fast Path和Slow Path\" title=\"\"\u003e\u003c/p\u003e","markdowncontent":"内核态的报文处理起始有不少人已经写了比较详细的分析，这里有SDNLAB的一篇文章（http://www.sdnlab.com/15713.html），这里只是对那些文章再做些总结；内核对报文的处理整体上分为三个大的步骤：\n\n - 报文头的提取\n - 流表项的匹配\n - 动作的执行\n \n对于报文头的提取，与传统的路由器、交换机不同，OpenFlow的匹配域包含了L2-L4等匹配域。所以其设计了一个数据结构sw_flow_key来做提取\n ![OVS Datapeth数据结构](http://img1.sdnlab.com/wp-content/uploads/2014/11/Open-vSwitch%E7%9A%84%E6%95%B4%E4%B8%AA%E6%A1%86%E6%9E%B6%E5%9B%BE.png)\n\n```\nstruct sw_flow_key {\n\tu8 tun_opts[255];\n\tu8 tun_opts_len;\n\tstruct ip_tunnel_key tun_key;  /* Encapsulating tunnel key. */\n\tstruct {\n\t\tu32\tpriority;\t/* Packet QoS priority. */\n\t\tu32\tskb_mark;\t/* SKB mark. */\n\t\tu16\tin_port;\t/* Input switch port (or DP_MAX_PORTS). */\n\t} __packed phy; /* Safe when right after \u0027tun_key\u0027. */\n\tu8 tun_proto;                   /* Protocol of encapsulating tunnel. */\n\tu32 ovs_flow_hash;\t\t/* Datapath computed hash value.  */\n\tu32 recirc_id;\t\t\t/* Recirculation ID.  */\n\tstruct {\n\t\tu8     src[ETH_ALEN];\t/* Ethernet source address. */\n\t\tu8     dst[ETH_ALEN];\t/* Ethernet destination address. */\n\t\t__be16 tci;\t\t/* 0 if no VLAN, VLAN_TAG_PRESENT set otherwise. */\n\t\t__be16 type;\t\t/* Ethernet frame type. */\n\t} eth;\n\tunion {\n\t\tstruct {\n\t\t\t__be32 top_lse;\t/* top label stack entry */\n\t\t} mpls;\n\t\tstruct {\n\t\t\tu8     proto;\t/* IP protocol or lower 8 bits of ARP opcode. */\n\t\t\tu8     tos;\t    /* IP ToS. */\n\t\t\tu8     ttl;\t    /* IP TTL/hop limit. */\n\t\t\tu8     frag;\t/* One of OVS_FRAG_TYPE_*. */\n\t\t} ip;\n\t};\n\tstruct {\n\t\t__be16 src;\t\t/* TCP/UDP/SCTP source port. */\n\t\t__be16 dst;\t\t/* TCP/UDP/SCTP destination port. */\n\t\t__be16 flags;\t\t/* TCP flags. */\n\t} tp;\n\tunion {\n\t\tstruct {\n\t\t\tstruct {\n\t\t\t\t__be32 src;\t/* IP source address. */\n\t\t\t\t__be32 dst;\t/* IP destination address. */\n\t\t\t} addr;\n\t\t\tstruct {\n\t\t\t\tu8 sha[ETH_ALEN];\t/* ARP source hardware address. */\n\t\t\t\tu8 tha[ETH_ALEN];\t/* ARP target hardware address. */\n\t\t\t} arp;\n\t\t} ipv4;\n\t\tstruct {\n\t\t\tstruct {\n\t\t\t\tstruct in6_addr src;\t/* IPv6 source address. */\n\t\t\t\tstruct in6_addr dst;\t/* IPv6 destination address. */\n\t\t\t} addr;\n\t\t\t__be32 label;\t\t\t/* IPv6 flow label. */\n\t\t\tstruct {\n\t\t\t\tstruct in6_addr target;\t/* ND target address. */\n\t\t\t\tu8 sll[ETH_ALEN];\t/* ND source link layer address. */\n\t\t\t\tu8 tll[ETH_ALEN];\t/* ND target link layer address. */\n\t\t\t} nd;\n\t\t} ipv6;\n\t};\n\tstruct {\n\t\t/* Connection tracking fields. */\n\t\tu16 zone;\n\t\tu32 mark;\n\t\tu8 state;\n\t\tstruct ovs_key_ct_labels labels;\n\t} ct;\n\n} __aligned(BITS_PER_LONG/8); /* Ensure that we can do comparisons as longs. */\n```\n\n```\nstruct sw_flow {\n\tstruct rcu_head rcu;\n\tstruct {\n\t\tstruct hlist_node node[2];\n\t\tu32 hash;\n\t} flow_table, ufid_table;\n\tint stats_last_writer;\t\t/* NUMA-node id of the last writer on\n\t\t\t\t\t * \u0027stats[0]\u0027.\n\t\t\t\t\t */\n\tstruct sw_flow_key key;\n\tstruct sw_flow_id id;\n\tstruct sw_flow_mask *mask;\n\tstruct sw_flow_actions __rcu *sf_acts;\n\tstruct flow_stats __rcu *stats[]; /* One for each NUMA node.  First one\n\t\t\t\t\t   * is allocated at flow creation time,\n\t\t\t\t\t   * the rest are allocated on demand\n\t\t\t\t\t   * while holding the \u0027stats[0].lock\u0027.\n\t\t\t\t\t   */\n};\n```\n相关数据结构的关系及详细内容都在上面有表述，下面讲讲具体的工作步骤：\n\n第一步，它会根据网桥上的流表结构体（table）中的mask_list成员来遍历，这个mask_list成员是一条链表的头结点，这条链表是由mask元素链接组成（里面的list是没有数据的链表结构，作用就是负责链接多个mask结构，是mask的成员）；流表查询函数开始就是循环遍历这条链表，每遍历到得到一个mask结构体，就调用函数进入第二步。\n\n第二步，是操作key值，调用函数让从数据包提取到的key值和第一步得到的mask中的key值，进行与操作，然后把结构存放到另外一个key值中（masked_key）。顺序执行第三步。\n\n第三步，把第二步中得到的那个与操作后的key值（masked_key），传入 jhash2()算法函数中，该算法是经典的哈希算法，想深入了解可以自己查资料（不过都是些数学推理，感觉挺难的），linux内核中也多处使用到了这个算法函数。通过这个函数把key值（masked_key）转换成hash关键字。\n\n第四步，把第三步得到的hash值，传入 find_bucket()函数中，在该函数中再通过jhash_1word()算法函数，把hash关键字再次哈希得到一个全新的hash关键字。这个函数和第三步的哈希算法函数类似，只是参数不同，多了一个word。经过两个哈希算法函数的计算得到一个新的hash值。\n\n第五步，把第四步得到的hash关键字，传入到flex_array_get()函数中，这个函数的作用就是找到对应的哈希头位置。具体的请看上面的图，流表结构（table）中有个buckets成员，该成员称作为哈希桶，哈希桶里面存放的是成员字段和弹性数组parts[n]，而这个parts[n]数组里面存放的就是所要找的哈希头指针，这个哈希头指针指向了一个流表项链表（在图中的最下面struct sw_flow），所以这个才是我们等下要匹配的流表项。（这个哈希桶到弹性数组这一段，我有点疑问，不是很清楚，在下一篇blog中会分析下这个疑问，大家看到如果和源代码有出入，请按源代码来分析），这一步就是根据hash关键字查找到流表项的链表头指针。\n\n第六步，由第五步得到的流表项链表头指针，根据这个指针遍历整个流表项节点元素（就是struct sw_flow结构体元素），每遍历得到一个流表项sw_flow结构体元素，就把流表项中的mask成员和第一步遍历得到的mask变量（忘记了可以重新回到第一步去看下）进行比较；比较完后还要让流表项sw_flow结构体元素中的key值成员和第二步中得到的key值（masked_key）进行比较；只有当上面两个比较都相等时，这个流表项才是我们要匹配查询的流表项了。然后直接返回该流表项的地址。如果找到了，很好说明用户态的流表已经放入内核，则走fast path就可了。于是直接调用ovs_execute_actions，执行这个key对应的action。\n\n如果不能找到，则只好调用ovs_dp_upcall，让用户态去查找流表。会调用static int queue_userspace_packet(struct datapath *dp, struct sk_buff *skb, const struct sw_flow_key *key, const struct dp_upcall_info *upcall_info)\n\n它会调用err = genlmsg_unicast(ovs_dp_get_net(dp), user_skb, upcall_info-\u003eportid);通过netlink将消息发送给用户态。在用户态，有线程监听消息，一旦有消息，则触发udpif_upcall_handler。\n\n![OVS Fast Path和Slow Path](http://images2015.cnblogs.com/blog/635909/201609/635909-20160913232546570-59130550.png)","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-18] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75267742 [pool-2-thread-21] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之五】Nova API 的插件管理》成功 [pool-2-thread-17] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75790969 [pool-2-thread-4] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-06\2017-06-14-对Python协程的理解.markdown [pool-2-thread-25] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-09-【OpenVswitch源码分析之六】内核空间转发面数据结构与流程.markdown [pool-2-thread-18] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74937873 [pool-2-thread-13] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":74937873,"title":"【OpenStack源码分析之一】初探OpenStack","create_at":"\/Date(1499863923000)\/","create":"2017-07-12 08:52:03","view_count":170,"comment_count":1,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"打算开始写一个Openstack的分析系列，其实接触Openstack也比较久了，但是一直没有深入了解，而且因为本人对Python知之甚少，用之甚少，所以想研究Openstack的代码上手就会比较困难，再加上代码量也比较大。 \n不过还是打算下定决心做一个系列的分析，不会全部看，大概只看NOVA和Neutron两个模块，而且按照我的认知习惯，还是先要了解全局再去深入细节，所以头几篇分析都会集中在Wha","url":"http://blog.csdn.net/BLACKMOON88/article/details/74937873","categories":"云计算,OpenStack,Python相关","tags":"openstack,nova,python","content":"\u003cp\u003e打算开始写一个Openstack的分析系列，其实接触Openstack也比较久了，但是一直没有深入了解，而且因为本人对Python知之甚少，用之甚少，所以想研究Openstack的代码上手就会比较困难，再加上代码量也比较大。 \u003cbr\u003e\n不过还是打算下定决心做一个系列的分析，不会全部看，大概只看NOVA和Neutron两个模块，而且按照我的认知习惯，还是先要了解全局再去深入细节，所以头几篇分析都会集中在What， Why以及How上来看，重点是怎么用，解决方案是什么。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"what-is-openstack\"\u003eWhat is OpenStack\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img1.51cto.com/attachment/201208/090301988.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n在Openstack的官方网站上对这一点说的非常简单，而且非常好，我先把原文附上：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-C++ hljs livecodeserver\"\u003eOpenStack is \u003cspan class=\"hljs-operator\"\u003ea\u003c/span\u003e cloud operating \u003cspan class=\"hljs-keyword\"\u003esystem\u003c/span\u003e that controls large pools \u003cspan class=\"hljs-operator\"\u003eof\u003c/span\u003e compute, storage,\n\u003cspan class=\"hljs-operator\"\u003eand\u003c/span\u003e networking resources throughout \u003cspan class=\"hljs-operator\"\u003ea\u003c/span\u003e datacenter, all managed through \u003cspan class=\"hljs-operator\"\u003ea\u003c/span\u003e dashboard\nthat gives administrators control \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e empowering their users \u003cspan class=\"hljs-built_in\"\u003eto\u003c/span\u003e provision\nresources through \u003cspan class=\"hljs-operator\"\u003ea\u003c/span\u003e web interface.\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e说Openstack是一个云操作系统，这里我们不免要和Linux做对比，同样作为操作系统，Linux需要做如下几件事情：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e资源管理：这里的资源包括CPU，网卡，显卡，内存，硬盘等\u003c/li\u003e\n\u003cli\u003e进程管理：本质上就是任务的调度，在合适的时间分配合适的资源来执行任务\u003c/li\u003e\n\u003cli\u003e存储管理：包括文件系统，内存管理等\u003c/li\u003e\n\u003cli\u003e网络通讯：包括主机协议栈的实现以及虚拟设备的支持\u003c/li\u003e\n\u003cli\u003e安全问题 …\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e其实从以上几点我们已经看出同为操作系统，大家都大同小异，都要解决资源的抽象和管理问题，资源的分配和调度问题，和用户的人机交互问题，应用的生命周期管理问题，以及系统的管理维护问题。 不同点在于，OpenStack需要管理更多的资源，它管理的CPU已经不仅仅局限于一台服务器内部的CPU而是整个数据中心的资源；另外作为云服务，很重要的一点就是业务上要支持多租户，虽然Linux是支持多核，多任务的操作系统，可以在一定程度上支持资源隔离。但是在云操作系统这个层面才是真正实现多租户的业务场景。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"openstack能做什么\"\u003eOpenStack能做什么\u003c/h3\u003e\n\n\u003cp\u003eOpenStack当前在私有云的解决方案更多，基于OpenStack做公有云的还比较少，而且近些年用OpenStack做公有云的公司有越来越多的撤出的趋势，另外是托管云，像Rackspace等传统IDC厂商开始提供此类服务，12%的受访者通过合约委托服务供应商托管专属的OpenStack部署，借此帮助客户省略繁琐的管理问题。其实还有一个大的市场没有没计入，这就是电信云，随着近些年NFV的兴起，电信运营商也开始大规模投入希望完成网络业务云化转型。这里面以AT&amp;T, 中国移动为首。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170712205054699?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOpenStack在整个云解决方案中是一个什么样的角色呢？OpenStack在云平台这个大的系统里面也只是一个部件，这个部件的定位就是前面所说的操作系统，以OpenStack为框架，将计算、存储、网络、管理、运营、运维等多个领域的软硬件产品组件整合在一起，共同组成面向业务场景的整体解决方案。OpenStack优先关注控制面：OpenStack优先考虑如何将计算、存储、网络领域的各类资源抽象为资源池。在此基础上，对资源池内的各类逻辑对象实施控制操作，并将控制操作包装成服务。数据面、运维面、管理面目前不是OpenStack的重点关注内容。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20170712205117272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e鉴于OpenStack的定位，OpenStack社区的核心项目主要都是提供IAAS的服务，也有提供PAAS服务和SAAS服务的项目，但是应用度并不广。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"openstack的设计思想\"\u003eOpenStack的设计思想\u003c/h3\u003e\n\n\u003cp\u003eOpenStack在设计初期就是对标AWS，很多项目在AWS上都能找到对应的模块，但是在设计思想上其秉承着开放，灵活，可扩展的原则。 \u003cbr\u003e\n开放性\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e源代码开放，设计与开发流程开放\u003c/li\u003e\n\u003cli\u003e“不重复发明轮子”，“站在巨人的肩膀上”，大量使用其他开源软件\u003c/li\u003e\n\u003cli\u003e不使用任何不可替代的商业产品\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e灵活\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e架构可裁减，可以根据实际需要决定选取的组件范围\u003c/li\u003e\n\u003cli\u003e大量采用驱动与插件机制\u003c/li\u003e\n\u003cli\u003e通过配置项控制对系统功能特性进行便捷配置\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e可扩展\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e松耦合架构，组件间RESTful API通信，组件内消息总线通信\u003c/li\u003e\n\u003cli\u003e无中心架构，核心组件无中心节点，有效避免单点故障\u003c/li\u003e\n\u003cli\u003e无状态架构，各组件无本地持久化数据，所有持久化数据保存在数据库中\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"openstack的部署\"\u003eOpenStack的部署\u003c/h3\u003e\n\n\u003cp\u003e云计算的理念是在可以网络接入的地方像用水用电一样随时获取计算资源并且按需使用和付费。亚马逊AWS是公共云计算的先驱，一些云计算中重要的产品设计和基础概念可以说都是亚马逊引入的。这其中有两个非常重要的概念：地域（Region）和可用区（AZ：Available Zone）。很多第一次接触云计算的同学，光看这两个名字的字面意义，虽然也能够猜出大致的意思，但深入的学习了解云计算一段时间之后，才能深刻的体会这两个概念对于云计算的重要影响。包括国内的这些云计算服务商，也是过了很长时间才陆续在产品中引入可用区的设计的。\u003c/p\u003e\n\n\u003cp\u003e理想情况下，我们当然希望云计算能够彻底消除地域的影响，就像我们用电的时候不用关心发电厂在哪里一样。但现实显然没有那么美好，不同地域的机房之间的网络还做不到像电网一样透明。所以在云计算产品的最底层，首先需要考虑不同地域的影响。不同地域之间，一般只能通过公网连通，内部之间网络是不通的。当然，对于云计算服务商来说，为管理需要，一般还是会通过有限的带宽来连通不同地域的机房，用于云计算内部资源管理，以及一些特殊的产品场景，比如跨地域的镜像复制。但因为内部带宽有限，一般不会完全开放给用户使用。\u003c/p\u003e\n\n\u003cp\u003e所以，地域就是物理意义上的不同地方的机房，这个不同地方，一般来说距离较远，机房之间用光纤直连的成本较高。并且相对来说会在用户需求量较大的地方部署地域机房，比如阿里云的云服务器的地域在境内有杭州，上海，北京，深圳，青岛，海外已经上线的包括香港、硅谷和新加坡。实际上阿里云一开始是没有上海地域的，因为上海杭州距离较近，部署直连光纤的成本也相对可控，阿里内部之前很多应用都是分别部署在杭州和上海，基本上是当作一个地域来使用的，后来可能因为需求大而分开了。\u003c/p\u003e\n\n\u003cp\u003e所以，地域很好理解，就是物理上相隔较远的机房，因为跨地域的机房之间的带宽无法满足内网需求，所以不同地域的机器之间内网是不通的。当然，随着骨干网络等物理层基础设施的发展，未来跨地域内网连通并非完全不可能的事情。在这个过程中，公共云计算服务商也可能根据用户的诉求，在某些场景开放一些有限的内部网络带宽来做产品，比如，前面说的阿里云的跨地域镜像复制，以及最近推出来的OSS跨地域复制等。一般来说，在数据和存储领域内的产品会先行支持跨地域的功能，毕竟数据容灾是更强烈的需求。\u003c/p\u003e\n\n\u003cp\u003e那么，同一个地域之内又分成多个可用区，为什么要搞这么复杂？原因很简单，IT系统从远古时代就有同城容灾的需求，那使用云计算以后，怎么实现同城跨机房容灾呢？如果用户购买的云服务器无法区分在哪个机房，那么就无法在业务应用层面来设计同城容灾。所以云计算服务商提出了同地域内不同可用区的概念，简单点理解，可以认为就是同城不同机房，云计算服务商会从底层的机房电力/网络等层面仔细设计来保障一个可用区出现故障的时候不会影响到另外一个可用区，当然你要说杭州彻底被钱塘江潮淹没的情况，那可用区也救不了你，要在业务应用层面考虑通过不同的地域来设计异地容灾了。\u003c/p\u003e\n\n\u003cp\u003e所以，简单来说，可以将地域理解为不同城市的机房，将可用区理解为同一个城市的不同机房。当然，实际上不同可用区也可能是在同一个机房，可用区的概念严格来说是按照电力和网络设备等相互独立来设计的。同一个地域内的不同可用区之间，内网是连通的，但是网络的响应时间会有差异。下面是我用阿里云杭州地域做的一次ping的测试，来观察同地域不同可用区之间的网络情况。\u003c/p\u003e\n\n\u003cp\u003eOpenStack在AWS的基础上又引入了Cell 和 Host Aggregates Zone(HAZ) 两个概念，其中 Cell 是为了扩充一个 Region 下的集群的规模而引入的，Host Aggregates 是优化资源调度和利用引入的。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"region的部署\"\u003eRegion的部署\u003c/h4\u003e\n\n\u003cp\u003e顾名思义，Region 直译过来就是区域，地域的概念，而事实上，AWS 按地域(国家或者城市)设置一个 Region，每个 Region 下有多个 Availability Zone。Openstack 同样支持 Region 的概念，支持全球化部署，比如为了降低网络延时，用户可以选择特定的 Region 来部署服务。各个 Region 之间的计算资源、网络资源、存储资源都是独立的，但所有 Region 共享账户用户信息，因为 Keystone 是实现 openstack 租户用户管理和认证的功能的组件，所以 Keystone 全局唯一，所有 Region 共享一个 Keystone，Keystone endpoint 中存储了访问各个 Region 的 URL。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20141214144520137\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"cell的部署\"\u003eCell的部署\u003c/h4\u003e\n\n\u003cp\u003eCell 概念的引入，是为了扩充单个 Region 下的集群规模，主要解决 AMQP 和 Database 的性能瓶颈，每个 Region 下的 openstack 集群都有自己的消息中间件和数据库，当计算节点达到一定规模(和IBM，easystack，华为等交流的数据是300~500)，消息中间件就成为了扩展计算节点的性能瓶颈。Cell 的引入就是为了解决单个 Region 的规模问题，每个 Region 下可以有多个 Cell，每个 Cell 维护自己的数据库和消息中间件，所有 Cell 共享本 Region 下的 nova-api，共享全局唯一的 Keystone。\u003c/p\u003e\n\n\u003cp\u003e官网手册提到 Cell 不成熟（Considered experimental），巴黎峰会也提到 Cell 的痛点，虽然现在已进入 K 版本迭代开发中了，但是本人还未听说业界成熟使用 Cell 的案例。关于 Cell 更详细的介绍，请参考以下链接 \u003cbr\u003e\n\u003ca href=\"http://www.ibm.com/developerworks/cn/cloud/library/1409_zhaojian_openstacknovacell/index.html\" target=\"_blank\"\u003ehttp://www.ibm.com/developerworks/cn/cloud/library/1409_zhaojian_openstacknovacell/index.html\u003c/a\u003e \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20141214144524318\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"availability-zone-host-aggregates-zone\"\u003eAvailability Zone &amp; Host Aggregates Zone\u003c/h4\u003e\n\n\u003cp\u003e之所以把 AZ 和 HAZ 放到一同分析，是因为二者的概念实在类似。\u003c/p\u003e\n\n\u003cp\u003eAWS 每个 Region 下有多个 AZ。Openstack 也引入了 AZ 的概念，我个人理解 AZ 的引入是基于可靠性的角度考虑，比如我们定义一个机房为一个 AZ，把该机房所有计算节点纳入到一个 AZ 中，其中一个机房因为某种原因down 掉，不会影响其它机房的虚拟机和网络；同时， AZ 对用户来说是一个可见的概念，用户创建虚拟机时，可以明确指出在哪个 AZ，用户可以通过在多个 AZ 创建虚拟机来保证高可靠性。\u003c/p\u003e\n\n\u003cp\u003eHAZ 也是把一批具有共同属性的计算节点划分到同一个 Zone 中，HAZ 可以对 AZ 进一步细分，一个 AZ 可以有多个 HAZ。 同一个 HAZ 下的机器都具有某种共同的属性，比如高性能计算，高性能存储(SSD)，高性能网络(支持SRIOV等)。HAZ 和 AZ 另一个不同之处在于 HAZ 对用户不是明确可见的，用户在创建虚拟机时不能像指定 AZ 一样直接指定 HAZ，但是可以通过在 Instance Flavor 中设置相关属性，由 nova-scheduler 调度根据该调度策略调度到满足该属性的的 Host Aggregates Zones 中。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20141214144628406\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e那么，同一个地域之内又分成多个可用区，为什么要搞这么复杂？原因很简单，IT系统从远古时代就有同城容灾的需求，那使用云计算以后，怎么实现同城跨机房容灾呢？如果用户购买的云服务器无法区分在哪个机房，那么就无法在业务应用层面来设计同城容灾。所以云计算服务商提出了同地域内不同可用区的概念，简单点理解，可以认为就是同城不同机房，云计算服务商会从底层的机房电力/网络等层面仔细设计来保障一个可用区出现故障的时候不会影响到另外一个可用区，当然你要说杭州彻底被钱塘江潮淹没的情况，那可用区也救不了你，要在业务应用层面考虑通过不同的地域来设计异地容灾了。\u003c/p\u003e\n\n\u003cp\u003e所以，简单来说，可以将地域理解为不同城市的机房，将可用区理解为同一个城市的不同机房。当然，实际上不同可用区也可能是在同一个机房，可用区的概念严格来说是按照电力和网络设备等相互独立来设计的。同一个地域内的不同可用区之间，内网是连通的，但是网络的响应时间会有差异。在阿里云杭州地域做的一次ping的测试，来观察同地域不同可用区之间的网络情况，发现同可用区之间的内网是连通的，但响应时间比同一个可用区之内要慢1ms多。所以，在实际应用中，如果需要考虑同城容灾或者同城双活，需要尽量将应用和数据库分布部署在不同的可用区。如果对响应时间高度敏感，则建议部署在同一个可用区内。在购买云服务器和数据库的时候，要注意选择了。\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/u010305706/article/details/54406060\"\u003ehttp://blog.csdn.net/u010305706/article/details/54406060\u003c/a\u003e\u003c/p\u003e","markdowncontent":"打算开始写一个Openstack的分析系列，其实接触Openstack也比较久了，但是一直没有深入了解，而且因为本人对Python知之甚少，用之甚少，所以想研究Openstack的代码上手就会比较困难，再加上代码量也比较大。\n不过还是打算下定决心做一个系列的分析，不会全部看，大概只看NOVA和Neutron两个模块，而且按照我的认知习惯，还是先要了解全局再去深入细节，所以头几篇分析都会集中在What， Why以及How上来看，重点是怎么用，解决方案是什么。\n###What is OpenStack\n![这里写图片描述](http://img1.51cto.com/attachment/201208/090301988.png)\n在Openstack的官方网站上对这一点说的非常简单，而且非常好，我先把原文附上：\n\n``` C++\nOpenStack is a cloud operating system that controls large pools of compute, storage,\nand networking resources throughout a datacenter, all managed through a dashboard\nthat gives administrators control while empowering their users to provision\nresources through a web interface.\n```\n\n说Openstack是一个云操作系统，这里我们不免要和Linux做对比，同样作为操作系统，Linux需要做如下几件事情：\n\n - 资源管理：这里的资源包括CPU，网卡，显卡，内存，硬盘等\n - 进程管理：本质上就是任务的调度，在合适的时间分配合适的资源来执行任务\n - 存储管理：包括文件系统，内存管理等\n - 网络通讯：包括主机协议栈的实现以及虚拟设备的支持\n - 安全问题 ...\n\n其实从以上几点我们已经看出同为操作系统，大家都大同小异，都要解决资源的抽象和管理问题，资源的分配和调度问题，和用户的人机交互问题，应用的生命周期管理问题，以及系统的管理维护问题。 不同点在于，OpenStack需要管理更多的资源，它管理的CPU已经不仅仅局限于一台服务器内部的CPU而是整个数据中心的资源；另外作为云服务，很重要的一点就是业务上要支持多租户，虽然Linux是支持多核，多任务的操作系统，可以在一定程度上支持资源隔离。但是在云操作系统这个层面才是真正实现多租户的业务场景。\n###OpenStack能做什么\nOpenStack当前在私有云的解决方案更多，基于OpenStack做公有云的还比较少，而且近些年用OpenStack做公有云的公司有越来越多的撤出的趋势，另外是托管云，像Rackspace等传统IDC厂商开始提供此类服务，12%的受访者通过合约委托服务供应商托管专属的OpenStack部署，借此帮助客户省略繁琐的管理问题。其实还有一个大的市场没有没计入，这就是电信云，随着近些年NFV的兴起，电信运营商也开始大规模投入希望完成网络业务云化转型。这里面以AT&T, 中国移动为首。\n![这里写图片描述](http://img.blog.csdn.net/20170712205054699?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nOpenStack在整个云解决方案中是一个什么样的角色呢？OpenStack在云平台这个大的系统里面也只是一个部件，这个部件的定位就是前面所说的操作系统，以OpenStack为框架，将计算、存储、网络、管理、运营、运维等多个领域的软硬件产品组件整合在一起，共同组成面向业务场景的整体解决方案。OpenStack优先关注控制面：OpenStack优先考虑如何将计算、存储、网络领域的各类资源抽象为资源池。在此基础上，对资源池内的各类逻辑对象实施控制操作，并将控制操作包装成服务。数据面、运维面、管理面目前不是OpenStack的重点关注内容。\n\n![这里写图片描述](http://img.blog.csdn.net/20170712205117272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n鉴于OpenStack的定位，OpenStack社区的核心项目主要都是提供IAAS的服务，也有提供PAAS服务和SAAS服务的项目，但是应用度并不广。\n###OpenStack的设计思想\nOpenStack在设计初期就是对标AWS，很多项目在AWS上都能找到对应的模块，但是在设计思想上其秉承着开放，灵活，可扩展的原则。\n开放性\n \n - 源代码开放，设计与开发流程开放\n - “不重复发明轮子”，“站在巨人的肩膀上”，大量使用其他开源软件\n - 不使用任何不可替代的商业产品\n  \n灵活\n\n- 架构可裁减，可以根据实际需要决定选取的组件范围\n- 大量采用驱动与插件机制\n- 通过配置项控制对系统功能特性进行便捷配置\n\n可扩展\n\n- 松耦合架构，组件间RESTful API通信，组件内消息总线通信\n- 无中心架构，核心组件无中心节点，有效避免单点故障\n- 无状态架构，各组件无本地持久化数据，所有持久化数据保存在数据库中\n\n###OpenStack的部署\n云计算的理念是在可以网络接入的地方像用水用电一样随时获取计算资源并且按需使用和付费。亚马逊AWS是公共云计算的先驱，一些云计算中重要的产品设计和基础概念可以说都是亚马逊引入的。这其中有两个非常重要的概念：地域（Region）和可用区（AZ：Available Zone）。很多第一次接触云计算的同学，光看这两个名字的字面意义，虽然也能够猜出大致的意思，但深入的学习了解云计算一段时间之后，才能深刻的体会这两个概念对于云计算的重要影响。包括国内的这些云计算服务商，也是过了很长时间才陆续在产品中引入可用区的设计的。\n\n理想情况下，我们当然希望云计算能够彻底消除地域的影响，就像我们用电的时候不用关心发电厂在哪里一样。但现实显然没有那么美好，不同地域的机房之间的网络还做不到像电网一样透明。所以在云计算产品的最底层，首先需要考虑不同地域的影响。不同地域之间，一般只能通过公网连通，内部之间网络是不通的。当然，对于云计算服务商来说，为管理需要，一般还是会通过有限的带宽来连通不同地域的机房，用于云计算内部资源管理，以及一些特殊的产品场景，比如跨地域的镜像复制。但因为内部带宽有限，一般不会完全开放给用户使用。\n\n所以，地域就是物理意义上的不同地方的机房，这个不同地方，一般来说距离较远，机房之间用光纤直连的成本较高。并且相对来说会在用户需求量较大的地方部署地域机房，比如阿里云的云服务器的地域在境内有杭州，上海，北京，深圳，青岛，海外已经上线的包括香港、硅谷和新加坡。实际上阿里云一开始是没有上海地域的，因为上海杭州距离较近，部署直连光纤的成本也相对可控，阿里内部之前很多应用都是分别部署在杭州和上海，基本上是当作一个地域来使用的，后来可能因为需求大而分开了。\n\n所以，地域很好理解，就是物理上相隔较远的机房，因为跨地域的机房之间的带宽无法满足内网需求，所以不同地域的机器之间内网是不通的。当然，随着骨干网络等物理层基础设施的发展，未来跨地域内网连通并非完全不可能的事情。在这个过程中，公共云计算服务商也可能根据用户的诉求，在某些场景开放一些有限的内部网络带宽来做产品，比如，前面说的阿里云的跨地域镜像复制，以及最近推出来的OSS跨地域复制等。一般来说，在数据和存储领域内的产品会先行支持跨地域的功能，毕竟数据容灾是更强烈的需求。\n\n那么，同一个地域之内又分成多个可用区，为什么要搞这么复杂？原因很简单，IT系统从远古时代就有同城容灾的需求，那使用云计算以后，怎么实现同城跨机房容灾呢？如果用户购买的云服务器无法区分在哪个机房，那么就无法在业务应用层面来设计同城容灾。所以云计算服务商提出了同地域内不同可用区的概念，简单点理解，可以认为就是同城不同机房，云计算服务商会从底层的机房电力/网络等层面仔细设计来保障一个可用区出现故障的时候不会影响到另外一个可用区，当然你要说杭州彻底被钱塘江潮淹没的情况，那可用区也救不了你，要在业务应用层面考虑通过不同的地域来设计异地容灾了。\n\n所以，简单来说，可以将地域理解为不同城市的机房，将可用区理解为同一个城市的不同机房。当然，实际上不同可用区也可能是在同一个机房，可用区的概念严格来说是按照电力和网络设备等相互独立来设计的。同一个地域内的不同可用区之间，内网是连通的，但是网络的响应时间会有差异。下面是我用阿里云杭州地域做的一次ping的测试，来观察同地域不同可用区之间的网络情况。\n\nOpenStack在AWS的基础上又引入了Cell 和 Host Aggregates Zone(HAZ) 两个概念，其中 Cell 是为了扩充一个 Region 下的集群的规模而引入的，Host Aggregates 是优化资源调度和利用引入的。\n\n####Region的部署\n顾名思义，Region 直译过来就是区域，地域的概念，而事实上，AWS 按地域(国家或者城市)设置一个 Region，每个 Region 下有多个 Availability Zone。Openstack 同样支持 Region 的概念，支持全球化部署，比如为了降低网络延时，用户可以选择特定的 Region 来部署服务。各个 Region 之间的计算资源、网络资源、存储资源都是独立的，但所有 Region 共享账户用户信息，因为 Keystone 是实现 openstack 租户用户管理和认证的功能的组件，所以 Keystone 全局唯一，所有 Region 共享一个 Keystone，Keystone endpoint 中存储了访问各个 Region 的 URL。\n![这里写图片描述](http://img.blog.csdn.net/20141214144520137)\n\n####Cell的部署\nCell 概念的引入，是为了扩充单个 Region 下的集群规模，主要解决 AMQP 和 Database 的性能瓶颈，每个 Region 下的 openstack 集群都有自己的消息中间件和数据库，当计算节点达到一定规模(和IBM，easystack，华为等交流的数据是300~500)，消息中间件就成为了扩展计算节点的性能瓶颈。Cell 的引入就是为了解决单个 Region 的规模问题，每个 Region 下可以有多个 Cell，每个 Cell 维护自己的数据库和消息中间件，所有 Cell 共享本 Region 下的 nova-api，共享全局唯一的 Keystone。\n \n官网手册提到 Cell 不成熟（Considered experimental），巴黎峰会也提到 Cell 的痛点，虽然现在已进入 K 版本迭代开发中了，但是本人还未听说业界成熟使用 Cell 的案例。关于 Cell 更详细的介绍，请参考以下链接\nhttp://www.ibm.com/developerworks/cn/cloud/library/1409_zhaojian_openstacknovacell/index.html\n![这里写图片描述](http://img.blog.csdn.net/20141214144524318)\n\n####Availability Zone & Host Aggregates Zone\n之所以把 AZ 和 HAZ 放到一同分析，是因为二者的概念实在类似。\n\n AWS 每个 Region 下有多个 AZ。Openstack 也引入了 AZ 的概念，我个人理解 AZ 的引入是基于可靠性的角度考虑，比如我们定义一个机房为一个 AZ，把该机房所有计算节点纳入到一个 AZ 中，其中一个机房因为某种原因down 掉，不会影响其它机房的虚拟机和网络；同时， AZ 对用户来说是一个可见的概念，用户创建虚拟机时，可以明确指出在哪个 AZ，用户可以通过在多个 AZ 创建虚拟机来保证高可靠性。\n\n HAZ 也是把一批具有共同属性的计算节点划分到同一个 Zone 中，HAZ 可以对 AZ 进一步细分，一个 AZ 可以有多个 HAZ。 同一个 HAZ 下的机器都具有某种共同的属性，比如高性能计算，高性能存储(SSD)，高性能网络(支持SRIOV等)。HAZ 和 AZ 另一个不同之处在于 HAZ 对用户不是明确可见的，用户在创建虚拟机时不能像指定 AZ 一样直接指定 HAZ，但是可以通过在 Instance Flavor 中设置相关属性，由 nova-scheduler 调度根据该调度策略调度到满足该属性的的 Host Aggregates Zones 中。\n![这里写图片描述](http://img.blog.csdn.net/20141214144628406)\n\n那么，同一个地域之内又分成多个可用区，为什么要搞这么复杂？原因很简单，IT系统从远古时代就有同城容灾的需求，那使用云计算以后，怎么实现同城跨机房容灾呢？如果用户购买的云服务器无法区分在哪个机房，那么就无法在业务应用层面来设计同城容灾。所以云计算服务商提出了同地域内不同可用区的概念，简单点理解，可以认为就是同城不同机房，云计算服务商会从底层的机房电力/网络等层面仔细设计来保障一个可用区出现故障的时候不会影响到另外一个可用区，当然你要说杭州彻底被钱塘江潮淹没的情况，那可用区也救不了你，要在业务应用层面考虑通过不同的地域来设计异地容灾了。\n\n\n所以，简单来说，可以将地域理解为不同城市的机房，将可用区理解为同一个城市的不同机房。当然，实际上不同可用区也可能是在同一个机房，可用区的概念严格来说是按照电力和网络设备等相互独立来设计的。同一个地域内的不同可用区之间，内网是连通的，但是网络的响应时间会有差异。在阿里云杭州地域做的一次ping的测试，来观察同地域不同可用区之间的网络情况，发现同可用区之间的内网是连通的，但响应时间比同一个可用区之内要慢1ms多。所以，在实际应用中，如果需要考虑同城容灾或者同城双活，需要尽量将应用和数据库分布部署在不同的可用区。如果对响应时间高度敏感，则建议部署在同一个可用区内。在购买云服务器和数据库的时候，要注意选择了。\n\n参考文献：\nhttp://blog.csdn.net/u010305706/article/details/54406060","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-13] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《对Python协程的理解》成功 [pool-2-thread-25] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":75267742,"title":"【OpenStack源码分析之三】Nova-Compute启动流程分析","create_at":"\/Date(1500294668000)\/","create":"2017-07-17 08:31:08","view_count":99,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"Nova架构概览Nova是OpenStack社区最核心的项目，也是社区诞生之时就一直存在的项目，它主要提供计算资源的服务，这个计算资源包含了虚机以及配套的存储，网络等资源。我比较喜欢把OpenStack和Linux做类比，我们知道进程（Task）是处于执行期的程序以及相关资源的总称，如果把虚机类比为进程，Nova就类似于Linux中的进程管理和调度模块。所以Nova会和很多其他的组件交互，不仅包括O","url":"http://blog.csdn.net/BLACKMOON88/article/details/75267742","categories":"云计算,Python相关,OpenStack","tags":"openstack,源码,社区,架构","content":"\u003ch2 id=\"nova架构概览\"\u003eNova架构概览\u003c/h2\u003e\n\n\u003cp\u003eNova是OpenStack社区最核心的项目，也是社区诞生之时就一直存在的项目，它主要提供计算资源的服务，这个计算资源包含了虚机以及配套的存储，网络等资源。我比较喜欢把OpenStack和Linux做类比，我们知道进程（Task）是处于执行期的程序以及相关资源的总称，如果把虚机类比为进程，Nova就类似于Linux中的进程管理和调度模块。所以Nova会和很多其他的组件交互，不仅包括OpenStack自身的Neutron，Glance， Cinder等组件，还有不同的Hypervisor 包括KVM， Xen等。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170717203037905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"nova的组件构成\"\u003eNova的组件构成\u003c/h3\u003e\n\n\u003cp\u003eNova组件有以下六部分组成： \u003cbr\u003e\n1)  API服务器 API Server（Nova-api） \u003cbr\u003e\n2)  计算工作者Compute Workers（Nova-compute） \u003cbr\u003e\n3)  网络控制器Network Controller（Nova-network） \u003cbr\u003e\n4)  卷工作者Volume Worker（Nova-volume） \u003cbr\u003e\n5)  调度器Schedule（Nova-schedule） \u003cbr\u003e\n6)  消息队列Message Queue（rabbitmq server）\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20140619223804453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2FueGluZ2hlbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e上图是Nova的软件架构图，Nova中的各个组件（除了消息队列组件以外）都是有Python代码编写的守护进程，由上图可以看出每个进程之间通过队列（Queue）和数据库（Nova database）来交换信息。\u003c/p\u003e\n\n\u003cp\u003e下面对Nova的组件进行介绍。 \u003cbr\u003e\n1)  API服务器 API Server（Nova-api）\u003c/p\u003e\n\n\u003cp\u003eNova-API对外提供一个与云基础设施交互的接口，也是外部可用于管理基础设施的唯一组件。它负责发起相应的类似运行新虚拟机实例这样的资源调度活动。 \u003cbr\u003e\n在实现层面上，nova-api是python实现的WSGI应用。（WSGI即Web服务器网关接口是Python应用程序或框架和Web服务器之间的一种接口，已经被广泛接受，它已基本达成可移植性方面的目标）\u003c/p\u003e\n\n\u003cp\u003e2)  计算工作者Compute Workers（Nova-compute）\u003c/p\u003e\n\n\u003cp\u003eNova-compute处理管理实例生命周期，负责对虚拟机实例进行创建、终止、迁移、Resize的操作。 \u003cbr\u003e\n工作原理：队列中接收请求→执行→更新数据库状态\u003c/p\u003e\n\n\u003cp\u003e3)  网络控制器Network Controller（Nova-network）\u003c/p\u003e\n\n\u003cp\u003eNova-network负责处理主机的网络配置，其中包括：IP地址分配，配置vlan，实现安全组，配置计算节点网络等任务。 \u003cbr\u003e\n工作原理：队列中接收网络任务→控制虚拟机的网络（创建桥接网络、改变iptables规则）\u003c/p\u003e\n\n\u003cp\u003e4)  卷工作者Volume Worker（Nova-volume）\u003c/p\u003e\n\n\u003cp\u003eNova-volume提供卷管理，为虚拟机实例提供额外的volume访问 \u003cbr\u003e\n用来管理基于逻辑卷管理的实例卷。一个实例的重要数据总是要写在卷上，这样确保能在以后访问。 \u003cbr\u003e\n5)  调度器Schedule（Nova-schedule）\u003c/p\u003e\n\n\u003cp\u003eNova-Scheduler负责为虚拟机实例指定运行的物理服务器，主要负责调度资源，有多种调度方法供选择 \u003cbr\u003e\n通过适当的调度算法从可用资源池获得一个计算服务。\u003c/p\u003e\n\n\u003cp\u003e6)  消息队列Message Queue（rabbitmq server）\u003c/p\u003e\n\n\u003cp\u003eOpenstack节点之间通过消息队列使用AMQP（高级消息队列协议）完成通信（异步通信）。 \u003cbr\u003e\nRabbitmq是对这个协议的一个实现，默认使用kombu消息框架，该部分本文不进行详细展开，将在另外一篇文章中进行讲述。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170717203101331?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch2 id=\"nova-compute-service启动流程\"\u003eNova Compute Service启动流程\u003c/h2\u003e\n\n\u003cp\u003eNova的服务类型分为两种，WsgiService和RpcService，每一种服务类型都会根据nova.conf的配置启动一个或多个进程。这其中WsgiService主要是用于组件之间的Restful接口交互，而组件内部的不同模块采取RpcService交互模式。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"nova-compute-启动流程分析\"\u003eNova Compute 启动流程分析\u003c/h3\u003e\n\n\u003cp\u003e这里先以Nova Compute进程的启动过程为例，在/nava/bin目录下为所有的启动脚本入口，对源代码进行走读分析。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"openstack软件包管理\"\u003e\u003cstrong\u003e\u003cem\u003eOpenStack软件包管理\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003e软件包管理是每个OpenStack项目的基础，其目的是用来将项目代码打包成源码包或者二进制包进行分发。一个项目的代码可能会被打包放到PyPI上，这样你可以通过 pip 命令安装这个包；也可能会被打包放到项目的软件仓库里，这样你可以通过 apt-get install 或者 yum install 来安装这个软件包。\u003c/p\u003e\n\n\u003cp\u003eOpenStack也是使用setuptools工具来进行打包，不过为了满足OpenStack项目的需求，引入了一个辅助工具 pbr (Python Build Reasonableness)来配合setuptools完成打包工作。pbr是一个setuptools的扩展工具，被开发出来的主要目的是为了方便使用setuptools，其项目文档地址也在OpenStack官网内： \u003ca href=\"http://docs.openstack.org/developer/pbr/\" target=\"_blank\"\u003ehttp://docs.openstack.org/developer/pbr/\u003c/a\u003e 。\u003c/p\u003e\n\n\u003cp\u003e先说一下pbr如何使用：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e setuptools\nsetuptools.setup(setup_requires=[\u003cspan class=\"hljs-string\"\u003e\u0027pbr\u0027\u003c/span\u003e], pbr=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e按照上面的方式就可以配置setuptools工具使用pbr来协助完成打包工作。这里的 setup_requires 参数意思是setup函数在执行之前需要依赖的包的列表。这里的依赖的包的功能可以理解为生成setup的实际参数。你可以看到，当使用pbr的时候，setup函数只有两个参数，然而实际上 setuptools.setup 函数实际上是 disutils.core.setup 函数，会接收任何参数，这些参数可以通过在调用时指定，也可以通过所依赖的扩展来生成（比如pbr）\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003esetup.cfg\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n由于OpenStack项目都使用了setuptools和pbr来执行打包工作，因此项目的元数据都放在 setup.cfg 文件中。我们以 Compute项目的setup.cfg文件为例来说明这个文件里一般会包含什么内容：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e[metadata]\nname = nova\nsummary = Cloud computing fabric controller\ndescription-file = \n    README\u003cspan class=\"hljs-preprocessor\"\u003e.rst\u003c/span\u003e\nauthor = OpenStack\nauthor-email = openstack-dev@lists\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.org\u003c/span\u003e\nhome-page = http://docs\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.org\u003c/span\u003e/developer/nova/\nclassifier = \n    Environment :: OpenStack\n    Intended Audience :: Information Technology\n    Intended Audience :: System Administrators\n    License :: OSI Approved :: Apache Software License\n    Operating System :: POSIX :: Linux\n    Programming Language :: Python\n    Programming Language :: Python :: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\n    Programming Language :: Python :: \u003cspan class=\"hljs-number\"\u003e2.7\u003c/span\u003e\n\n[global]\u003cspan class=\"hljs-preprocessor\"\u003e# 全局段\u003c/span\u003e\nsetup-hooks = \n    pbr\u003cspan class=\"hljs-preprocessor\"\u003e.hooks\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.setup\u003c/span\u003e_hook\n\n[files] \u003cspan class=\"hljs-preprocessor\"\u003e# 文件段\u003c/span\u003e\npackages = \n    nova\n\n[entry_points] \u003cspan class=\"hljs-preprocessor\"\u003e# 指定入口点\u003c/span\u003e\noslo\u003cspan class=\"hljs-preprocessor\"\u003e.config\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.opts\u003c/span\u003e = \n    nova\u003cspan class=\"hljs-preprocessor\"\u003e.conf\u003c/span\u003e = nova\u003cspan class=\"hljs-preprocessor\"\u003e.conf\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.opts\u003c/span\u003e:list_opts\noslo\u003cspan class=\"hljs-preprocessor\"\u003e.config\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.opts\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.defaults\u003c/span\u003e = \n    nova\u003cspan class=\"hljs-preprocessor\"\u003e.conf\u003c/span\u003e = nova\u003cspan class=\"hljs-preprocessor\"\u003e.common\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.config\u003c/span\u003e:set_middleware_defaults\noslo\u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.enforcer\u003c/span\u003e = \n    nova = nova\u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e:get_enforcer\noslo\u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.policies\u003c/span\u003e = \n    \u003cspan class=\"hljs-preprocessor\"\u003e# The sample policies will be ordered by entry point and then by list\u003c/span\u003e\n    \u003cspan class=\"hljs-preprocessor\"\u003e# returned from that entry point. If more control is desired split out each\u003c/span\u003e\n    \u003cspan class=\"hljs-preprocessor\"\u003e# list_rules method into a separate entry point rather than using the\u003c/span\u003e\n    \u003cspan class=\"hljs-preprocessor\"\u003e# aggregate method.\u003c/span\u003e\n    nova = nova\u003cspan class=\"hljs-preprocessor\"\u003e.policies\u003c/span\u003e:list_rules\nnova\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.monitors\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.cpu\u003c/span\u003e = \n    virt_driver = nova\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.monitors\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.cpu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.virt\u003c/span\u003e_driver:Monitor\nnova\u003cspan class=\"hljs-preprocessor\"\u003e.image\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.download\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.modules\u003c/span\u003e = \n    file = nova\u003cspan class=\"hljs-preprocessor\"\u003e.image\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.download\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.file\u003c/span\u003e\n\nconsole_scripts =  \u003cspan class=\"hljs-preprocessor\"\u003e# 指定要生成的可执行文件\u003c/span\u003e\n    nova-compute = nova\u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e:main\n\nwsgi_scripts = \n    nova-placement-api = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.placement\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.wsgi\u003c/span\u003e:init_application\n[build_sphinx] \u003cspan class=\"hljs-preprocessor\"\u003e# 文档build相关信息\u003c/span\u003e\nall_files = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\nbuild-dir = doc/build\nsource-dir = doc/source\n\n[build_apiguide] \u003cspan class=\"hljs-preprocessor\"\u003e# 文档build相关信息\u003c/span\u003e\nall_files = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\nbuild-dir = api-guide/build\nsource-dir = api-guide/source\n\n[egg_info] \u003cspan class=\"hljs-preprocessor\"\u003e# 指定egg信息\u003c/span\u003e\ntag_build = \ntag_date = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\ntag_svn_revision = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n\n[compile_catalog]\ndirectory = nova/locale\ndomain = nova nova-log-critical nova-log-error nova-log-info nova-log-warning\n\n[update_catalog]\ndomain = nova\noutput_dir = nova/locale\ninput_file = nova/locale/nova\u003cspan class=\"hljs-preprocessor\"\u003e.pot\u003c/span\u003e\n\n[extract_messages]\nkeywords = _ gettext ngettext l_ lazy_gettext\nmapping_file = babel\u003cspan class=\"hljs-preprocessor\"\u003e.cfg\u003c/span\u003e\noutput_file = nova/locale/nova\u003cspan class=\"hljs-preprocessor\"\u003e.pot\u003c/span\u003e\n\n[wheel]\nuniversal = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n\n[extras]\nosprofiler = \n    osprofiler&gt;=\u003cspan class=\"hljs-number\"\u003e1.4\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.0\u003c/span\u003e \u003cspan class=\"hljs-preprocessor\"\u003e# Apache-2.0\u003c/span\u003e\n\n[pbr]\nwarnerrors = true\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e(上面有些未注释的部分我目前还不太清楚，后续补充，可以先参考 \u003ca href=\"https://www.python.org/dev/peps/pep-0301/\" target=\"_blank\"\u003ePEP301\u003c/a\u003e ) \u003cbr\u003e\n这里说说一下 classifier 这个参数。这个参数是用来指定一个软件包的分类、许可证、允许运行的操作系统、允许运行的Python的版本的信息。 \u003cbr\u003e\nentry_points是一个字典，从entry point组名映射到一个表示entry point的字符串或字符串列表。Entry points是用来支持动态发现服务和插件的，也用来支持自动生成脚本。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003erequirements.txt\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n这个文件指定了一个项目依赖的包有哪些，并且支出了依赖的包的版本需求\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e软件包归档格式\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nPython的软件包一开始是没有官方的标准分发格式的。比如Java有jar包或者war包作为分发格式，Python则什么都没有。后来不同的工具都开始引入一些比较通用的归档格式。比如，setuptools引入了Egg格式。但是，这些都不是官方支持的，存在元数据和包结构彼此不兼容的问题。因此，为了解决这个问题， PEP 427 定义了新的分发包标准，名为 Wheel 。目前pip和setuptools工具都支持Wheel格式。这里我们简单总结一下常用的分发格式：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003etar.gz 格式：这个就是标准压缩格式，里面包含了项目元数据和代码，可以使用 python setup.py sdist 命令生成。\u003c/li\u003e\n\u003cli\u003e.egg 格式：这个本质上也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据以及源代码。这个格式由setuptools项目引入。可以通过命令 python setup.py bdist_egg 命令生成。\u003c/li\u003e\n\u003cli\u003e.whl 格式：这个是Wheel包，也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据和代码，还支持免安装直接运行。whl分发包内的元数据和egg包是有些不同的。这个格式是由PEP 427引入的。可以通过命令 python setup.py bdist_wheel 生成。\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch4 id=\"nova-compute启动入口\"\u003e\u003cstrong\u003e\u003cem\u003eNova Compute启动入口\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003e了解了OPS的打包规则可以知道Nova Compute的程序入口就是在nova/cmd/compute.py，先列举源码：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs python\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\"\"Starter script for Nova Compute.\"\"\"\u003c/span\u003e\n\nCONF = nova.conf.CONF\nLOG = logging.getLogger(\u003cspan class=\"hljs-string\"\u003e\u0027nova.compute\u0027\u003c/span\u003e)\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e:\u003c/span\u003e\n    config.parse_args(sys.argv)\n    logging.setup(CONF, \u003cspan class=\"hljs-string\"\u003e\u0027nova\u0027\u003c/span\u003e)\n    priv_context.init(root_helper=shlex.split(utils.get_root_helper()))\n    utils.monkey_patch()\n    objects.register_all()\n    \u003cspan class=\"hljs-comment\"\u003e# Ensure os-vif objects are registered and plugins loaded\u003c/span\u003e\n    os_vif.initialize()\n\n    gmr.TextGuruMeditation.setup_autorun(version)\n\n    cmd_common.block_db_access(\u003cspan class=\"hljs-string\"\u003e\u0027nova-compute\u0027\u003c/span\u003e)\n    objects_base.NovaObject.indirection_api = conductor_rpcapi.ConductorAPI()\n\n    server = service.Service.create(binary=\u003cspan class=\"hljs-string\"\u003e\u0027nova-compute\u0027\u003c/span\u003e,\n                                    topic=CONF.compute_topic)\n    service.serve(server)\n    service.wait()\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在这里首先会调用config.parse_args(sys.argv)函数来做一些初始化的工作，包括RpcServer的传输层Driver的指定等工作。\u003c/p\u003e\n\n\u003cp\u003e接下来调用Create()函数创建RPC Service，并且设置Topic为CONF.compute_topic，在\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75208757\" target=\"_blank\"\u003e【OpenStack源码分析之二】RabbitMQ分析\u003c/a\u003e中有详细讲述RPC的使用。Create()函数调用的实例化对象会设置一个ComputeManager来负责处理所有的Rpc请求，具体接口请阅读源码Nova/compute/manager/ComputeManager类。\u003c/p\u003e\n\n\u003cp\u003e后面就是Serve函数，它会分配一个协程（关于协程的介绍请见对\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/73196798\" target=\"_blank\"\u003ePython协程的理解\u003c/a\u003e）来调用Service的Start()函数，接下来我们分析一下RpcService的Start()函数，源码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs php\"\u003e def start(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e):\n        verstr = version.version_string_with_package()\n        LOG.info(_LI(\u003cspan class=\"hljs-string\"\u003e\u0027Starting %(topic)s node (version %(version)s)\u0027\u003c/span\u003e),\n                  {\u003cspan class=\"hljs-string\"\u003e\u0027topic\u0027\u003c/span\u003e: \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic, \u003cspan class=\"hljs-string\"\u003e\u0027version\u0027\u003c/span\u003e: verstr})\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.basic_config_check()\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.init_host()\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.model_disconnected = \u003cspan class=\"hljs-keyword\"\u003eFalse\u003c/span\u003e\n        ctxt = context.get_admin_context()\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref = objects.Service.get_by_host_and_binary(\n            ctxt, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.host, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.binary)\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref:\n            _update_service_ref(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref)\n\n        \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e:\n            \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e:\n                \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref = _create_service_ref(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e, ctxt)\n            except (\u003cspan class=\"hljs-keyword\"\u003eexception\u003c/span\u003e.ServiceTopicExists,\n                    \u003cspan class=\"hljs-keyword\"\u003eexception\u003c/span\u003e.ServiceBinaryExists):\n                \u003cspan class=\"hljs-comment\"\u003e# NOTE(danms): If we race to create a record with a sibling\u003c/span\u003e\n                \u003cspan class=\"hljs-comment\"\u003e# worker, don\u0027t fail here.\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref = objects.Service.get_by_host_and_binary(\n                    ctxt, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.host, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.binary)\n\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.pre_start_hook()\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.backdoor_port is not None:\n            \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.backdoor_port = \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.backdoor_port\n\n        LOG.debug(\u003cspan class=\"hljs-string\"\u003e\"Creating RPC server for service %s\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic)\n\n        target = messaging.Target(topic=\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic, server=\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.host)\n\n        endpoints = [\n            \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager,\n            baserpc.BaseRPCAPI(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.service_name, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.backdoor_port)\n        ]\n        endpoints.extend(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.additional_endpoints)\n\n        serializer = objects_base.NovaObjectSerializer()\n\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.rpcserver = rpc.get_server(target, endpoints, serializer)\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.rpcserver.start()\n\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.post_start_hook()\n\n        LOG.debug(\u003cspan class=\"hljs-string\"\u003e\"Join ServiceGroup membership for this service %s\"\u003c/span\u003e,\n                  \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic)\n        \u003cspan class=\"hljs-comment\"\u003e# Add service to the ServiceGroup membership group.\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.servicegroup_api.join(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.host, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e)\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_enable:\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_fuzzy_delay:\n                initial_delay = random.randint(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_fuzzy_delay)\n            \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e:\n                initial_delay = None\n\n            \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.tg.add_dynamic_timer(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_tasks,\n                                     initial_delay=initial_delay,\n                                     periodic_interval_max=\n                                        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_interval_max)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这段代码涉及到了Oslo_messaging库，oslo.messaging的产生就不多说了，因为RPC的调用在各个项目中都有，以前各个项目分别维护一坨类似的代码，为了简化工作、方便打包等，社区就把RPC相关的功能作为OpenStack的一个依赖库。另一方面，也为后续支持非AMQP协议的消息中间件（ZeroMQ）的引入打下基础。\u003c/p\u003e\n\n\u003cp\u003e其实oslo.messaging库就是把rabbitmq的python库做了封装，考虑到了编程友好、性能、可靠性、异常的捕获等诸多因素。让各个项目的开发者聚焦于业务代码的编写，而不用考虑消息如何发送和接收。这对于各个项目开发者来说当然是好事，但对于一套OpenStack系统的运维人员来说，封装就意味着很多细节被隐藏，为了能够解决消息转发过程中出现的问题，需要再花费时间和精力去理解oslo.messaging的业务逻辑，对于本来就错综复杂的OpenStack核心业务来说，无疑是雪上加霜。\u003c/p\u003e\n\n\u003cp\u003e这里有几个概念： \u003cbr\u003e\n- target：作为消息发送者，需要在target中指定消息要发送到的exchange, binding-key, consumer等信息（这些概念可能与target对象属性不一样） \u003cbr\u003e\n- serializer：负责消息的序列化处理。就是负责把Nova中的对象转换成可以在网络中传送的格式。 \u003cbr\u003e\n- TRANSPORT：处理消息发送的抽象层。根据rpc_backend的配置确定真正处理消息发送的driver。一般我们会用到这个：rabbit = oslo_messaging._drivers.impl_rabbit:RabbitDriver。对于RabbitDriver，其相关配置项都在/oslo_messaging/_drivers/impl_rabbit.py中，它内部会维护一个connection pool，管理Connection对象。 \u003cbr\u003e\n- Endpoint：Transport Driver接收到消息之后会进行分发处理，这里会有个Dispatcher分发给相应的Endpoint处理，Endpoint就是设置成前文提到的ComputeManager。\u003c/p\u003e\n\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eNova和外部模块的交互通过Restful接口调用，内部接口间采用异步RPC调用，而且正因为是异步，所以Eventlet库可以配套使用；\u003c/li\u003e\n\u003cli\u003e在RPC模式下，多个Nova-compute节点通过组合键(topic=self.topic, server=self.host)形成Routing Key来进行Binding\u003c/li\u003e\n\u003cli\u003eTransport指定了底层的传输层机制，当前支持RabbitMQ和ZeroMQ\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"https://docs.openstack.org/ocata/config-reference/compute.html\" target=\"_blank\"\u003ehttps://docs.openstack.org/ocata/config-reference/compute.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://www.infoq.com/cn/articles/OpenStack-demo-packagemanagement\" target=\"_blank\"\u003ehttp://www.infoq.com/cn/articles/OpenStack-demo-packagemanagement\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://www.openstack.cn/?p=3514\" target=\"_blank\"\u003ehttp://www.openstack.cn/?p=3514\u003c/a\u003e\u003c/p\u003e","markdowncontent":"## Nova架构概览\nNova是OpenStack社区最核心的项目，也是社区诞生之时就一直存在的项目，它主要提供计算资源的服务，这个计算资源包含了虚机以及配套的存储，网络等资源。我比较喜欢把OpenStack和Linux做类比，我们知道进程（Task）是处于执行期的程序以及相关资源的总称，如果把虚机类比为进程，Nova就类似于Linux中的进程管理和调度模块。所以Nova会和很多其他的组件交互，不仅包括OpenStack自身的Neutron，Glance， Cinder等组件，还有不同的Hypervisor 包括KVM， Xen等。\n![这里写图片描述](http://img.blog.csdn.net/20170717203037905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### Nova的组件构成\nNova组件有以下六部分组成：\n1)  API服务器 API Server（Nova-api）\n2)  计算工作者Compute Workers（Nova-compute）\n3)  网络控制器Network Controller（Nova-network）\n4)  卷工作者Volume Worker（Nova-volume）\n5)  调度器Schedule（Nova-schedule）\n6)  消息队列Message Queue（rabbitmq server）\n\n![这里写图片描述](http://img.blog.csdn.net/20140619223804453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2FueGluZ2hlbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n上图是Nova的软件架构图，Nova中的各个组件（除了消息队列组件以外）都是有Python代码编写的守护进程，由上图可以看出每个进程之间通过队列（Queue）和数据库（Nova database）来交换信息。\n \n下面对Nova的组件进行介绍。\n1)  API服务器 API Server（Nova-api）\n\nNova-API对外提供一个与云基础设施交互的接口，也是外部可用于管理基础设施的唯一组件。它负责发起相应的类似运行新虚拟机实例这样的资源调度活动。\n在实现层面上，nova-api是python实现的WSGI应用。（WSGI即Web服务器网关接口是Python应用程序或框架和Web服务器之间的一种接口，已经被广泛接受，它已基本达成可移植性方面的目标）\n \n2)  计算工作者Compute Workers（Nova-compute）\n\nNova-compute处理管理实例生命周期，负责对虚拟机实例进行创建、终止、迁移、Resize的操作。\n工作原理：队列中接收请求→执行→更新数据库状态\n \n3)  网络控制器Network Controller（Nova-network）\n\nNova-network负责处理主机的网络配置，其中包括：IP地址分配，配置vlan，实现安全组，配置计算节点网络等任务。\n工作原理：队列中接收网络任务→控制虚拟机的网络（创建桥接网络、改变iptables规则）\n \n4)  卷工作者Volume Worker（Nova-volume）\n\nNova-volume提供卷管理，为虚拟机实例提供额外的volume访问\n用来管理基于逻辑卷管理的实例卷。一个实例的重要数据总是要写在卷上，这样确保能在以后访问。\n5)  调度器Schedule（Nova-schedule）\n\nNova-Scheduler负责为虚拟机实例指定运行的物理服务器，主要负责调度资源，有多种调度方法供选择\n通过适当的调度算法从可用资源池获得一个计算服务。\n \n6)  消息队列Message Queue（rabbitmq server）\n\nOpenstack节点之间通过消息队列使用AMQP（高级消息队列协议）完成通信（异步通信）。\nRabbitmq是对这个协议的一个实现，默认使用kombu消息框架，该部分本文不进行详细展开，将在另外一篇文章中进行讲述。\n![这里写图片描述](http://img.blog.csdn.net/20170717203101331?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## Nova Compute Service启动流程\nNova的服务类型分为两种，WsgiService和RpcService，每一种服务类型都会根据nova.conf的配置启动一个或多个进程。这其中WsgiService主要是用于组件之间的Restful接口交互，而组件内部的不同模块采取RpcService交互模式。\n\n### Nova Compute 启动流程分析\n这里先以Nova Compute进程的启动过程为例，在/nava/bin目录下为所有的启动脚本入口，对源代码进行走读分析。\n####***OpenStack软件包管理***\n软件包管理是每个OpenStack项目的基础，其目的是用来将项目代码打包成源码包或者二进制包进行分发。一个项目的代码可能会被打包放到PyPI上，这样你可以通过 pip 命令安装这个包；也可能会被打包放到项目的软件仓库里，这样你可以通过 apt-get install 或者 yum install 来安装这个软件包。\n\nOpenStack也是使用setuptools工具来进行打包，不过为了满足OpenStack项目的需求，引入了一个辅助工具 pbr (Python Build Reasonableness)来配合setuptools完成打包工作。pbr是一个setuptools的扩展工具，被开发出来的主要目的是为了方便使用setuptools，其项目文档地址也在OpenStack官网内： http://docs.openstack.org/developer/pbr/ 。\n\n先说一下pbr如何使用：\n```Python\nimport setuptools\nsetuptools.setup(setup_requires=[\u0027pbr\u0027], pbr=True)\n```\n按照上面的方式就可以配置setuptools工具使用pbr来协助完成打包工作。这里的 setup_requires 参数意思是setup函数在执行之前需要依赖的包的列表。这里的依赖的包的功能可以理解为生成setup的实际参数。你可以看到，当使用pbr的时候，setup函数只有两个参数，然而实际上 setuptools.setup 函数实际上是 disutils.core.setup 函数，会接收任何参数，这些参数可以通过在调用时指定，也可以通过所依赖的扩展来生成（比如pbr）\n\n***setup.cfg***\n由于OpenStack项目都使用了setuptools和pbr来执行打包工作，因此项目的元数据都放在 setup.cfg 文件中。我们以 Compute项目的setup.cfg文件为例来说明这个文件里一般会包含什么内容：\n```\n[metadata]\nname = nova\nsummary = Cloud computing fabric controller\ndescription-file = \n\tREADME.rst\nauthor = OpenStack\nauthor-email = openstack-dev@lists.openstack.org\nhome-page = http://docs.openstack.org/developer/nova/\nclassifier = \n\tEnvironment :: OpenStack\n\tIntended Audience :: Information Technology\n\tIntended Audience :: System Administrators\n\tLicense :: OSI Approved :: Apache Software License\n\tOperating System :: POSIX :: Linux\n\tProgramming Language :: Python\n\tProgramming Language :: Python :: 2\n\tProgramming Language :: Python :: 2.7\n\n[global]# 全局段\nsetup-hooks = \n\tpbr.hooks.setup_hook\n\n[files] # 文件段\npackages = \n\tnova\n\n[entry_points] # 指定入口点\noslo.config.opts = \n\tnova.conf = nova.conf.opts:list_opts\noslo.config.opts.defaults = \n\tnova.conf = nova.common.config:set_middleware_defaults\noslo.policy.enforcer = \n\tnova = nova.policy:get_enforcer\noslo.policy.policies = \n\t# The sample policies will be ordered by entry point and then by list\n\t# returned from that entry point. If more control is desired split out each\n\t# list_rules method into a separate entry point rather than using the\n\t# aggregate method.\n\tnova = nova.policies:list_rules\nnova.compute.monitors.cpu = \n\tvirt_driver = nova.compute.monitors.cpu.virt_driver:Monitor\nnova.image.download.modules = \n\tfile = nova.image.download.file\n\nconsole_scripts =  # 指定要生成的可执行文件\n\tnova-compute = nova.cmd.compute:main\n\nwsgi_scripts = \n\tnova-placement-api = nova.api.openstack.placement.wsgi:init_application\n[build_sphinx] # 文档build相关信息\nall_files = 1\nbuild-dir = doc/build\nsource-dir = doc/source\n\n[build_apiguide] # 文档build相关信息\nall_files = 1\nbuild-dir = api-guide/build\nsource-dir = api-guide/source\n\n[egg_info] # 指定egg信息\ntag_build = \ntag_date = 0\ntag_svn_revision = 0\n\n[compile_catalog]\ndirectory = nova/locale\ndomain = nova nova-log-critical nova-log-error nova-log-info nova-log-warning\n\n[update_catalog]\ndomain = nova\noutput_dir = nova/locale\ninput_file = nova/locale/nova.pot\n\n[extract_messages]\nkeywords = _ gettext ngettext l_ lazy_gettext\nmapping_file = babel.cfg\noutput_file = nova/locale/nova.pot\n\n[wheel]\nuniversal = 1\n\n[extras]\nosprofiler = \n\tosprofiler\u003e=1.4.0 # Apache-2.0\n\n[pbr]\nwarnerrors = true\n```\n(上面有些未注释的部分我目前还不太清楚，后续补充，可以先参考 [PEP301](https://www.python.org/dev/peps/pep-0301/) )\n这里说说一下 classifier 这个参数。这个参数是用来指定一个软件包的分类、许可证、允许运行的操作系统、允许运行的Python的版本的信息。\nentry_points是一个字典，从entry point组名映射到一个表示entry point的字符串或字符串列表。Entry points是用来支持动态发现服务和插件的，也用来支持自动生成脚本。\n\n***requirements.txt***\n这个文件指定了一个项目依赖的包有哪些，并且支出了依赖的包的版本需求\n\n***软件包归档格式***\nPython的软件包一开始是没有官方的标准分发格式的。比如Java有jar包或者war包作为分发格式，Python则什么都没有。后来不同的工具都开始引入一些比较通用的归档格式。比如，setuptools引入了Egg格式。但是，这些都不是官方支持的，存在元数据和包结构彼此不兼容的问题。因此，为了解决这个问题， PEP 427 定义了新的分发包标准，名为 Wheel 。目前pip和setuptools工具都支持Wheel格式。这里我们简单总结一下常用的分发格式：\n\n- tar.gz 格式：这个就是标准压缩格式，里面包含了项目元数据和代码，可以使用 python setup.py sdist 命令生成。\n- .egg 格式：这个本质上也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据以及源代码。这个格式由setuptools项目引入。可以通过命令 python setup.py bdist_egg 命令生成。\n- .whl 格式：这个是Wheel包，也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据和代码，还支持免安装直接运行。whl分发包内的元数据和egg包是有些不同的。这个格式是由PEP 427引入的。可以通过命令 python setup.py bdist_wheel 生成。\n\n####***Nova Compute启动入口***\n了解了OPS的打包规则可以知道Nova Compute的程序入口就是在nova/cmd/compute.py，先列举源码：\n\n```\n\"\"\"Starter script for Nova Compute.\"\"\"\n\nCONF = nova.conf.CONF\nLOG = logging.getLogger(\u0027nova.compute\u0027)\n\ndef main():\n    config.parse_args(sys.argv)\n    logging.setup(CONF, \u0027nova\u0027)\n    priv_context.init(root_helper=shlex.split(utils.get_root_helper()))\n    utils.monkey_patch()\n    objects.register_all()\n    # Ensure os-vif objects are registered and plugins loaded\n    os_vif.initialize()\n\n    gmr.TextGuruMeditation.setup_autorun(version)\n\n    cmd_common.block_db_access(\u0027nova-compute\u0027)\n    objects_base.NovaObject.indirection_api = conductor_rpcapi.ConductorAPI()\n\n    server = service.Service.create(binary=\u0027nova-compute\u0027,\n                                    topic=CONF.compute_topic)\n    service.serve(server)\n    service.wait()\n```\n在这里首先会调用config.parse_args(sys.argv)函数来做一些初始化的工作，包括RpcServer的传输层Driver的指定等工作。\n\n接下来调用Create()函数创建RPC Service，并且设置Topic为CONF.compute_topic，在[【OpenStack源码分析之二】RabbitMQ分析](http://blog.csdn.net/ohenry88/article/details/75208757)中有详细讲述RPC的使用。Create()函数调用的实例化对象会设置一个ComputeManager来负责处理所有的Rpc请求，具体接口请阅读源码Nova/compute/manager/ComputeManager类。\n\n后面就是Serve函数，它会分配一个协程（关于协程的介绍请见对[Python协程的理解](http://blog.csdn.net/ohenry88/article/details/73196798)）来调用Service的Start()函数，接下来我们分析一下RpcService的Start()函数，源码如下：\n\n```Python\n def start(self):\n        verstr = version.version_string_with_package()\n        LOG.info(_LI(\u0027Starting %(topic)s node (version %(version)s)\u0027),\n                  {\u0027topic\u0027: self.topic, \u0027version\u0027: verstr})\n        self.basic_config_check()\n        self.manager.init_host()\n        self.model_disconnected = False\n        ctxt = context.get_admin_context()\n        self.service_ref = objects.Service.get_by_host_and_binary(\n            ctxt, self.host, self.binary)\n        if self.service_ref:\n            _update_service_ref(self.service_ref)\n\n        else:\n            try:\n                self.service_ref = _create_service_ref(self, ctxt)\n            except (exception.ServiceTopicExists,\n                    exception.ServiceBinaryExists):\n                # NOTE(danms): If we race to create a record with a sibling\n                # worker, don\u0027t fail here.\n                self.service_ref = objects.Service.get_by_host_and_binary(\n                    ctxt, self.host, self.binary)\n\n        self.manager.pre_start_hook()\n\n        if self.backdoor_port is not None:\n            self.manager.backdoor_port = self.backdoor_port\n\n        LOG.debug(\"Creating RPC server for service %s\", self.topic)\n\n        target = messaging.Target(topic=self.topic, server=self.host)\n\n        endpoints = [\n            self.manager,\n            baserpc.BaseRPCAPI(self.manager.service_name, self.backdoor_port)\n        ]\n        endpoints.extend(self.manager.additional_endpoints)\n\n        serializer = objects_base.NovaObjectSerializer()\n\n        self.rpcserver = rpc.get_server(target, endpoints, serializer)\n        self.rpcserver.start()\n\n        self.manager.post_start_hook()\n\n        LOG.debug(\"Join ServiceGroup membership for this service %s\",\n                  self.topic)\n        # Add service to the ServiceGroup membership group.\n        self.servicegroup_api.join(self.host, self.topic, self)\n\n        if self.periodic_enable:\n            if self.periodic_fuzzy_delay:\n                initial_delay = random.randint(0, self.periodic_fuzzy_delay)\n            else:\n                initial_delay = None\n\n            self.tg.add_dynamic_timer(self.periodic_tasks,\n                                     initial_delay=initial_delay,\n                                     periodic_interval_max=\n                                        self.periodic_interval_max)\n```\n这段代码涉及到了Oslo_messaging库，oslo.messaging的产生就不多说了，因为RPC的调用在各个项目中都有，以前各个项目分别维护一坨类似的代码，为了简化工作、方便打包等，社区就把RPC相关的功能作为OpenStack的一个依赖库。另一方面，也为后续支持非AMQP协议的消息中间件（ZeroMQ）的引入打下基础。\n\n其实oslo.messaging库就是把rabbitmq的python库做了封装，考虑到了编程友好、性能、可靠性、异常的捕获等诸多因素。让各个项目的开发者聚焦于业务代码的编写，而不用考虑消息如何发送和接收。这对于各个项目开发者来说当然是好事，但对于一套OpenStack系统的运维人员来说，封装就意味着很多细节被隐藏，为了能够解决消息转发过程中出现的问题，需要再花费时间和精力去理解oslo.messaging的业务逻辑，对于本来就错综复杂的OpenStack核心业务来说，无疑是雪上加霜。\n\n这里有几个概念：\n- target：作为消息发送者，需要在target中指定消息要发送到的exchange, binding-key, consumer等信息（这些概念可能与target对象属性不一样）\n- serializer：负责消息的序列化处理。就是负责把Nova中的对象转换成可以在网络中传送的格式。\n- TRANSPORT：处理消息发送的抽象层。根据rpc_backend的配置确定真正处理消息发送的driver。一般我们会用到这个：rabbit = oslo_messaging._drivers.impl_rabbit:RabbitDriver。对于RabbitDriver，其相关配置项都在/oslo_messaging/_drivers/impl_rabbit.py中，它内部会维护一个connection pool，管理Connection对象。\n- Endpoint：Transport Driver接收到消息之后会进行分发处理，这里会有个Dispatcher分发给相应的Endpoint处理，Endpoint就是设置成前文提到的ComputeManager。\n\n## 总结\n- Nova和外部模块的交互通过Restful接口调用，内部接口间采用异步RPC调用，而且正因为是异步，所以Eventlet库可以配套使用；\n- 在RPC模式下，多个Nova-compute节点通过组合键(topic=self.topic, server=self.host)形成Routing Key来进行Binding\n- Transport指定了底层的传输层机制，当前支持RabbitMQ和ZeroMQ\n\n参考文献：\nhttps://docs.openstack.org/ocata/config-reference/compute.html\nhttp://www.infoq.com/cn/articles/OpenStack-demo-packagemanagement\nhttp://www.openstack.cn/?p=3514\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-21] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75208757 [pool-2-thread-15] [chx]
[INFO] 2017-07-28 12:44:28 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75701576 [pool-2-thread-8] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":75701576,"title":"【OpenStack源码分析之六】从虚拟机启动流程看安全认证","create_at":"\/Date(1500690388000)\/","create":"2017-07-22 10:26:28","view_count":250,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前言从7.8号开始分析OpenStack已经有两周了，原本计划一个月分析完Neutron和Nova的，但是捋了下Nova的虚拟机启动流程，尤其是看到popsuper1982仁兄写得虚拟机启动的100个知识点，大概流程是清楚了，但是我没办法再去逐一深究，所以想把这里面再提取几个我关注的知识点研究一下。先借用一下网上的两张图： \n虚拟机启动的100个知识点虚拟机启动的整体流程 \n这里面我比较关注的几个问","url":"http://blog.csdn.net/BLACKMOON88/article/details/75701576","categories":"云计算,Python相关,OpenStack","tags":"openstack,安全,nova,源码","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e从7.8号开始分析OpenStack已经有两周了，原本计划一个月分析完Neutron和Nova的，但是捋了下Nova的虚拟机启动流程，尤其是看到popsuper1982仁兄写得\u003ca href=\"http://www.cnblogs.com/popsuper1982/p/3927390.html\" target=\"_blank\"\u003e虚拟机启动的100个知识点\u003c/a\u003e，大概流程是清楚了，但是我没办法再去逐一深究，所以想把这里面再提取几个我关注的知识点研究一下。先借用一下网上的两张图： \u003cbr\u003e\n\u003cstrong\u003e\u003cem\u003e虚拟机启动的100个知识点\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://images.cnitblog.com/blog/635909/201408/211556070651203.png\" alt=\"100个知识点\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e虚拟机启动的整体流程\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170722071514030?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"启动流程\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e这里面我比较关注的几个问题： \u003cbr\u003e\n- 安全认证机制，如何确保客户端的访问时可信的。（我并不做安全，只是纯属兴趣，毕竟互联网金融时代我也想了解下我的财富是否安全^_^） \u003cbr\u003e\n- 虚拟机调度算法（类似于进程调度，这个任务是操作系统的核心） \u003cbr\u003e\n- 虚拟机在整个流程中的状态迁移 \u003cbr\u003e\n- HA机制涉及的技术，包括事务，分布式技术等 \u003cbr\u003e\n- Hypervisor层的接口与调用 \u003cbr\u003e\n- 虚拟机热迁移如何实现 \u003cbr\u003e\n- OAM：OpenStack后台运行的周期性任务\u003c/p\u003e\n\n\u003cp\u003e一口气列了七个问题，我想到下周能彻底写完就算比错，因为Neutron的部分我有些底子。再用一周应该可以分析完成。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"安全认证\"\u003e安全认证\u003c/h3\u003e\n\n\u003cp\u003e我不是搞安全的，在我看来，安全认证的范围在于如何证明你妈是你妈，也就是当一个Restcall到来的时候，如何保障消息来源的可靠性以及消息的完整性，消息来源的可靠性的意思是Restcall的来源是经过认证的注册用户，而不是第三方黑客；消息的完整性是指消息在传递的过程中没有被修改。注意，这里面没有涉及消息的加密技术，这是另一个范畴，加密是保障消息在传递过程中第三方无读取权限（比如网上交易里涉及的密码等等）。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170722082307803?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Nova API网络\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eToken是什么\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n一般来说，Token是通过提供有效的用户名/密码组合提供给用户的一段数据。另外，与Token密切相关的是它的有效期（通常是几小时甚至几分钟）。Client可以缓存Token并将其注入到OpenStack API请求中。OpenStack API端点将令牌从用户请求中取出，并通过KeyStone后端进行验证，从而确认调用的合法性。 \u003cbr\u003e\n我们现在把注意力放在两种Token生成方式：通用唯一标识符（UUID）和公共密钥基础设施（PKI）的标识\u003c/p\u003e\n\n\n\n\u003ch3 id=\"uuid\"\u003eUUID\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.mirantis.com/wp-content/uploads/2013/07/UUID-token-validation-flow-3.png?_=3800235\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e基于提供的用户名/密码对： \u003cbr\u003e\n- KeyStone将做以下工作： \u003cbr\u003e\n- 生成一个UUID令牌。 \u003cbr\u003e\n- 将UUID令牌存储在后端。 \u003cbr\u003e\n- 发送一份拷贝的UUID令牌返回给客户端。 \u003cbr\u003e\n- 客户机将缓存令牌。 \u003cbr\u003e\n- 然后客户端会把UUID附在每个API调用上。 \u003cbr\u003e\n- 在每一个用户的请求，API端点会送这个UUID回到Keystone验证。 \u003cbr\u003e\n- Keystone将UUID和它的认证后端匹配（检查UUID字符串、日期）。 \u003cbr\u003e\n- KeyStone将返回“成功”或“失败”消息到API端点。 \u003cbr\u003e\n从上面的图表中可以看到，对于每个用户调用，API端点都需要使用KeyStone服务进行联机验证。想象成千上万的Client执行VM List、网络创建等等操作。这种设计导致了大量流量被导向了KeyStone造成单点故障。事实上，在生产中，Keystone被证明是负载最重的OpenStack服务之一，但Grizzly版本之后就采取了PKI方式来解决这个问题。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"背景知识非对称加密\"\u003e背景知识：非对称加密\u003c/h3\u003e\n\n\u003cp\u003e采用非对称加密算法，公钥获取的可靠性就非常重要，获取到正确的公钥，后续的工作就成功了一半。另一半是保障数据的完整性，这个是通过数据签名实现的，怎么样才能保障获取到正确的公钥呢？ \u003cbr\u003e\n我们第一反应可能会想到以下的两个方法： \u003cbr\u003e\n    - a)把公钥放到互联网的某个地方的一个下载地址，事先给“客户”去下载。 \u003cbr\u003e\n    - b)每次和“客户”开始通信时，“服务器”把公钥发给“客户”。 \u003cbr\u003e\n但是这个两个方法都有一定的问题， \u003cbr\u003e\n对于a)方法，“客户”无法确定这个下载地址是不是“服务器”发布的，你凭什么就相信这个地址下载的东西就是“服务器”发布的而不是别人伪造的呢，万一下载到一个假的怎么办？另外要所有的“客户”都在通信前事先去下载公钥也很不现实。 \u003cbr\u003e\n对于b)方法，也有问题，因为任何人都可以自己生成一对公钥和私钥，他只要向“客户”发送他自己的私钥就可以冒充“服务器”了。示意如下：\u003c/p\u003e\n\n\u003cp\u003e“客户”-&gt;“黑客”：你好           //黑客截获“客户”发给“服务器”的消息 \u003cbr\u003e\n“黑客”-&gt;“客户”：你好，我是服务器，这个是我的公钥    //黑客自己生成一对公钥和私钥，把公钥发给“客户”，自己保留私钥 \u003cbr\u003e\n“客户”-&gt;“黑客”：向我证明你就是服务器 \u003cbr\u003e\n“黑客”-&gt;“客户”：你好，我是服务器 {你好，我是服务器}[黑客自己的私钥|RSA]      //客户收到“黑客”用私钥加密的信息后，是可以用“黑客”发给自己的公钥解密的，从而会误认为“黑客”是“服务器”\u003c/p\u003e\n\n\u003cp\u003e因此“黑客”只需要自己生成一对公钥和私钥，然后把公钥发送给“客户”，自己保留私钥，这样由于“客户”可以用黑客的公钥解密黑客的私钥加密的内容，“客户”就会相信“黑客”是“服务器”，从而导致了安全问题。这里问题的根源就在于，大家都可以生成公钥、私钥对，无法确认公钥对到底是谁的。 \u003cstrong\u003e如果能够确定公钥到底是谁的，就不会有这个问题了。\u003c/strong\u003e例如，如果收到“黑客”冒充“服务器”发过来的公钥，经过某种检查，如果能够发现这个公钥不是“服务器”的就好了。\u003c/p\u003e\n\n\u003cp\u003e解决这个问题其实就不是技术问题了，需要一个权威机构来授权数字证书，它可以解决我们上面的问题。先大概看下什么是数字证书，一个证书包含下面的具体内容（证书相当于协议的控制面，会定义后续交互的算法和公钥等）：\u003c/p\u003e\n\n\u003cp\u003e◆CA (证书的发布机构)\u003c/p\u003e\n\n\u003cp\u003e指出是什么机构发布的这个证书，也就是指明这个证书是哪个公司创建的(只是创建证书，不是指证书的使用者)。对于上面的这个证书来说，就是指”SecureTrust CA”这个机构。\u003c/p\u003e\n\n\u003cp\u003e◆Valid from , Valid to (证书的有效期)\u003c/p\u003e\n\n\u003cp\u003e也就是证书的有效时间，或者说证书的使用期限。 过了有效期限，证书就会作废，不能使用了。\u003c/p\u003e\n\n\u003cp\u003e◆Public key (公钥)\u003c/p\u003e\n\n\u003cp\u003e这个我们在前面介绍公钥密码体制时介绍过，公钥是用来对消息进行加密和解密的。\u003c/p\u003e\n\n\u003cp\u003e◆Subject (主题)\u003c/p\u003e\n\n\u003cp\u003e这个证书是发布给谁的，或者说证书的所有者，一般是某个人或者某个公司名称、机构的名称、公司网站的网址等。 对于这里的证书来说，证书的所有者是Trustwave这个公司。\u003c/p\u003e\n\n\u003cp\u003e◆Signature algorithm (签名所使用的算法)\u003c/p\u003e\n\n\u003cp\u003e就是指的这个数字证书的数字签名所使用的加密算法，这样就可以使用证书发布机构的证书里面的公钥，根据这个算法对指纹进行解密。指纹的加密结果就是数字签名。\u003c/p\u003e\n\n\u003cp\u003e◆Thumbprint, Thumbprint algorithm (指纹以及指纹算法)\u003c/p\u003e\n\n\u003cp\u003e这个是用来保证证书的完整性的，也就是说确保证书没有被修改过，其原理就是在发布证书时，发布者根据指纹算法(一个hash算法)计算整个证书的hash值(指纹)并和证书放在一起，使用者在打开证书时，自己也根据指纹算法计算一下证书的hash值(指纹)，如果和刚开始的值对得上，就说明证书没有被修改过，因为证书的内容被修改后，根据证书的内容计算的出的hash值(指纹)是会变化的。 注意，这个指纹是数据的指纹，并不是代表客户端或服务器端的指纹。\u003c/p\u003e\n\n\u003cp\u003e注意，为了保证安全，在证书的发布机构发布证书时，证书的指纹和指纹算法，都会加密后再和证书放到一起发布，以防有人修改指纹后伪造相应的数字证书。这里问题又来了，证书的指纹和指纹算法用什么加密呢？他们是用证书发布机构的私钥进行加密的。可以用证书发布机构的公钥对指纹和指纹算法解密，也就是说证书发布机构除了给别人发布证书外，他自己本身也有自己的证书。证书发布机构的证书是哪里来的呢？？？这个证书发布机构的数字证书(一般由他自己生成)在我们的操作系统刚安装好时(例如windows xp等操作系统)，这些证书发布机构的数字证书就已经被微软(或者其它操作系统的开发机构)安装在操作系统中了，微软等公司会根据一些权威安全机构的评估选取一些信誉很好并且通过一定的安全认证的证书发布机构，把这些证书发布机构的证书默认就安装在操作系统里面了，并且设置为操作系统信任的数字证书。这些证书发布机构自己持有与他自己的数字证书对应的私钥，他会用这个私钥加密所有他发布的证书的指纹作为数字签名。\u003c/p\u003e\n\n\u003cp\u003e说白了，要想具备CA资质，又需要到更权威的机构去认证，而这些更权威的机构是已经默认在操作系统中安装了其公钥证书。所以在初始阶段，Client会拿着Server端的证书去权威机构鉴定是否是对方，而Server端会拿着Client的证书去自己的CA机构Keystone验证可靠性。 \u003cbr\u003e\n\u003cimg src=\"http://www.codeproject.com/KB/IP/326574/mutualssl_small.png?_=3927390\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003ch3 id=\"证书的发布机构\"\u003e证书的发布机构\u003c/h3\u003e\n\n\u003cp\u003e前面已经初步介绍了一下证书发布机构，这里再深入讨论一下。\u003c/p\u003e\n\n\u003cp\u003e其实所有的公司都可以发布证书，我们自己也可以去注册一家公司来专门给别人发布证书。但是很明显，我们自己的专门发布证书的公司是不会被那些国际上的权威机构认可的，人家怎么知道你是不是个狗屁皮包公司？因此微软在它的操作系统中，并不会信任我们这个证书发布机构，当应用程序在检查证书的合法信的时候，一看证书的发布机构并不是操作系统所信任的发布机构，就会抛出错误信息。也就是说windows操作系统中不会预先安装好我们这个证书发布机构的证书，不信任我们这个发布机构。\u003c/p\u003e\n\n\u003cp\u003e不受信任的证书发布机构的危害\u003c/p\u003e\n\n\u003cp\u003e为什么一个证书发布机构受不受信任这么重要？我们举个例子。假设我们开了一个狗屁公司来为别人发布证书，并且我和微软有一腿，微软在他们的操作系统中把我设置为了受信任的证书发布机构。现在如果有个小公司叫Wicrosoft 花了10块钱让我为他们公司申请了一个证书，并且公司慢慢壮大，证书的应用范围也越来越广。然后有个奸商的公司JS Company想冒充Wicrosoft，于是给了我￥10000，让我为他们颁布一个证书，但是证书的名字(Subject)要写Wicrosoft，假如我为了这￥10000，真的把证书给了他们，那么他们以后就可以使用这个证书来冒充Wicrosoft了。\u003c/p\u003e\n\n\u003cp\u003e如果是一个优秀的证书发布机构，比如你要向他申请一个名字叫Wicrosoft的证书，它会让你提供很多资料证明你确实可以代表Wicrosoft这个公司，也就是说他回去核实你的身份。证书发布机构是要为他发布出的证书负法律责任的。\u003c/p\u003e\n\n\u003cp\u003e到这里，你可能会想，TMD，那我们自己就不能发布证书吗？就一定要花钱去申请？当然不是，我们自己也可以成立证书发布机构，但是需要通过一些安全认证等等，只是有点麻烦。另外，如果数字证书只是要在公司内部使用，公司可以自己给自己生成一个证书，在公司的所有机器上把这个证书设置为操作系统信任的证书发布机构的证书(这句话仔细看清楚，有点绕口)，这样以后公司发布的证书在公司内部的所有机器上就可以通过验证了(在发布证书时，把这些证书的Issuer(发布机构)设置为我们自己的证书发布机构的证书的Subject(主题)就可以了)。但是这只限于内部应用，因为只有我们公司自己的机器上设置了信任我们自己这个所谓的证书发布机构，而其它机器上并没有事先信任我们这个证书发布机构，所以在其它机器上，我们发布的证书就无法通过安全验证。\u003c/p\u003e\n\n\u003ch3 id=\"pki方式\"\u003ePKI方式\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.mirantis.com/wp-content/uploads/2013/07/PKI-token-validation-flow-1.png?_=3800235\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n在PKI方式下，KeyStone已经成为一个CA（认证授权）机构，PKI 的本质就是基于数字签名，Keystone 用私钥对 token 进行数字签名，各个 API server 用公钥在本地验证该 token。也就是说通过这种方式来实现单点登录（用户只需要登录一次就可以访问所有相互信任的应用系统）。当然这里如何确保安全（比如黑客截获这个Token冒充客户端发送请求，当然这里会有一个Token过期时间），我也不太清楚，只是当前已经在使用这种方式，是否安全具体做安全的人可以告知一下。这里的Token是通过Service catalog，User roles，Metadata等消息来生成的\u003c/p\u003e\n\n\u003cp\u003e总结一下： \u003cbr\u003e\n如何确保消息源的可靠性？  通过第三方权威机构认证的CA机构才有授予证书的权利，而这些第三方权威机构在操作系统默认已经安装，在初始阶段，Client会拿着Server端的证书去权威机构鉴定是否是对方，而Server端会拿着Client的证书去自己的CA机构Keystone验证可靠性。\u003c/p\u003e\n\n\u003cp\u003e如何确保数据的完整性？ 通过数据签名算法，首先对数据进行Hash算法生成指纹，然后用公钥或者私钥加密生成数字签名，接收方拿到数据后使用私钥解密数字签名，同时使用相同的Hash算法对数据生成指纹进行比对。\u003c/p\u003e\n\n\u003cp\u003e如何确保数据是保密的，第三方无查看权限？ 交互双方在互相认定证书之后会使用公私钥加密约定消息体的对称加密算法和公钥，这个过程是客户端来发起的，服务器端不允许这个操作。\u003c/p\u003e\n\n\u003cp\u003e总而言之，证书类似一个协议控制面，用来做消息源可靠性的认定以及数据完整性的算法约定，后续的交互就会用上证书约定的公钥和指纹算法。消息体的保密性是无法确保的。需要靠另外的数据加密算法。\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://www.cnblogs.com/popsuper1982/p/3800235.html\" target=\"_blank\"\u003ehttp://www.cnblogs.com/popsuper1982/p/3800235.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.sina.com.cn/s/blog_44ee37cd01016r1h.html\" target=\"_blank\"\u003ehttp://blog.sina.com.cn/s/blog_44ee37cd01016r1h.html\u003c/a\u003e\u003c/p\u003e","markdowncontent":"### 前言\n从7.8号开始分析OpenStack已经有两周了，原本计划一个月分析完Neutron和Nova的，但是捋了下Nova的虚拟机启动流程，尤其是看到popsuper1982仁兄写得[虚拟机启动的100个知识点](http://www.cnblogs.com/popsuper1982/p/3927390.html)，大概流程是清楚了，但是我没办法再去逐一深究，所以想把这里面再提取几个我关注的知识点研究一下。先借用一下网上的两张图：\n***虚拟机启动的100个知识点***\n\n![100个知识点](http://images.cnitblog.com/blog/635909/201408/211556070651203.png)\n\n***虚拟机启动的整体流程***\n![启动流程](http://img.blog.csdn.net/20170722071514030?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这里面我比较关注的几个问题：\n- 安全认证机制，如何确保客户端的访问时可信的。（我并不做安全，只是纯属兴趣，毕竟互联网金融时代我也想了解下我的财富是否安全^_^）\n- 虚拟机调度算法（类似于进程调度，这个任务是操作系统的核心）\n- 虚拟机在整个流程中的状态迁移\n- HA机制涉及的技术，包括事务，分布式技术等\n- Hypervisor层的接口与调用\n- 虚拟机热迁移如何实现\n- OAM：OpenStack后台运行的周期性任务\n\n一口气列了七个问题，我想到下周能彻底写完就算比错，因为Neutron的部分我有些底子。再用一周应该可以分析完成。\n\n### 安全认证\n我不是搞安全的，在我看来，安全认证的范围在于如何证明你妈是你妈，也就是当一个Restcall到来的时候，如何保障消息来源的可靠性以及消息的完整性，消息来源的可靠性的意思是Restcall的来源是经过认证的注册用户，而不是第三方黑客；消息的完整性是指消息在传递的过程中没有被修改。注意，这里面没有涉及消息的加密技术，这是另一个范畴，加密是保障消息在传递过程中第三方无读取权限（比如网上交易里涉及的密码等等）。\n![Nova API网络](http://img.blog.csdn.net/20170722082307803?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n***Token是什么***\n一般来说，Token是通过提供有效的用户名/密码组合提供给用户的一段数据。另外，与Token密切相关的是它的有效期（通常是几小时甚至几分钟）。Client可以缓存Token并将其注入到OpenStack API请求中。OpenStack API端点将令牌从用户请求中取出，并通过KeyStone后端进行验证，从而确认调用的合法性。\n我们现在把注意力放在两种Token生成方式：通用唯一标识符（UUID）和公共密钥基础设施（PKI）的标识\n###UUID\n![这里写图片描述](http://www.mirantis.com/wp-content/uploads/2013/07/UUID-token-validation-flow-3.png?_=3800235)\n\n基于提供的用户名/密码对：\n- KeyStone将做以下工作：\n- 生成一个UUID令牌。\n- 将UUID令牌存储在后端。\n- 发送一份拷贝的UUID令牌返回给客户端。\n- 客户机将缓存令牌。\n- 然后客户端会把UUID附在每个API调用上。\n- 在每一个用户的请求，API端点会送这个UUID回到Keystone验证。\n- Keystone将UUID和它的认证后端匹配（检查UUID字符串、日期）。\n- KeyStone将返回“成功”或“失败”消息到API端点。\n从上面的图表中可以看到，对于每个用户调用，API端点都需要使用KeyStone服务进行联机验证。想象成千上万的Client执行VM List、网络创建等等操作。这种设计导致了大量流量被导向了KeyStone造成单点故障。事实上，在生产中，Keystone被证明是负载最重的OpenStack服务之一，但Grizzly版本之后就采取了PKI方式来解决这个问题。\n\n###背景知识：非对称加密\n\n采用非对称加密算法，公钥获取的可靠性就非常重要，获取到正确的公钥，后续的工作就成功了一半。另一半是保障数据的完整性，这个是通过数据签名实现的，怎么样才能保障获取到正确的公钥呢？\n我们第一反应可能会想到以下的两个方法：\n\t- a)把公钥放到互联网的某个地方的一个下载地址，事先给“客户”去下载。\n\t- b)每次和“客户”开始通信时，“服务器”把公钥发给“客户”。\n但是这个两个方法都有一定的问题，\n对于a)方法，“客户”无法确定这个下载地址是不是“服务器”发布的，你凭什么就相信这个地址下载的东西就是“服务器”发布的而不是别人伪造的呢，万一下载到一个假的怎么办？另外要所有的“客户”都在通信前事先去下载公钥也很不现实。\n对于b)方法，也有问题，因为任何人都可以自己生成一对公钥和私钥，他只要向“客户”发送他自己的私钥就可以冒充“服务器”了。示意如下：\n\n“客户”-\u003e“黑客”：你好           //黑客截获“客户”发给“服务器”的消息\n“黑客”-\u003e“客户”：你好，我是服务器，这个是我的公钥    //黑客自己生成一对公钥和私钥，把公钥发给“客户”，自己保留私钥\n“客户”-\u003e“黑客”：向我证明你就是服务器\n“黑客”-\u003e“客户”：你好，我是服务器 {你好，我是服务器}[黑客自己的私钥|RSA]      //客户收到“黑客”用私钥加密的信息后，是可以用“黑客”发给自己的公钥解密的，从而会误认为“黑客”是“服务器”\n\n因此“黑客”只需要自己生成一对公钥和私钥，然后把公钥发送给“客户”，自己保留私钥，这样由于“客户”可以用黑客的公钥解密黑客的私钥加密的内容，“客户”就会相信“黑客”是“服务器”，从而导致了安全问题。这里问题的根源就在于，大家都可以生成公钥、私钥对，无法确认公钥对到底是谁的。 **如果能够确定公钥到底是谁的，就不会有这个问题了。**例如，如果收到“黑客”冒充“服务器”发过来的公钥，经过某种检查，如果能够发现这个公钥不是“服务器”的就好了。\n\n解决这个问题其实就不是技术问题了，需要一个权威机构来授权数字证书，它可以解决我们上面的问题。先大概看下什么是数字证书，一个证书包含下面的具体内容（证书相当于协议的控制面，会定义后续交互的算法和公钥等）：\n\n◆CA (证书的发布机构)\n\n指出是什么机构发布的这个证书，也就是指明这个证书是哪个公司创建的(只是创建证书，不是指证书的使用者)。对于上面的这个证书来说，就是指\"SecureTrust CA\"这个机构。\n\n◆Valid from , Valid to (证书的有效期)\n\n也就是证书的有效时间，或者说证书的使用期限。 过了有效期限，证书就会作废，不能使用了。\n\n◆Public key (公钥)\n\n这个我们在前面介绍公钥密码体制时介绍过，公钥是用来对消息进行加密和解密的。\n\n◆Subject (主题)\n\n这个证书是发布给谁的，或者说证书的所有者，一般是某个人或者某个公司名称、机构的名称、公司网站的网址等。 对于这里的证书来说，证书的所有者是Trustwave这个公司。\n\n◆Signature algorithm (签名所使用的算法)\n\n就是指的这个数字证书的数字签名所使用的加密算法，这样就可以使用证书发布机构的证书里面的公钥，根据这个算法对指纹进行解密。指纹的加密结果就是数字签名。\n\n ◆Thumbprint, Thumbprint algorithm (指纹以及指纹算法)\n\n这个是用来保证证书的完整性的，也就是说确保证书没有被修改过，其原理就是在发布证书时，发布者根据指纹算法(一个hash算法)计算整个证书的hash值(指纹)并和证书放在一起，使用者在打开证书时，自己也根据指纹算法计算一下证书的hash值(指纹)，如果和刚开始的值对得上，就说明证书没有被修改过，因为证书的内容被修改后，根据证书的内容计算的出的hash值(指纹)是会变化的。 注意，这个指纹是数据的指纹，并不是代表客户端或服务器端的指纹。\n\n注意，为了保证安全，在证书的发布机构发布证书时，证书的指纹和指纹算法，都会加密后再和证书放到一起发布，以防有人修改指纹后伪造相应的数字证书。这里问题又来了，证书的指纹和指纹算法用什么加密呢？他们是用证书发布机构的私钥进行加密的。可以用证书发布机构的公钥对指纹和指纹算法解密，也就是说证书发布机构除了给别人发布证书外，他自己本身也有自己的证书。证书发布机构的证书是哪里来的呢？？？这个证书发布机构的数字证书(一般由他自己生成)在我们的操作系统刚安装好时(例如windows xp等操作系统)，这些证书发布机构的数字证书就已经被微软(或者其它操作系统的开发机构)安装在操作系统中了，微软等公司会根据一些权威安全机构的评估选取一些信誉很好并且通过一定的安全认证的证书发布机构，把这些证书发布机构的证书默认就安装在操作系统里面了，并且设置为操作系统信任的数字证书。这些证书发布机构自己持有与他自己的数字证书对应的私钥，他会用这个私钥加密所有他发布的证书的指纹作为数字签名。\n\n说白了，要想具备CA资质，又需要到更权威的机构去认证，而这些更权威的机构是已经默认在操作系统中安装了其公钥证书。所以在初始阶段，Client会拿着Server端的证书去权威机构鉴定是否是对方，而Server端会拿着Client的证书去自己的CA机构Keystone验证可靠性。\n![这里写图片描述](http://www.codeproject.com/KB/IP/326574/mutualssl_small.png?_=3927390)\n\n###证书的发布机构\n前面已经初步介绍了一下证书发布机构，这里再深入讨论一下。\n\n其实所有的公司都可以发布证书，我们自己也可以去注册一家公司来专门给别人发布证书。但是很明显，我们自己的专门发布证书的公司是不会被那些国际上的权威机构认可的，人家怎么知道你是不是个狗屁皮包公司？因此微软在它的操作系统中，并不会信任我们这个证书发布机构，当应用程序在检查证书的合法信的时候，一看证书的发布机构并不是操作系统所信任的发布机构，就会抛出错误信息。也就是说windows操作系统中不会预先安装好我们这个证书发布机构的证书，不信任我们这个发布机构。\n\n  \n\n不受信任的证书发布机构的危害\n\n为什么一个证书发布机构受不受信任这么重要？我们举个例子。假设我们开了一个狗屁公司来为别人发布证书，并且我和微软有一腿，微软在他们的操作系统中把我设置为了受信任的证书发布机构。现在如果有个小公司叫Wicrosoft 花了10块钱让我为他们公司申请了一个证书，并且公司慢慢壮大，证书的应用范围也越来越广。然后有个奸商的公司JS Company想冒充Wicrosoft，于是给了我￥10000，让我为他们颁布一个证书，但是证书的名字(Subject)要写Wicrosoft，假如我为了这￥10000，真的把证书给了他们，那么他们以后就可以使用这个证书来冒充Wicrosoft了。\n\n如果是一个优秀的证书发布机构，比如你要向他申请一个名字叫Wicrosoft的证书，它会让你提供很多资料证明你确实可以代表Wicrosoft这个公司，也就是说他回去核实你的身份。证书发布机构是要为他发布出的证书负法律责任的。\n\n  \n\n到这里，你可能会想，TMD，那我们自己就不能发布证书吗？就一定要花钱去申请？当然不是，我们自己也可以成立证书发布机构，但是需要通过一些安全认证等等，只是有点麻烦。另外，如果数字证书只是要在公司内部使用，公司可以自己给自己生成一个证书，在公司的所有机器上把这个证书设置为操作系统信任的证书发布机构的证书(这句话仔细看清楚，有点绕口)，这样以后公司发布的证书在公司内部的所有机器上就可以通过验证了(在发布证书时，把这些证书的Issuer(发布机构)设置为我们自己的证书发布机构的证书的Subject(主题)就可以了)。但是这只限于内部应用，因为只有我们公司自己的机器上设置了信任我们自己这个所谓的证书发布机构，而其它机器上并没有事先信任我们这个证书发布机构，所以在其它机器上，我们发布的证书就无法通过安全验证。\n\n###PKI方式\n![这里写图片描述](http://www.mirantis.com/wp-content/uploads/2013/07/PKI-token-validation-flow-1.png?_=3800235)\n在PKI方式下，KeyStone已经成为一个CA（认证授权）机构，PKI 的本质就是基于数字签名，Keystone 用私钥对 token 进行数字签名，各个 API server 用公钥在本地验证该 token。也就是说通过这种方式来实现单点登录（用户只需要登录一次就可以访问所有相互信任的应用系统）。当然这里如何确保安全（比如黑客截获这个Token冒充客户端发送请求，当然这里会有一个Token过期时间），我也不太清楚，只是当前已经在使用这种方式，是否安全具体做安全的人可以告知一下。这里的Token是通过Service catalog，User roles，Metadata等消息来生成的\n\n总结一下：\n如何确保消息源的可靠性？  通过第三方权威机构认证的CA机构才有授予证书的权利，而这些第三方权威机构在操作系统默认已经安装，在初始阶段，Client会拿着Server端的证书去权威机构鉴定是否是对方，而Server端会拿着Client的证书去自己的CA机构Keystone验证可靠性。\n\n如何确保数据的完整性？ 通过数据签名算法，首先对数据进行Hash算法生成指纹，然后用公钥或者私钥加密生成数字签名，接收方拿到数据后使用私钥解密数字签名，同时使用相同的Hash算法对数据生成指纹进行比对。\n\n如何确保数据是保密的，第三方无查看权限？ 交互双方在互相认定证书之后会使用公私钥加密约定消息体的对称加密算法和公钥，这个过程是客户端来发起的，服务器端不允许这个操作。\n\n总而言之，证书类似一个协议控制面，用来做消息源可靠性的认定以及数据完整性的算法约定，后续的交互就会用上证书约定的公钥和指纹算法。消息体的保密性是无法确保的。需要靠另外的数据加密算法。\n\n参考文献：\nhttp://www.cnblogs.com/popsuper1982/p/3800235.html\nhttp://blog.sina.com.cn/s/blog_44ee37cd01016r1h.html\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-8] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":75790969,"title":"【OpenStack源码分析之八】openstack中虚拟机在线迁移","create_at":"\/Date(1500717157000)\/","create":"2017-07-22 05:52:37","view_count":116,"comment_count":0,"comment_allowed":"true","type":"repost","channel":2,"digg":0,"bury":0,"description":"转自：https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/本文尝试回答与 Live migration 相关的几个问题：Live migration 是什么？为什么要做 Live migration？如何做 Live migration？如果你读完本文，基本了解了这三个问题的答案，","url":"http://blog.csdn.net/BLACKMOON88/article/details/75790969","categories":"云计算,OpenStack","tags":"openstack,源码,虚拟机,迁移","content":"\u003cp\u003e转自：\u003ca href=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/\" target=\"_blank\"\u003ehttps://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e本文尝试回答与 Live migration 相关的几个问题：Live migration 是什么？为什么要做 Live migration？如何做 Live migration？如果你读完本文，基本了解了这三个问题的答案， 这篇文章的主要目的也就达到了。由于本文介绍的是 OpenStack 平台上动态迁移的实现，所以读者必须对 OpenStack 有一定的了解。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"虚拟机迁移简介\"\u003e虚拟机迁移简介\u003c/h3\u003e\n\n\u003cp\u003e动态迁移包括两方面的意思，一是迁移(Migration)，迁移就是把用户的虚拟机从一台物理主机移到另外一台物理主机。二是动态，动态的意思就是在迁移的过程中，(1):虚拟机还开着机；(2):虚拟机的网路也不受影响；(3):而且上面的运行的用户程序依旧运行。整个过程对用户来说是透明的，对用户可以正常使用迁移途中的虚拟机。 \u003cbr\u003e\nOpenStack 支持两种类型的虚拟机迁移：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e冷迁移(Cold migration)- 冷迁移也叫静态迁移。在迁移过程中虚拟机必须关机，用户也不能访问虚拟机。因为要关机，所以他适用于用户对系统可用性要求不是很高的时候。\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e热迁移(Hot or live migration)- 热迁移也叫动态迁移。在迁移的过程中虚拟机仍旧工作，用户可以继续使用虚拟机。本文就介绍的就是这种类型的迁移。热迁移又分为下面二种类型：\u003c/p\u003e\n\n\u003cul\u003e\u003cli\u003e(1):虚拟机的数据存在共享磁盘上(Shared storage-based live migration),如图 1 所 示。\u003c/li\u003e\n\u003cli\u003e(2):虚拟机的数据存在本地磁盘(block migration)，如图 2 所示，需要对镜像文件和内存数据同时迁移。OpenStack 通过块迁移实现这这类迁移。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index880.png\" alt=\"图1\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index970.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"虚拟机迁移的作用\"\u003e虚拟机迁移的作用\u003c/h3\u003e\n\n\u003cp\u003e每个读者都可能会问这样一个问题，虚拟机用的好好的，为啥要迁移呀？也就是迁移的价值和目的在哪里。在数据中心的日常运维中，常常要处理下面几种场景和需求，了解了这些需求，这个问题也就有了答案。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e需求 1：物理机器硬件系统的维护，故障修复和升级(upgrade)，但运行在这台物理机器上的虚拟机不能关机，因为用户重要的服务跑在上面。\u003c/li\u003e\n\u003cli\u003e需求 2：物理机器软件系统升级，打补丁(patch)，为了不影响上面跑的虚拟机，在升级和打补丁之前，需要把虚拟机迁移到别的物理机器上。\u003c/li\u003e\n\u003cli\u003e需求 3：一个物理机器上的负载太重，需要减少一些虚拟机来释放资源。\u003c/li\u003e\n\u003cli\u003e需求 4：在一个 cluster 里，有的物理机上的虚拟机太多，有的物理机上虚拟机太少，需要做一下资源平衡。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e除了上面四个主要的需求，从服务的角度来看，Live migration 有下面两个好处：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e好处 1：软件和硬件系统的维护升级，不会影响用户的关键服务，提高了服务的高可用性和 用户的满意度。\u003c/li\u003e\n\u003cli\u003e好处 2：系统管理员不用加班加点，在大半夜进行系统升级了，在正常的工作时间就可以完成这项工作，减少了公司的维护费用。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e有这四个需求和两个好处，所以动态迁移值得一作。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"动态迁移方法和实现\"\u003e动态迁移方法和实现\u003c/h3\u003e\n\n\u003cp\u003e本章详细介绍在 OpenStack 里如何实现动态迁移。在第一节里，提到了有两种类型的动态迁移，本文只介绍图 2 所示的虚拟机的数据存在本地磁盘(block migration)的动态迁移。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"动态迁移的条件\"\u003e动态迁移的条件\u003c/h4\u003e\n\n\u003cp\u003e动态迁移是把虚拟机从一个物理主机迁移到另外一个物理主机，所以至少需要有两个物理主机作为计算节点。下面是一个最小的 OpenStack 配置。 三个物理主机，一个用来做 OpenStack 的控制节点，两个用来做计算节点。如图 3 所示。 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index1746.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e控制节点接受并处理动态迁移的请求，管理员可以从 Horizon、命令行、API 发起动态迁移。 动态迁移就是把客户的 VM 从计算节点 1 迁移到计算节点 2，或者从计算节点 2 迁移到计算节点 1，如图 4 所示。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index1888.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e计算节点上的 Hypervisor 是 KVM，操作系统是 redhat6.5，OpenStack 是 Juno。计算节点 1 和 2 上的虚拟机分别存储在本地文件系统，如图 2 所示。 \u003cbr\u003e\n上面提到的 Hypervisor 和 KVM 相关概念，以及 OpenStack 各个模块的详细介绍，您可以阅读参考资料里文档，这里不在做介绍。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"动态迁移的实现\"\u003e动态迁移的实现\u003c/h4\u003e\n\n\u003cp\u003e本节分别从基本概念、传输协议和迁移的步骤三个方面介绍动态迁移是如何实现的。 \u003cbr\u003e\n\u003cstrong\u003e\u003cem\u003e基本概念\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n在了解动态迁移之前，必须了解镜像文件的格式 QCOW2。Qcow2 是 QEMU 目前推荐的镜像格式，它支持稀疏文件以节省存储空间，支持加密以提高镜像文件的安全性，支持基于 zlib 的压缩。Qcow2 镜像可以用来保存另一个镜像文件的变化，它并不去修改原始镜像文件，原始镜像文件也叫后端镜像(backing_file)。只记录与原始镜像文件的不同部分的镜像文件，这种镜像文件就叫做 copy-on-write 镜像，它虽然是一个单独的镜像文件，但它的大部分数据都来自原始镜像，只有基于原始镜像文件的增量部分才会被记录下来。本文提及的虚拟机都是 OpenStack 用 Qcow2 格式的镜像文件建立的，如图 5 所示，包含两部分。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e后端镜像(libvirt base)\u003c/li\u003e\n\u003cli\u003e虚拟机单独的增量镜像文件(libvirt instance disks)，copy-on-write 镜像 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2511.png\" alt=\"图5\" title=\"\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e在物理机的磁盘上，当我们建了一个虚拟机后，就会生成如图 6 列的这些文件。其中_base 下面的文件，就是后端镜像(libvirt base)，目录 6e783272-31b5-4fdc-8828-2b8892daab39 下面是虚拟机单独的增量镜像文件(libvirt instance disks)，它只记录和 base 文件不同的内容。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2710.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e用 qemu-img 查看虚拟机单独的增量镜像文件的信息，我们可以看到他的 backing file 是_base 目录下的镜像文件，如图 7 所示。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2801.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e费了这么多篇幅介绍 QCOW2，您会奇怪，目的何在？其实上面介绍的后端镜像(libvirt Base)，虚拟机单独的增量镜像文件(libvirt instance disks)，它们就是要被迁移的数据。动态迁移的最终目标就是把它们完整地从源物理主机迁移到目标物理主机。除了他们两个之外，还有一个需要迁移的对象就是内存里运行的虚拟机的数据。 \u003cbr\u003e\n总结一下：虚拟机的迁移，其实就是数据的转移，因为计算节点之间没有共享存储，所以要转移的数据包括两部分：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e静态数据：存储在本地的虚拟机的镜像文件，包括后端镜像(libvirt Base)和虚拟机单独的增量镜像文件(libvirt instance disks)。\u003c/li\u003e\n\u003cli\u003e动态数据：内存里虚拟机的运行时数据，内存里的数据是动态变化的数据，虚拟机里运行的负载的大小直接影响迁移的时间长短。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移通道和传输协议\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nOpenStack 调用底层的 libvirt 来完成动态迁移。虚拟机的迁移，其实就是数据的转移。libvirt 提供了隧道化的数据传输（libvirt tunnelled transport）方式来完成数据转移。如图 8 所示。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3326.png\" alt=\"图8\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e数据的转移就涉及数据的传输，数据的传输需要通过网络，本文介绍使用 TCP 网路协议完实现动态迁移。Libvirt 默认情况下不支持 TCP 协议，需要对 libvirt 的配置做修改，使 libvirt 能够支持 TCP 协议，后面的章节会详细的介绍如何配置。 在迁移的过程中，运行在目的物理主机（Dest Host）中的 libvirtd 进程要根据 address 和 port 创建一个 URI，URI 是目的物理主机用来接收数据和发回数据到源物理主机（Source Host）的 libvirtd 进程的，如图 9。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3611.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e在目的物理主机和源物理主机，只要下面的命令能够执行，就说明能够传输数据了。 \u003cbr\u003e\n在 compute01 上执行：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs ruby\"\u003e[root\u003cspan class=\"hljs-variable\"\u003e@compute01\u003c/span\u003e]\u003cspan class=\"hljs-comment\"\u003e# virsh -c qemu+tcp://nova\u003cspan class=\"hljs-yardoctag\"\u003e@compute\u003c/span\u003e02/system\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在 compute02 上执行：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs ruby\"\u003e[root\u003cspan class=\"hljs-variable\"\u003e@compute01\u003c/span\u003e]\u003cspan class=\"hljs-comment\"\u003e# virsh -c qemu+tcp://nova\u003cspan class=\"hljs-yardoctag\"\u003e@compute\u003c/span\u003e02/system\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e如下例所示在 compute01 上执行 virsh 命令，如果有图 10 所示的输出，就说明传输通道正常。 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3892.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移的步骤\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n迁移的基本概念弄清楚了，下面我们继续介绍迁移的步骤。OpenStack 做动态迁移一个正常的流程主要包括四部分：迁移前的条件检查、迁移前的预处理、迁移、迁移后的处理。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移前的条件检查\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e动态迁移要成功执行，一些条件必须满足，所以在执行迁移前必须做一些条件检查。 \u003c/li\u003e\n\u003cli\u003e权限检查，执行迁移的用户是否有足够的权限执行动态迁移。\u003c/li\u003e\n\u003cli\u003e参数检查，传递给 API 的参数是否足够和正确，如是否指定了 block-migrate 参数。 \u003c/li\u003e\n\u003cli\u003e检查目标物理主机是否存在。\u003c/li\u003e\n\u003cli\u003e检查被迁移的虚拟机是否是 running 状态。\u003c/li\u003e\n\u003cli\u003e检查源和目的物理主机上的 nova-compute service 是否正常运行。\u003c/li\u003e\n\u003cli\u003e检查目的物理主机和源物理主机是否是同一台机器。 \u003c/li\u003e\n\u003cli\u003e检查目的物理主机是否有足够的内存(memory)。\u003c/li\u003e\n\u003cli\u003e检查目的和源物理主机器\u003c/li\u003e\n\u003cli\u003ehypervisor 和 hypervisor 的版本是否相同。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移前的预处理\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n 在真正执行迁移前，必须做一下热身，做一些准备工作。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e在目的物理主机上获得和准备虚拟机挂载的块设备(volume)。\u003c/li\u003e\n\u003cli\u003e在目的物理主机上设置虚拟机的网络(networks)。\u003c/li\u003e\n\u003cli\u003e目的物理主机上设置虚拟机的防火墙(fireware)。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n条件满足并且做完了预处理工作后，就可以执行动态迁移了。主要步骤如下：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e调用 libvirt python 接口 migrateToURI，来把源主机迁移到目的主机。\u003c/p\u003e\n\n\u003cul\u003e\u003cli\u003edom.migrateToURI(CONF.live_migration_uri % dest,logical_sum,None,CONF.live_migration_bandwidth)\u003c/li\u003e\n\u003cli\u003elive_migration_uri：这个 URI 就是在 3.2.2 里介绍的 libvirtd 进程定义的。\u003c/li\u003e\n\u003cli\u003elive_migration_bandwidth：这个参数定义了迁移过程中所使用的最大的带宽。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e以一定的时间间隔（0.5）循环调用 wait_for_live_migration 方法，来检测虚拟机迁移 的状态，一直到虚拟机成功迁移为止。\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移后的处理\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n当虚拟机迁移完成后，要做一些善后工作。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e在源物理主机上 detach volume。 \u003c/li\u003e\n\u003cli\u003e在源物理主机上释放 security group ingress rule。\u003c/li\u003e\n\u003cli\u003e在目的物理主机上更新数据库里虚拟机的状态。\u003c/li\u003e\n\u003cli\u003e在源物理主机上删除虚拟机。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e上面四步正常完成后，虚拟机就成功的从源物理主机成功地迁移到了目的物理主机了。系统管理员就可以执行第二章所列的哪些管理任务了。\u003c/p\u003e\n\n\u003ch3 id=\"动态迁移的配置\"\u003e动态迁移的配置\u003c/h3\u003e\n\n\u003cp\u003e本节列出了支持动态迁移的配置，必须确保所有物理主机上配置真确，动态迁移才能成功完成。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"libvirt\"\u003eLibvirt\u003c/h4\u003e\n\n\u003cp\u003elibvirt 默认情况下支持远程连接的 TLS 协议，不支持 TCP 协议，因此将 listen_tls=0 listen_tcp=1 使 libvirt 能够支持 TCP 协议。 \u003cbr\u003e\n1. 修改/etc/sysconfig/libvirtd 文件。 \u003cbr\u003e\n\u003ccode\u003eLIBVIRTD_ARGS=\"--listen\"\u003c/code\u003e \u003cbr\u003e\n2. 在/etc/libvirt/libvirtd.conf 文件中做如下配置。 \u003cbr\u003e\n \u003ccode\u003elisten_tls=0 \u003cbr\u003e\nlisten_tcp=1 \u003cbr\u003e\nauth_tcp=\"none\"\u003c/code\u003e \u003cbr\u003e\n3. 重启 libvirtd 服务\u003c/p\u003e\n\n\n\n\u003ch4 id=\"物理主机上-dns\"\u003e物理主机上 DNS\u003c/h4\u003e\n\n\u003cp\u003e配置每个物理主机上的/etc/host，加入每个物理主机的 hostname 和 IP，如下例：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e\u003cspan class=\"hljs-number\"\u003e192.168\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.0\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.1\u003c/span\u003e     compute-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e  compute-\u003cspan class=\"hljs-number\"\u003e1.\u003c/span\u003eibm\u003cspan class=\"hljs-preprocessor\"\u003e.com\u003c/span\u003e\n\u003cspan class=\"hljs-number\"\u003e192.168\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.0\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.2\u003c/span\u003e     compute-\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e  compute-\u003cspan class=\"hljs-number\"\u003e2.\u003c/span\u003eibm\u003cspan class=\"hljs-preprocessor\"\u003e.com\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch4 id=\"防火墙\"\u003e防火墙\u003c/h4\u003e\n\n\u003cp\u003e配置/etc/sysconfig/iptables，打开 TCP 端口 16509。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e\u003cspan class=\"hljs-attribute\"\u003e-A\u003c/span\u003e INPUT \u003cspan class=\"hljs-attribute\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"hljs-attribute\"\u003e-m\u003c/span\u003e multiport \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eports \u003cspan class=\"hljs-number\"\u003e16509\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003ecomment \u003cspan class=\"hljs-string\"\u003e\"libvirt\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003e-j\u003c/span\u003e ACCEPT\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch4 id=\"openstack-nova\"\u003eOpenStack Nova\u003c/h4\u003e\n\n\u003cp\u003e在/etc/nova/nova.conf 文件里配置 live_migration 标记。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003elive_migration_flag\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003eVIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_LIVE\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch3 id=\"动态迁移的实例\"\u003e动态迁移的实例\u003c/h3\u003e\n\n\u003cp\u003e本节通过下面的例子来演示如何做动态迁移。这个例子的目标就是把虚拟机从 tor01kvm001ccz048 迁移到 tor01kvm002ccz048。如图 11 所示。 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index5914.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e在 tor01kvm001ccz048 上建一个虚拟机 lm001，如图 12 所示。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e\u003cspan class=\"hljs-variable\"\u003e#nova\u003c/span\u003e boot lm001 \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eimage \u003cspan class=\"hljs-string\"\u003e\"Red Hat Enterprise Linux 6.5 x86_64\"\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eflavor Standard_1_2 \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eavailability\u003cspan class=\"hljs-attribute\"\u003e-zone\u003c/span\u003e nova:tor01kvm001ccz048 \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003enic net\u003cspan class=\"hljs-attribute\"\u003e-id\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e88\u003c/span\u003ece4c1a\u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e8120\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003ea97\u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e861\u003c/span\u003ed\u003cspan class=\"hljs-attribute\"\u003e-ba4b3dbaa6a3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6151.png\" alt=\"图12\" title=\"\"\u003e \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e检查虚拟机 lm001 建在了 tor01kvm001ccz048 上，如图 13 所示。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6210.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e执行动态迁移\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e\u003cspan class=\"hljs-variable\"\u003e#nova\u003c/span\u003e live\u003cspan class=\"hljs-attribute\"\u003e-migration\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eblock\u003cspan class=\"hljs-attribute\"\u003e-migrate\u003c/span\u003e lm001 tor01kvm002ccz048\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e我们可以看到虚拟机的 Task State 变成了 migrating 状态，如图 14 所示。 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6359.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e检查迁移的结果 \u003cbr\u003e\n通过 nova show 命令，可以看到 lm001 已经成功迁移到了 tor01kvm002ccz048，如图 15 所示。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6453.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"总结\"\u003e总结\u003c/h3\u003e\n\n\u003cp\u003e从前面的介绍我们可以看出，即使没有共享存储，我们也可以对虚拟机实现无中断的动态迁移，不过所有的计算节点之间需要快的网路支持。另外还需要注意两点：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e本文使用的是没有没有加密的 TCP/IP socket，所以在生产环境不推荐使用，除非是在一个安全可信的网路里执行动态迁移。\u003c/li\u003e\n\u003cli\u003e在迁移的过程中，虚拟机会有 downtime。详细的信息，可以阅读参考资料里的块迁移的性能报告。\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003ch3 id=\"相关主题\"\u003e相关主题\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://docs.openstack.org/admin-guide-cloud/content/section_configuring-compute-migrations.html\"\u003eOpenStack 官方文档\u003c/a\u003e，了解 OpenStack 关于块迁移的详细的配置和方法步骤。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://libvirt.org/migration.html\"\u003eLibvirt 官方文档\u003c/a\u003e，了解 Libvirt 里关于块迁移的实现原理，详细的配置步骤。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://blog.zhaw.ch/icclab/an-analysis-of-the-performance-of-block-live-mig\"\u003e块迁移的性能报告\u003c/a\u003e，了解块迁移的性能测试报告和方法。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://docs.openstack.org/image-guide/content/ch_introduction.html\"\u003eOpenStack 支持的 Image\u003c/a\u003e，了解 OpenStack 支持的 Image 的格式和类型。\u003c/li\u003e\n\u003c/ul\u003e","markdowncontent":"转自：https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/\n\n本文尝试回答与 Live migration 相关的几个问题：Live migration 是什么？为什么要做 Live migration？如何做 Live migration？如果你读完本文，基本了解了这三个问题的答案， 这篇文章的主要目的也就达到了。由于本文介绍的是 OpenStack 平台上动态迁移的实现，所以读者必须对 OpenStack 有一定的了解。\n\n###虚拟机迁移简介\n\n动态迁移包括两方面的意思，一是迁移(Migration)，迁移就是把用户的虚拟机从一台物理主机移到另外一台物理主机。二是动态，动态的意思就是在迁移的过程中，(1):虚拟机还开着机；(2):虚拟机的网路也不受影响；(3):而且上面的运行的用户程序依旧运行。整个过程对用户来说是透明的，对用户可以正常使用迁移途中的虚拟机。\nOpenStack 支持两种类型的虚拟机迁移：\n\n - 冷迁移(Cold migration)- 冷迁移也叫静态迁移。在迁移过程中虚拟机必须关机，用户也不能访问虚拟机。因为要关机，所以他适用于用户对系统可用性要求不是很高的时候。\n\n - 热迁移(Hot or live migration)- 热迁移也叫动态迁移。在迁移的过程中虚拟机仍旧工作，用户可以继续使用虚拟机。本文就介绍的就是这种类型的迁移。热迁移又分为下面二种类型：\n \n\t - (1):虚拟机的数据存在共享磁盘上(Shared storage-based live migration),如图 1 所 示。\n\t - (2):虚拟机的数据存在本地磁盘(block migration)，如图 2 所示，需要对镜像文件和内存数据同时迁移。OpenStack 通过块迁移实现这这类迁移。\n\n![图1](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index880.png)\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index970.png)\n\n###虚拟机迁移的作用\n\n每个读者都可能会问这样一个问题，虚拟机用的好好的，为啥要迁移呀？也就是迁移的价值和目的在哪里。在数据中心的日常运维中，常常要处理下面几种场景和需求，了解了这些需求，这个问题也就有了答案。\n\n- 需求 1：物理机器硬件系统的维护，故障修复和升级(upgrade)，但运行在这台物理机器上的虚拟机不能关机，因为用户重要的服务跑在上面。\n- 需求 2：物理机器软件系统升级，打补丁(patch)，为了不影响上面跑的虚拟机，在升级和打补丁之前，需要把虚拟机迁移到别的物理机器上。\n- 需求 3：一个物理机器上的负载太重，需要减少一些虚拟机来释放资源。\n- 需求 4：在一个 cluster 里，有的物理机上的虚拟机太多，有的物理机上虚拟机太少，需要做一下资源平衡。\n\n除了上面四个主要的需求，从服务的角度来看，Live migration 有下面两个好处：\n\n- 好处 1：软件和硬件系统的维护升级，不会影响用户的关键服务，提高了服务的高可用性和 用户的满意度。\n- 好处 2：系统管理员不用加班加点，在大半夜进行系统升级了，在正常的工作时间就可以完成这项工作，减少了公司的维护费用。\n\n有这四个需求和两个好处，所以动态迁移值得一作。\n\n###动态迁移方法和实现\n本章详细介绍在 OpenStack 里如何实现动态迁移。在第一节里，提到了有两种类型的动态迁移，本文只介绍图 2 所示的虚拟机的数据存在本地磁盘(block migration)的动态迁移。\n####动态迁移的条件\n动态迁移是把虚拟机从一个物理主机迁移到另外一个物理主机，所以至少需要有两个物理主机作为计算节点。下面是一个最小的 OpenStack 配置。 三个物理主机，一个用来做 OpenStack 的控制节点，两个用来做计算节点。如图 3 所示。\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index1746.png)\n\n控制节点接受并处理动态迁移的请求，管理员可以从 Horizon、命令行、API 发起动态迁移。 动态迁移就是把客户的 VM 从计算节点 1 迁移到计算节点 2，或者从计算节点 2 迁移到计算节点 1，如图 4 所示。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index1888.png)\n\n计算节点上的 Hypervisor 是 KVM，操作系统是 redhat6.5，OpenStack 是 Juno。计算节点 1 和 2 上的虚拟机分别存储在本地文件系统，如图 2 所示。\n上面提到的 Hypervisor 和 KVM 相关概念，以及 OpenStack 各个模块的详细介绍，您可以阅读参考资料里文档，这里不在做介绍。\n\n####动态迁移的实现\n本节分别从基本概念、传输协议和迁移的步骤三个方面介绍动态迁移是如何实现的。\n***基本概念***\n在了解动态迁移之前，必须了解镜像文件的格式 QCOW2。Qcow2 是 QEMU 目前推荐的镜像格式，它支持稀疏文件以节省存储空间，支持加密以提高镜像文件的安全性，支持基于 zlib 的压缩。Qcow2 镜像可以用来保存另一个镜像文件的变化，它并不去修改原始镜像文件，原始镜像文件也叫后端镜像(backing_file)。只记录与原始镜像文件的不同部分的镜像文件，这种镜像文件就叫做 copy-on-write 镜像，它虽然是一个单独的镜像文件，但它的大部分数据都来自原始镜像，只有基于原始镜像文件的增量部分才会被记录下来。本文提及的虚拟机都是 OpenStack 用 Qcow2 格式的镜像文件建立的，如图 5 所示，包含两部分。\n\n- 后端镜像(libvirt base)\n- 虚拟机单独的增量镜像文件(libvirt instance disks)，copy-on-write 镜像\n![图5](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2511.png)\n\n在物理机的磁盘上，当我们建了一个虚拟机后，就会生成如图 6 列的这些文件。其中_base 下面的文件，就是后端镜像(libvirt base)，目录 6e783272-31b5-4fdc-8828-2b8892daab39 下面是虚拟机单独的增量镜像文件(libvirt instance disks)，它只记录和 base 文件不同的内容。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2710.png)\n\n用 qemu-img 查看虚拟机单独的增量镜像文件的信息，我们可以看到他的 backing file 是_base 目录下的镜像文件，如图 7 所示。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2801.png)\n\n费了这么多篇幅介绍 QCOW2，您会奇怪，目的何在？其实上面介绍的后端镜像(libvirt Base)，虚拟机单独的增量镜像文件(libvirt instance disks)，它们就是要被迁移的数据。动态迁移的最终目标就是把它们完整地从源物理主机迁移到目标物理主机。除了他们两个之外，还有一个需要迁移的对象就是内存里运行的虚拟机的数据。\n总结一下：虚拟机的迁移，其实就是数据的转移，因为计算节点之间没有共享存储，所以要转移的数据包括两部分：\n\n- 静态数据：存储在本地的虚拟机的镜像文件，包括后端镜像(libvirt Base)和虚拟机单独的增量镜像文件(libvirt instance disks)。\n- 动态数据：内存里虚拟机的运行时数据，内存里的数据是动态变化的数据，虚拟机里运行的负载的大小直接影响迁移的时间长短。\n\n***迁移通道和传输协议***\nOpenStack 调用底层的 libvirt 来完成动态迁移。虚拟机的迁移，其实就是数据的转移。libvirt 提供了隧道化的数据传输（libvirt tunnelled transport）方式来完成数据转移。如图 8 所示。\n\n![图8](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3326.png)\n\n数据的转移就涉及数据的传输，数据的传输需要通过网络，本文介绍使用 TCP 网路协议完实现动态迁移。Libvirt 默认情况下不支持 TCP 协议，需要对 libvirt 的配置做修改，使 libvirt 能够支持 TCP 协议，后面的章节会详细的介绍如何配置。 在迁移的过程中，运行在目的物理主机（Dest Host）中的 libvirtd 进程要根据 address 和 port 创建一个 URI，URI 是目的物理主机用来接收数据和发回数据到源物理主机（Source Host）的 libvirtd 进程的，如图 9。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3611.png)\n\n在目的物理主机和源物理主机，只要下面的命令能够执行，就说明能够传输数据了。\n在 compute01 上执行：\n\n```\n[root@compute01]# virsh -c qemu+tcp://nova@compute02/system\n```\n在 compute02 上执行：\n\n```\n[root@compute01]# virsh -c qemu+tcp://nova@compute02/system\n```\n\n如下例所示在 compute01 上执行 virsh 命令，如果有图 10 所示的输出，就说明传输通道正常。\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3892.png)\n\n***迁移的步骤***\n迁移的基本概念弄清楚了，下面我们继续介绍迁移的步骤。OpenStack 做动态迁移一个正常的流程主要包括四部分：迁移前的条件检查、迁移前的预处理、迁移、迁移后的处理。\n\n***迁移前的条件检查***\n\n 1. 动态迁移要成功执行，一些条件必须满足，所以在执行迁移前必须做一些条件检查。 \n 2. 权限检查，执行迁移的用户是否有足够的权限执行动态迁移。\n 3. 参数检查，传递给 API 的参数是否足够和正确，如是否指定了 block-migrate 参数。 \n 4. 检查目标物理主机是否存在。\n 5. 检查被迁移的虚拟机是否是 running 状态。\n 6. 检查源和目的物理主机上的 nova-compute service 是否正常运行。\n 7. 检查目的物理主机和源物理主机是否是同一台机器。 \n 8. 检查目的物理主机是否有足够的内存(memory)。\n 9. 检查目的和源物理主机器\n 10. hypervisor 和 hypervisor 的版本是否相同。\n\n***迁移前的预处理***\n 在真正执行迁移前，必须做一下热身，做一些准备工作。\n\n 1. 在目的物理主机上获得和准备虚拟机挂载的块设备(volume)。\n 2. 在目的物理主机上设置虚拟机的网络(networks)。\n 3. 目的物理主机上设置虚拟机的防火墙(fireware)。\n \n***迁移***\n条件满足并且做完了预处理工作后，就可以执行动态迁移了。主要步骤如下：\n\n- 调用 libvirt python 接口 migrateToURI，来把源主机迁移到目的主机。\n \n - dom.migrateToURI(CONF.live_migration_uri % dest,logical_sum,None,CONF.live_migration_bandwidth)\n - live_migration_uri：这个 URI 就是在 3.2.2 里介绍的 libvirtd 进程定义的。\n - live_migration_bandwidth：这个参数定义了迁移过程中所使用的最大的带宽。\n\n- 以一定的时间间隔（0.5）循环调用 wait_for_live_migration 方法，来检测虚拟机迁移 的状态，一直到虚拟机成功迁移为止。\n\n***迁移后的处理***\n当虚拟机迁移完成后，要做一些善后工作。\n\n 1. 在源物理主机上 detach volume。 \n 2. 在源物理主机上释放 security group ingress rule。\n 3. 在目的物理主机上更新数据库里虚拟机的状态。\n 4. 在源物理主机上删除虚拟机。\n\n上面四步正常完成后，虚拟机就成功的从源物理主机成功地迁移到了目的物理主机了。系统管理员就可以执行第二章所列的哪些管理任务了。\n\n###动态迁移的配置\n本节列出了支持动态迁移的配置，必须确保所有物理主机上配置真确，动态迁移才能成功完成。\n####Libvirt\nlibvirt 默认情况下支持远程连接的 TLS 协议，不支持 TCP 协议，因此将 listen_tls=0 listen_tcp=1 使 libvirt 能够支持 TCP 协议。\n1. 修改/etc/sysconfig/libvirtd 文件。\n`LIBVIRTD_ARGS=\"--listen\"`\n2. 在/etc/libvirt/libvirtd.conf 文件中做如下配置。\n `listen_tls=0\nlisten_tcp=1\nauth_tcp=\"none\"`\n3. 重启 libvirtd 服务\n####物理主机上 DNS\n配置每个物理主机上的/etc/host，加入每个物理主机的 hostname 和 IP，如下例：\n\n```\n192.168.0.1     compute-1  compute-1.ibm.com\n192.168.0.2     compute-2  compute-2.ibm.com\n```\n\n####防火墙\n配置/etc/sysconfig/iptables，打开 TCP 端口 16509。\n\n```\n-A INPUT -p tcp -m multiport --ports 16509 -m comment --comment \"libvirt\" -j ACCEPT\n```\n\n####OpenStack Nova\n在/etc/nova/nova.conf 文件里配置 live_migration 标记。\n\n```\nlive_migration_flag=VIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_LIVE\n```\n###动态迁移的实例\n本节通过下面的例子来演示如何做动态迁移。这个例子的目标就是把虚拟机从 tor01kvm001ccz048 迁移到 tor01kvm002ccz048。如图 11 所示。\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index5914.png)\n\n- 在 tor01kvm001ccz048 上建一个虚拟机 lm001，如图 12 所示。\n\n```\n#nova boot lm001 --image \"Red Hat Enterprise Linux 6.5 x86_64\" --flavor Standard_1_2 --availability-zone nova:tor01kvm001ccz048 --nic net-id=88ce4c1a-8120-4a97-861d-ba4b3dbaa6a3\n\n```\n![图12](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6151.png) \n\n- 检查虚拟机 lm001 建在了 tor01kvm001ccz048 上，如图 13 所示。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6210.png)\n\n- 执行动态迁移\n\n```\n#nova live-migration --block-migrate lm001 tor01kvm002ccz048\n```\n我们可以看到虚拟机的 Task State 变成了 migrating 状态，如图 14 所示。\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6359.png)\n\n- 检查迁移的结果\n通过 nova show 命令，可以看到 lm001 已经成功迁移到了 tor01kvm002ccz048，如图 15 所示。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6453.png)\n\n###总结\n从前面的介绍我们可以看出，即使没有共享存储，我们也可以对虚拟机实现无中断的动态迁移，不过所有的计算节点之间需要快的网路支持。另外还需要注意两点：\n\n 1. 本文使用的是没有没有加密的 TCP/IP socket，所以在生产环境不推荐使用，除非是在一个安全可信的网路里执行动态迁移。\n 2. 在迁移的过程中，虚拟机会有 downtime。详细的信息，可以阅读参考资料里的块迁移的性能报告。\n \n###相关主题\n- [OpenStack 官方文档](http://docs.openstack.org/admin-guide-cloud/content/section_configuring-compute-migrations.html)，了解 OpenStack 关于块迁移的详细的配置和方法步骤。\n- [Libvirt 官方文档](http://libvirt.org/migration.html)，了解 Libvirt 里关于块迁移的实现原理，详细的配置步骤。\n- [块迁移的性能报告](http://blog.zhaw.ch/icclab/an-analysis-of-the-performance-of-block-live-mig)，了解块迁移的性能测试报告和方法。\n- [OpenStack 支持的 Image](http://docs.openstack.org/image-guide/content/ch_introduction.html)，了解 OpenStack 支持的 Image 的格式和类型。\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-4] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-17-【OpenStack源码分析之三】Nova-Compute启动流程分析.markdown [pool-2-thread-21] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之三】Nova-Compute启动流程分析》成功 [pool-2-thread-21] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-12-【OpenStack源码分析之一】初探OpenStack.markdown [pool-2-thread-13] [chx]
[INFO] 2017-07-28 12:44:28 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenVswitch源码分析之六】内核空间转发面数据结构与流程》成功 [pool-2-thread-18] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":75208757,"title":"【OpenStack源码分析之二】RabbitMQ分析","create_at":"\/Date(1500200868000)\/","create":"2017-07-16 06:27:48","view_count":140,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前言正在捋Nova的代码，从服务启动的入口这块就用到了第三方的Oslo_messaging库，可能也是因为消息中间件确实是整个软件的瓶颈，Oslo_messaging试图隔离出消息中间件和应用之间的接口，使得不仅仅可以使用RabbitMQ,也可以使用Kafka等其他中间件。RabbitMQ介绍这里十分感谢anzhsoft的技术专栏http://blog.csdn.net/column/details","url":"http://blog.csdn.net/BLACKMOON88/article/details/75208757","categories":"云计算,Python相关,OpenStack","tags":"openstack,源码,消息中间件,中间件,技术","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e正在捋Nova的代码，从服务启动的入口这块就用到了第三方的Oslo_messaging库，可能也是因为消息中间件确实是整个软件的瓶颈，Oslo_messaging试图隔离出消息中间件和应用之间的接口，使得不仅仅可以使用RabbitMQ,也可以使用Kafka等其他中间件。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"rabbitmq介绍\"\u003eRabbitMQ介绍\u003c/h3\u003e\n\n\u003cp\u003e这里十分感谢anzhsoft的技术专栏\u003ca href=\"http://blog.csdn.net/column/details/rabbitmq.html\" target=\"_blank\"\u003ehttp://blog.csdn.net/column/details/rabbitmq.html\u003c/a\u003e；把RobbitMQ这款中间件工具从使用者的视角写得很全面，我也不想深究里面的细节，在anzhsoft的基础之上我再提取一些用户关心的信息。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"历史\"\u003e\u003cstrong\u003e历史\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003eRabbitMQ是一个由erlang开发的AMQP（Advanced Message Queue ）的开源实现。AMQP 的出现其实也是应了广大人民群众的需求，虽然在同步消息通讯的世界里有很多公开标准（如 COBAR的 IIOP ，或者是 SOAP 等），但是在异步消息处理中却不是这样，只有大企业有一些商业实现（如微软的 MSMQ ，IBM 的 Websphere MQ 等），因此，在 2006 年的 6 月，Cisco 、Redhat、iMatix 等联合制定了 AMQP 的公开标准。 \u003cbr\u003e\n\u003cimg src=\"http://images2015.cnblogs.com/blog/434101/201601/434101-20160124205249375-897662551.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nRabbitMQ是由RabbitMQ Technologies Ltd开发并且提供商业支持的。该公司在2010年4月被SpringSource（VMWare的一个部门）收购。在2013年5月被并入Pivotal。其实VMWare，Pivotal和EMC本质上是一家的。不同的是VMWare是独立上市子公司，而Pivotal是整合了EMC的某些资源，现在并没有上市。\u003c/p\u003e\n\n\u003cp\u003eRabbitMQ的官网是\u003ca href=\"http://www.rabbitmq.com\" target=\"_blank\"\u003ehttp://www.rabbitmq.com\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"架构术语\"\u003e\u003cstrong\u003e架构术语\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"http://images2015.cnblogs.com/blog/434101/201601/434101-20160124204752953-1513084258.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n1.Server(broker): 接受客户端连接，实现AMQP消息队列和路由功能的进程。\u003c/p\u003e\n\n\u003cp\u003e2.Virtual Host:其实是一个虚拟概念，类似于权限控制组，一个Virtual Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual Host\u003c/p\u003e\n\n\u003cp\u003e3.Exchange:接受生产者发送的消息，并根据Binding规则将消息路由给服务器中的队列。ExchangeType决定了Exchange路由消息的行为，例如，在RabbitMQ中，ExchangeType有direct、Fanout和Topic三种，不同类型的Exchange路由的行为是不一样的。\u003c/p\u003e\n\n\u003cp\u003e4.Message Queue：消息队列，用于存储还未被消费者消费的消息。\u003c/p\u003e\n\n\u003cp\u003e5.Message: 由Header和Body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。\u003c/p\u003e\n\n\u003cp\u003e6.Binding:Binding联系了Exchange与Message Queue。Exchange在与多个Message Queue发生Binding后会生成一张路由表，路由表中存储着Message Queue所需消息的限制条件即Binding Key。当Exchange收到Message时会解析其Header得到Routing Key，Exchange根据Routing Key与Exchange Type将Message路由到Message Queue。Binding Key由Consumer在Binding Exchange与Message Queue时指定，而Routing Key由Producer发送Message时指定，两者的匹配方式由Exchange Type决定。 \u003c/p\u003e\n\n\u003cp\u003e7.Connection:连接，对于RabbitMQ而言，其实就是一个位于客户端和Broker之间的TCP连接。\u003c/p\u003e\n\n\u003cp\u003e8.Channel:信道，仅仅创建了客户端到Broker之间的连接后，客户端还是不能发送消息的。需要为每一个Connection创建Channel，AMQP协议规定只有通过Channel才能执行AMQP的命令。一个Connection可以包含多个Channel。之所以需要Channel，是因为TCP连接的建立和释放都是十分昂贵的，如果一个客户端每一个线程都需要与Broker交互，如果每一个线程都建立一个TCP连接，暂且不考虑TCP连接是否浪费，就算操作系统也无法承受每秒建立如此多的TCP连接。RabbitMQ建议客户端线程之间不要共用Channel，至少要保证共用Channel的线程发送消息必须是串行的，但是建议尽量共用Connection。\u003c/p\u003e\n\n\u003cp\u003e9.Command:AMQP的命令，客户端通过Command完成与AMQP服务器的交互来实现自身的逻辑。例如在RabbitMQ中，客户端可以通过publish命令发送消息，txSelect开启一个事务，txCommit提交一个事务。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"应用场景\"\u003e\u003cstrong\u003e应用场景\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景1：单发送单接收\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n这个场景比较简单，只是个Helllo word，并没有太大的实际用途。不过要注意的是Queue和Binding的CURD权限，生产者和消费者是有的，但是vHost和Exchange的权限他们并没有，因为前者和特定用户相关，后者则是多个用户共享使用的。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-one-overall.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nsend.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027hello\u0027\u003c/span\u003e)  \n\nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                      routing_key=\u003cspan class=\"hljs-string\"\u003e\u0027hello\u0027\u003c/span\u003e,  \n                      body=\u003cspan class=\"hljs-string\"\u003e\u0027Hello World!\u0027\u003c/span\u003e)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent \u0027Hello World!\u0027\"\u003c/span\u003e  \nconnection.close() \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ereceive.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027hello\u0027\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for messages. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Received %r\"\u003c/span\u003e % (body,)  \n\nchannel.basic_consume(callback,  \n                      queue=\u003cspan class=\"hljs-string\"\u003e\u0027hello\u0027\u003c/span\u003e,  \n                      no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nchannel.start_consuming()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景2：任务分发\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-two.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n这种场景是有实际用途的，比如Job的调度，所以Rabbit在这个场景上做了HA的保障工作以及调度的优化：\u003c/p\u003e\n\n\u003cp\u003e为了防止消息丢失做了持久化；防止消息不被处理又增加了消息确认机制。这里面要注意，Consumer端在完成任务处理之后要回复ACK，否则后果很严重。当Consumer退出时，Message会重新分发。然后RabbitMQ会占用越来越多的内存，由于RabbitMQ会长时间运行，可能导致“内存泄漏”。\u003c/p\u003e\n\n\u003cp\u003e在Job的调度这块支持多种算法，除了round robin机制还有Fair dispatch 公平分发机制，通过 basic.qos 方法设置prefetch_count=1 。这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理一个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。\u003c/p\u003e\n\n\u003cp\u003enew_task.py script:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027task_queue\u0027\u003c/span\u003e, durable=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nmessage = \u003cspan class=\"hljs-string\"\u003e\u0027 \u0027\u003c/span\u003e.join(sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:]) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e  \nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                      routing_key=\u003cspan class=\"hljs-string\"\u003e\u0027task_queue\u0027\u003c/span\u003e,  \n                      body=message,  \n                      properties=pika.BasicProperties(  \n                         delivery_mode = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e# make message persistent  \u003c/span\u003e\n                      ))  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent %r\"\u003c/span\u003e % (message,)  \nconnection.close()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eworker.py script:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e time  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027task_queue\u0027\u003c/span\u003e, durable=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for messages. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Received %r\"\u003c/span\u003e % (body,)  \n    time.sleep( body.count(\u003cspan class=\"hljs-string\"\u003e\u0027.\u0027\u003c/span\u003e) )  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Done\"\u003c/span\u003e  \n    ch.basic_ack(delivery_tag = method.delivery_tag)  \n\nchannel.basic_qos(prefetch_count=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)  \nchannel.basic_consume(callback,  \n                      queue=\u003cspan class=\"hljs-string\"\u003e\u0027task_queue\u0027\u003c/span\u003e)  \n\nchannel.start_consuming() \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景3：Pub-Sub\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n使用场景：发布、订阅模式，发送端发送广播消息，多个接收端接收。这个场景应用空间很广阔，尤其是在大型软件内部的子系统之间的消息传递。不过和前两者在使用上不同的是这里需要用到Exchange，类似于一个Router把消息转发到消费者Binding的消息队列上。 \u003cbr\u003e\n\u003cimg src=\"http://images.cnitblog.com/i/434101/201408/171657207955618.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nemit_log.py script:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\nimport pika  \nimport sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027fanout\u0027\u003c/span\u003e)  \n\nmessage = \u003cspan class=\"hljs-string\"\u003e\u0027 \u0027\u003c/span\u003e.\u003cspan class=\"hljs-keyword\"\u003ejoin\u003c/span\u003e(sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:]) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"info: Hello World!\"\u003c/span\u003e  \nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027logs\u0027\u003c/span\u003e,  \n                      routing_key=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                      body=message)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent \u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e\"\u003c/span\u003e % (message,)  \nconnection.\u003cspan class=\"hljs-keyword\"\u003eclose\u003c/span\u003e()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e还有一点要注意的是我们声明了exchange。publish到一个不存在的exchange是被禁止的。如果没有queue bindings exchange的话，log是被丢弃的。 \u003cbr\u003e\nConsumer：receive_logs.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027fanout\u0027\u003c/span\u003e)  \n\nresult = channel.queue_declare(exclusive=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \nqueue_name = result.method.queue  \n\nchannel.queue_bind(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027logs\u0027\u003c/span\u003e,  \n                   queue=queue_name)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for logs. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] %r\"\u003c/span\u003e % (body,)  \n\nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nchannel.start_consuming()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景4：Routing 消息路由\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n上篇文章中，我们构建了一个简单的日志系统。接下来，我们将丰富它：能够使用不同的severity来监听不同等级的log。比如我们希望只有error的log才保存到磁盘上。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eDirect exchange \u003cbr\u003e\nDirect exchange的路由算法非常简单：通过binding key的完全匹配，可以通过下图来说明。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/direct-exchange.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nexchange X和两个queue绑定在一起。Q1的binding key是orange。Q2的binding key是black和green。 \u003cbr\u003e\n当P publish key是orange时，exchange会把它放到Q1。如果是black或者green那么就会到Q2。其余的Message都会被丢弃。\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMultiple bindings \u003cbr\u003e\n多个queue绑定同一个key是可以的。对于下图的例子，Q1和Q2都绑定了black。也就是说，对于routing key是black的Message，会被deliver到Q1和Q2。其余的Message都会被丢弃。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/direct-exchange-multiple.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e最终代码： \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-four.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nThe code for emit_log_direct.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\nimport pika  \nimport sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027direct_logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027direct\u0027\u003c/span\u003e)  \n\nseverity = sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e len(sys.argv) &gt; \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027info\u0027\u003c/span\u003e  \nmessage = \u003cspan class=\"hljs-string\"\u003e\u0027 \u0027\u003c/span\u003e.\u003cspan class=\"hljs-keyword\"\u003ejoin\u003c/span\u003e(sys.argv[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e:]) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027Hello World!\u0027\u003c/span\u003e  \nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027direct_logs\u0027\u003c/span\u003e,  \n                      routing_key=severity,  \n                      body=message)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent \u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e:\u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e\"\u003c/span\u003e % (severity, message)  \nconnection.\u003cspan class=\"hljs-keyword\"\u003eclose\u003c/span\u003e() \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe code for receive_logs_direct.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027direct_logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027direct\u0027\u003c/span\u003e)  \n\nresult = channel.queue_declare(exclusive=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \nqueue_name = result.method.queue  \n\nseverities = sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:]  \n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e severities:  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e &gt;&gt; sys.stderr, \u003cspan class=\"hljs-string\"\u003e\"Usage: %s [info] [warning] [error]\"\u003c/span\u003e % \\  \n                         (sys.argv[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e],)  \n    sys.exit(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e severity \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e severities:  \n    channel.queue_bind(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027direct_logs\u0027\u003c/span\u003e,  \n                       queue=queue_name,  \n                       routing_key=severity)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for logs. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] %r:%r\"\u003c/span\u003e % (method.routing_key, body,)  \n\nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nchannel.start_consuming()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景5：使用主题Topic进行消息分发\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n在上文中，我们实现了一个简单的日志系统。Consumer可以监听不同severity的log。但是，这也是它之所以叫做简单日志系统的原因，因为是仅仅能够通过severity设定。不支持更多的标准。\u003c/p\u003e\n\n\u003cp\u003e比如syslog unix的日志工具，它可以通过severity (info/warn/crit…) 和模块(auth/cron/kern…)。这可能更是我们想要的：我们可以仅仅需要cron模块的log。\u003c/p\u003e\n\n\u003cp\u003e为了实现类似的功能，我们需要用到topic exchange。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-five.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n现在我们要refine我们上篇的日志系统。routing keys 有两个部分: “.”。\u003c/p\u003e\n\n\u003cp\u003eThe code for emit_log_topic.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs perl\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\nimport pika  \nimport sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027topic_logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027topic\u0027\u003c/span\u003e)  \n\nrouting_key = sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e len(sys.argv) &gt; \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027anonymous.info\u0027\u003c/span\u003e  \nmessage = \u003cspan class=\"hljs-string\"\u003e\u0027 \u0027\u003c/span\u003e.\u003cspan class=\"hljs-keyword\"\u003ejoin\u003c/span\u003e(sys.argv[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e:]) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027Hello World!\u0027\u003c/span\u003e  \nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027topic_logs\u0027\u003c/span\u003e,  \n                      routing_key=routing_key,  \n                      body=message)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent \u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e:\u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e\"\u003c/span\u003e % (routing_key, message)  \nconnection.\u003cspan class=\"hljs-keyword\"\u003eclose\u003c/span\u003e()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe code for receive_logs_topic.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027topic_logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027topic\u0027\u003c/span\u003e)  \n\nresult = channel.queue_declare(exclusive=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \nqueue_name = result.method.queue  \n\nbinding_keys = sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:]  \n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e binding_keys:  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e &gt;&gt; sys.stderr, \u003cspan class=\"hljs-string\"\u003e\"Usage: %s [binding_key]...\"\u003c/span\u003e % (sys.argv[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e],)  \n    sys.exit(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e binding_key \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e binding_keys:  \n    channel.queue_bind(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027topic_logs\u0027\u003c/span\u003e,  \n                       queue=queue_name,  \n                       routing_key=binding_key)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for logs. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] %r:%r\"\u003c/span\u003e % (method.routing_key, body,)  \n\nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nchannel.start_consuming() \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景6：适用于云计算集群的远程调用(RPC)\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n在云计算环境中，很多时候需要用它其他机器的计算资源，我们有可能会在接收到Message进行处理时，会把一部分计算任务分配到其他节点来完成。那么，RabbitMQ如何使用RPC呢？在本篇文章中，我们将会通过其它节点求来斐波纳契完成示例，同前几种使用场景不同，在这个场景下需要返回调用结果。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-six.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nclient发送请求的Message然后server返回响应结果。为了收到响应client在publish message时需要提供一个”callback“（回调）的queue地址。这又有其他问题了：收到响应后它无法确定是否是它的，因为所有的响应都写到同一个queue了。上一小节的correlation_id在这种情况下就派上用场了：对于每个request，都设置唯一的一个值，在收到响应后，通过这个值就可以判断是否是自己的响应。如果不是自己的响应，就不去处理。\u003c/p\u003e\n\n\u003cp\u003eAMQP 预定义了14个属性。它们中的绝大多很少会用到。以下几个是平时用的比较多的：\u003c/p\u003e\n\n\u003cp\u003edelivery_mode: 持久化一个Message（通过设定值为2）。其他任意值都是非持久化。请移步RabbitMQ消息队列（三）：任务分发机制 \u003cbr\u003e\ncontent_type: 描述mime-type 的encoding。比如设置为JSON编码：设置该property为application/json。 \u003cbr\u003e\nreply_to: 一般用来指明用于回调的queue（Commonly used to name a callback queue）。 \u003cbr\u003e\ncorrelation_id: 在请求中关联处理RPC响应（correlate RPC responses with requests）。 \u003cbr\u003e\n 工作流程：\u003c/p\u003e\n\n\u003cp\u003e当客户端启动时，它创建了匿名的exclusive callback queue. \u003cbr\u003e\n- 客户端的RPC请求时将同时设置两个properties： reply_to设置为callback queue；correlation_id设置为每个request一个独一无二的值. \u003cbr\u003e\n- 请求将被发送到an rpc_queue queue. \u003cbr\u003e\n- RPC端或者说server一直在等待那个queue的请求。当请求到达时，它将通过在reply_to指定的queue回复一个message给client。 \u003cbr\u003e\n- client一直等待callback queue的数据。当message到达时，它将检查correlation_id的值，如果值和它request发送时的一致那么就将返回响应。\u003c/p\u003e\n\n\u003cp\u003eThe code for rpc_client.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e uuid  \n\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFibonacciRpcClient\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(object)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003e__init__\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(self)\u003c/span\u003e:\u003c/span\u003e  \n        self.connection = pika.BlockingConnection(pika.ConnectionParameters(  \n                host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \n\n        self.channel = self.connection.channel()  \n\n        result = self.channel.queue_declare(exclusive=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n        self.callback_queue = result.method.queue  \n\n        self.channel.basic_consume(self.on_response, no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e,  \n                                   queue=self.callback_queue)  \n\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eon_response\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(self, ch, method, props, body)\u003c/span\u003e:\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e self.corr_id == props.correlation_id:  \n            self.response = body  \n\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecall\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(self, n)\u003c/span\u003e:\u003c/span\u003e  \n        self.response = \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e  \n        self.corr_id = str(uuid.uuid4())  \n        self.channel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                                   routing_key=\u003cspan class=\"hljs-string\"\u003e\u0027rpc_queue\u0027\u003c/span\u003e,  \n                                   properties=pika.BasicProperties(  \n                                         reply_to = self.callback_queue,  \n                                         correlation_id = self.corr_id,  \n                                         ),  \n                                   body=str(n))  \n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e self.response \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e:  \n            self.connection.process_data_events()  \n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e int(self.response)  \n\nfibonacci_rpc = FibonacciRpcClient()  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Requesting fib(30)\"\u003c/span\u003e  \nresponse = fibonacci_rpc.call(\u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [.] Got %r\"\u003c/span\u003e % (response,) \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe code for rpc_server.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \n\nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027rpc_queue\u0027\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efib\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(n)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e n == \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e:  \n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eelif\u003c/span\u003e n == \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:  \n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e:  \n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e fib(n-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) + fib(n-\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eon_request\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, props, body)\u003c/span\u003e:\u003c/span\u003e  \n    n = int(body)  \n\n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [.] fib(%s)\"\u003c/span\u003e  % (n,)  \n    response = fib(n)  \n\n    ch.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                     routing_key=props.reply_to,  \n                     properties=pika.BasicProperties(correlation_id = \\  \n                                                     props.correlation_id),  \n                     body=str(response))  \n    ch.basic_ack(delivery_tag = method.delivery_tag)  \n\nchannel.basic_qos(prefetch_count=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)  \nchannel.basic_consume(on_request, queue=\u003cspan class=\"hljs-string\"\u003e\u0027rpc_queue\u0027\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Awaiting RPC requests\"\u003c/span\u003e  \nchannel.start_consuming()  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景7：消息队列的小伙伴: ProtoBuf（Google Protocol Buffer）\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nProtoBuf是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 C++、Java、Python 三种语言的 API。\u003c/p\u003e\n\n\u003cp\u003eRabbitMQ支持使用不同的序列化工具来进行编码，ProtoBuf和XML, Json相较而言是目前市面上性能最好的。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20140224152341640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYW56aHNvZnQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"publisher的消息确认机制\"\u003ePublisher的消息确认机制\u003c/h3\u003e\n\n\u003cp\u003e在前面的文章中提到了queue和consumer之间的消息确认机制：通过设置ack。那么Publisher能不到知道他post的Message有没有到达queue，甚至更近一步，是否被某个Consumer处理呢？毕竟对于一些非常重要的数据，可能Publisher需要确认某个消息已经被正确处理。\u003c/p\u003e\n\n\u003cp\u003e在我们的系统中，我们没有是实现这种确认，也就是说，不管Message是否被Consume了，Publisher不会去care。他只是将自己的状态publish给上层，由上层的逻辑去处理。如果Message没有被正确处理，可能会导致某些状态丢失。但是由于提供了其他强制刷新全部状态的机制，因此这种异常情况的影响也就可以忽略不计了。\u003c/p\u003e\n\n\u003cp\u003e对于某些异步操作，比如客户端需要创建一个FileSystem，这个可能需要比较长的时间，甚至要数秒钟。这时候通过RPC可以解决这个问题。因此也就不存在Publisher端的确认机制了。\u003c/p\u003e\n\n\u003cp\u003e那么，有没有一种机制能保证Publisher能够感知它的Message有没有被处理的？答案肯定的。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e事务机制 VS Publisher Confirm\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n 如果采用标准的 AMQP 协议，则唯一能够保证消息不会丢失的方式是利用事务机制 – 令 channel 处于 transactional 模式、向其 publish 消息、执行 commit 动作。在这种方式下，事务机制会带来大量的多余开销，并会导致吞吐量下降 250% 。为了补救事务带来的问题，引入了 confirmation 机制（即 Publisher Confirm）。\u003c/p\u003e\n\n\u003cp\u003e为了使能 confirm 机制，client 首先要发送 confirm.select 方法帧。取决于是否设置了 no-wait 属性，broker 会相应的判定是否以 confirm.select-ok 进行应答。一旦在 channel 上使用 confirm.select方法，channel 就将处于 confirm 模式。处于 transactional 模式的 channel 不能再被设置成 confirm 模式，反之亦然。\u003c/p\u003e\n\n\u003cp\u003e一旦 channel 处于 confirm 模式，broker 和 client 都将启动消息计数（以 confirm.select 为基础从 1 开始计数）。broker 会在处理完消息后，在当前 channel 上通过发送 basic.ack 的方式对其进行 confirm 。delivery-tag 域的值标识了被 confirm 消息的序列号。broker 也可以通过设置 basic.ack 中的 multiple 域来表明到指定序列号为止的所有消息都已被 broker 正确的处理了。\u003c/p\u003e\n\n\u003cp\u003e在异常情况中，broker 将无法成功处理相应的消息，此时 broker 将发送 basic.nack 来代替 basic.ack 。在这个情形下，basic.nack 中各域值的含义与 basic.ack 中相应各域含义是相同的，同时 requeue 域的值应该被忽略。通过 nack 一或多条消息，broker 表明自身无法对相应消息完成处理，并拒绝为这些消息的处理负责。在这种情况下，client 可以选择将消息 re-publish 。\u003c/p\u003e\n\n\u003cp\u003e在 channel 被设置成 confirm 模式之后，所有被 publish 的后续消息都将被 confirm（即 ack） 或者被 nack 一次。但是没有对消息被 confirm 的快慢做任何保证，并且同一条消息不会既被 confirm 又被 nack 。\u003c/p\u003e\n\n\u003cp\u003e参考资料： \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/column/details/rabbitmq.html\"\u003ehttp://blog.csdn.net/column/details/rabbitmq.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://www.cnblogs.com/luxiaoxun/p/3918054.html\"\u003ehttp://www.cnblogs.com/luxiaoxun/p/3918054.html\u003c/a\u003e\u003c/p\u003e","markdowncontent":"###前言\n正在捋Nova的代码，从服务启动的入口这块就用到了第三方的Oslo_messaging库，可能也是因为消息中间件确实是整个软件的瓶颈，Oslo_messaging试图隔离出消息中间件和应用之间的接口，使得不仅仅可以使用RabbitMQ,也可以使用Kafka等其他中间件。\n###RabbitMQ介绍\n这里十分感谢anzhsoft的技术专栏http://blog.csdn.net/column/details/rabbitmq.html；把RobbitMQ这款中间件工具从使用者的视角写得很全面，我也不想深究里面的细节，在anzhsoft的基础之上我再提取一些用户关心的信息。\n####**历史**\nRabbitMQ是一个由erlang开发的AMQP（Advanced Message Queue ）的开源实现。AMQP 的出现其实也是应了广大人民群众的需求，虽然在同步消息通讯的世界里有很多公开标准（如 COBAR的 IIOP ，或者是 SOAP 等），但是在异步消息处理中却不是这样，只有大企业有一些商业实现（如微软的 MSMQ ，IBM 的 Websphere MQ 等），因此，在 2006 年的 6 月，Cisco 、Redhat、iMatix 等联合制定了 AMQP 的公开标准。\n![这里写图片描述](http://images2015.cnblogs.com/blog/434101/201601/434101-20160124205249375-897662551.png)\nRabbitMQ是由RabbitMQ Technologies Ltd开发并且提供商业支持的。该公司在2010年4月被SpringSource（VMWare的一个部门）收购。在2013年5月被并入Pivotal。其实VMWare，Pivotal和EMC本质上是一家的。不同的是VMWare是独立上市子公司，而Pivotal是整合了EMC的某些资源，现在并没有上市。\n\nRabbitMQ的官网是http://www.rabbitmq.com\n####**架构术语**\n![这里写图片描述](http://images2015.cnblogs.com/blog/434101/201601/434101-20160124204752953-1513084258.png)\n1.Server(broker): 接受客户端连接，实现AMQP消息队列和路由功能的进程。\n\n2.Virtual Host:其实是一个虚拟概念，类似于权限控制组，一个Virtual Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual Host\n\n3.Exchange:接受生产者发送的消息，并根据Binding规则将消息路由给服务器中的队列。ExchangeType决定了Exchange路由消息的行为，例如，在RabbitMQ中，ExchangeType有direct、Fanout和Topic三种，不同类型的Exchange路由的行为是不一样的。\n\n4.Message Queue：消息队列，用于存储还未被消费者消费的消息。\n\n5.Message: 由Header和Body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。\n\n6.Binding:Binding联系了Exchange与Message Queue。Exchange在与多个Message Queue发生Binding后会生成一张路由表，路由表中存储着Message Queue所需消息的限制条件即Binding Key。当Exchange收到Message时会解析其Header得到Routing Key，Exchange根据Routing Key与Exchange Type将Message路由到Message Queue。Binding Key由Consumer在Binding Exchange与Message Queue时指定，而Routing Key由Producer发送Message时指定，两者的匹配方式由Exchange Type决定。 \n\n7.Connection:连接，对于RabbitMQ而言，其实就是一个位于客户端和Broker之间的TCP连接。\n\n8.Channel:信道，仅仅创建了客户端到Broker之间的连接后，客户端还是不能发送消息的。需要为每一个Connection创建Channel，AMQP协议规定只有通过Channel才能执行AMQP的命令。一个Connection可以包含多个Channel。之所以需要Channel，是因为TCP连接的建立和释放都是十分昂贵的，如果一个客户端每一个线程都需要与Broker交互，如果每一个线程都建立一个TCP连接，暂且不考虑TCP连接是否浪费，就算操作系统也无法承受每秒建立如此多的TCP连接。RabbitMQ建议客户端线程之间不要共用Channel，至少要保证共用Channel的线程发送消息必须是串行的，但是建议尽量共用Connection。\n\n9.Command:AMQP的命令，客户端通过Command完成与AMQP服务器的交互来实现自身的逻辑。例如在RabbitMQ中，客户端可以通过publish命令发送消息，txSelect开启一个事务，txCommit提交一个事务。\n\n####**应用场景**\n***场景1：单发送单接收***\n这个场景比较简单，只是个Helllo word，并没有太大的实际用途。不过要注意的是Queue和Binding的CURD权限，生产者和消费者是有的，但是vHost和Exchange的权限他们并没有，因为前者和特定用户相关，后者则是多个用户共享使用的。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-one-overall.png)\nsend.py:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027hello\u0027)  \n  \nchannel.basic_publish(exchange=\u0027\u0027,  \n                      routing_key=\u0027hello\u0027,  \n                      body=\u0027Hello World!\u0027)  \nprint \" [x] Sent \u0027Hello World!\u0027\"  \nconnection.close() \n```\nreceive.py:\n``` Python\n#!/usr/bin/env python  \nimport pika  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027hello\u0027)  \n  \nprint \u0027 [*] Waiting for messages. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] Received %r\" % (body,)  \n  \nchannel.basic_consume(callback,  \n                      queue=\u0027hello\u0027,  \n                      no_ack=True)  \n  \nchannel.start_consuming()  \n```\n***场景2：任务分发***\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-two.png)\n这种场景是有实际用途的，比如Job的调度，所以Rabbit在这个场景上做了HA的保障工作以及调度的优化：\n\n为了防止消息丢失做了持久化；防止消息不被处理又增加了消息确认机制。这里面要注意，Consumer端在完成任务处理之后要回复ACK，否则后果很严重。当Consumer退出时，Message会重新分发。然后RabbitMQ会占用越来越多的内存，由于RabbitMQ会长时间运行，可能导致“内存泄漏”。\n\n在Job的调度这块支持多种算法，除了round robin机制还有Fair dispatch 公平分发机制，通过 basic.qos 方法设置prefetch_count=1 。这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理一个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。\n\nnew_task.py script:\n```Python\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027task_queue\u0027, durable=True)  \n  \nmessage = \u0027 \u0027.join(sys.argv[1:]) or \"Hello World!\"  \nchannel.basic_publish(exchange=\u0027\u0027,  \n                      routing_key=\u0027task_queue\u0027,  \n                      body=message,  \n                      properties=pika.BasicProperties(  \n                         delivery_mode = 2, # make message persistent  \n                      ))  \nprint \" [x] Sent %r\" % (message,)  \nconnection.close()  \n```\nworker.py script:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \nimport time  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027task_queue\u0027, durable=True)  \nprint \u0027 [*] Waiting for messages. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] Received %r\" % (body,)  \n    time.sleep( body.count(\u0027.\u0027) )  \n    print \" [x] Done\"  \n    ch.basic_ack(delivery_tag = method.delivery_tag)  \n  \nchannel.basic_qos(prefetch_count=1)  \nchannel.basic_consume(callback,  \n                      queue=\u0027task_queue\u0027)  \n  \nchannel.start_consuming() \n```\n***场景3：Pub-Sub***\n使用场景：发布、订阅模式，发送端发送广播消息，多个接收端接收。这个场景应用空间很广阔，尤其是在大型软件内部的子系统之间的消息传递。不过和前两者在使用上不同的是这里需要用到Exchange，类似于一个Router把消息转发到消费者Binding的消息队列上。\n![这里写图片描述](http://images.cnitblog.com/i/434101/201408/171657207955618.png)\nemit_log.py script:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027logs\u0027,  \n                         type=\u0027fanout\u0027)  \n  \nmessage = \u0027 \u0027.join(sys.argv[1:]) or \"info: Hello World!\"  \nchannel.basic_publish(exchange=\u0027logs\u0027,  \n                      routing_key=\u0027\u0027,  \n                      body=message)  \nprint \" [x] Sent %r\" % (message,)  \nconnection.close()  \n```\n还有一点要注意的是我们声明了exchange。publish到一个不存在的exchange是被禁止的。如果没有queue bindings exchange的话，log是被丢弃的。\nConsumer：receive_logs.py:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027logs\u0027,  \n                         type=\u0027fanout\u0027)  \n  \nresult = channel.queue_declare(exclusive=True)  \nqueue_name = result.method.queue  \n  \nchannel.queue_bind(exchange=\u0027logs\u0027,  \n                   queue=queue_name)  \n  \nprint \u0027 [*] Waiting for logs. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] %r\" % (body,)  \n  \nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=True)  \n  \nchannel.start_consuming()  \n```\n***场景4：Routing 消息路由***\n上篇文章中，我们构建了一个简单的日志系统。接下来，我们将丰富它：能够使用不同的severity来监听不同等级的log。比如我们希望只有error的log才保存到磁盘上。\n\n1. Direct exchange\nDirect exchange的路由算法非常简单：通过binding key的完全匹配，可以通过下图来说明。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/direct-exchange.png)\nexchange X和两个queue绑定在一起。Q1的binding key是orange。Q2的binding key是black和green。\n当P publish key是orange时，exchange会把它放到Q1。如果是black或者green那么就会到Q2。其余的Message都会被丢弃。\n\n2. Multiple bindings\n多个queue绑定同一个key是可以的。对于下图的例子，Q1和Q2都绑定了black。也就是说，对于routing key是black的Message，会被deliver到Q1和Q2。其余的Message都会被丢弃。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/direct-exchange-multiple.png)\n\n最终代码：\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-four.png)\nThe code for emit_log_direct.py:\n``` Python\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027direct_logs\u0027,  \n                         type=\u0027direct\u0027)  \n  \nseverity = sys.argv[1] if len(sys.argv) \u003e 1 else \u0027info\u0027  \nmessage = \u0027 \u0027.join(sys.argv[2:]) or \u0027Hello World!\u0027  \nchannel.basic_publish(exchange=\u0027direct_logs\u0027,  \n                      routing_key=severity,  \n                      body=message)  \nprint \" [x] Sent %r:%r\" % (severity, message)  \nconnection.close() \n```\nThe code for receive_logs_direct.py:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027direct_logs\u0027,  \n                         type=\u0027direct\u0027)  \n  \nresult = channel.queue_declare(exclusive=True)  \nqueue_name = result.method.queue  \n  \nseverities = sys.argv[1:]  \nif not severities:  \n    print \u003e\u003e sys.stderr, \"Usage: %s [info] [warning] [error]\" % \\  \n                         (sys.argv[0],)  \n    sys.exit(1)  \n  \nfor severity in severities:  \n    channel.queue_bind(exchange=\u0027direct_logs\u0027,  \n                       queue=queue_name,  \n                       routing_key=severity)  \n  \nprint \u0027 [*] Waiting for logs. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] %r:%r\" % (method.routing_key, body,)  \n  \nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=True)  \n  \nchannel.start_consuming()  \n```\n***场景5：使用主题Topic进行消息分发***\n在上文中，我们实现了一个简单的日志系统。Consumer可以监听不同severity的log。但是，这也是它之所以叫做简单日志系统的原因，因为是仅仅能够通过severity设定。不支持更多的标准。\n\n比如syslog unix的日志工具，它可以通过severity (info/warn/crit...) 和模块(auth/cron/kern...)。这可能更是我们想要的：我们可以仅仅需要cron模块的log。\n\n为了实现类似的功能，我们需要用到topic exchange。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-five.png)\n现在我们要refine我们上篇的日志系统。routing keys 有两个部分: \"\u003cfacility\u003e.\u003cseverity\u003e\"。\n\nThe code for emit_log_topic.py:\n```\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027topic_logs\u0027,  \n                         type=\u0027topic\u0027)  \n  \nrouting_key = sys.argv[1] if len(sys.argv) \u003e 1 else \u0027anonymous.info\u0027  \nmessage = \u0027 \u0027.join(sys.argv[2:]) or \u0027Hello World!\u0027  \nchannel.basic_publish(exchange=\u0027topic_logs\u0027,  \n                      routing_key=routing_key,  \n                      body=message)  \nprint \" [x] Sent %r:%r\" % (routing_key, message)  \nconnection.close()  \n```\nThe code for receive_logs_topic.py:\n\n```\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027topic_logs\u0027,  \n                         type=\u0027topic\u0027)  \n  \nresult = channel.queue_declare(exclusive=True)  \nqueue_name = result.method.queue  \n  \nbinding_keys = sys.argv[1:]  \nif not binding_keys:  \n    print \u003e\u003e sys.stderr, \"Usage: %s [binding_key]...\" % (sys.argv[0],)  \n    sys.exit(1)  \n  \nfor binding_key in binding_keys:  \n    channel.queue_bind(exchange=\u0027topic_logs\u0027,  \n                       queue=queue_name,  \n                       routing_key=binding_key)  \n  \nprint \u0027 [*] Waiting for logs. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] %r:%r\" % (method.routing_key, body,)  \n  \nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=True)  \n  \nchannel.start_consuming() \n```\n***场景6：适用于云计算集群的远程调用(RPC)***\n在云计算环境中，很多时候需要用它其他机器的计算资源，我们有可能会在接收到Message进行处理时，会把一部分计算任务分配到其他节点来完成。那么，RabbitMQ如何使用RPC呢？在本篇文章中，我们将会通过其它节点求来斐波纳契完成示例，同前几种使用场景不同，在这个场景下需要返回调用结果。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-six.png)\nclient发送请求的Message然后server返回响应结果。为了收到响应client在publish message时需要提供一个”callback“（回调）的queue地址。这又有其他问题了：收到响应后它无法确定是否是它的，因为所有的响应都写到同一个queue了。上一小节的correlation_id在这种情况下就派上用场了：对于每个request，都设置唯一的一个值，在收到响应后，通过这个值就可以判断是否是自己的响应。如果不是自己的响应，就不去处理。\n\nAMQP 预定义了14个属性。它们中的绝大多很少会用到。以下几个是平时用的比较多的：\n\ndelivery_mode: 持久化一个Message（通过设定值为2）。其他任意值都是非持久化。请移步RabbitMQ消息队列（三）：任务分发机制\ncontent_type: 描述mime-type 的encoding。比如设置为JSON编码：设置该property为application/json。\nreply_to: 一般用来指明用于回调的queue（Commonly used to name a callback queue）。\ncorrelation_id: 在请求中关联处理RPC响应（correlate RPC responses with requests）。\n 工作流程：\n\n当客户端启动时，它创建了匿名的exclusive callback queue.\n- 客户端的RPC请求时将同时设置两个properties： reply_to设置为callback queue；correlation_id设置为每个request一个独一无二的值.\n- 请求将被发送到an rpc_queue queue.\n- RPC端或者说server一直在等待那个queue的请求。当请求到达时，它将通过在reply_to指定的queue回复一个message给client。\n- client一直等待callback queue的数据。当message到达时，它将检查correlation_id的值，如果值和它request发送时的一致那么就将返回响应。\n\nThe code for rpc_client.py:\n``` Python\n#!/usr/bin/env python  \nimport pika  \nimport uuid  \n  \nclass FibonacciRpcClient(object):  \n    def __init__(self):  \n        self.connection = pika.BlockingConnection(pika.ConnectionParameters(  \n                host=\u0027localhost\u0027))  \n  \n        self.channel = self.connection.channel()  \n  \n        result = self.channel.queue_declare(exclusive=True)  \n        self.callback_queue = result.method.queue  \n  \n        self.channel.basic_consume(self.on_response, no_ack=True,  \n                                   queue=self.callback_queue)  \n  \n    def on_response(self, ch, method, props, body):  \n        if self.corr_id == props.correlation_id:  \n            self.response = body  \n  \n    def call(self, n):  \n        self.response = None  \n        self.corr_id = str(uuid.uuid4())  \n        self.channel.basic_publish(exchange=\u0027\u0027,  \n                                   routing_key=\u0027rpc_queue\u0027,  \n                                   properties=pika.BasicProperties(  \n                                         reply_to = self.callback_queue,  \n                                         correlation_id = self.corr_id,  \n                                         ),  \n                                   body=str(n))  \n        while self.response is None:  \n            self.connection.process_data_events()  \n        return int(self.response)  \n  \nfibonacci_rpc = FibonacciRpcClient()  \n  \nprint \" [x] Requesting fib(30)\"  \nresponse = fibonacci_rpc.call(30)  \nprint \" [.] Got %r\" % (response,) \n```\nThe code for rpc_server.py:\n\n``` Python\n#!/usr/bin/env python  \nimport pika  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \n  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027rpc_queue\u0027)  \n  \ndef fib(n):  \n    if n == 0:  \n        return 0  \n    elif n == 1:  \n        return 1  \n    else:  \n        return fib(n-1) + fib(n-2)  \n  \ndef on_request(ch, method, props, body):  \n    n = int(body)  \n  \n    print \" [.] fib(%s)\"  % (n,)  \n    response = fib(n)  \n  \n    ch.basic_publish(exchange=\u0027\u0027,  \n                     routing_key=props.reply_to,  \n                     properties=pika.BasicProperties(correlation_id = \\  \n                                                     props.correlation_id),  \n                     body=str(response))  \n    ch.basic_ack(delivery_tag = method.delivery_tag)  \n  \nchannel.basic_qos(prefetch_count=1)  \nchannel.basic_consume(on_request, queue=\u0027rpc_queue\u0027)  \n  \nprint \" [x] Awaiting RPC requests\"  \nchannel.start_consuming()  \n\n```\n***场景7：消息队列的小伙伴: ProtoBuf（Google Protocol Buffer）***\nProtoBuf是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 C++、Java、Python 三种语言的 API。\n\nRabbitMQ支持使用不同的序列化工具来进行编码，ProtoBuf和XML, Json相较而言是目前市面上性能最好的。\n![这里写图片描述](http://img.blog.csdn.net/20140224152341640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYW56aHNvZnQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n###Publisher的消息确认机制\n在前面的文章中提到了queue和consumer之间的消息确认机制：通过设置ack。那么Publisher能不到知道他post的Message有没有到达queue，甚至更近一步，是否被某个Consumer处理呢？毕竟对于一些非常重要的数据，可能Publisher需要确认某个消息已经被正确处理。\n\n在我们的系统中，我们没有是实现这种确认，也就是说，不管Message是否被Consume了，Publisher不会去care。他只是将自己的状态publish给上层，由上层的逻辑去处理。如果Message没有被正确处理，可能会导致某些状态丢失。但是由于提供了其他强制刷新全部状态的机制，因此这种异常情况的影响也就可以忽略不计了。\n\n对于某些异步操作，比如客户端需要创建一个FileSystem，这个可能需要比较长的时间，甚至要数秒钟。这时候通过RPC可以解决这个问题。因此也就不存在Publisher端的确认机制了。\n\n 那么，有没有一种机制能保证Publisher能够感知它的Message有没有被处理的？答案肯定的。\n\n***事务机制 VS Publisher Confirm***\n 如果采用标准的 AMQP 协议，则唯一能够保证消息不会丢失的方式是利用事务机制 -- 令 channel 处于 transactional 模式、向其 publish 消息、执行 commit 动作。在这种方式下，事务机制会带来大量的多余开销，并会导致吞吐量下降 250% 。为了补救事务带来的问题，引入了 confirmation 机制（即 Publisher Confirm）。\n\n为了使能 confirm 机制，client 首先要发送 confirm.select 方法帧。取决于是否设置了 no-wait 属性，broker 会相应的判定是否以 confirm.select-ok 进行应答。一旦在 channel 上使用 confirm.select方法，channel 就将处于 confirm 模式。处于 transactional 模式的 channel 不能再被设置成 confirm 模式，反之亦然。\n\n一旦 channel 处于 confirm 模式，broker 和 client 都将启动消息计数（以 confirm.select 为基础从 1 开始计数）。broker 会在处理完消息后，在当前 channel 上通过发送 basic.ack 的方式对其进行 confirm 。delivery-tag 域的值标识了被 confirm 消息的序列号。broker 也可以通过设置 basic.ack 中的 multiple 域来表明到指定序列号为止的所有消息都已被 broker 正确的处理了。\n\n在异常情况中，broker 将无法成功处理相应的消息，此时 broker 将发送 basic.nack 来代替 basic.ack 。在这个情形下，basic.nack 中各域值的含义与 basic.ack 中相应各域含义是相同的，同时 requeue 域的值应该被忽略。通过 nack 一或多条消息，broker 表明自身无法对相应消息完成处理，并拒绝为这些消息的处理负责。在这种情况下，client 可以选择将消息 re-publish 。\n\n在 channel 被设置成 confirm 模式之后，所有被 publish 的后续消息都将被 confirm（即 ack） 或者被 nack 一次。但是没有对消息被 confirm 的快慢做任何保证，并且同一条消息不会既被 confirm 又被 nack 。\n\n参考资料：\nhttp://blog.csdn.net/column/details/rabbitmq.html\nhttp://www.cnblogs.com/luxiaoxun/p/3918054.html","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-15] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-22-【OpenStack源码分析之八】openstack中虚拟机在线迁移.markdown [pool-2-thread-4] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-22-【OpenStack源码分析之六】从虚拟机启动流程看安全认证.markdown [pool-2-thread-8] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-16-【OpenStack源码分析之二】RabbitMQ分析.markdown [pool-2-thread-15] [chx]
[INFO] 2017-07-28 12:44:29 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=76100356 [pool-2-thread-19] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之一】初探OpenStack》成功 [pool-2-thread-13] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之二】RabbitMQ分析》成功 [pool-2-thread-15] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":76100356,"title":"【OpenStack源码分析之十一】分布式事务和相关算法","create_at":"\/Date(1500996897000)\/","create":"2017-07-25 11:34:57","view_count":1178,"comment_count":4,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前言在【OpenStack源码分析之六】从虚拟机启动流程看安全认证 中有提到一个问题是关于OpenStack的HA机制和灾难恢复（DR机制）的，HA和DR都是保障可用性的，两者都可以用两个维度来衡量，RTO （Recovery Time Objective）和 RPO（Recovery Point Objective）。RTO 是服务恢复的时间，最佳的情况是 0，这意味着服务立即恢复；最坏是无穷大意","url":"http://blog.csdn.net/BLACKMOON88/article/details/76100356","categories":"云计算,OpenStack","tags":"openstack,分布式,事务","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e在\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75701576\" target=\"_blank\"\u003e【OpenStack源码分析之六】从虚拟机启动流程看安全认证\u003c/a\u003e 中有提到一个问题是关于OpenStack的HA机制和灾难恢复（DR机制）的，HA和DR都是保障可用性的，两者都可以用两个维度来衡量，RTO （Recovery Time Objective）和 RPO（Recovery Point Objective）。RTO 是服务恢复的时间，最佳的情况是 0，这意味着服务立即恢复；最坏是无穷大意味着服务永远恢复不了；RPO 是切换时向前恢复的数据的时间长度，0 意味着使用同步的数据，大于 0 意味着有数据丢失，比如 ” RPO = 1 天“ 意味着恢复时使用一天前的数据，那么一天之内的数据就丢失了。因此，恢复的最佳结果是 RTO = RPO = 0，但是这个太理想，或者要实现的话成本太高，全球估计 Visa 等少数几个公司能实现，或者几乎实现。\u003c/p\u003e\n\n\u003cp\u003eHA和DR两者相互关联，互相补充，互有交叉，同时又有显著的区别：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eHA 往往指本地的高可用系统，表示在多个服务器运行一个或多种应用的情况下，应确保任意服务器出现任何故障时，其运行的应用不能中断，应用程序和系统应能迅速切换到其它服务器上运行，即本地系统集群和热备份。HA 往往是用共享存储，因此往往不会有数据丢失（RPO = 0），更多的是切换时间长度考虑即 RTO。\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDR 是指异地（同城或者异地）的高可用系统，表示在灾害发生时，数据、应用以及业务的恢复能力。异地灾备的数据灾备部分是使用数据复制，根据使用的不同数据复制技术（同步、异步、Strectched Cluster 等），数据往往有损失导致 RPO &gt;0；而异地的应用切换往往需要更长的时间，这样 RT0 &gt;0。 因此，需要结合特定的业务需求，来定制所需要的 RTO 和 RPO，以实现最优的 CTO。\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这里先对HA机制里的分布式事务做一些分析，因为OpenStack自身是一个分布式系统，比如Nova Compute在创建虚拟机的流程涉及多个远程资源的操作，这里对整体的分布式事务的处理就是一个很重要的技术点。但是本节我并没有去探究OpenStack的实现，下面的技术可能并不是OpenStack选用的解决方案，我先列一下通用方案，有时间时我再去研究OpenStack的实现方式。\u003c/p\u003e\n\n\u003ch3 id=\"分布式事务\"\u003e分布式事务\u003c/h3\u003e\n\n\u003cp\u003e分布式事务当前的处理是有比较成熟的技术，比如两阶段提交和三阶段提交技术，鉴于篇幅，先介绍一下两阶段提交。\u003c/p\u003e\n\n\u003cp\u003e先举个栗子，比如在电商系统中，当有用户下单后，除了在订单表插入一条记录外，对应商品表的这个商品数量必须减1吧，怎么保证？！在搜索广告系统中，当用户点击某广告后，除了在点击事件表中增加一条记录外，还得去商家账户表中找到这个商家并扣除广告费吧，怎么保证？！等等，相信大家或多或多少都能碰到相似情景。\u003c/p\u003e\n\n\u003cp\u003e本质上问题可以抽象为：当一个表数据更新后，怎么保证另一个表的数据也必须要更新成功。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e本地事务\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n还是以支付宝转账余额宝为例，假设有\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e支付宝账户表：A（id，userId，amount）\u003c/li\u003e\n\u003cli\u003e余额宝账户表：B（id，userId，amount）\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e用户的userId=1； \u003cbr\u003e\n从支付宝转账1万块钱到余额宝的动作分为两步：\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e1）支付宝表扣除1万：update A set amount=amount-10000 where userId=1;\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e2）余额宝表增加1万：update B set amount=amount+10000 where userId=1;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如何确保支付宝余额宝收支平衡呢？\u003c/p\u003e\n\n\u003cp\u003e有人说这个很简单嘛，可以用事务解决。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eBegin\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n         \u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e A \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e amount=amount-\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e userId=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\n         \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e B \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e amount=amount+\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e userId=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eEnd\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e非常正确，如果你使用spring的话一个注解就能搞定上述事务功能。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-annotation\"\u003e@Transactional\u003c/span\u003e(rollbackFor=Exception.class)\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eupdate\u003c/span\u003e() {\n        updateATable(); \u003cspan class=\"hljs-comment\"\u003e//更新A表\u003c/span\u003e\n        updateBTable(); \u003cspan class=\"hljs-comment\"\u003e//更新B表\u003c/span\u003e\n    }\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e如果系统规模较小，数据表都在一个数据库实例上，上述本地事务方式可以很好地运行，但是如果系统规模较大，比如支付宝账户表和余额宝账户表显然不会在同一个数据库实例上，他们往往分布在不同的物理节点上，这时本地事务已经失去用武之地。\u003c/p\u003e\n\n\u003cp\u003e既然本地事务失效，分布式事务自然就登上舞台。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e分布式事务—两阶段提交协议\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n两阶段提交协议（Two-phase Commit，2PC）经常被用来实现分布式事务。一般分为协调器C和若干事务执行者Si两种角色，这里的事务执行者就是具体的数据库，协调器可以和事务执行器在一台机器上. \u003cbr\u003e\n\u003cimg src=\"http://ww2.sinaimg.cn/large/7cc829d3gw1eux5nfbny7j20l908xta6.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e1） 我们的应用程序（client）发起一个开始请求到TC；\u003c/p\u003e\n\n\u003cp\u003e2） TC先将消息写到本地日志，之后向所有的Si发起消息。以支付宝转账到余额宝为例，TC给A的prepare消息是通知支付宝数据库相应账目扣款1万，TC给B的prepare消息是通知余额宝数据库相应账目增加1w。为什么在执行任务前需要先写本地日志，主要是为了故障后恢复用，本地日志起到现实生活中凭证 的效果，如果没有本地日志（凭证），出问题容易死无对证；\u003c/p\u003e\n\n\u003cp\u003e3） Si收到消息后，执行具体本机事务，但不会进行commit，如果成功返回，不成功返回。同理，返回前都应把要返回的消息写到日志里，当作凭证。\u003c/p\u003e\n\n\u003cp\u003e4） TC收集所有执行器返回的消息，如果所有执行器都返回yes，那么给所有执行器发生送commit消息，执行器收到commit后执行本地事务的commit操作；如果有任一个执行器返回no，那么给所有执行器发送abort消息，执行器收到abort消息后执行事务abort操作。\u003c/p\u003e\n\n\u003cp\u003e注：TC或Si把发送或接收到的消息先写到日志里，主要是为了故障后恢复用。如某一Si从故障中恢复后，先检查本机的日志，如果已收到，则提交，如果则回滚。如果是，则再向TC询问一下，确定下一步。如果什么都没有，则很可能在阶段Si就崩溃了，因此需要回滚。\u003c/p\u003e\n\n\u003cp\u003e现如今实现基于两阶段提交的分布式事务也没那么困难了，如果使用java，那么可以使用开源软件atomikos(\u003ca href=\"http://www.atomikos.com/\" target=\"_blank\"\u003ehttp://www.atomikos.com/\u003c/a\u003e)来快速实现。\u003c/p\u003e\n\n\u003cp\u003e不过但凡使用过的上述两阶段提交的同学都可以发现性能实在是太差，根本不适合高并发的系统。为什么？\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e1）两阶段提交涉及多次节点间的网络通信，通信时间太长！\u003c/li\u003e\n\u003cli\u003e2）事务时间相对于变长了，锁定的资源的时间也变长了，造成资源等待时间也增加好多！\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e正是由于分布式事务存在很严重的性能问题，大部分高并发服务都在避免使用，往往通过其他途径来解决数据一致性问题。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e使用消息队列来避免分布式事务\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e如果仔细观察生活的话，生活的很多场景已经给了我们提示。\u003c/p\u003e\n\n\u003cp\u003e比如在北京很有名的姚记炒肝点了炒肝并付了钱后，他们并不会直接把你点的炒肝给你，而是给你一张小票，然后让你拿着小票到出货区排队去取。为什么他们要将付钱和取货两个动作分开呢？原因很多，其中一个很重要的原因是为了使他们接待能力增强（并发量更高）。\u003c/p\u003e\n\n\u003cp\u003e还是回到我们的问题，只要这张小票在，你最终是能拿到炒肝的。同理转账服务也是如此，当支付宝账户扣除1万后，我们只要生成一个凭证（消息）即可，这个凭证（消息）上写着“让余额宝账户增加 1万”，只要这个凭证（消息）能可靠保存，我们最终是可以拿着这个凭证（消息）让余额宝账户增加1万的，即我们能依靠这个凭证（消息）完成最终一致性。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e如何可靠保存凭证（消息）\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n有两种方法：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e业务与消息耦合的方式\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e支付宝在完成扣款的同时，同时记录消息数据，这个消息数据与业务数据保存在同一数据库实例里（消息记录表表名为message）。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eBegin\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n         \u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e A \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e amount=amount-\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e userId=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\n         \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einsert\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e message(userId, amount,status) \u003cspan class=\"hljs-keyword\"\u003evalues\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eEnd\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e上述事务能保证只要支付宝账户里被扣了钱，消息一定能保存下来。\u003c/p\u003e\n\n\u003cp\u003e当上述事务提交成功后，我们通过实时消息服务将此消息通知余额宝，余额宝处理成功后发送回复成功消息，支付宝收到回复后删除该条消息数据。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e业务与消息解耦方式\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e上述保存消息的方式使得消息数据和业务数据紧耦合在一起，从架构上看不够优雅，而且容易诱发其他问题。为了解耦，可以采用以下方式。\u003c/p\u003e\n\n\u003cp\u003e1）支付宝在扣款事务提交之前，向实时消息服务请求发送消息，实时消息服务只记录消息数据，而不真正发送，只有消息发送成功后才会提交事务；\u003c/p\u003e\n\n\u003cp\u003e2）当支付宝扣款事务被提交成功后，向实时消息服务确认发送。只有在得到确认发送指令后，实时消息服务才真正发送该消息；\u003c/p\u003e\n\n\u003cp\u003e3）当支付宝扣款事务提交失败回滚后，向实时消息服务取消发送。在得到取消发送指令后，该消息将不会被发送；\u003c/p\u003e\n\n\u003cp\u003e4）对于那些未确认的消息或者取消的消息，需要有一个消息状态确认系统定时去支付宝系统查询这个消息的状态并进行更新。为什么需要这一步骤，举个例子：假设在第2步支付宝扣款事务被成功提交后，系统挂了，此时消息状态并未被更新为“确认发送”，从而导致消息不能被发送。\u003c/p\u003e\n\n\u003cp\u003e优点：消息数据独立存储，降低业务系统与消息系统间的耦合；\u003c/p\u003e\n\n\u003cp\u003e缺点：一次消息发送需要两次请求；业务处理服务需要实现消息状态回查接口。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160702104538494\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e如何解决消息重复投递的问题\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n还有一个很严重的问题就是消息重复投递，以我们支付宝转账到余额宝为例，如果相同的消息被重复投递两次，那么我们余额宝账户将会增加2万而不是1万了。这里面涉及到消费者接口的幂等性设计，简单来说，一个操作如果具有任意多次执行所产生的影响均与一次执行的影响相同，我们就称之为幂等。可见参考资料：\u003ca href=\"https://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\" target=\"_blank\"\u003ehttps://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e为什么相同的消息会被重复投递？比如余额宝处理完消息msg后，发送了处理成功的消息给支付宝，正常情况下支付宝应该要删除消息msg，但如果支付宝这时候悲剧的挂了，重启后一看消息msg还在，就会继续发送消息msg。\u003c/p\u003e\n\n\u003cp\u003e解决方法很简单，在余额宝这边增加消息应用状态表（message_apply），通俗来说就是个账本，用于记录消息的消费情况，每次来一个消息，在真正执行之前，先去消息应用状态表中查询一遍，如果找到说明是重复消息，丢弃即可，如果没找到才执行，同时插入到消息应用状态表（同一事务）。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003efor each msg in queue\n  \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eBegin\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-aggregate\"\u003ecount\u003c/span\u003e(*) \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e cnt \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e message_apply \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e msg_id=msg.msg_id;\u003c/span\u003e\n    if cnt==0 then\n      \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e B \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e amount=amount+\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e userId=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\n      \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einsert\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e message_apply(msg_id) \u003cspan class=\"hljs-keyword\"\u003evalues\u003c/span\u003e(msg.msg_id);\u003c/span\u003e\n  \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eEnd\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eebay的研发人员其实在2008年就提出了应用消息状态确认表来解决消息重复投递的问题：\u003ca href=\"http://queue.acm.org/detail.cfm?id=1394128\" target=\"_blank\"\u003ehttp://queue.acm.org/detail.cfm?id=1394128\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"cap理论与相关算法\"\u003eCAP理论与相关算法\u003c/h3\u003e\n\n\u003cp\u003e在理论计算机科学中，CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e一致性 (Consistency)（等同于所有节点访问同一份最新的数据副本）\u003c/li\u003e\n\u003cli\u003e可用性（Availability）（对数据更新具备高可用性）\u003c/li\u003e\n\u003cli\u003e网络分区容忍性（Partition tolerance）（以实际效果而言，数据存在的节点越多，分区容忍性越高）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e详细理论可见参考文献四。\u003c/p\u003e\n\n\u003cp\u003e这里我们把一致性分为两类，强一致性（CP）和最终一致性（AP），为了实现强一致性会有很多算法，这其中Raft算法的使用范围也比较广泛。详细教程见：\u003ca href=\"http://thesecretlivesofdata.com/raft/#home\"\u003ehttp://thesecretlivesofdata.com/raft/#home\u003c/a\u003e ；关于最终一致性也有不少算法，Gossip算法也是其中的使用度交广的一种，详细分析材料见：\u003ca href=\"http://blog.csdn.net/chen77716/article/details/6275762\"\u003ehttp://blog.csdn.net/chen77716/article/details/6275762\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://blog.jobbole.com/89140/\"\u003ehttp://blog.jobbole.com/89140/\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/dinglang_2009/article/details/51810151\"\u003ehttp://blog.csdn.net/dinglang_2009/article/details/51810151\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"https://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\"\u003ehttps://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"https://zhuanlan.zhihu.com/p/20399316?columnSlug=auxten\"\u003ehttps://zhuanlan.zhihu.com/p/20399316?columnSlug=auxten\u003c/a\u003e\u003c/p\u003e","markdowncontent":"###前言\n在[【OpenStack源码分析之六】从虚拟机启动流程看安全认证](http://blog.csdn.net/ohenry88/article/details/75701576) 中有提到一个问题是关于OpenStack的HA机制和灾难恢复（DR机制）的，HA和DR都是保障可用性的，两者都可以用两个维度来衡量，RTO （Recovery Time Objective）和 RPO（Recovery Point Objective）。RTO 是服务恢复的时间，最佳的情况是 0，这意味着服务立即恢复；最坏是无穷大意味着服务永远恢复不了；RPO 是切换时向前恢复的数据的时间长度，0 意味着使用同步的数据，大于 0 意味着有数据丢失，比如 ” RPO = 1 天“ 意味着恢复时使用一天前的数据，那么一天之内的数据就丢失了。因此，恢复的最佳结果是 RTO = RPO = 0，但是这个太理想，或者要实现的话成本太高，全球估计 Visa 等少数几个公司能实现，或者几乎实现。\n\nHA和DR两者相互关联，互相补充，互有交叉，同时又有显著的区别：\n\n- HA 往往指本地的高可用系统，表示在多个服务器运行一个或多种应用的情况下，应确保任意服务器出现任何故障时，其运行的应用不能中断，应用程序和系统应能迅速切换到其它服务器上运行，即本地系统集群和热备份。HA 往往是用共享存储，因此往往不会有数据丢失（RPO = 0），更多的是切换时间长度考虑即 RTO。\n\n- DR 是指异地（同城或者异地）的高可用系统，表示在灾害发生时，数据、应用以及业务的恢复能力。异地灾备的数据灾备部分是使用数据复制，根据使用的不同数据复制技术（同步、异步、Strectched Cluster 等），数据往往有损失导致 RPO \u003e0；而异地的应用切换往往需要更长的时间，这样 RT0 \u003e0。 因此，需要结合特定的业务需求，来定制所需要的 RTO 和 RPO，以实现最优的 CTO。\n\n这里先对HA机制里的分布式事务做一些分析，因为OpenStack自身是一个分布式系统，比如Nova Compute在创建虚拟机的流程涉及多个远程资源的操作，这里对整体的分布式事务的处理就是一个很重要的技术点。但是本节我并没有去探究OpenStack的实现，下面的技术可能并不是OpenStack选用的解决方案，我先列一下通用方案，有时间时我再去研究OpenStack的实现方式。\n\n###分布式事务\n分布式事务当前的处理是有比较成熟的技术，比如两阶段提交和三阶段提交技术，鉴于篇幅，先介绍一下两阶段提交。\n\n先举个栗子，比如在电商系统中，当有用户下单后，除了在订单表插入一条记录外，对应商品表的这个商品数量必须减1吧，怎么保证？！在搜索广告系统中，当用户点击某广告后，除了在点击事件表中增加一条记录外，还得去商家账户表中找到这个商家并扣除广告费吧，怎么保证？！等等，相信大家或多或多少都能碰到相似情景。\n\n本质上问题可以抽象为：当一个表数据更新后，怎么保证另一个表的数据也必须要更新成功。\n\n***本地事务***\n还是以支付宝转账余额宝为例，假设有\n\n- 支付宝账户表：A（id，userId，amount）\n- 余额宝账户表：B（id，userId，amount）\n- 用户的userId=1；\n从支付宝转账1万块钱到余额宝的动作分为两步：\n\n- 1）支付宝表扣除1万：update A set amount=amount-10000 where userId=1;\n- 2）余额宝表增加1万：update B set amount=amount+10000 where userId=1;\n\n如何确保支付宝余额宝收支平衡呢？\n\n有人说这个很简单嘛，可以用事务解决。\n```\nBegin transaction\n         update A set amount=amount-10000 where userId=1;\n         update B set amount=amount+10000 where userId=1;\nEnd transaction\ncommit;\n```\n非常正确，如果你使用spring的话一个注解就能搞定上述事务功能。\n\n```\n@Transactional(rollbackFor=Exception.class)\n    public void update() {\n        updateATable(); //更新A表\n        updateBTable(); //更新B表\n    }\n```\n如果系统规模较小，数据表都在一个数据库实例上，上述本地事务方式可以很好地运行，但是如果系统规模较大，比如支付宝账户表和余额宝账户表显然不会在同一个数据库实例上，他们往往分布在不同的物理节点上，这时本地事务已经失去用武之地。\n\n既然本地事务失效，分布式事务自然就登上舞台。\n\n***分布式事务—两阶段提交协议***\n两阶段提交协议（Two-phase Commit，2PC）经常被用来实现分布式事务。一般分为协调器C和若干事务执行者Si两种角色，这里的事务执行者就是具体的数据库，协调器可以和事务执行器在一台机器上.\n![这里写图片描述](http://ww2.sinaimg.cn/large/7cc829d3gw1eux5nfbny7j20l908xta6.jpg)\n\n1） 我们的应用程序（client）发起一个开始请求到TC；\n\n2） TC先将\u003cprepare\u003e消息写到本地日志，之后向所有的Si发起\u003cprepare\u003e消息。以支付宝转账到余额宝为例，TC给A的prepare消息是通知支付宝数据库相应账目扣款1万，TC给B的prepare消息是通知余额宝数据库相应账目增加1w。为什么在执行任务前需要先写本地日志，主要是为了故障后恢复用，本地日志起到现实生活中凭证 的效果，如果没有本地日志（凭证），出问题容易死无对证；\n\n3） Si收到\u003cprepare\u003e消息后，执行具体本机事务，但不会进行commit，如果成功返回\u003cyes\u003e，不成功返回\u003cno\u003e。同理，返回前都应把要返回的消息写到日志里，当作凭证。\n\n4） TC收集所有执行器返回的消息，如果所有执行器都返回yes，那么给所有执行器发生送commit消息，执行器收到commit后执行本地事务的commit操作；如果有任一个执行器返回no，那么给所有执行器发送abort消息，执行器收到abort消息后执行事务abort操作。\n\n注：TC或Si把发送或接收到的消息先写到日志里，主要是为了故障后恢复用。如某一Si从故障中恢复后，先检查本机的日志，如果已收到\u003ccommit \u003e，则提交，如果\u003cabort \u003e则回滚。如果是\u003cyes\u003e，则再向TC询问一下，确定下一步。如果什么都没有，则很可能在\u003cprepare\u003e阶段Si就崩溃了，因此需要回滚。\n\n现如今实现基于两阶段提交的分布式事务也没那么困难了，如果使用java，那么可以使用开源软件atomikos(http://www.atomikos.com/)来快速实现。\n\n不过但凡使用过的上述两阶段提交的同学都可以发现性能实在是太差，根本不适合高并发的系统。为什么？\n\n- 1）两阶段提交涉及多次节点间的网络通信，通信时间太长！\n- 2）事务时间相对于变长了，锁定的资源的时间也变长了，造成资源等待时间也增加好多！\n\n正是由于分布式事务存在很严重的性能问题，大部分高并发服务都在避免使用，往往通过其他途径来解决数据一致性问题。\n\n***使用消息队列来避免分布式事务***\n\n如果仔细观察生活的话，生活的很多场景已经给了我们提示。\n\n比如在北京很有名的姚记炒肝点了炒肝并付了钱后，他们并不会直接把你点的炒肝给你，而是给你一张小票，然后让你拿着小票到出货区排队去取。为什么他们要将付钱和取货两个动作分开呢？原因很多，其中一个很重要的原因是为了使他们接待能力增强（并发量更高）。\n\n还是回到我们的问题，只要这张小票在，你最终是能拿到炒肝的。同理转账服务也是如此，当支付宝账户扣除1万后，我们只要生成一个凭证（消息）即可，这个凭证（消息）上写着“让余额宝账户增加 1万”，只要这个凭证（消息）能可靠保存，我们最终是可以拿着这个凭证（消息）让余额宝账户增加1万的，即我们能依靠这个凭证（消息）完成最终一致性。\n\n***如何可靠保存凭证（消息）***\n有两种方法：\n\n- 业务与消息耦合的方式\n\n支付宝在完成扣款的同时，同时记录消息数据，这个消息数据与业务数据保存在同一数据库实例里（消息记录表表名为message）。\n```\nBegin transaction\n         update A set amount=amount-10000 where userId=1;\n         insert into message(userId, amount,status) values(1, 10000, 1);\nEnd transaction\ncommit;\n```\n上述事务能保证只要支付宝账户里被扣了钱，消息一定能保存下来。\n\n当上述事务提交成功后，我们通过实时消息服务将此消息通知余额宝，余额宝处理成功后发送回复成功消息，支付宝收到回复后删除该条消息数据。\n\n- 业务与消息解耦方式\n\n上述保存消息的方式使得消息数据和业务数据紧耦合在一起，从架构上看不够优雅，而且容易诱发其他问题。为了解耦，可以采用以下方式。\n\n1）支付宝在扣款事务提交之前，向实时消息服务请求发送消息，实时消息服务只记录消息数据，而不真正发送，只有消息发送成功后才会提交事务；\n\n2）当支付宝扣款事务被提交成功后，向实时消息服务确认发送。只有在得到确认发送指令后，实时消息服务才真正发送该消息；\n\n3）当支付宝扣款事务提交失败回滚后，向实时消息服务取消发送。在得到取消发送指令后，该消息将不会被发送；\n\n4）对于那些未确认的消息或者取消的消息，需要有一个消息状态确认系统定时去支付宝系统查询这个消息的状态并进行更新。为什么需要这一步骤，举个例子：假设在第2步支付宝扣款事务被成功提交后，系统挂了，此时消息状态并未被更新为“确认发送”，从而导致消息不能被发送。\n\n优点：消息数据独立存储，降低业务系统与消息系统间的耦合；\n\n缺点：一次消息发送需要两次请求；业务处理服务需要实现消息状态回查接口。\n\n![这里写图片描述](http://img.blog.csdn.net/20160702104538494)\n\n***如何解决消息重复投递的问题***\n还有一个很严重的问题就是消息重复投递，以我们支付宝转账到余额宝为例，如果相同的消息被重复投递两次，那么我们余额宝账户将会增加2万而不是1万了。这里面涉及到消费者接口的幂等性设计，简单来说，一个操作如果具有任意多次执行所产生的影响均与一次执行的影响相同，我们就称之为幂等。可见参考资料：https://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\n\n为什么相同的消息会被重复投递？比如余额宝处理完消息msg后，发送了处理成功的消息给支付宝，正常情况下支付宝应该要删除消息msg，但如果支付宝这时候悲剧的挂了，重启后一看消息msg还在，就会继续发送消息msg。\n\n解决方法很简单，在余额宝这边增加消息应用状态表（message_apply），通俗来说就是个账本，用于记录消息的消费情况，每次来一个消息，在真正执行之前，先去消息应用状态表中查询一遍，如果找到说明是重复消息，丢弃即可，如果没找到才执行，同时插入到消息应用状态表（同一事务）。\n\n```\nfor each msg in queue\n  Begin transaction\n    select count(*) as cnt from message_apply where msg_id=msg.msg_id;\n    if cnt==0 then\n      update B set amount=amount+10000 where userId=1;\n      insert into message_apply(msg_id) values(msg.msg_id);\n  End transaction\n  commit;\n```\nebay的研发人员其实在2008年就提出了应用消息状态确认表来解决消息重复投递的问题：http://queue.acm.org/detail.cfm?id=1394128。\n\n\n###CAP理论与相关算法\n在理论计算机科学中，CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：\n\n- 一致性 (Consistency)（等同于所有节点访问同一份最新的数据副本）\n- 可用性（Availability）（对数据更新具备高可用性）\n- 网络分区容忍性（Partition tolerance）（以实际效果而言，数据存在的节点越多，分区容忍性越高）\n\n详细理论可见参考文献四。\n\n这里我们把一致性分为两类，强一致性（CP）和最终一致性（AP），为了实现强一致性会有很多算法，这其中Raft算法的使用范围也比较广泛。详细教程见：http://thesecretlivesofdata.com/raft/#home ；关于最终一致性也有不少算法，Gossip算法也是其中的使用度交广的一种，详细分析材料见：http://blog.csdn.net/chen77716/article/details/6275762\n\n\n参考文献：\nhttp://blog.jobbole.com/89140/\nhttp://blog.csdn.net/dinglang_2009/article/details/51810151\nhttps://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\nhttps://zhuanlan.zhihu.com/p/20399316?columnSlug=auxten","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-19] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-25-【OpenStack源码分析之十一】分布式事务和相关算法.markdown [pool-2-thread-19] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之八】openstack中虚拟机在线迁移》成功 [pool-2-thread-4] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之六】从虚拟机启动流程看安全认证》成功 [pool-2-thread-8] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenStack源码分析之十一】分布式事务和相关算法》成功 [pool-2-thread-19] [chx]
[INFO] 2017-07-28 12:44:29 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=76221465 [pool-2-thread-7] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":76221465,"title":"【JAVA 提高班之一】集合大家族","create_at":"\/Date(1501160566000)\/","create":"2017-07-27 09:02:46","view_count":45,"comment_count":0,"comment_allowed":"true","type":"repost","channel":16,"digg":0,"bury":0,"description":"前言本篇文章转自chenssy的 java提高篇（二十）—–集合大家族，写得不错，转载以记之，我个人觉得一个功力不错的JAVA码工至少熟悉以下几个领域：\n不错的抽象的能力（设计模式）\n常用数据结构的特点（集合类等）\nJAVA虚拟机的机制（提升性能）\n并发编程\n我的JAVA提高班系列也会从这几个方面出发来写。集合大家族分析在编写Java程序中，我们最常用的除了八种基本数据类型，String对象外还有一","url":"http://blog.csdn.net/BLACKMOON88/article/details/76221465","categories":"java提高","tags":"java,数据结构,设计模式","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e本篇文章转自chenssy的 \u003ca href=\"http://blog.csdn.net/chenssy/article/details/17732841\" target=\"_blank\"\u003ejava提高篇（二十）—–集合大家族\u003c/a\u003e，写得不错，转载以记之，我个人觉得一个功力不错的JAVA码工至少熟悉以下几个领域：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e不错的抽象的能力（设计模式）\u003c/li\u003e\n\u003cli\u003e常用数据结构的特点（集合类等）\u003c/li\u003e\n\u003cli\u003eJAVA虚拟机的机制（提升性能）\u003c/li\u003e\n\u003cli\u003e并发编程\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e我的JAVA提高班系列也会从这几个方面出发来写。\u003c/p\u003e\n\n\u003ch3 id=\"集合大家族分析\"\u003e集合大家族分析\u003c/h3\u003e\n\n\u003cp\u003e在编写Java程序中，我们最常用的除了八种基本数据类型，String对象外还有一个集合类，在我们的的程序中到处充斥着集合类的身影！java中集合大家族的成员实在是太丰富了，有常用的ArrayList、HashMap、HashSet，也有不常用的Stack、Queue，有线程安全的Vector、HashTable，也有线程不安全的LinkedList、TreeMap等等！\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20140101105109140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbnNzeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e上面的图展示了整个集合大家族的成员以及他们之间的关系。下面就上面的各个接口、基类做一些简单的介绍(主要介绍各个集合的特点。区别)，更加详细的介绍会在不久的将来一一讲解。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"collection接口\"\u003eCollection接口\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20170727191947219?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eCollection接口是最基本的集合接口，从上图可以看出它提供了实现类的公共API，但是它不提供直接的实现，Java SDK提供的类都是继承自Collection的“子接口”如List和Set。Collection所代表的是元素集，它所包含的元素有以下特点：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e有些允许重复而有些则不能重复；\u003c/li\u003e\n\u003cli\u003e有些自身来维护排序，有些需要用户维护排序，所以支持随机访问，有些根本不Care排序；\u003c/li\u003e\n\u003cli\u003e有些线程安全，有些线程不安全；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e在Java中所有实现了Collection接口的类都必须提供两套标准的构造函数，一个是无参，用于创建一个空的Collection，一个是带有Collection参数的有参构造函数，用于创建一个新的Collection，这个新的Collection与传入进来的Collection具备相同的元素。\u003c/p\u003e\n\n\u003ch3 id=\"list接口\"\u003eList接口\u003c/h3\u003e\n\n\u003cp\u003eList接口为Collection直接接口。List所代表的是有序的Collection，即它用某种特定的插入顺序来维护元素顺序。用户可以对列表中每个元素的插入位置进行精确地控制，同时可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eArrayList\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nArrayList是一个动态数组，也是我们最常用的集合。它允许任何符合规则的元素插入甚至包括null。每一个ArrayList都有一个初始容量（10），该容量代表了数组的大小。随着容器中的元素不断增加，容器的大小也会随着增加。在每次向容器中增加元素的同时都会进行容量检查，当快溢出时，就会进行扩容操作。所以如果我们明确所插入元素的多少，最好指定一个初始容量值，避免过多的进行扩容操作而浪费时间、效率。\u003c/p\u003e\n\n\u003cp\u003esize、isEmpty、get、set、iterator 和 listIterator 操作都以固定时间运行。add 操作以分摊的固定时间运行，也就是说，添加 n 个元素需要 O(n) 时间（由于要考虑到扩容，所以这不只是添加元素会带来分摊固定时间开销那样简单）。\u003c/p\u003e\n\n\u003cp\u003eArrayList擅长于随机访问。同时ArrayList是非同步的。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eLinkedList\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n同样实现List接口的LinkedList与ArrayList不同，ArrayList是一个动态数组，而LinkedList是一个双向链表。所以它除了有ArrayList的基本操作方法外还额外提供了get，remove，insert方法在LinkedList的首部或尾部。\u003c/p\u003e\n\n\u003cp\u003e由于实现的方式不同，LinkedList不能随机访问，它所有的操作都是要按照双重链表的需要执行。在列表中索引的操作将从开头或结尾遍历列表（从靠近指定索引的一端）。这样做的好处就是可以通过较低的代价在List中进行插入和删除操作。\u003c/p\u003e\n\n\u003cp\u003e与ArrayList一样，LinkedList也是线程不安全的。如果多个线程同时访问一个List，则必须自己实现访问同步。一种解决方法是在创建List时构造一个同步的List： \u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs r\"\u003eList list = Collections.synchronizedList(new LinkedList(\u003cspan class=\"hljs-keyword\"\u003e...\u003c/span\u003e));\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eVector\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n与ArrayList相似，但是Vector是线程安全的。所以说Vector是线程安全的动态数组。它的操作与ArrayList几乎一样。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eStack\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nStack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop 方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"set接口\"\u003eSet接口\u003c/h3\u003e\n\n\u003cp\u003eSet是一种不包括重复元素的Collection。它维持它自己的内部排序，所以随机访问没有任何意义。与List一样，它同样运行null的存在但是仅有一个。由于Set接口的特殊性，所有传入Set集合中的元素都必须不同，同时要注意任何可变对象，如果在对集合中元素进行操作时，导致e1.equals(e2)==true，则必定会产生某些问题。实现了Set接口的集合有：EnumSet、HashSet、TreeSet。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eEnumSet\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n是枚举的专用Set。所有的元素都是枚举类型。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eHashSet\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nHashSet堪称查询速度最快的集合，因为其内部是以HashCode来实现的。它内部元素的顺序是由哈希码来决定的，所以它不保证set 的迭代顺序；特别是它不保证该顺序恒久不变。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTreeSet\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n基于TreeMap，生成一个总是处于排序状态的set，内部以TreeMap来实现。它是使用元素的自然顺序对元素进行排序，或者根据创建Set 时提供的 Comparator 进行排序，具体取决于使用的构造方法。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"map接口\"\u003eMap接口\u003c/h3\u003e\n\n\u003cp\u003eMap与List、Set接口不同，它是由一系列键值对组成的集合，提供了key到Value的映射。同时它也没有继承Collection。在Map中它保证了key与value之间的一一对应关系。也就是说一个key对应一个value，所以它不能存在相同的key值，当然value值可以相同。实现map的有：HashMap、TreeMap、HashTable、Properties、EnumMap。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eHashMap\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n以哈希表数据结构实现，查找对象时通过哈希函数计算其位置，它是为快速查询而设计的，其内部定义了一个hash表数组（Entry[] table），元素会通过哈希转换函数将元素的哈希地址转换成数组中存放的索引，如果有冲突，则使用散列链表的形式将所有相同哈希地址的元素串起来，可能通过查看HashMap.Entry的源码它是一个单链表结构。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTreeMap\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n键以某种排序规则排序，内部以red-black（红-黑）树数据结构实现，实现了SortedMap接口\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eHashTable\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n也是以哈希表数据结构实现的，解决冲突时与HashMap也一样也是采用了散列链表的形式，不过性能比HashMap要低，因为HashTable是线程安全的。\u003c/p\u003e\n\n\u003ch3 id=\"queue\"\u003eQueue\u003c/h3\u003e\n\n\u003cp\u003e队列，它主要分为两大类，一类是阻塞式队列，队列满了以后再插入元素则会抛出异常，主要包括ArrayBlockQueue、PriorityBlockingQueue、LinkedBlockingQueue。另一种队列则是双端队列，支持在头、尾两端插入和移除元素，主要包括：ArrayDeque、LinkedBlockingDeque、LinkedList。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"对集合的选择\"\u003e对集合的选择\u003c/h3\u003e\n\n\u003ch4 id=\"对list的选择\"\u003e对List的选择\u003c/h4\u003e\n\n\u003cp\u003e1、对于随机查询与迭代遍历操作，数组比所有的容器都要快。所以在随机访问中一般使用ArrayList \u003cbr\u003e\n2、LinkedList使用双向链表对元素的增加和删除提供了非常好的支持，而ArrayList执行增加和删除元素需要进行元素位移。 \u003cbr\u003e\n3、对于Vector而已，我们一般都是避免使用。 \u003cbr\u003e\n4、将ArrayList当做首选，毕竟对于集合元素而已我们都是进行遍历，只有当程序的性能因为List的频繁插入和删除而降低时，再考虑LinkedList。\u003c/p\u003e\n\n\u003ch4 id=\"对set的选择\"\u003e对Set的选择\u003c/h4\u003e\n\n\u003cp\u003e1、HashSet由于使用HashCode实现，所以在某种程度上来说它的性能永远比TreeSet要好，尤其是进行增加和查找操作。 \u003cbr\u003e\n2、虽然TreeSet没有HashSet性能好，但是由于它可以维持元素的排序，所以它还是存在用武之地的。\u003c/p\u003e\n\n\u003ch4 id=\"对map的选择\"\u003e对Map的选择\u003c/h4\u003e\n\n\u003cp\u003e1、HashMap与HashSet同样，支持快速查询。虽然HashTable速度的速度也不慢，但是在HashMap面前还是稍微慢了些，所以HashMap在查询方面可以取代HashTable。 \u003cbr\u003e\n2、由于TreeMap需要维持内部元素的顺序，所以它通常要比HashMap和HashTable慢。但是对于大规模数据的查找，比如百万路由表查找等适合用TreeMap\u003c/p\u003e\n\n\u003ch3 id=\"iterator和iterable接口\"\u003eIterator和Iterable接口\u003c/h3\u003e\n\n\u003cp\u003e先给大家看看源码\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs coffeescript\"\u003epublic interface Iterable&lt;T&gt; {\n    /**\n     * Returns an iterator over elements \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e type {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e T}.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@return\u003c/span\u003e an Iterator.\n     */\n    Iterator&lt;T&gt; iterator();\n\n    /**\n     * Performs the given action \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e each element \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e Iterable}\n     * \u003cspan class=\"hljs-keyword\"\u003euntil\u003c/span\u003e all elements have been processed \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e the action throws an\n     * exception.  Unless otherwise specified \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the implementing \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e,\u003c/span\u003e\n     * actions are performed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the order \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e iteration (\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e an iteration order\n     * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e specified).  Exceptions thrown \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the action are relayed to the\n     * caller.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@implSpec\u003c/span\u003e\n     * &lt;p&gt;The \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e implementation behaves as \u003cspan class=\"hljs-attribute\"\u003eif\u003c/span\u003e:\n     * &lt;pre&gt;{\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e\n     *     \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (T t : \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e)\n     *         action.accept(t);\n     * }&lt;/pre&gt;\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@param\u003c/span\u003e action The action to be performed \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e each element\n     * \u003cspan class=\"hljs-property\"\u003e@throws\u003c/span\u003e NullPointerException \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e the specified action \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e\n     * \u003cspan class=\"hljs-property\"\u003e@since\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1.8\u003c/span\u003e\n     */\n    \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e \u003cspan class=\"hljs-reserved\"\u003evoid\u003c/span\u003e forEach(Consumer&lt;? \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e T&gt; action) {\n        Objects.requireNonNull(action);\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (T t : \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e) {\n            action.accept(t);\n        }\n    }\n\n    /**\n     * Creates a {\u003cspan class=\"hljs-property\"\u003e@link\u003c/span\u003e Spliterator} over the elements described \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n     * {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e Iterable}.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@implSpec\u003c/span\u003e\n     * The \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e implementation creates an\n     * &lt;em&gt;&lt;a href=\u003cspan class=\"hljs-string\"\u003e\"Spliterator.html#binding\"\u003c/span\u003e&gt;early-binding&lt;/a&gt;&lt;/em&gt;\n     * spliterator from the iterable\u003cspan class=\"hljs-string\"\u003e\u0027s {@code Iterator}.  The spliterator\n     * inherits the &lt;em&gt;fail-fast&lt;/em&gt; properties of the iterable\u0027\u003c/span\u003es iterator.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@implNote\u003c/span\u003e\n     * The \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e implementation should usually be overridden.  The\n     * spliterator returned \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e implementation has poor splitting\n     * capabilities, \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unsized, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e report any spliterator\n     * characteristics. Implementing classes can nearly always provide a\n     * better implementation.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@return\u003c/span\u003e a {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e Spliterator} over the elements described \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n     * {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e Iterable}.\n     * \u003cspan class=\"hljs-property\"\u003e@since\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1.8\u003c/span\u003e\n     */\n    \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e Spliterator&lt;T&gt; spliterator() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e Spliterators.spliteratorUnknownSize(iterator(), \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n    }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这里Iterator是放在Iterable接口中的，集合类为什么一定要去实现Iterable这个接口呢？ 为什么不直接实现Iterator接口呢？\u003c/p\u003e\n\n\u003cp\u003e因为Iterator接口相当于接口的一个指针，如果集合类实现这个指针接口的next方法，很显然和对象实例就直接绑定了，无法支持多线程。采用这种实现方式之后，每次调用都会返回一个从头开始计数的迭代器。\u003c/p\u003e\n\n\u003cp\u003e为什么需要实现迭代器呢？前文也已经讲述过，集合类中有按序管理的，有支持随机访问的，采用Iterator的方式可以隔离使用者和集合类的直接耦合。\u003c/p\u003e\n\n\u003ch3 id=\"fail-fast机制\"\u003efail-fast机制\u003c/h3\u003e\n\n\u003cp\u003e在JDK的Collection中我们时常会看到类似于这样的话：\u003c/p\u003e\n\n\u003cp\u003e例如，ArrayList:\u003c/p\u003e\n\n\u003cp\u003e注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出 ConcurrentModificationException。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。\u003c/p\u003e\n\n\u003cp\u003eHashMap中：\u003c/p\u003e\n\n\u003cp\u003e注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 ConcurrentModificationException。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。\u003c/p\u003e\n\n\u003cp\u003e在这两段话中反复地提到”快速失败”。那么何为”快速失败”机制呢？\u003c/p\u003e\n\n\u003cp\u003e“快速失败”也就是fail-fast，它是Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。记住是有可能，而不是一定。例如：假设存在两个线程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生fail-fast机制。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003efail-fast示例\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFailFastTest\u003c/span\u003e {\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e List&lt;Integer&gt; list = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList&lt;&gt;();  \n\n    \u003cspan class=\"hljs-javadoc\"\u003e/** \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @desc\u003c/span\u003e:线程one迭代list \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @Project\u003c/span\u003e:test \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @file\u003c/span\u003e:FailFastTest.java \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @Authro\u003c/span\u003e:chenssy \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @data\u003c/span\u003e:2014年7月26日 \n     */\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ethreadOne\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThread\u003c/span\u003e{\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e() {  \n            Iterator&lt;Integer&gt; iterator = list.iterator();  \n            \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(iterator.hasNext()){  \n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = iterator.next();  \n                System.out.println(\u003cspan class=\"hljs-string\"\u003e\"ThreadOne 遍历:\"\u003c/span\u003e + i);  \n                \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {  \n                    Thread.sleep(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e);  \n                } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {  \n                    e.printStackTrace();  \n                }  \n            }  \n        }  \n    }  \n\n    \u003cspan class=\"hljs-javadoc\"\u003e/** \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @desc\u003c/span\u003e:当i == 3时，修改list \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @Project\u003c/span\u003e:test \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @file\u003c/span\u003e:FailFastTest.java \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @Authro\u003c/span\u003e:chenssy \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @data\u003c/span\u003e:2014年7月26日 \n     */\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ethreadTwo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThread\u003c/span\u003e{\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e(){  \n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ;   \n            \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(i &lt; \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e){  \n                System.out.println(\u003cspan class=\"hljs-string\"\u003e\"ThreadTwo run：\"\u003c/span\u003e + i);  \n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(i == \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e){  \n                    list.remove(i);  \n                }  \n                i++;  \n            }  \n        }  \n    }  \n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {  \n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ; i &lt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;i++){  \n            list.add(i);  \n        }  \n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e threadOne().start();  \n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e threadTwo().start();  \n    }  \n}  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e运行结果：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs avrasm\"\u003eThreadOne 遍历:\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e  \nException \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e thread \u003cspan class=\"hljs-string\"\u003e\"Thread-0\"\u003c/span\u003e java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ConcurrentModificationException\u003c/span\u003e  \n    at java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ArrayList\u003c/span\u003e$Itr\u003cspan class=\"hljs-preprocessor\"\u003e.checkForComodification\u003c/span\u003e(Unknown Source)  \n    at java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ArrayList\u003c/span\u003e$Itr\u003cspan class=\"hljs-preprocessor\"\u003e.next\u003c/span\u003e(Unknown Source)  \n    at test\u003cspan class=\"hljs-preprocessor\"\u003e.ArrayListTest\u003c/span\u003e$threadOne\u003cspan class=\"hljs-preprocessor\"\u003e.run\u003c/span\u003e(ArrayListTest\u003cspan class=\"hljs-preprocessor\"\u003e.java\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003efail-fast产生原因\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n 通过上面的示例和讲解，我初步知道fail-fast产生的原因就在于程序在对 collection 进行迭代时，某个线程对该 collection 在结构上对其做了修改，这时迭代器就会抛出 ConcurrentModificationException 异常信息，从而产生 fail-fast。\u003c/p\u003e\n\n\u003cp\u003e要了解fail-fast机制，我们首先要对ConcurrentModificationException 异常有所了解。当方法检测到对象的并发修改，但不允许这种修改时就抛出该异常。同时需要注意的是，该异常不会始终指出对象已经由不同线程并发修改，如果单线程违反了规则，同样也有可能会抛出改异常。\u003c/p\u003e\n\n\u003cp\u003e诚然，迭代器的快速失败行为无法得到保证，它不能保证一定会出现该错误，但是快速失败操作会尽最大努力抛出ConcurrentModificationException异常，所以因此，为提高此类操作的正确性而编写一个依赖于此异常的程序是错误的做法，正确做法是：ConcurrentModificationException 应该仅用于检测 bug。下面我将以ArrayList为例进一步分析fail-fast产生的原因。\u003c/p\u003e\n\n\u003cp\u003e从前面我们知道fail-fast是在操作迭代器时产生的。现在我们来看看ArrayList中迭代器的源代码：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs axapta\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItr\u003c/span\u003e \u003cspan class=\"hljs-inheritance\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eIterator\u003c/span\u003e&lt;\u003cspan class=\"hljs-title\"\u003eE\u003c/span\u003e&gt; {\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e cursor;  \n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e lastRet = -\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;  \n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e expectedModCount = ArrayList.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount;  \n\n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e hasNext() {  \n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.cursor != ArrayList.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.size);  \n        }  \n\n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e E next() {  \n            checkForComodification();  \n            \u003cspan class=\"hljs-comment\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n        }  \n\n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e remove() {  \n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastRet &lt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)  \n                \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e IllegalStateException();  \n            checkForComodification();  \n            \u003cspan class=\"hljs-comment\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n        }  \n\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e checkForComodification() {  \n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (ArrayList.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount == \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.expectedModCount)  \n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;  \n            \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ConcurrentModificationException();  \n        }  \n    }  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e从上面的源代码我们可以看出，迭代器在调用next()、remove()方法时都是调用checkForComodification()方法，该方法主要就是检测modCount == expectedModCount ? 若不等则抛出ConcurrentModificationException 异常，从而产生fail-fast机制。所以要弄清楚为什么会产生fail-fast机制我们就必须要用弄明白为什么modCount != expectedModCount ，他们的值在什么时候发生改变的。\u003c/p\u003e\n\n\u003cp\u003eexpectedModCount 是在Itr中定义的：int expectedModCount = ArrayList.this.modCount;所以他的值是不可能会修改的，所以会变的就是modCount。modCount是在 AbstractList 中定义的，为全局变量：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e modCount = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e那么他什么时候因为什么原因而发生改变呢？请看ArrayList的源码：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eadd\u003c/span\u003e(E paramE) {  \n    ensureCapacityInternal(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.size + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);  \n    \u003cspan class=\"hljs-javadoc\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n}  \n\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eensureCapacityInternal\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e paramInt) {  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elementData == EMPTY_ELEMENTDATA)  \n        paramInt = Math.max(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, paramInt);  \n    ensureExplicitCapacity(paramInt);  \n}  \n\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eensureExplicitCapacity\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e paramInt) {  \n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;    \u003cspan class=\"hljs-comment\"\u003e//修改modCount  \u003c/span\u003e\n    \u003cspan class=\"hljs-javadoc\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n}  \n\nublic \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e remove(Object paramObject) {  \n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i;  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (paramObject == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)  \n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.size; ++i) {  \n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elementData[i] != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)  \n                \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;  \n            fastRemove(i);  \n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;  \n        }  \n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.size; ++i) {  \n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!(paramObject.equals(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elementData[i])))  \n                \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;  \n            fastRemove(i);  \n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;  \n        }  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;  \n}  \n\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efastRemove\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e paramInt) {  \n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;   \u003cspan class=\"hljs-comment\"\u003e//修改modCount  \u003c/span\u003e\n    \u003cspan class=\"hljs-javadoc\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n}  \n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eclear\u003c/span\u003e() {  \n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;    \u003cspan class=\"hljs-comment\"\u003e//修改modCount  \u003c/span\u003e\n    \u003cspan class=\"hljs-javadoc\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n}  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e从上面的源代码我们可以看出，ArrayList中无论add、remove、clear方法只要是涉及了改变ArrayList元素的个数的方法都会导致modCount的改变。所以我们这里可以初步判断由于expectedModCount 得值与modCount的改变不同步，导致两者之间不等从而产生fail-fast机制。知道产生fail-fast产生的根本原因了，我们可以有如下场景：\u003c/p\u003e\n\n\u003cp\u003e有两个线程（线程A，线程B），其中线程A负责遍历list、线程B修改list。线程A在遍历list过程的某个时候（此时expectedModCount = modCount=N），线程启动，同时线程B增加一个元素，这是modCount的值发生改变（modCount + 1 = N + 1）。线程A继续遍历执行next方法时，通告checkForComodification方法发现expectedModCount  = N  ，而modCount = N + 1，两者不等，这时就抛出ConcurrentModificationException 异常，从而产生fail-fast机制。\u003c/p\u003e\n\n\u003cp\u003e所以，直到这里我们已经完全了解了fail-fast产生的根本原因了。知道了原因就好找解决办法了。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003efail-fast解决办法\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n通过前面的实例、源码分析，我想各位已经基本了解了fail-fast的机制，下面我就产生的原因提出解决方案。这里有两种解决方案：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e方案一：在遍历过程中所有涉及到改变modCount值得地方全部加上synchronized或者直接使用Collections.synchronizedList，这样就可以解决。但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作。\u003c/li\u003e\n\u003cli\u003e方案二：使用CopyOnWriteArrayList来替换ArrayList。推荐使用该方案。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eCopyOnWriteArrayList为何物？ArrayList 的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。 该类产生的开销比较大，但是在两种情况下，它非常适合使用。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e1：在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时。\u003c/li\u003e\n\u003cli\u003e2：当遍历操作的数量大大超过可变操作的数量时。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e遇到这两种情况使用CopyOnWriteArrayList来替代ArrayList再适合不过了。那么为什么CopyOnWriterArrayList可以替代ArrayList呢？\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e第一、CopyOnWriterArrayList的无论是从数据结构、定义都和ArrayList一样。它和ArrayList一样，同样是实现List接口，底层使用数组实现。在方法上也包含add、remove、clear、iterator等方法。\u003c/li\u003e\n\u003cli\u003e第二、CopyOnWriterArrayList根本就不会产生ConcurrentModificationException异常，也就是它使用迭代器完全不会产生fail-fast机制。\u003c/li\u003e\n\u003c/ul\u003e","markdowncontent":"###前言\n本篇文章转自chenssy的 [java提高篇（二十）-----集合大家族](http://blog.csdn.net/chenssy/article/details/17732841)，写得不错，转载以记之，我个人觉得一个功力不错的JAVA码工至少熟悉以下几个领域：\n\n- 不错的抽象的能力（设计模式）\n- 常用数据结构的特点（集合类等）\n- JAVA虚拟机的机制（提升性能）\n- 并发编程\n\n我的JAVA提高班系列也会从这几个方面出发来写。\n\n###集合大家族分析\n在编写Java程序中，我们最常用的除了八种基本数据类型，String对象外还有一个集合类，在我们的的程序中到处充斥着集合类的身影！java中集合大家族的成员实在是太丰富了，有常用的ArrayList、HashMap、HashSet，也有不常用的Stack、Queue，有线程安全的Vector、HashTable，也有线程不安全的LinkedList、TreeMap等等！\n\n![这里写图片描述](http://img.blog.csdn.net/20140101105109140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbnNzeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n上面的图展示了整个集合大家族的成员以及他们之间的关系。下面就上面的各个接口、基类做一些简单的介绍(主要介绍各个集合的特点。区别)，更加详细的介绍会在不久的将来一一讲解。\n\n###Collection接口\n\n![这里写图片描述](http://img.blog.csdn.net/20170727191947219?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nCollection接口是最基本的集合接口，从上图可以看出它提供了实现类的公共API，但是它不提供直接的实现，Java SDK提供的类都是继承自Collection的“子接口”如List和Set。Collection所代表的是元素集，它所包含的元素有以下特点：\n\n- 有些允许重复而有些则不能重复；\n- 有些自身来维护排序，有些需要用户维护排序，所以支持随机访问，有些根本不Care排序；\n- 有些线程安全，有些线程不安全；\n\n在Java中所有实现了Collection接口的类都必须提供两套标准的构造函数，一个是无参，用于创建一个空的Collection，一个是带有Collection参数的有参构造函数，用于创建一个新的Collection，这个新的Collection与传入进来的Collection具备相同的元素。\n\n###List接口\nList接口为Collection直接接口。List所代表的是有序的Collection，即它用某种特定的插入顺序来维护元素顺序。用户可以对列表中每个元素的插入位置进行精确地控制，同时可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。\n\n***ArrayList***\nArrayList是一个动态数组，也是我们最常用的集合。它允许任何符合规则的元素插入甚至包括null。每一个ArrayList都有一个初始容量（10），该容量代表了数组的大小。随着容器中的元素不断增加，容器的大小也会随着增加。在每次向容器中增加元素的同时都会进行容量检查，当快溢出时，就会进行扩容操作。所以如果我们明确所插入元素的多少，最好指定一个初始容量值，避免过多的进行扩容操作而浪费时间、效率。\n\nsize、isEmpty、get、set、iterator 和 listIterator 操作都以固定时间运行。add 操作以分摊的固定时间运行，也就是说，添加 n 个元素需要 O(n) 时间（由于要考虑到扩容，所以这不只是添加元素会带来分摊固定时间开销那样简单）。\n\nArrayList擅长于随机访问。同时ArrayList是非同步的。\n\n***LinkedList***\n同样实现List接口的LinkedList与ArrayList不同，ArrayList是一个动态数组，而LinkedList是一个双向链表。所以它除了有ArrayList的基本操作方法外还额外提供了get，remove，insert方法在LinkedList的首部或尾部。\n\n由于实现的方式不同，LinkedList不能随机访问，它所有的操作都是要按照双重链表的需要执行。在列表中索引的操作将从开头或结尾遍历列表（从靠近指定索引的一端）。这样做的好处就是可以通过较低的代价在List中进行插入和删除操作。\n\n与ArrayList一样，LinkedList也是线程不安全的。如果多个线程同时访问一个List，则必须自己实现访问同步。一种解决方法是在创建List时构造一个同步的List： \n\n```\nList list = Collections.synchronizedList(new LinkedList(...));\n```\n***Vector***\n与ArrayList相似，但是Vector是线程安全的。所以说Vector是线程安全的动态数组。它的操作与ArrayList几乎一样。\n\n***Stack***\nStack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop 方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。\n\n###Set接口\nSet是一种不包括重复元素的Collection。它维持它自己的内部排序，所以随机访问没有任何意义。与List一样，它同样运行null的存在但是仅有一个。由于Set接口的特殊性，所有传入Set集合中的元素都必须不同，同时要注意任何可变对象，如果在对集合中元素进行操作时，导致e1.equals(e2)==true，则必定会产生某些问题。实现了Set接口的集合有：EnumSet、HashSet、TreeSet。\n\n***EnumSet***\n是枚举的专用Set。所有的元素都是枚举类型。\n\n***HashSet***\nHashSet堪称查询速度最快的集合，因为其内部是以HashCode来实现的。它内部元素的顺序是由哈希码来决定的，所以它不保证set 的迭代顺序；特别是它不保证该顺序恒久不变。\n\n***TreeSet***\n基于TreeMap，生成一个总是处于排序状态的set，内部以TreeMap来实现。它是使用元素的自然顺序对元素进行排序，或者根据创建Set 时提供的 Comparator 进行排序，具体取决于使用的构造方法。\n\n###Map接口\nMap与List、Set接口不同，它是由一系列键值对组成的集合，提供了key到Value的映射。同时它也没有继承Collection。在Map中它保证了key与value之间的一一对应关系。也就是说一个key对应一个value，所以它不能存在相同的key值，当然value值可以相同。实现map的有：HashMap、TreeMap、HashTable、Properties、EnumMap。\n\n***HashMap***\n以哈希表数据结构实现，查找对象时通过哈希函数计算其位置，它是为快速查询而设计的，其内部定义了一个hash表数组（Entry[] table），元素会通过哈希转换函数将元素的哈希地址转换成数组中存放的索引，如果有冲突，则使用散列链表的形式将所有相同哈希地址的元素串起来，可能通过查看HashMap.Entry的源码它是一个单链表结构。\n\n***TreeMap***\n键以某种排序规则排序，内部以red-black（红-黑）树数据结构实现，实现了SortedMap接口\n\n***HashTable***\n也是以哈希表数据结构实现的，解决冲突时与HashMap也一样也是采用了散列链表的形式，不过性能比HashMap要低，因为HashTable是线程安全的。\n\n###Queue\n队列，它主要分为两大类，一类是阻塞式队列，队列满了以后再插入元素则会抛出异常，主要包括ArrayBlockQueue、PriorityBlockingQueue、LinkedBlockingQueue。另一种队列则是双端队列，支持在头、尾两端插入和移除元素，主要包括：ArrayDeque、LinkedBlockingDeque、LinkedList。\n\n###对集合的选择\n\n####对List的选择\n1、对于随机查询与迭代遍历操作，数组比所有的容器都要快。所以在随机访问中一般使用ArrayList\n2、LinkedList使用双向链表对元素的增加和删除提供了非常好的支持，而ArrayList执行增加和删除元素需要进行元素位移。\n3、对于Vector而已，我们一般都是避免使用。\n4、将ArrayList当做首选，毕竟对于集合元素而已我们都是进行遍历，只有当程序的性能因为List的频繁插入和删除而降低时，再考虑LinkedList。\n\n####对Set的选择\n1、HashSet由于使用HashCode实现，所以在某种程度上来说它的性能永远比TreeSet要好，尤其是进行增加和查找操作。\n2、虽然TreeSet没有HashSet性能好，但是由于它可以维持元素的排序，所以它还是存在用武之地的。\n\n####对Map的选择\n1、HashMap与HashSet同样，支持快速查询。虽然HashTable速度的速度也不慢，但是在HashMap面前还是稍微慢了些，所以HashMap在查询方面可以取代HashTable。\n2、由于TreeMap需要维持内部元素的顺序，所以它通常要比HashMap和HashTable慢。但是对于大规模数据的查找，比如百万路由表查找等适合用TreeMap\n\n###Iterator和Iterable接口\n先给大家看看源码\n\n``` JAVA\npublic interface Iterable\u003cT\u003e {\n    /**\n     * Returns an iterator over elements of type {@code T}.\n     *\n     * @return an Iterator.\n     */\n    Iterator\u003cT\u003e iterator();\n\n    /**\n     * Performs the given action for each element of the {@code Iterable}\n     * until all elements have been processed or the action throws an\n     * exception.  Unless otherwise specified by the implementing class,\n     * actions are performed in the order of iteration (if an iteration order\n     * is specified).  Exceptions thrown by the action are relayed to the\n     * caller.\n     *\n     * @implSpec\n     * \u003cp\u003eThe default implementation behaves as if:\n     * \u003cpre\u003e{@code\n     *     for (T t : this)\n     *         action.accept(t);\n     * }\u003c/pre\u003e\n     *\n     * @param action The action to be performed for each element\n     * @throws NullPointerException if the specified action is null\n     * @since 1.8\n     */\n    default void forEach(Consumer\u003c? super T\u003e action) {\n        Objects.requireNonNull(action);\n        for (T t : this) {\n            action.accept(t);\n        }\n    }\n\n    /**\n     * Creates a {@link Spliterator} over the elements described by this\n     * {@code Iterable}.\n     *\n     * @implSpec\n     * The default implementation creates an\n     * \u003cem\u003e\u003ca href=\"Spliterator.html#binding\"\u003eearly-binding\u003c/a\u003e\u003c/em\u003e\n     * spliterator from the iterable\u0027s {@code Iterator}.  The spliterator\n     * inherits the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterable\u0027s iterator.\n     *\n     * @implNote\n     * The default implementation should usually be overridden.  The\n     * spliterator returned by the default implementation has poor splitting\n     * capabilities, is unsized, and does not report any spliterator\n     * characteristics. Implementing classes can nearly always provide a\n     * better implementation.\n     *\n     * @return a {@code Spliterator} over the elements described by this\n     * {@code Iterable}.\n     * @since 1.8\n     */\n    default Spliterator\u003cT\u003e spliterator() {\n        return Spliterators.spliteratorUnknownSize(iterator(), 0);\n    }\n}\n```\n这里Iterator是放在Iterable接口中的，集合类为什么一定要去实现Iterable这个接口呢？ 为什么不直接实现Iterator接口呢？\n\n因为Iterator接口相当于接口的一个指针，如果集合类实现这个指针接口的next方法，很显然和对象实例就直接绑定了，无法支持多线程。采用这种实现方式之后，每次调用都会返回一个从头开始计数的迭代器。\n\n为什么需要实现迭代器呢？前文也已经讲述过，集合类中有按序管理的，有支持随机访问的，采用Iterator的方式可以隔离使用者和集合类的直接耦合。\n\n###fail-fast机制\n 在JDK的Collection中我们时常会看到类似于这样的话：\n\n例如，ArrayList:\n\n注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出 ConcurrentModificationException。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。\n\nHashMap中：\n\n注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 ConcurrentModificationException。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。\n\n在这两段话中反复地提到”快速失败”。那么何为”快速失败”机制呢？\n\n“快速失败”也就是fail-fast，它是Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。记住是有可能，而不是一定。例如：假设存在两个线程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生fail-fast机制。\n\n***fail-fast示例***\n\n``` JAVA\npublic class FailFastTest {  \n    private static List\u003cInteger\u003e list = new ArrayList\u003c\u003e();  \n      \n    /** \n     * @desc:线程one迭代list \n     * @Project:test \n     * @file:FailFastTest.java \n     * @Authro:chenssy \n     * @data:2014年7月26日 \n     */  \n    private static class threadOne extends Thread{  \n        public void run() {  \n            Iterator\u003cInteger\u003e iterator = list.iterator();  \n            while(iterator.hasNext()){  \n                int i = iterator.next();  \n                System.out.println(\"ThreadOne 遍历:\" + i);  \n                try {  \n                    Thread.sleep(10);  \n                } catch (InterruptedException e) {  \n                    e.printStackTrace();  \n                }  \n            }  \n        }  \n    }  \n      \n    /** \n     * @desc:当i == 3时，修改list \n     * @Project:test \n     * @file:FailFastTest.java \n     * @Authro:chenssy \n     * @data:2014年7月26日 \n     */  \n    private static class threadTwo extends Thread{  \n        public void run(){  \n            int i = 0 ;   \n            while(i \u003c 6){  \n                System.out.println(\"ThreadTwo run：\" + i);  \n                if(i == 3){  \n                    list.remove(i);  \n                }  \n                i++;  \n            }  \n        }  \n    }  \n      \n    public static void main(String[] args) {  \n        for(int i = 0 ; i \u003c 10;i++){  \n            list.add(i);  \n        }  \n        new threadOne().start();  \n        new threadTwo().start();  \n    }  \n}  \n```\n 运行结果：\n \n``` JAVA\nThreadOne 遍历:0  \nThreadTwo run：0  \nThreadTwo run：1  \nThreadTwo run：2  \nThreadTwo run：3  \nThreadTwo run：4  \nThreadTwo run：5  \nException in thread \"Thread-0\" java.util.ConcurrentModificationException  \n    at java.util.ArrayList$Itr.checkForComodification(Unknown Source)  \n    at java.util.ArrayList$Itr.next(Unknown Source)  \n    at test.ArrayListTest$threadOne.run(ArrayListTest.java:23)\n```\n***fail-fast产生原因***\n 通过上面的示例和讲解，我初步知道fail-fast产生的原因就在于程序在对 collection 进行迭代时，某个线程对该 collection 在结构上对其做了修改，这时迭代器就会抛出 ConcurrentModificationException 异常信息，从而产生 fail-fast。\n\n要了解fail-fast机制，我们首先要对ConcurrentModificationException 异常有所了解。当方法检测到对象的并发修改，但不允许这种修改时就抛出该异常。同时需要注意的是，该异常不会始终指出对象已经由不同线程并发修改，如果单线程违反了规则，同样也有可能会抛出改异常。\n\n诚然，迭代器的快速失败行为无法得到保证，它不能保证一定会出现该错误，但是快速失败操作会尽最大努力抛出ConcurrentModificationException异常，所以因此，为提高此类操作的正确性而编写一个依赖于此异常的程序是错误的做法，正确做法是：ConcurrentModificationException 应该仅用于检测 bug。下面我将以ArrayList为例进一步分析fail-fast产生的原因。\n\n从前面我们知道fail-fast是在操作迭代器时产生的。现在我们来看看ArrayList中迭代器的源代码：\n\n``` JAVA\nprivate class Itr implements Iterator\u003cE\u003e {  \n        int cursor;  \n        int lastRet = -1;  \n        int expectedModCount = ArrayList.this.modCount;  \n  \n        public boolean hasNext() {  \n            return (this.cursor != ArrayList.this.size);  \n        }  \n  \n        public E next() {  \n            checkForComodification();  \n            /** 省略此处代码 */  \n        }  \n  \n        public void remove() {  \n            if (this.lastRet \u003c 0)  \n                throw new IllegalStateException();  \n            checkForComodification();  \n            /** 省略此处代码 */  \n        }  \n  \n        final void checkForComodification() {  \n            if (ArrayList.this.modCount == this.expectedModCount)  \n                return;  \n            throw new ConcurrentModificationException();  \n        }  \n    }  \n```\n从上面的源代码我们可以看出，迭代器在调用next()、remove()方法时都是调用checkForComodification()方法，该方法主要就是检测modCount == expectedModCount ? 若不等则抛出ConcurrentModificationException 异常，从而产生fail-fast机制。所以要弄清楚为什么会产生fail-fast机制我们就必须要用弄明白为什么modCount != expectedModCount ，他们的值在什么时候发生改变的。\n\nexpectedModCount 是在Itr中定义的：int expectedModCount = ArrayList.this.modCount;所以他的值是不可能会修改的，所以会变的就是modCount。modCount是在 AbstractList 中定义的，为全局变量：\n\n```JAVA\nprotected transient int modCount = 0;  \n```\n\n那么他什么时候因为什么原因而发生改变呢？请看ArrayList的源码：\n\n``` JAVA\npublic boolean add(E paramE) {  \n    ensureCapacityInternal(this.size + 1);  \n    /** 省略此处代码 */  \n}  \n  \nprivate void ensureCapacityInternal(int paramInt) {  \n    if (this.elementData == EMPTY_ELEMENTDATA)  \n        paramInt = Math.max(10, paramInt);  \n    ensureExplicitCapacity(paramInt);  \n}  \n  \nprivate void ensureExplicitCapacity(int paramInt) {  \n    this.modCount += 1;    //修改modCount  \n    /** 省略此处代码 */  \n}  \n  \nublic boolean remove(Object paramObject) {  \n    int i;  \n    if (paramObject == null)  \n        for (i = 0; i \u003c this.size; ++i) {  \n            if (this.elementData[i] != null)  \n                continue;  \n            fastRemove(i);  \n            return true;  \n        }  \n    else  \n        for (i = 0; i \u003c this.size; ++i) {  \n            if (!(paramObject.equals(this.elementData[i])))  \n                continue;  \n            fastRemove(i);  \n            return true;  \n        }  \n    return false;  \n}  \n  \nprivate void fastRemove(int paramInt) {  \n    this.modCount += 1;   //修改modCount  \n    /** 省略此处代码 */  \n}  \n  \npublic void clear() {  \n    this.modCount += 1;    //修改modCount  \n    /** 省略此处代码 */  \n}  \n```\n 从上面的源代码我们可以看出，ArrayList中无论add、remove、clear方法只要是涉及了改变ArrayList元素的个数的方法都会导致modCount的改变。所以我们这里可以初步判断由于expectedModCount 得值与modCount的改变不同步，导致两者之间不等从而产生fail-fast机制。知道产生fail-fast产生的根本原因了，我们可以有如下场景：\n\n有两个线程（线程A，线程B），其中线程A负责遍历list、线程B修改list。线程A在遍历list过程的某个时候（此时expectedModCount = modCount=N），线程启动，同时线程B增加一个元素，这是modCount的值发生改变（modCount + 1 = N + 1）。线程A继续遍历执行next方法时，通告checkForComodification方法发现expectedModCount  = N  ，而modCount = N + 1，两者不等，这时就抛出ConcurrentModificationException 异常，从而产生fail-fast机制。\n\n所以，直到这里我们已经完全了解了fail-fast产生的根本原因了。知道了原因就好找解决办法了。\n\n***fail-fast解决办法***\n通过前面的实例、源码分析，我想各位已经基本了解了fail-fast的机制，下面我就产生的原因提出解决方案。这里有两种解决方案：\n\n- 方案一：在遍历过程中所有涉及到改变modCount值得地方全部加上synchronized或者直接使用Collections.synchronizedList，这样就可以解决。但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作。\n-  方案二：使用CopyOnWriteArrayList来替换ArrayList。推荐使用该方案。\n\nCopyOnWriteArrayList为何物？ArrayList 的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。 该类产生的开销比较大，但是在两种情况下，它非常适合使用。\n\n- 1：在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时。\n- 2：当遍历操作的数量大大超过可变操作的数量时。\n\n遇到这两种情况使用CopyOnWriteArrayList来替代ArrayList再适合不过了。那么为什么CopyOnWriterArrayList可以替代ArrayList呢？\n\n- 第一、CopyOnWriterArrayList的无论是从数据结构、定义都和ArrayList一样。它和ArrayList一样，同样是实现List接口，底层使用数组实现。在方法上也包含add、remove、clear、iterator等方法。\n- 第二、CopyOnWriterArrayList根本就不会产生ConcurrentModificationException异常，也就是它使用迭代器完全不会产生fail-fast机制。","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-7] [chx]
[INFO] 2017-07-28 12:44:29 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74619521 [pool-2-thread-11] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":74619521,"title":"【OpenVswitch源码分析之五】用户空间转发面数据结构与流程","create_at":"\/Date(1499355858000)\/","create":"2017-07-06 11:44:18","view_count":113,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":1,"bury":0,"description":"传统交换机是基于MAC表进行转发的，所以OVS也支持MAC学习特性，但是由于OVS也支持Openflow协议作为控制面，其功能就不仅仅是一个二层交换机了。先简单谈谈Openflow由于现在的网络暴露出了越来越多的弊病以及人们对网络性能需求的提高，于是研究人员不得不把很多复杂功能加入到路由器的体系结构当中，例如OSPF，BGP，组播，区分服务，流量工程，NAT，防火墙，MPLS等等。这就使得路由器等交","url":"http://blog.csdn.net/BLACKMOON88/article/details/74619521","categories":"云计算,C语言算法,OpenVswitch","tags":"数据结构,源码,交换机","content":"\u003cp\u003e传统交换机是基于MAC表进行转发的，所以OVS也支持MAC学习特性，但是由于OVS也支持Openflow协议作为控制面，其功能就不仅仅是一个二层交换机了。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"先简单谈谈openflow\"\u003e先简单谈谈Openflow\u003c/h3\u003e\n\n\u003cp\u003e由于现在的网络暴露出了越来越多的弊病以及人们对网络性能需求的提高，于是研究人员不得不把很多复杂功能加入到路由器的体系结构当中，例如OSPF，BGP，组播，区分服务，流量工程，NAT，防火墙，MPLS等等。这就使得路由器等交换设备越来越臃肿而且性能提升的空间越来越小。\u003c/p\u003e\n\n\u003cp\u003e然而与网络领域的困境截然不同的是，计算机领域实现了日新月异的发展。仔细回顾计算机领域的发展，不难发现其关键在于计算机领域找到了一个简单可用的硬件底层(x86指令集)。由于有了这样一个公用的硬件底层，所以在软件方面，不论是应用程序还是操作系统都取得了飞速的发展。很多主张重新设计计算机网络体系结构的人士认为：网络可以复制计算机领域的成功经验来解决现在网络所遇到的所有问题。在这种思想的指导下，将来的网络必将是这样的：底层的数据通路（交换机、路由器）是“哑的、简单的、最小的”，并定义一个对外开放的关于流表的公用的API，同时采用控制器来控制整个网络。未来的研究人员就可以在控制器上自由的调用底层的API来编程，从而实现网络的创新。\u003c/p\u003e\n\n\u003cp\u003eOpenFlow正是这种网络创新思想的强有力的推动者。OpenFlow交换机将原来完全由交换机/路由器控制的报文转发过程转化为由OpenFlow交换机（OpenFlow Switch）和控制服务器（Controller）来共同完成，从而实现了数据转发和路由控制的分离。控制器可以通过事先规定好的接口操作来控制OpenFlow交换机中的流表，从而达到控制数据转发的目的。\u003c/p\u003e\n\n\u003cp\u003e在Openflow的设计中，其匹配项除了二层的\u003cem\u003eeth_src, eth_dst,\u003c/em\u003e  \u003cem\u003eeth_type, vlan\u003c/em\u003e 等的匹配外，还有三层的源目的IP，IP协议类型，的匹配，甚至于还有四层的端口号的匹配等，所以在Openflow和控制器的支持下，OVS已经不仅仅是一个二层交换机。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"openflow相关接口一览\"\u003eOpenflow相关接口一览\u003c/h3\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-C hljs mel\"\u003estatic enum ofperr\nofproto_flow_mod_start(struct ofproto \u003cspan class=\"hljs-variable\"\u003e*ofproto\u003c/span\u003e, struct ofproto_flow_mod \u003cspan class=\"hljs-variable\"\u003e*ofm\u003c/span\u003e)\n    OVS_REQUIRES(ofproto_mutex)\n{\n    enum ofperr \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e;\n\n    rule_collection_init(&amp;ofm-&gt;old_rules);\n    rule_collection_init(&amp;ofm-&gt;new_rules);\n\n    \u003cspan class=\"hljs-keyword\"\u003eswitch\u003c/span\u003e (ofm-&gt;command) {\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_ADD:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = add_flow_start(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_MODIFY:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = modify_flows_start_loose(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_MODIFY_STRICT:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = modify_flow_start_strict(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_DELETE:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = delete_flows_start_loose(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_DELETE_STRICT:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = delete_flow_start_strict(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\n        OVS_NOT_REACHED();\n    }\n    \u003cspan class=\"hljs-comment\"\u003e/* Release resources not needed after start. */\u003c/span\u003e\n    ofproto_flow_mod_uninit(ofm);\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e) {\n        rule_collection_destroy(&amp;ofm-&gt;old_rules);\n        rule_collection_destroy(&amp;ofm-&gt;new_rules);\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOfproto模块会收到flow_mod消息，无论是控制器发出还是命令行客户端添加流表，都会调用这个函数，OVS对收到的流表会保存在用户空间的oftable数据结构中，接下来就是整个OpenVswitch的核心，在用户空间对内核态上送的报文寻找匹配的Flow Entry。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"相关数据结构和优化一览\"\u003e相关数据结构和优化一览\u003c/h3\u003e\n\n\u003cp\u003e数据结构和算法的设计上有几个难点： \u003cbr\u003e\n    - Openflow过于灵活的匹配规则对Pipe的实现提出了挑战，其rule包括metadata,L2,L3,L4的匹配项，可能都分布在一张表中，另外还有优先级的考虑 \u003cbr\u003e\n    - 在并发的情况下，如何保障表项的修改，增加和删除对最终结果没有影响 \u003cbr\u003e\n    - 如何保障高性能  \u003cbr\u003e\n最终OpenVswitch设计了一个复杂的数据结构和保障机制来达到上述要求 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170712212114070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n上图是用户空间各个核心数据结构的关系，其核心数据结构式Classifier，Pipeline里的每个Table对应一个Classifier，Classifier把整张表里的各个rule进行了分类分成了不同的subtable，每个subtable有自己的掩码，这个掩码表示这个subtable里的rule要匹配的掩码。很显然，这种分类并不能提高匹配效率，这个数据结构还做了不少优化策略：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003esubtable之间还做了优先级排序，需要优先级向量来标识。这样的话从高优先级的subtable先开始，一旦匹配就可以跳过不少低优先级的subtable。\u003c/li\u003e\n\u003cli\u003e分阶段匹配，对于一个subtable还可以再继续拆分多个hashtable，因为如果某个subtabl同时要匹配的项比较多，包含了metadata，L2, L3，L4的匹配项，那么就按这四个子类来分，第一阶段先匹配metadata；然后再匹配metadata,L2；继续metadata,L2，L3；最后才是metadata,L2，L3，L4。对于能匹配的rule其实并不能增加效率，但是对于不匹配的情况却是可以增加很大效率。\u003c/li\u003e\n\u003cli\u003e前缀追踪，前缀跟踪允许分类器跳过比必要的前缀更长的rule，从而为数据流更好的通配符。当流表包含具有不同前缀长度的IP地址字段匹配项时，前缀跟踪可能是有益的。例如，当一个流表中包含一个完整的IP地址匹配和一个地址前缀匹配，完整的地址匹配通常会导致此表的该字段非通配符全0（取决于rule优先级）。在这种情况下，每个有不同的地址的数据包只能被交给用户空间处理并生成自己的数据流。在前缀跟踪启用后用户空间会为问题Packet生成更短的前缀地址匹配，而把无关的地址位置成通配，可以使用一个rule来处理所有的问题包。在这种情况下，可以避免许多的用户上调，这样整体性能可以更好。当然这仅仅是性能优化，因为不管是否有前缀跟踪数据包将得到相同的处理。另外前缀跟踪是可以和分阶段匹配配套使用，Trie树会追踪整个Classifier中所有Rule的地址前缀的数量。更神奇的是通过维护一个在Trie树遍历中遇到的最长前缀的列表或者维护通过不同Metadata分开的规则子集独立的Trie树可以实现表跳跃。前缀追踪是通过OVSDB“Flow_Table”表”fieldspec” 列来配置的，”fieldspec” 列是用string map这里前缀的key值告诉哪些字段可以被用来做前缀追踪。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"并发的支持\"\u003e并发的支持\u003c/h3\u003e\n\n\u003cp\u003e很显然，出于对性能的考虑，对Pipeline的并发的支持是必须的，而且在转发的场景下，相对而言会是一个reader多writer少的一个场景，针对这种场景，OVS采用了类似于悲观锁的版本控制机制和Linux RCU机制的保护，下面分别对两者进行介绍：\u003c/p\u003e\n\n\n\n\u003ch4 id=\"基于版本的并发的支持\"\u003e基于版本的并发的支持\u003c/h4\u003e\n\n\u003cp\u003eClassifier检索总是在一个特定的版本上进行的，这个版本号是一个自然数。当一个新的Rule被添加到Classifier之后，它会被设置为在一个特定的版本号上可见。如果这个插入时的版本号比当前检索的时候的版本号要大，那么它暂时是不可见的。这意味着检索不会发现这个rule，但是rule会在Classifier迭代之后马上可见。 \u003cbr\u003e\n类似的，一条rule可以被在将来的某个版本删除。在当前的检索没有完成之前，rule是不允许被删除的，首先第一步应该把rule设置为不可见，之后当用来检索的Classifier的版本号已经大于删除版本号时再实际上把这个rule删除掉 \u003cbr\u003e\nClassifier 支持版本的两个原因：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e支持基于版本的修改使得对Classifier的修改具备原子特征，不同版本间的中间状态是对外不可见的。同时，当一个rule被添加到未来的版本里，这些修改可以回退掉且不会对当前的检索产生任何影响\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e性能：添加或删除一个rule集合，其性能的影响和Classifier已有的rule数量成正比。当多个rule一口气添加上之后，只要整批的rule修改还没有完成之前不可见，那么这种影响其实是可以避免。\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003ch4 id=\"linux-rcu机制\"\u003eLinux RCU机制\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.my.csdn.net/uploads/201212/01/1354347444_2149.png\" alt=\"RCU机制\" title=\"\"\u003e \u003cbr\u003e\nRCU(Read-Copy Update)，顾名思义就是读-拷贝修改，它是基于其原理命名的。对于被RCU保护的共享数据结构，读者不需要获得任何锁就可以访问它，但写者在访问它时首先拷贝一个副本，然后对副本进行修改，最后使用一个回调（callback）机制在适当的时机把指向原来数据的指针重新指向新的被修改的数据。这个时机就是所有引用该数据的CPU都退出对共享数据的操作。 \u003cbr\u003e\n长图以删除为例，在做删除操作后起始并没有把数据销毁掉，而是等待已经读取该数据的线程出读临界区之后再做销毁工作，这段时间叫宽限期，而在这段时间内新来的线程则可以读取最新修改的值。 \u003cbr\u003e\n但是注意到RCU机制和版本控制机制是同时使用的，由于Classifier rule是RCU保护的，Rule的销毁在执行remove操作之后必须是RCU推迟的。同时，当版本特性也在使用时，remove操作自身也必须是RCU推迟的（此时的删除必须等待到指定的版本之后）。在这种情形下rule的删除就经理了两次RCU推迟。 比如，第二次调用ovsrcu_postpone() 来销毁Rule就是在第一次RCU回调执行remove操作的时候调用的\u003c/p\u003e\n\n\u003cp\u003e用户态转发的核心都在Classifier里，这里也会附加Classifier的详细解释，读者可以自行体会。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs applescript\"\u003e/* Flow classifier.\n *\n *\n * What?\n * =====\n *\n * A flow classifier holds any \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"rules\"\u003c/span\u003e, each \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e which specifies\n * values \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e match \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esome\u003c/span\u003e fields \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e subfields \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e a priority.  Each OpenFlow\n * table \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e implemented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a flow classifier.\n *\n * The classifier has two primary design goals.  The \u003cspan class=\"hljs-keyword\"\u003efirst\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e obvious: \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e a\n * \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packet headers, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e quickly \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e possible find \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e highest-priority rule\n * \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e matches those headers.  The following section describes \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esecond\u003c/span\u003e\n * goal.\n *\n *\n * \u003cspan class=\"hljs-string\"\u003e\"Un-wildcarding\"\u003c/span\u003e\n * ================\n *\n * A primary goal \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e flow classifier \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e produce, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a side effect \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e a\n * packet lookup, a wildcard mask \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e indicates which bits \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e packet\n * headers were essential \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classification \u003cspan class=\"hljs-constant\"\u003eresult\u003c/span\u003e.  Ideally, a \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e-bit \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n * any position \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e this mask means \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e corresponding bit \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e packet\n * header were flipped, \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classification \u003cspan class=\"hljs-constant\"\u003eresult\u003c/span\u003e might change.  A \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bit\n * means \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e changing \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e packet header bit would have no effect.  Thus, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * wildcarded bits are \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e ones \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e played no role \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classification\n * decision.\n *\n * Such a wildcard mask \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e useful \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e datapaths \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e support installing flows\n * \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e wildcard fields \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e subfields.  If an OpenFlow lookup \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a TCP flow\n * \u003cspan class=\"hljs-keyword\"\u003edoes\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e actually look \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e TCP source \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e destination ports, \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e example,\n * \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e switch may install \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e datapath a flow \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e wildcards \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e port\n * numbers, which \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e turn allows \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e datapath \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e handle packets \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e arrive \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n * other TCP source \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e destination ports \u003cspan class=\"hljs-keyword\"\u003ewithout\u003c/span\u003e additional help \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e\n * ovs-vswitchd.  This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e useful \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e Open vSwitch software \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e,\n * potentially, \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e ASIC-based switches \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e well.\n *\n * Some properties \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e wildcard mask:\n *\n *     - \u003cspan class=\"hljs-string\"\u003e\"False 1-bits\"\u003c/span\u003e are acceptable, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, setting a bit \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e wildcard\n *       mask \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e will never cause a packet \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be forwarded \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e wrong way.\n *       As a corollary, a wildcard mask composed \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e all \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e-bits will always\n *       yield correct (\u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e often needlessly inefficient) behavior.\n *\n *     - \u003cspan class=\"hljs-string\"\u003e\"False 0-bits\"\u003c/span\u003e can cause problems, so they must be avoided.  In \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n *       extreme case, a mask \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e all \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e only correct \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier\n *       \u003cspan class=\"hljs-keyword\"\u003econtains\u003c/span\u003e only a single flow \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e matches all packets.\n *\n *     - \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits are desirable because they allow \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e datapath \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e act more\n *       autonomously, relying less \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e ovs-vswitchd \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e process flow setups,\n *       thereby improving performance.\n *\n *     - We don\u0027t know a good way \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e generate wildcard masks \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e maximum\n *       (correct) \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits.  We use various approximations, described\n *       \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e later sections.\n *\n *     - Wildcard masks \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e lookups \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e classifier yield a\n *       non-overlapping \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules.  More specifically:\n *\n *       Consider an classifier C1 filled \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e an arbitrary collection \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules\n *       \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e an empty classifier C2.  Now take a \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packet headers H \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n *       look \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e up \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e C1, yielding a highest-priority matching rule R1 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n *       wildcard mask M.  Form a new classifier rule R2 \u003cspan class=\"hljs-keyword\"\u003eout of\u003c/span\u003e packet headers\n *       H \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e mask M, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e add R2 \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e C2 \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e a fixed priority.  If one were \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e\n *       do this \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eevery\u003c/span\u003e possible \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packet headers H, \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e this\n *       process would \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e attempt \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e add any overlapping rules \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e C2, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e,\n *       any packet lookup using \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rules generated \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e this process matches \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e\n *       most one rule \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e C2.\n *\n * During \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e lookup process, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier starts out \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e a wildcard mask\n * \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e all \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, fully wildcarded.  As lookup proceeds, each\n * step tends \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e add constraints \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e wildcard mask, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, change\n * wildcarded \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e exact-match \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e-bits.  We call this \u003cspan class=\"hljs-string\"\u003e\"un-wildcarding\"\u003c/span\u003e.\n * A lookup step \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e examines a particular field must un-wildcard \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e field.\n * In general, un-wildcarding \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e necessary \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e correctness \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e undesirable \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n * performance.\n *\n *\n * Basic Classifier Design\n * =======================\n *\n * Suppose \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e all \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rules \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a classifier had \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e same form.  For example,\n * suppose \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e they all matched \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e source \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e destination Ethernet address\n * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e wildcarded all \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e other fields.  Then \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e obvious way \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e implement a\n * classifier would be a hash table \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e source \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e destination Ethernet\n * addresses.  If new classification rules came along \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e a different form,\n * you could add a \u003cspan class=\"hljs-keyword\"\u003esecond\u003c/span\u003e hash table \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e hashed \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e fields matched \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e those\n * rules.  With two hash tables, you look up a \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e flow \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e each hash table.\n * If there are no matches, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier didn\u0027t \u003cspan class=\"hljs-keyword\"\u003econtain\u003c/span\u003e a match; \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e you find\n * a match \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e one \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e them, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e\u0027s \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-constant\"\u003eresult\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e you find a match \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e both \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n * them, \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-constant\"\u003eresult\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e higher priority.\n *\n * This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e how \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier works.  In a \u003cspan class=\"hljs-string\"\u003e\"struct classifier\"\u003c/span\u003e, each form \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n * \u003cspan class=\"hljs-string\"\u003e\"struct cls_rule\"\u003c/span\u003e present (based \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eits\u003c/span\u003e -&gt;match.mask) goes \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e a separate\n * \u003cspan class=\"hljs-string\"\u003e\"struct cls_subtable\"\u003c/span\u003e.  A lookup \u003cspan class=\"hljs-keyword\"\u003edoes\u003c/span\u003e a hash lookup \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eevery\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"struct\n * cls_subtable\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e tracks \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e highest-priority match \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e finds.  The subtables are kept \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a descending priority order according\n * \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e highest priority rule \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e each subtable, which allows lookup \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e skip\n * \u003cspan class=\"hljs-keyword\"\u003eover\u003c/span\u003e subtables \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e can\u0027t possibly have a higher-priority match than already\n * found.  Eliminating lookups \u003cspan class=\"hljs-keyword\"\u003ethrough\u003c/span\u003e priority ordering aids both classifier\n * primary design goals: skipping lookups saves \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e avoids un-wildcarding\n * fields \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e those lookups would have examined.\n *\n * One detail: a classifier can \u003cspan class=\"hljs-keyword\"\u003econtain\u003c/span\u003e multiple rules \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e are identical other\n * than their priority.  When this happens, only \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e highest priority rule out\n * \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e a group \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e otherwise identical rules \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e stored directly \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"struct\n * cls_subtable\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e other almost-identical rules chained off a linked\n * \u003cspan class=\"hljs-type\"\u003elist\u003c/span\u003e inside \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e highest-priority rule.\n *\n * The following sub-sections describe various optimizations \u003cspan class=\"hljs-keyword\"\u003eover\u003c/span\u003e this simple\n * approach.\n *\n *\n * Staged Lookup (Wildcard Optimization)\n * \u003cspan class=\"hljs-comment\"\u003e-------------------------------------\u003c/span\u003e\n *\n * Subtable lookup \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e performed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e ranges defined \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e struct flow, starting\n * \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e metadata (registers, in_port, etc.), \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e L2 header, L3, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e finally\n * L4 ports.  Whenever \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e found \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e there are no matches \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e current\n * subtable, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-property\"\u003erest\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e subtable can be skipped.\n *\n * Staged lookup \u003cspan class=\"hljs-keyword\"\u003edoes\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e reduce lookup \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e may increase \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e, because\n * \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e changes a single hash table lookup \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e multiple hash table lookups.\n * It reduces un-wildcarding significantly \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e important use cases.\n *\n *\n * Prefix Tracking (Wildcard Optimization)\n * \u003cspan class=\"hljs-comment\"\u003e---------------------------------------\u003c/span\u003e\n *\n * Classifier uses prefix trees (\u003cspan class=\"hljs-string\"\u003e\"tries\"\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e tracking \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e used\n * address \u003cspan class=\"hljs-constant\"\u003espace\u003c/span\u003e, enabling skipping classifier tables containing\n * longer masks than necessary \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e address.  This reduces\n * un-wildcarding \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e datapath flows \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e parts \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e address \u003cspan class=\"hljs-constant\"\u003espace\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003ewithout\u003c/span\u003e host routes, \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e consulting extra data structures (\u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * tries) may slightly increase lookup \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e.\n *\n * Trie lookup \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e interwoven \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e staged lookup, so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e a trie \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * searched only when \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e configured trie field becomes relevant \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e lookup.  The trie lookup results are retained so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e each trie\n * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e checked \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e most once \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e each classifier lookup.\n *\n * This implementation tracks \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e each address\n * prefix \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e whole classifier.  More aggressive table skipping\n * would be possible \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e maintaining lists \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e tables \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e have prefixes\n * \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e lengths encountered \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e tree traversal, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e maintaining\n * separate tries \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e subsets \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules separated \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e metadata fields.\n *\n * Prefix tracking \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e configured via OVSDB \u003cspan class=\"hljs-string\"\u003e\"Flow_Table\"\u003c/span\u003e table,\n * \u003cspan class=\"hljs-string\"\u003e\"fieldspec\"\u003c/span\u003e column.  \u003cspan class=\"hljs-string\"\u003e\"fieldspec\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a \u003cspan class=\"hljs-type\"\u003estring\u003c/span\u003e map \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e a \u003cspan class=\"hljs-string\"\u003e\"prefix\"\u003c/span\u003e\n * key tells which fields should be used \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e prefix tracking.  The\n * value \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"prefix\"\u003c/span\u003e key \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a comma separated \u003cspan class=\"hljs-type\"\u003elist\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e field names.\n *\n * There \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a maximum \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e fields \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e can be enabled \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e any one\n * flow table.  Currently this limit \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e3.\u003c/span\u003e\n *\n *\n * Partitioning (Lookup Time \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e Wildcard Optimization)\n * \u003cspan class=\"hljs-comment\"\u003e----------------------------------------------------\u003c/span\u003e\n *\n * Suppose \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e a \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e classifier \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e being used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e handle multiple stages \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a\n * pipeline using \u003cspan class=\"hljs-string\"\u003e\"resubmit\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e metadata (\u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e OpenFlow \u003cspan class=\"hljs-number\"\u003e1.1\u003c/span\u003e+ field\n * named \u003cspan class=\"hljs-string\"\u003e\"metadata\"\u003c/span\u003e) distinguishing \u003cspan class=\"hljs-keyword\"\u003ebetween\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e different stages.  For example,\n * metadata value \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e might identify ingress rules, metadata value \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e might\n * identify ACLs, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e metadata value \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e might identify egress rules.  Such a\n * classifier \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e essentially partitioned \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e multiple sub-classifiers \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * basis \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e metadata value.\n *\n * The classifier has a special optimization \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e speed up matching \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e this\n * scenario:\n *\n *     - Each cls_subtable \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e matches \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e metadata gets a tag derived \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n *       subtable\u0027s mask, so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e likely \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e each subtable has a unique\n *       tag.  (Duplicate tags have a performance cost \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e affect\n *       correctness.)\n *\n *     - For each metadata value matched \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e any cls_rule, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier\n *       constructs a \u003cspan class=\"hljs-string\"\u003e\"struct cls_partition\"\u003c/span\u003e indexed \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e metadata value.\n *       The cls_partition has a \u0027tags\u0027 member \u003cspan class=\"hljs-keyword\"\u003ewhose\u003c/span\u003e value \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e bitwise-OR \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n *       \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e tags \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e each cls_subtable \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econtains\u003c/span\u003e any rule \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e matches \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e\n *       \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e cls_partition\u0027s metadata value.  In other \u003cspan class=\"hljs-property\"\u003ewords\u003c/span\u003e, struct\n *       cls_partition associates metadata values \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e subtables \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e\n *       be checked \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e flows \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e specific metadata value.\n *\n * Thus, a flow lookup can start \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e looking up \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e partition associated \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e flow\u0027s metadata, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e skip \u003cspan class=\"hljs-keyword\"\u003eover\u003c/span\u003e any cls_subtable \u003cspan class=\"hljs-keyword\"\u003ewhose\u003c/span\u003e \u0027tag\u0027 \u003cspan class=\"hljs-keyword\"\u003edoes\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e intersect \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e partition\u0027s \u0027tags\u0027.  (The flow must also be looked up \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n * any cls_subtable \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e doesn\u0027t match \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e metadata.  We handle \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e giving\n * any such cls_subtable TAG_ALL \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eits\u003c/span\u003e \u0027tags\u0027 so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e matches any tag.)\n *\n * Partitioning saves lookup \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e reducing \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e subtable lookups.\n * Each eliminated subtable lookup also reduces \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e amount \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e un-wildcarding.\n *\n *\n * Classifier Versioning\n * =====================\n *\n * Classifier lookups are always done \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a specific classifier \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e\n * a \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e defined \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be a natural \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e.\n *\n * When a new rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e a classifier, \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e become visible \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a\n * specific \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e.  If \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e used \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e insert \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e larger than\n * any \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e currently used \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e lookups, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e said \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be\n * invisible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e lookups.  This means \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e lookups won\u0027t find \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule, \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e immediately available \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e classifier iterations.\n *\n * Similarly, a rule can be marked \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be deleted \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a future \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e.  To\n * delete a rule \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a way \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e remove \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule \u003cspan class=\"hljs-keyword\"\u003ebefore\u003c/span\u003e all ongoing lookups are\n * finished, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule should be made invisible \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a specific \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e.\n * Then, when all \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e lookups use a later \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule can be\n * actually removed \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier.\n *\n * Classifiers can hold duplicate rules (rules \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e same match criteria \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n * priority) when \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e most one \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e these duplicates \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e visible \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e any \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e\n * lookup \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e.  The caller responsible \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e classifier modifications must\n * maintain this invariant.\n *\n * The classifier supports versioning \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e two reasons:\n *\n *     \u003cspan class=\"hljs-number\"\u003e1.\u003c/span\u003e Support \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e versioned modifications makes \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e possible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e perform an\n *        arbitraty series \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e classifier changes \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e one atomic \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e,\n *        \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e intermediate versions \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier are \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e visible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e any\n *        lookups.  Also, when a rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e added \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a future \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e marked\n *        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e removal \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e current \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e, such modifications can be\n *        reverted \u003cspan class=\"hljs-keyword\"\u003ewithout\u003c/span\u003e any visible effects \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e any \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e current lookups.\n *\n *     \u003cspan class=\"hljs-number\"\u003e2.\u003c/span\u003e Performance: Adding (\u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e deleting) a large \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules can, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n *        pathological cases, have a cost proportional \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules\n *        already \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier.  When multiple rules are being added (\u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e\n *        deleted) \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e one go, though, this pathological case cost can be\n *        typically avoided, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e long \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e OK \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e any new rules \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be\n *        invisible \u003cspan class=\"hljs-keyword\"\u003euntil\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e batch change \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e complete.\n *\n * Note \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier_replace() function replaces a rule immediately, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e therefore \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e safe \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e use \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e versioning.  It \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e still available \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * users \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e use versioning.\n *\n *\n * Deferred Publication\n * ====================\n *\n * Removing large \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e classifier can be costly, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * supporting data structures are teared down, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e many cases just \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be\n * re-instantiated right \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e.  In \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e worst case, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e when each rule has a\n * different match pattern (mask), \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e maintenance \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e match patterns can\n * have cost O(N^\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e), \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e N \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e different match patterns.  To\n * alleviate this, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier supports a \u003cspan class=\"hljs-string\"\u003e\"deferred mode\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e which changes\n * \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e internal data structures needed \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e future \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e lookups may \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e be\n * fully computed yet.  The computation \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e finalized when \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e deferred mode \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * turned off.\n *\n * This feature can be used \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e versioning such \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e all changes \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e future\n * versions are made \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e deferred mode.  Then, right \u003cspan class=\"hljs-keyword\"\u003ebefore\u003c/span\u003e making \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new\n * \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e visible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e lookups, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e deferred mode \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e turned off so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e all \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n *  data structures are ready \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e lookups \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e.\n *\n * To use deferred publication, \u003cspan class=\"hljs-keyword\"\u003efirst\u003c/span\u003e call classifier_defer().  Then, modify\n * \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier via additions (classifier_insert() \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e a specific, future\n * \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e deletions (use cls_rule_make_removable_after_version()).\n * Then call classifier_publish(), \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e, announce \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e\n * \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be used \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e lookups.\n *\n *\n * Thread-safety\n * =============\n *\n * The classifier may safely be accessed \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e many reader threads concurrently\n * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e a single writer, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e multiple writers when they guarantee mutually\n * exlucive access \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e classifier modifications.\n *\n * Since \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier rules are RCU protected, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule destruction \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e\n * removal \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier must be RCU postponed.  Also, when versioning \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * used, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule removal itself needs \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be typically RCU postponed.  In this\n * case \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule destruction \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e doubly RCU postponed, i.e., \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esecond\u003c/span\u003e\n * ovsrcu_postpone() call \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e destruct \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e called \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efirst\u003c/span\u003e RCU\n * callback \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e removes \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule.\n *\n * Rules \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e have never been visible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e lookups are an exeption \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eabove\u003c/span\u003e\n * rule.  Such rules can be removed immediately, \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e their destruction must\n * still be RCU postponed, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule\u0027s visibility attribute may be examined\n * parallel \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule\u0027s removal. */\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"传统交换机是基于MAC表进行转发的，所以OVS也支持MAC学习特性，但是由于OVS也支持Openflow协议作为控制面，其功能就不仅仅是一个二层交换机了。\n###先简单谈谈Openflow\n由于现在的网络暴露出了越来越多的弊病以及人们对网络性能需求的提高，于是研究人员不得不把很多复杂功能加入到路由器的体系结构当中，例如OSPF，BGP，组播，区分服务，流量工程，NAT，防火墙，MPLS等等。这就使得路由器等交换设备越来越臃肿而且性能提升的空间越来越小。\n\n然而与网络领域的困境截然不同的是，计算机领域实现了日新月异的发展。仔细回顾计算机领域的发展，不难发现其关键在于计算机领域找到了一个简单可用的硬件底层(x86指令集)。由于有了这样一个公用的硬件底层，所以在软件方面，不论是应用程序还是操作系统都取得了飞速的发展。很多主张重新设计计算机网络体系结构的人士认为：网络可以复制计算机领域的成功经验来解决现在网络所遇到的所有问题。在这种思想的指导下，将来的网络必将是这样的：底层的数据通路（交换机、路由器）是“哑的、简单的、最小的”，并定义一个对外开放的关于流表的公用的API，同时采用控制器来控制整个网络。未来的研究人员就可以在控制器上自由的调用底层的API来编程，从而实现网络的创新。\n\nOpenFlow正是这种网络创新思想的强有力的推动者。OpenFlow交换机将原来完全由交换机/路由器控制的报文转发过程转化为由OpenFlow交换机（OpenFlow Switch）和控制服务器（Controller）来共同完成，从而实现了数据转发和路由控制的分离。控制器可以通过事先规定好的接口操作来控制OpenFlow交换机中的流表，从而达到控制数据转发的目的。\n\n在Openflow的设计中，其匹配项除了二层的*eth_src, eth_dst,*  *eth_type, vlan* 等的匹配外，还有三层的源目的IP，IP协议类型，的匹配，甚至于还有四层的端口号的匹配等，所以在Openflow和控制器的支持下，OVS已经不仅仅是一个二层交换机。\n\n###Openflow相关接口一览\n```\tC\t\nstatic enum ofperr\nofproto_flow_mod_start(struct ofproto *ofproto, struct ofproto_flow_mod *ofm)\n    OVS_REQUIRES(ofproto_mutex)\n{\n    enum ofperr error;\n\n    rule_collection_init(&ofm-\u003eold_rules);\n    rule_collection_init(&ofm-\u003enew_rules);\n\n    switch (ofm-\u003ecommand) {\n    case OFPFC_ADD:\n        error = add_flow_start(ofproto, ofm);\n        break;\n    case OFPFC_MODIFY:\n        error = modify_flows_start_loose(ofproto, ofm);\n        break;\n    case OFPFC_MODIFY_STRICT:\n        error = modify_flow_start_strict(ofproto, ofm);\n        break;\n    case OFPFC_DELETE:\n        error = delete_flows_start_loose(ofproto, ofm);\n        break;\n    case OFPFC_DELETE_STRICT:\n        error = delete_flow_start_strict(ofproto, ofm);\n        break;\n    default:\n        OVS_NOT_REACHED();\n    }\n    /* Release resources not needed after start. */\n    ofproto_flow_mod_uninit(ofm);\n\n    if (error) {\n        rule_collection_destroy(&ofm-\u003eold_rules);\n        rule_collection_destroy(&ofm-\u003enew_rules);\n    }\n    return error;\n}\n```\nOfproto模块会收到flow_mod消息，无论是控制器发出还是命令行客户端添加流表，都会调用这个函数，OVS对收到的流表会保存在用户空间的oftable数据结构中，接下来就是整个OpenVswitch的核心，在用户空间对内核态上送的报文寻找匹配的Flow Entry。\n###相关数据结构和优化一览\n数据结构和算法的设计上有几个难点：\n\t- Openflow过于灵活的匹配规则对Pipe的实现提出了挑战，其rule包括metadata,L2,L3,L4的匹配项，可能都分布在一张表中，另外还有优先级的考虑\n\t- 在并发的情况下，如何保障表项的修改，增加和删除对最终结果没有影响\n\t- 如何保障高性能 \n最终OpenVswitch设计了一个复杂的数据结构和保障机制来达到上述要求\n![这里写图片描述](http://img.blog.csdn.net/20170712212114070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上图是用户空间各个核心数据结构的关系，其核心数据结构式Classifier，Pipeline里的每个Table对应一个Classifier，Classifier把整张表里的各个rule进行了分类分成了不同的subtable，每个subtable有自己的掩码，这个掩码表示这个subtable里的rule要匹配的掩码。很显然，这种分类并不能提高匹配效率，这个数据结构还做了不少优化策略：\n\n - subtable之间还做了优先级排序，需要优先级向量来标识。这样的话从高优先级的subtable先开始，一旦匹配就可以跳过不少低优先级的subtable。\n - 分阶段匹配，对于一个subtable还可以再继续拆分多个hashtable，因为如果某个subtabl同时要匹配的项比较多，包含了metadata，L2, L3，L4的匹配项，那么就按这四个子类来分，第一阶段先匹配metadata；然后再匹配metadata,L2；继续metadata,L2，L3；最后才是metadata,L2，L3，L4。对于能匹配的rule其实并不能增加效率，但是对于不匹配的情况却是可以增加很大效率。\n - 前缀追踪，前缀跟踪允许分类器跳过比必要的前缀更长的rule，从而为数据流更好的通配符。当流表包含具有不同前缀长度的IP地址字段匹配项时，前缀跟踪可能是有益的。例如，当一个流表中包含一个完整的IP地址匹配和一个地址前缀匹配，完整的地址匹配通常会导致此表的该字段非通配符全0（取决于rule优先级）。在这种情况下，每个有不同的地址的数据包只能被交给用户空间处理并生成自己的数据流。在前缀跟踪启用后用户空间会为问题Packet生成更短的前缀地址匹配，而把无关的地址位置成通配，可以使用一个rule来处理所有的问题包。在这种情况下，可以避免许多的用户上调，这样整体性能可以更好。当然这仅仅是性能优化，因为不管是否有前缀跟踪数据包将得到相同的处理。另外前缀跟踪是可以和分阶段匹配配套使用，Trie树会追踪整个Classifier中所有Rule的地址前缀的数量。更神奇的是通过维护一个在Trie树遍历中遇到的最长前缀的列表或者维护通过不同Metadata分开的规则子集独立的Trie树可以实现表跳跃。前缀追踪是通过OVSDB“Flow_Table”表\"fieldspec\" 列来配置的，\"fieldspec\" 列是用string map这里前缀的key值告诉哪些字段可以被用来做前缀追踪。\n###并发的支持\n很显然，出于对性能的考虑，对Pipeline的并发的支持是必须的，而且在转发的场景下，相对而言会是一个reader多writer少的一个场景，针对这种场景，OVS采用了类似于悲观锁的版本控制机制和Linux RCU机制的保护，下面分别对两者进行介绍：\n#### 基于版本的并发的支持\nClassifier检索总是在一个特定的版本上进行的，这个版本号是一个自然数。当一个新的Rule被添加到Classifier之后，它会被设置为在一个特定的版本号上可见。如果这个插入时的版本号比当前检索的时候的版本号要大，那么它暂时是不可见的。这意味着检索不会发现这个rule，但是rule会在Classifier迭代之后马上可见。\n类似的，一条rule可以被在将来的某个版本删除。在当前的检索没有完成之前，rule是不允许被删除的，首先第一步应该把rule设置为不可见，之后当用来检索的Classifier的版本号已经大于删除版本号时再实际上把这个rule删除掉\nClassifier 支持版本的两个原因：\n\n1. 支持基于版本的修改使得对Classifier的修改具备原子特征，不同版本间的中间状态是对外不可见的。同时，当一个rule被添加到未来的版本里，这些修改可以回退掉且不会对当前的检索产生任何影响\n\n2. 性能：添加或删除一个rule集合，其性能的影响和Classifier已有的rule数量成正比。当多个rule一口气添加上之后，只要整批的rule修改还没有完成之前不可见，那么这种影响其实是可以避免。\n\n#### Linux RCU机制\n![RCU机制](http://img.my.csdn.net/uploads/201212/01/1354347444_2149.png)\nRCU(Read-Copy Update)，顾名思义就是读-拷贝修改，它是基于其原理命名的。对于被RCU保护的共享数据结构，读者不需要获得任何锁就可以访问它，但写者在访问它时首先拷贝一个副本，然后对副本进行修改，最后使用一个回调（callback）机制在适当的时机把指向原来数据的指针重新指向新的被修改的数据。这个时机就是所有引用该数据的CPU都退出对共享数据的操作。\n长图以删除为例，在做删除操作后起始并没有把数据销毁掉，而是等待已经读取该数据的线程出读临界区之后再做销毁工作，这段时间叫宽限期，而在这段时间内新来的线程则可以读取最新修改的值。\n但是注意到RCU机制和版本控制机制是同时使用的，由于Classifier rule是RCU保护的，Rule的销毁在执行remove操作之后必须是RCU推迟的。同时，当版本特性也在使用时，remove操作自身也必须是RCU推迟的（此时的删除必须等待到指定的版本之后）。在这种情形下rule的删除就经理了两次RCU推迟。 比如，第二次调用ovsrcu_postpone() 来销毁Rule就是在第一次RCU回调执行remove操作的时候调用的\n\n用户态转发的核心都在Classifier里，这里也会附加Classifier的详细解释，读者可以自行体会。\n\n```\n/* Flow classifier.\n *\n *\n * What?\n * =====\n *\n * A flow classifier holds any number of \"rules\", each of which specifies\n * values to match for some fields or subfields and a priority.  Each OpenFlow\n * table is implemented as a flow classifier.\n *\n * The classifier has two primary design goals.  The first is obvious: given a\n * set of packet headers, as quickly as possible find the highest-priority rule\n * that matches those headers.  The following section describes the second\n * goal.\n *\n *\n * \"Un-wildcarding\"\n * ================\n *\n * A primary goal of the flow classifier is to produce, as a side effect of a\n * packet lookup, a wildcard mask that indicates which bits of the packet\n * headers were essential to the classification result.  Ideally, a 1-bit in\n * any position of this mask means that, if the corresponding bit in the packet\n * header were flipped, then the classification result might change.  A 0-bit\n * means that changing the packet header bit would have no effect.  Thus, the\n * wildcarded bits are the ones that played no role in the classification\n * decision.\n *\n * Such a wildcard mask is useful with datapaths that support installing flows\n * that wildcard fields or subfields.  If an OpenFlow lookup for a TCP flow\n * does not actually look at the TCP source or destination ports, for example,\n * then the switch may install into the datapath a flow that wildcards the port\n * numbers, which in turn allows the datapath to handle packets that arrive for\n * other TCP source or destination ports without additional help from\n * ovs-vswitchd.  This is useful for the Open vSwitch software and,\n * potentially, for ASIC-based switches as well.\n *\n * Some properties of the wildcard mask:\n *\n *     - \"False 1-bits\" are acceptable, that is, setting a bit in the wildcard\n *       mask to 1 will never cause a packet to be forwarded the wrong way.\n *       As a corollary, a wildcard mask composed of all 1-bits will always\n *       yield correct (but often needlessly inefficient) behavior.\n *\n *     - \"False 0-bits\" can cause problems, so they must be avoided.  In the\n *       extreme case, a mask of all 0-bits is only correct if the classifier\n *       contains only a single flow that matches all packets.\n *\n *     - 0-bits are desirable because they allow the datapath to act more\n *       autonomously, relying less on ovs-vswitchd to process flow setups,\n *       thereby improving performance.\n *\n *     - We don\u0027t know a good way to generate wildcard masks with the maximum\n *       (correct) number of 0-bits.  We use various approximations, described\n *       in later sections.\n *\n *     - Wildcard masks for lookups in a given classifier yield a\n *       non-overlapping set of rules.  More specifically:\n *\n *       Consider an classifier C1 filled with an arbitrary collection of rules\n *       and an empty classifier C2.  Now take a set of packet headers H and\n *       look it up in C1, yielding a highest-priority matching rule R1 and\n *       wildcard mask M.  Form a new classifier rule R2 out of packet headers\n *       H and mask M, and add R2 to C2 with a fixed priority.  If one were to\n *       do this for every possible set of packet headers H, then this\n *       process would not attempt to add any overlapping rules to C2, that is,\n *       any packet lookup using the rules generated by this process matches at\n *       most one rule in C2.\n *\n * During the lookup process, the classifier starts out with a wildcard mask\n * that is all 0-bits, that is, fully wildcarded.  As lookup proceeds, each\n * step tends to add constraints to the wildcard mask, that is, change\n * wildcarded 0-bits into exact-match 1-bits.  We call this \"un-wildcarding\".\n * A lookup step that examines a particular field must un-wildcard that field.\n * In general, un-wildcarding is necessary for correctness but undesirable for\n * performance.\n *\n *\n * Basic Classifier Design\n * =======================\n *\n * Suppose that all the rules in a classifier had the same form.  For example,\n * suppose that they all matched on the source and destination Ethernet address\n * and wildcarded all the other fields.  Then the obvious way to implement a\n * classifier would be a hash table on the source and destination Ethernet\n * addresses.  If new classification rules came along with a different form,\n * you could add a second hash table that hashed on the fields matched in those\n * rules.  With two hash tables, you look up a given flow in each hash table.\n * If there are no matches, the classifier didn\u0027t contain a match; if you find\n * a match in one of them, that\u0027s the result; if you find a match in both of\n * them, then the result is the rule with the higher priority.\n *\n * This is how the classifier works.  In a \"struct classifier\", each form of\n * \"struct cls_rule\" present (based on its -\u003ematch.mask) goes into a separate\n * \"struct cls_subtable\".  A lookup does a hash lookup in every \"struct\n * cls_subtable\" in the classifier and tracks the highest-priority match that\n * it finds.  The subtables are kept in a descending priority order according\n * to the highest priority rule in each subtable, which allows lookup to skip\n * over subtables that can\u0027t possibly have a higher-priority match than already\n * found.  Eliminating lookups through priority ordering aids both classifier\n * primary design goals: skipping lookups saves time and avoids un-wildcarding\n * fields that those lookups would have examined.\n *\n * One detail: a classifier can contain multiple rules that are identical other\n * than their priority.  When this happens, only the highest priority rule out\n * of a group of otherwise identical rules is stored directly in the \"struct\n * cls_subtable\", with the other almost-identical rules chained off a linked\n * list inside that highest-priority rule.\n *\n * The following sub-sections describe various optimizations over this simple\n * approach.\n *\n *\n * Staged Lookup (Wildcard Optimization)\n * -------------------------------------\n *\n * Subtable lookup is performed in ranges defined for struct flow, starting\n * from metadata (registers, in_port, etc.), then L2 header, L3, and finally\n * L4 ports.  Whenever it is found that there are no matches in the current\n * subtable, the rest of the subtable can be skipped.\n *\n * Staged lookup does not reduce lookup time, and it may increase it, because\n * it changes a single hash table lookup into multiple hash table lookups.\n * It reduces un-wildcarding significantly in important use cases.\n *\n *\n * Prefix Tracking (Wildcard Optimization)\n * ---------------------------------------\n *\n * Classifier uses prefix trees (\"tries\") for tracking the used\n * address space, enabling skipping classifier tables containing\n * longer masks than necessary for the given address.  This reduces\n * un-wildcarding for datapath flows in parts of the address space\n * without host routes, but consulting extra data structures (the\n * tries) may slightly increase lookup time.\n *\n * Trie lookup is interwoven with staged lookup, so that a trie is\n * searched only when the configured trie field becomes relevant for\n * the lookup.  The trie lookup results are retained so that each trie\n * is checked at most once for each classifier lookup.\n *\n * This implementation tracks the number of rules at each address\n * prefix for the whole classifier.  More aggressive table skipping\n * would be possible by maintaining lists of tables that have prefixes\n * at the lengths encountered on tree traversal, or by maintaining\n * separate tries for subsets of rules separated by metadata fields.\n *\n * Prefix tracking is configured via OVSDB \"Flow_Table\" table,\n * \"fieldspec\" column.  \"fieldspec\" is a string map where a \"prefix\"\n * key tells which fields should be used for prefix tracking.  The\n * value of the \"prefix\" key is a comma separated list of field names.\n *\n * There is a maximum number of fields that can be enabled for any one\n * flow table.  Currently this limit is 3.\n *\n *\n * Partitioning (Lookup Time and Wildcard Optimization)\n * ----------------------------------------------------\n *\n * Suppose that a given classifier is being used to handle multiple stages in a\n * pipeline using \"resubmit\", with metadata (that is, the OpenFlow 1.1+ field\n * named \"metadata\") distinguishing between the different stages.  For example,\n * metadata value 1 might identify ingress rules, metadata value 2 might\n * identify ACLs, and metadata value 3 might identify egress rules.  Such a\n * classifier is essentially partitioned into multiple sub-classifiers on the\n * basis of the metadata value.\n *\n * The classifier has a special optimization to speed up matching in this\n * scenario:\n *\n *     - Each cls_subtable that matches on metadata gets a tag derived from the\n *       subtable\u0027s mask, so that it is likely that each subtable has a unique\n *       tag.  (Duplicate tags have a performance cost but do not affect\n *       correctness.)\n *\n *     - For each metadata value matched by any cls_rule, the classifier\n *       constructs a \"struct cls_partition\" indexed by the metadata value.\n *       The cls_partition has a \u0027tags\u0027 member whose value is the bitwise-OR of\n *       the tags of each cls_subtable that contains any rule that matches on\n *       the cls_partition\u0027s metadata value.  In other words, struct\n *       cls_partition associates metadata values with subtables that need to\n *       be checked with flows with that specific metadata value.\n *\n * Thus, a flow lookup can start by looking up the partition associated with\n * the flow\u0027s metadata, and then skip over any cls_subtable whose \u0027tag\u0027 does\n * not intersect the partition\u0027s \u0027tags\u0027.  (The flow must also be looked up in\n * any cls_subtable that doesn\u0027t match on metadata.  We handle that by giving\n * any such cls_subtable TAG_ALL as its \u0027tags\u0027 so that it matches any tag.)\n *\n * Partitioning saves lookup time by reducing the number of subtable lookups.\n * Each eliminated subtable lookup also reduces the amount of un-wildcarding.\n *\n *\n * Classifier Versioning\n * =====================\n *\n * Classifier lookups are always done in a specific classifier version, where\n * a version is defined to be a natural number.\n *\n * When a new rule is added to a classifier, it is set to become visible in a\n * specific version.  If the version number used at insert time is larger than\n * any version number currently used in lookups, the new rule is said to be\n * invisible to lookups.  This means that lookups won\u0027t find the rule, but the\n * rule is immediately available to classifier iterations.\n *\n * Similarly, a rule can be marked as to be deleted in a future version.  To\n * delete a rule in a way to not remove the rule before all ongoing lookups are\n * finished, the rule should be made invisible in a specific version number.\n * Then, when all the lookups use a later version number, the rule can be\n * actually removed from the classifier.\n *\n * Classifiers can hold duplicate rules (rules with the same match criteria and\n * priority) when at most one of these duplicates is visible in any given\n * lookup version.  The caller responsible for classifier modifications must\n * maintain this invariant.\n *\n * The classifier supports versioning for two reasons:\n *\n *     1. Support for versioned modifications makes it possible to perform an\n *        arbitraty series of classifier changes as one atomic transaction,\n *        where intermediate versions of the classifier are not visible to any\n *        lookups.  Also, when a rule is added for a future version, or marked\n *        for removal after the current version, such modifications can be\n *        reverted without any visible effects to any of the current lookups.\n *\n *     2. Performance: Adding (or deleting) a large set of rules can, in\n *        pathological cases, have a cost proportional to the number of rules\n *        already in the classifier.  When multiple rules are being added (or\n *        deleted) in one go, though, this pathological case cost can be\n *        typically avoided, as long as it is OK for any new rules to be\n *        invisible until the batch change is complete.\n *\n * Note that the classifier_replace() function replaces a rule immediately, and\n * is therefore not safe to use with versioning.  It is still available for the\n * users that do not use versioning.\n *\n *\n * Deferred Publication\n * ====================\n *\n * Removing large number of rules from classifier can be costly, as the\n * supporting data structures are teared down, in many cases just to be\n * re-instantiated right after.  In the worst case, as when each rule has a\n * different match pattern (mask), the maintenance of the match patterns can\n * have cost O(N^2), where N is the number of different match patterns.  To\n * alleviate this, the classifier supports a \"deferred mode\", in which changes\n * in internal data structures needed for future version lookups may not be\n * fully computed yet.  The computation is finalized when the deferred mode is\n * turned off.\n *\n * This feature can be used with versioning such that all changes to future\n * versions are made in the deferred mode.  Then, right before making the new\n * version visible to lookups, the deferred mode is turned off so that all the\n *  data structures are ready for lookups with the new version number.\n *\n * To use deferred publication, first call classifier_defer().  Then, modify\n * the classifier via additions (classifier_insert() with a specific, future\n * version number) and deletions (use cls_rule_make_removable_after_version()).\n * Then call classifier_publish(), and after that, announce the new version\n * number to be used in lookups.\n *\n *\n * Thread-safety\n * =============\n *\n * The classifier may safely be accessed by many reader threads concurrently\n * and by a single writer, or by multiple writers when they guarantee mutually\n * exlucive access to classifier modifications.\n *\n * Since the classifier rules are RCU protected, the rule destruction after\n * removal from the classifier must be RCU postponed.  Also, when versioning is\n * used, the rule removal itself needs to be typically RCU postponed.  In this\n * case the rule destruction is doubly RCU postponed, i.e., the second\n * ovsrcu_postpone() call to destruct the rule is called from the first RCU\n * callback that removes the rule.\n *\n * Rules that have never been visible to lookups are an exeption to the above\n * rule.  Such rules can be removed immediately, but their destruction must\n * still be RCU postponed, as the rule\u0027s visibility attribute may be examined\n * parallel to the rule\u0027s removal. */\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-11] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-27-【JAVA 提高班之一】集合大家族.markdown [pool-2-thread-7] [chx]
[INFO] 2017-07-28 12:44:29 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74156876 [pool-2-thread-12] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":74156876,"title":"【OpenVswitch源码分析之四】控制面关键接口与调用流程","create_at":"\/Date(1499001345000)\/","create":"2017-07-02 09:15:45","view_count":844,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":1,"bury":0,"description":"受限于篇幅，前文只讲述了控制面板关键接口的前两个部分，本篇继续讲述基本二层协议的配置，Openflow的控制又是一个很大的命题，会放到下一篇文章做阐述。 \n1. 虚拟设备的生命周期接口  \n2. 虚拟设备的业务配置接口  \n3. 二层基础协议的运行启动  \n4. Openflow协议的运行开启与流表下发  \n本节以BFD的配置为例做讲解，无论是STP，BFD的配置，初始的配置接口都是在vsctl中，","url":"http://blog.csdn.net/BLACKMOON88/article/details/74156876","categories":"云计算,OpenVswitch,C语言算法","tags":"源码,open flow","content":"\u003cp\u003e受限于篇幅，前文只讲述了控制面板关键接口的前两个部分，本篇继续讲述基本二层协议的配置，Openflow的控制又是一个很大的命题，会放到下一篇文章做阐述。 \u003cbr\u003e\n1. 虚拟设备的生命周期接口  \u003cbr\u003e\n2. 虚拟设备的业务配置接口  \u003cbr\u003e\n\u003cstrong\u003e\u003cem\u003e3. 二层基础协议的运行启动\u003c/em\u003e \u003c/strong\u003e \u003cbr\u003e\n4. Openflow协议的运行开启与流表下发  \u003cbr\u003e\n本节以BFD的配置为例做讲解，无论是STP，BFD的配置，初始的配置接口都是在vsctl中，vsctl客户端是针对OVSDB配置的交互式客户端，除了对OVSDB的表项做直接的配置，也可以二层协议做使能工作，当然默认初始化时这些功能并没有使能。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003estatic void\nusage(void)\n{\n    printf(\"\\\n%s: ovs-vswitchd management utility\\n\\\nusage: %s [OPTIONS] COMMAND [ARG...]\\n\\\n\\n\\\nOpen vSwitch commands:\\n\\\n  init                        initialize database, if not yet initialized\\n\\\n  \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eshow\u003c/span\u003e                        print overview \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edatabase\u003c/span\u003e contents\\n\\\n  emer-reset                  reset configuration \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e clean state\\n\\\n\\n\\\nBridge commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-br BRIDGE               \u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e a new bridge named BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-br BRIDGE PARENT VLAN   \u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e new fake BRIDGE \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e PARENT \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e VLAN\\n\\\n  del-br BRIDGE               \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e BRIDGE \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e its ports\\n\\\n  list-br                     print the \u003cspan class=\"hljs-keyword\"\u003enames\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e the bridges\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eexists\u003c/span\u003e BRIDGE            exit \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e BRIDGE does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e exist\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-vlan BRIDGE           print the VLAN which BRIDGE \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-parent BRIDGE         print the parent \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e BRIDGE\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003eexternal\u003c/span\u003e-id BRIDGE \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eVALUE\u003c/span\u003e  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eVALUE\u003c/span\u003e\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003eexternal\u003c/span\u003e-id BRIDGE \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e  unset \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003eexternal\u003c/span\u003e-id BRIDGE \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e  print \u003cspan class=\"hljs-keyword\"\u003evalue\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003eexternal\u003c/span\u003e-id BRIDGE  list \u003cspan class=\"hljs-keyword\"\u003ekey\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003evalue\u003c/span\u003e pairs \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n\\n\\\nPort commands (a bond \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e considered \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be a single port):\\n\\\n  list-ports BRIDGE           print the \u003cspan class=\"hljs-keyword\"\u003enames\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e the ports \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-port BRIDGE PORT        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e network device PORT \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-bond BRIDGE PORT IFACE...  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e bonded port PORT \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e BRIDGE \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e IFACES\\n\\\n  del-port [BRIDGE] PORT      \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e PORT (which may be bonded) \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e BRIDGE\\n\\\n  port-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-br PORT             print name \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e bridge that contains PORT\\n\\\n\\n\\\nInterface commands (a bond consists \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e multiple interfaces):\\n\\\n  list-ifaces BRIDGE          print the \u003cspan class=\"hljs-keyword\"\u003enames\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e interfaces \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n  iface-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-br IFACE           print name \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e bridge that contains IFACE\\n\\\n\\n\\\nController commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-controller BRIDGE      print the controllers \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  del-controller BRIDGE      \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e the controllers \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-controller BRIDGE TARGET...  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the controllers \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-fail-mode BRIDGE       print the fail-mode \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  del-fail-mode BRIDGE       \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e the fail-mode \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-fail-mode BRIDGE MODE  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the fail-mode \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e MODE\\n\\\n\\n\\\nManager commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-manager                print the managers\\n\\\n  del-manager                \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e the managers\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-manager TARGET...      \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the list \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e managers \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e TARGET...\\n\\\n\\n\\\nSSL commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-ssl                     print the SSL configuration\\n\\\n  del-ssl                     \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e the SSL configuration\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-ssl PRIV-\u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e CERT CA-CERT  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the SSL configuration\\n\\\n\\n\\\nAuto Attach commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-aa-mapping BRIDGE I-SID VLAN   \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e Auto Attach mapping \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e BRIDGE\\n\\\n  del-aa-mapping BRIDGE I-SID VLAN   \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e Auto Attach mapping VLAN \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-aa-mapping BRIDGE              \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e Auto Attach mappings \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e BRIDGE\\n\\\n\\n\\\nSwitch commands:\\n\\\n  emer-reset                  reset switch \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e known good state\\n\\\n\\n\\\n%s\\\n\\n\\\nOptions:\\n\\\n  --db=\u003cspan class=\"hljs-keyword\"\u003eDATABASE\u003c/span\u003e               \u003cspan class=\"hljs-keyword\"\u003econnect\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eDATABASE\u003c/span\u003e\\n\\\n                              (\u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e: %s)\\n\\\n  --\u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e-wait                   \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e wait \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e ovs-vswitchd \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e reconfigure\\n\\\n  --retry                     keep trying \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econnect\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e server forever\\n\\\n  -t, --timeout=SECS          wait \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e most SECS seconds \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e ovs-vswitchd\\n\\\n  --dry-run                   \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e changes \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edatabase\u003c/span\u003e\\n\\\n  --oneline                   print exactly one line \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eoutput\u003c/span\u003e per command\\n\u003cspan class=\"hljs-string\"\u003e\",\n           program_name, program_name, ctl_get_db_cmd_usage(), ctl_default_db());\n    vlog_usage();\n    printf(\"\u003c/span\u003e\\\n  --\u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e-syslog             equivalent \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e --verbose=vsctl:syslog:warn\\n\u003cspan class=\"hljs-string\"\u003e\");\n    stream_usage(\"\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003edatabase\u003c/span\u003e\u003cspan class=\"hljs-string\"\u003e\", true, true, false);\n    printf(\"\u003c/span\u003e\\n\\\nOther options:\\n\\\n  -h, --help                  display this help message\\n\\\n  -V, --version               display version information\\n\u003cspan class=\"hljs-string\"\u003e\");\n    exit(EXIT_SUCCESS);\n}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e上部分代码表述命令行的用途，而bfd以及stp的配置都是Bridge数据接口中的配置使能位，只要配置使能了，相关的二层协议就会开始运行。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs perl\"\u003e/* Configures BFD on \u003cspan class=\"hljs-string\"\u003e\u0027ofp_port\u0027\u003c/span\u003e in \u003cspan class=\"hljs-string\"\u003e\u0027ofproto\u0027\u003c/span\u003e.  This function has \u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e effect \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e\n - \u003cspan class=\"hljs-string\"\u003e\u0027ofproto\u0027\u003c/span\u003e does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have a port \u003cspan class=\"hljs-string\"\u003e\u0027ofp_port\u0027\u003c/span\u003e. \u003cspan class=\"hljs-variable\"\u003e*/\u003c/span\u003e\nvoid\nofproto_port_set_bfd(struct ofproto \u003cspan class=\"hljs-variable\"\u003e*ofproto\u003c/span\u003e, ofp_port_t ofp_port,\n                     const struct smap \u003cspan class=\"hljs-variable\"\u003e*cfg\u003c/span\u003e)\n{\n    struct ofport \u003cspan class=\"hljs-variable\"\u003e*ofport\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e error;\n\n    ofport = ofproto_get_port(ofproto, ofp_port);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!ofport) {\n        VLOG_WARN(\u003cspan class=\"hljs-string\"\u003e\"\u003cspan class=\"hljs-variable\"\u003e%s\u003c/span\u003e: cannot configure bfd on nonexistent port \u003cspan class=\"hljs-variable\"\u003e%\"\u003c/span\u003ePRIu32,\n                  ofproto-&gt;name, ofp_port);\n        return;\n    }\n\n    error = (ofproto-&gt;ofproto_class-&gt;set_bfd\n             ? ofproto-&gt;ofproto_class-&gt;set_bfd(ofport, cfg)\n             : EOPNOTSUPP);\n    if (error) {\n        VLOG_WARN(\"\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e%s\u003c/span\u003e: bfd configuration on port \u003cspan class=\"hljs-variable\"\u003e%\"\u003c/span\u003ePRIu32\u003cspan class=\"hljs-string\"\u003e\" (\u003cspan class=\"hljs-variable\"\u003e%s\u003c/span\u003e) failed (\u003cspan class=\"hljs-variable\"\u003e%s\u003c/span\u003e)\"\u003c/span\u003e,\n                  ofproto-&gt;name, ofp_port, netdev_get_name(ofport-&gt;netdev),\n                  ovs_strerror(error));\n    }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch3 id=\"先简单介绍下bfd\"\u003e先简单介绍下BFD\u003c/h3\u003e\n\n\u003cp\u003e为了保护关键应用，网络中会设计有一定的冗余备份链路，网络发生故障时就要求网络设备能够快速检测出故障并将流量切换至备份链路以加快网络收敛速度。目前有些链路（如POS）通过硬件检测机制来实现快速故障检测。但是某些链路（如以太网链路）不具备这样的检测机制。此时，应用就要依靠上层协议自身的机制来进行故障检测，上层协议的检测时间都在1秒以上，这样的故障检测时间对某些应用来说是不能容忍的。某些路由协议如OSPF、IS-IS虽然有Fast Hello功能来加快检测速度，但是检测时间也只能达到1秒的精度，而且Fast Hello功能只是针对本协议的，无法为其它协议提供快速故障检测。\u003c/p\u003e\n\n\u003cp\u003eBFD：(Bidirectional Forwarding Detection，双向转发检测)协议提供一种轻负载、快速检测两台邻接路由器/交换机之间转发路径连通状态的方法，它是一个简单的“Hello”协议，在很多方面，它与那些著名的路由协议的邻居检测部分相似。一对系统在它们之间的所建立会话的通道上周期性的发送检测报文，如果某个系统在足够长的时间内没有收到对端的检测报文，则认为在这条到相邻系统的双向通道的某个部分发生了故障协议邻居通过该方式可以快速检测到转发路径的连通故障，加快启用备份转发路径，提升现有网络性能。\u003c/p\u003e\n\n\u003cp\u003eBFD 提供的检测机制与所应用的接口介质类型、封装格式、以及关联的上层协议如 OSPF、BGP、RIP 等无关。BFD 在两台路由器之间建立会话，通过快速发送检测故障消息给正在运行的路由协议，以触发路由协议重新计算路由表，大大减少整个网络的收敛时间。BFD 本身没有发现邻居的能力，需要上层协议通知与哪个邻居建立会话。\u003c/p\u003e\n\n\u003cp\u003eBFD报文格式 \u003cbr\u003e\nBFD发送的检测报文是UDP报文，定义两种类型的报文 \u003cbr\u003e\n建立BFD会话时缺省采用版本1，如果收到对端系统发送的是版本0的报文，将自动切换到版本0。可以通过show bfd neighbors命令查看采用的版本。\u003c/p\u003e\n\n\u003cp\u003e1）控制报文 \u003cbr\u003e\n其格式如下： \u003cbr\u003e\n\u003cimg src=\"http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/2013111622828395.png\" alt=\"BFD报文格式\" title=\"\"\u003e \u003cbr\u003e\n- Vers：BFD协议版本号，目前为1 \u003cbr\u003e\n- Diag：诊断字，标明本地BFD系统最近一次会话状态发生变化的原因 \u003cbr\u003e\n- Sta：BFD本地状态 \u003cbr\u003e\n- P：参数发生改变时，发送方在BFD报文中置该标志，接收方必须立即响应该报文 \u003cbr\u003e\n- F：响应P标志置位的回应报文中必须将F标志置位 \u003cbr\u003e\n- C：转发/控制分离标志，一旦置位，控制平面的变化不影响BFD检测，如：控制平面为ISIS，当ISIS重- 启/GR时，BFD可以继续监测链路状态 \u003cbr\u003e\n- A：认证标识，置位代表会话需要进行验证 \u003cbr\u003e\n- D：查询请求，置位代表发送方期望采用查询模式对链路进行监测 \u003cbr\u003e\n- R：预留位 \u003cbr\u003e\n- Detect Mult：检测超时倍数，用于检测方计算检测超时时间 \u003cbr\u003e\n- Length：报文长度 \u003cbr\u003e\n- My Discreaminator：BFD会话连接本地标识符 \u003cbr\u003e\n- Your Discreaminator：BFD会话连接远端标识符 \u003cbr\u003e\n- Desired Min Tx Interval：本地支持的最小BFD报文发送间隔 \u003cbr\u003e\n- Required Min RX Interval：本地支持的最小BFD接收间隔 \u003cbr\u003e\n- Required Min Echo RX Interval：本地支持的最小Echo报文接收间隔（如果本地不支持Echo功能，则设置0） \u003cbr\u003e\n- Auth Type：认证类型，目前协议提供有\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSimple Password    \u003c/li\u003e\n\u003cli\u003eKeyed MD5   \u003c/li\u003e\n\u003cli\u003eMeticulous Keyed MD5   \u003c/li\u003e\n\u003cli\u003eKeyed SHA1     \u003c/li\u003e\n\u003cli\u003eMeticulous Keyed SHA1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e-Auth Length：认证数据长度 Authentication Data：认证数据区 \u003cbr\u003e\n其中认证部分为可选部分，可以在报文中选择使用，其中认证方式可以有：Simple Password、Keyed MD5、Meticulous Keyed MD5、Keyed SHA1、Meticulous Keyed SHA1。协议定义了控制报文所使用的UDP目的端口号为3784。\u003c/p\u003e\n\n\u003cp\u003e2）回声报文（ECHO） \u003cbr\u003e\nBFD协议并未定义回声报文的格式，但是对于回声报文，其格式只是与本地相关，远端只需把此报文在反向通道上返回，回声报文的源目的IP相同。 \u003cbr\u003e\n会话建立 \u003cbr\u003e\nBFD在检测前，需要在通道两端建立对等会话，会话建立以后以协商后的速率各自向对端发送BFD的控制报文来实现故障检测。其会话检测的路径可以是标记交换路径，也可以是其它类型的隧道或是可交换以太网。 \u003cbr\u003e\n1)会话初始化过程 \u003cbr\u003e\n对于BFD会话建立过程中的初始化阶段，两端是主动角色还是被动角色是由应用来决定的，但是至少有一端为主动角色。 \u003cbr\u003e\n2)会话建立过程 \u003cbr\u003e\n会话建立过程是一个三次握手的过程，经过此过程后两端的会话变为Up状态，在此过程中同时协商好相应的参数，以后的状态变化就是根据缺陷的检测结果来进行，并做相应的处理。其状态机迁移如下： \u003cbr\u003e\n\u003cimg src=\"http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/201311162321833.png\" alt=\"BFD状态机\" title=\"\"\u003e \u003cbr\u003e\n以BFD会话连接建立过程为例，简要介绍状态机迁移过程： \u003cbr\u003e\n\u003cimg src=\"http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/201311162346188.png\" alt=\"BFD状态机迁移过程\" title=\"\"\u003e \u003cbr\u003e\n - A、B两站启动BFD，各自初始状态为“down”，发送BFD报文携带状态为“down” \u003cbr\u003e\n - B站收到状态为“down”的BFD报文，本地状态切换至“init”，发送BFD报文携带状态为“init” \u003cbr\u003e\n - B站本地BFD状态为“init”后，再接收到状态为“down”的报文不做处理 \u003cbr\u003e\n - A站BFD状态变化过程同上 \u003cbr\u003e\n - B站收到状态为“init”的BFD报文，本地状态切换至“up” \u003cbr\u003e\n - A站BFD状态变化过程同上 \u003cbr\u003e\n - A、B两站在发生“down =&gt; init”变化后，会启动一个超时定时器，该定时器的作用是防止本地状态阻塞在“init”（有可能AB连接此时断连，会话不能正常建立），如果在规定的时间内仍未收到状态为“init/up”的BFD报文，则状态自动切换回“down” \u003cbr\u003e\n - 本地状态UP标志会话建立成功\u003c/p\u003e\n\n\n\n\u003ch3 id=\"bfd实现简介\"\u003eBFD实现简介\u003c/h3\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e\u003cspan class=\"hljs-comment\"\u003e/* Initializes, destroys, or reconfigures the BFD session \u0027bfd\u0027 (named \u0027name\u0027),\n * according to the database configuration contained in \u0027cfg\u0027.  Takes ownership\n * of \u0027bfd\u0027, which may be NULL.  Returns a BFD object which may be used as a\n * handle for the session, or NULL if BFD is not enabled according to \u0027cfg\u0027.\n * Also returns NULL if cfg is NULL. */\u003c/span\u003e\nstruct bfd \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003e\nbfd_configure(struct bfd \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003ebfd, const char \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003ename, const struct smap \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003ecfg,\n              struct netdev \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003enetdev) OVS_EXCLUDED(mutex)\n{\n    static atomic_count udp_src \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e ATOMIC_COUNT_INIT(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n\n    int decay_min_rx;\n    long long int min_tx, min_rx;\n    bool need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n    bool cfg_min_rx_changed \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n    bool cpath_down, forwarding_if_rx;\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003ecfg \u003cspan class=\"hljs-subst\"\u003e||\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003esmap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"enable\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e)) {\n        bfd_unref(bfd);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eNULL\u003c/span\u003e;\n    }\n\n    ovs_mutex_lock(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003emutex);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003ebfd) {\n        bfd \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e xzalloc(sizeof \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003ebfd);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ename \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e xstrdup(name);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_override \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edisc \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e generate_discriminator();\n        hmap_insert(all_bfds, \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003enode, bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edisc);\n\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ediag \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e DIAG_NONE;\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e;\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emult \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\n        ovs_refcount_init(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eref_cnt);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003enetdev \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e netdev_ref(netdev);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003erx_packets \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e bfd_rx_packets(bfd);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ein_decay \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eflap_count \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n\n        \u003cspan class=\"hljs-comment\"\u003e/* RFC 5881 section 4\n         * The source port MUST be in the range 49152 through 65535.  The same\n         * UDP source port number MUST be used for all BFD Control packets\n         * associated with a particular session.  The source port number SHOULD\n         * be unique among all BFD sessions on the system. */\u003c/span\u003e\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eudp_src \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e (atomic_count_inc(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003eudp_src) \u003cspan class=\"hljs-subst\"\u003e%\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e16384\u003c/span\u003e) \u003cspan class=\"hljs-subst\"\u003e+\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e49152\u003c/span\u003e;\n\n        bfd_set_state(bfd, STATE_DOWN, DIAG_NONE);\n\n        bfd_status_changed(bfd);\n    }\n\n    bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eoam \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"oam\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n\n    atomic_store_relaxed(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003echeck_tnl_key,\n                         smap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"check_tnl_key\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e));\n    min_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_int(cfg, \u003cspan class=\"hljs-string\"\u003e\"min_tx\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e);\n    min_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eMAX\u003c/span\u003e(min_tx, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_tx \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e min_tx) {\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e min_tx;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003estate \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e STATE_UP\n            \u003cspan class=\"hljs-subst\"\u003e||\u003c/span\u003e (\u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003ebfd_in_poll(bfd) \u003cspan class=\"hljs-subst\"\u003e&amp;&amp;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_tx \u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_tx)) {\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_tx;\n        }\n        need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    }\n\n    min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_int(cfg, \u003cspan class=\"hljs-string\"\u003e\"min_rx\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e);\n    min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eMAX\u003c/span\u003e(min_rx, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e min_rx) {\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e min_rx;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003estate \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e STATE_UP\n            \u003cspan class=\"hljs-subst\"\u003e||\u003c/span\u003e (\u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003ebfd_in_poll(bfd) \u003cspan class=\"hljs-subst\"\u003e&amp;&amp;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx \u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_rx)) {\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx;\n        }\n        cfg_min_rx_changed \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    }\n\n    decay_min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_int(cfg, \u003cspan class=\"hljs-string\"\u003e\"decay_min_rx\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edecay_min_rx \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e decay_min_rx \u003cspan class=\"hljs-subst\"\u003e||\u003c/span\u003e cfg_min_rx_changed) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (decay_min_rx \u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e&amp;&amp;\u003c/span\u003e decay_min_rx \u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx) {\n            VLOG_WARN(\u003cspan class=\"hljs-string\"\u003e\"%s: decay_min_rx cannot be less than %lld ms\"\u003c/span\u003e,\n                      bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ename, bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx);\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edecay_min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edecay_min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e decay_min_rx;\n        }\n        \u003cspan class=\"hljs-comment\"\u003e/* Resets decay. */\u003c/span\u003e\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ein_decay \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n        bfd_decay_update(bfd);\n        need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    }\n\n    cpath_down \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"cpath_down\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecpath_down \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e cpath_down) {\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecpath_down \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e cpath_down;\n        bfd_set_state(bfd, bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003estate, DIAG_NONE);\n        need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    }\n\n    eth_addr_from_string(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_local_src_mac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                         \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003elocal_eth_src);\n    eth_addr_from_string(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_local_dst_mac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                         \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003elocal_eth_dst);\n    eth_addr_from_string(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_remote_dst_mac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                         \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ermt_eth_dst);\n\n    bfd_lookup_ip(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_src_ip\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                  htonl(\u003cspan class=\"hljs-number\"\u003e0xA9FE0101\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e/* 169.254.1.1 */\u003c/span\u003e, \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eip_src);\n    bfd_lookup_ip(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_dst_ip\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                  htonl(\u003cspan class=\"hljs-number\"\u003e0xA9FE0100\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e/* 169.254.1.0 */\u003c/span\u003e, \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eip_dst);\n\n    forwarding_if_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"forwarding_if_rx\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_if_rx \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e forwarding_if_rx) {\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_if_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e forwarding_if_rx;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003estate \u003cspan class=\"hljs-subst\"\u003e==\u003c/span\u003e STATE_UP \u003cspan class=\"hljs-subst\"\u003e&amp;&amp;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_if_rx) {\n            bfd_forwarding_if_rx_update(bfd);\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_if_rx_detect_time \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        }\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (need_poll) {\n        bfd_poll(bfd);\n    }\n    ovs_mutex_unlock(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003emutex);\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e bfd;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e可以看到上述代码对BFD的控制报文的相关设置基本覆盖，接下来就是如何把BFD报文编码交给内核进行进一步处理\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs haskell\"\u003e/* \u003cspan class=\"hljs-type\"\u003eExecutes\u003c/span\u003e, against \u0027dpif\u0027, up to the first \u0027n_ops\u0027 operations \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027ops\u0027.\n * \u003cspan class=\"hljs-type\"\u003eReturns\u003c/span\u003e the number actually executed (at least \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u0027n_ops\u0027 is\n * positive). */\n\u003cspan class=\"hljs-title\"\u003estatic\u003c/span\u003e size_t\n\u003cspan class=\"hljs-title\"\u003edpif_netlink_operate__\u003c/span\u003e(struct dpif_netlink *dpif,\n                       struct dpif_op **ops, size_t n_ops)\n{\n    enum { \u003cspan class=\"hljs-type\"\u003eMAX_OPS\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e };\n\n    struct op_auxdata {\n        struct nl_transaction txn;\n\n        struct ofpbuf request;\n        uint64_t request_stub[\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e];\n\n        struct ofpbuf reply;\n        uint64_t reply_stub[\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e];\n    } auxes[\u003cspan class=\"hljs-type\"\u003eMAX_OPS\u003c/span\u003e];\n\n    struct nl_transaction *txnsp[\u003cspan class=\"hljs-type\"\u003eMAX_OPS\u003c/span\u003e];\n    size_t i;\n\n    n_ops = \u003cspan class=\"hljs-type\"\u003eMIN\u003c/span\u003e(n_ops, \u003cspan class=\"hljs-type\"\u003eMAX_OPS\u003c/span\u003e);\n    for (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; n_ops; i++) {\n        struct op_auxdata *aux = &amp;auxes[i];\n        struct dpif_op *op = ops[i];\n        struct dpif_flow_put *put;\n        struct dpif_flow_del *del;\n        struct dpif_flow_get *get;\n        struct dpif_netlink_flow flow;\n\n        ofpbuf_use_stub(&amp;aux-&gt;request,\n                        aux-&gt;request_stub, sizeof aux-&gt;request_stub);\n        aux-&gt;txn.request = &amp;aux-&gt;request;\n\n        ofpbuf_use_stub(&amp;aux-&gt;reply, aux-&gt;reply_stub, sizeof aux-&gt;reply_stub);\n        aux-&gt;txn.reply = \u003cspan class=\"hljs-type\"\u003eNULL\u003c/span\u003e;\n\n        switch (op-&gt;\u003cspan class=\"hljs-typedef\"\u003e\u003cspan class=\"hljs-keyword\"\u003etype\u003c/span\u003e) \u003cspan class=\"hljs-container\"\u003e{\n        \u003cspan class=\"hljs-title\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_PUT\u003c/span\u003e:\n            \u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e = &amp;\u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eu\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eflow_put\u003c/span\u003e;\n            \u003cspan class=\"hljs-title\"\u003edpif_netlink_init_flow_put\u003c/span\u003e(\u003cspan class=\"hljs-title\"\u003edpif\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e, &amp;\u003cspan class=\"hljs-title\"\u003eflow\u003c/span\u003e);\n            \u003cspan class=\"hljs-title\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003estats\u003c/span\u003e) {\n                \u003cspan class=\"hljs-title\"\u003eflow\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003enlmsg_flags\u003c/span\u003e |= \u003cspan class=\"hljs-type\"\u003eNLM_F_ECHO\u003c/span\u003e;\n                \u003cspan class=\"hljs-title\"\u003eaux\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003etxn\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e = &amp;\u003cspan class=\"hljs-title\"\u003eaux\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e;\n            }\u003c/span\u003e\u003c/span\u003e\n            dpif_netlink_flow_to_ofpbuf(&amp;flow, &amp;aux-&gt;request);\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_DEL\u003c/span\u003e:\n            del = &amp;op-&gt;u.flow_del;\n            dpif_netlink_init_flow_del(dpif, del, &amp;flow);\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (del-&gt;stats) {\n                flow.nlmsg_flags |= \u003cspan class=\"hljs-type\"\u003eNLM_F_ECHO\u003c/span\u003e;\n                aux-&gt;txn.reply = &amp;aux-&gt;reply;\n            }\n            dpif_netlink_flow_to_ofpbuf(&amp;flow, &amp;aux-&gt;request);\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_EXECUTE\u003c/span\u003e:\n            /* \u003cspan class=\"hljs-type\"\u003eCan\u0027t\u003c/span\u003e execute a packet that won\u0027t fit \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a \u003cspan class=\"hljs-type\"\u003eNetlink\u003c/span\u003e attribute. */\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-type\"\u003eOVS_UNLIKELY\u003c/span\u003e(nl_attr_oversized(\n                                 dp_packet_size(op-&gt;u.execute.packet)))) {\n                /* \u003cspan class=\"hljs-type\"\u003eReport\u003c/span\u003e an error immediately \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e this is the first operation.\n                 * \u003cspan class=\"hljs-type\"\u003eOtherwise\u003c/span\u003e the easiest thing to \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e is to postpone to the next\n                 * call (when this will be the first operation). */\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (i == \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n                    \u003cspan class=\"hljs-type\"\u003eVLOG_ERR_RL\u003c/span\u003e(&amp;error_rl,\n                                \u003cspan class=\"hljs-string\"\u003e\"dropping oversized %\"\u003c/span\u003e\u003cspan class=\"hljs-type\"\u003ePRIu32\u003c/span\u003e\u003cspan class=\"hljs-string\"\u003e\"-byte packet\"\u003c/span\u003e,\n                                dp_packet_size(op-&gt;u.execute.packet));\n                    op-&gt;error = \u003cspan class=\"hljs-type\"\u003eENOBUFS\u003c/span\u003e;\n                    return \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n                }\n                n_ops = i;\n            } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n                dpif_netlink_encode_execute(dpif-&gt;dp_ifindex, &amp;op-&gt;u.execute,\n                                            &amp;aux-&gt;request);\n            }\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_GET\u003c/span\u003e:\n            get = &amp;op-&gt;u.flow_get;\n            dpif_netlink_init_flow_get(dpif, get, &amp;flow);\n            aux-&gt;txn.reply = get-&gt;buffer;\n            dpif_netlink_flow_to_ofpbuf(&amp;flow, &amp;aux-&gt;request);\n            break;\n\n        \u003cspan class=\"hljs-default\"\u003e\u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\u003c/span\u003e\n            \u003cspan class=\"hljs-type\"\u003eOVS_NOT_REACHED\u003c/span\u003e();\n        }\n    }\n\n    for (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; n_ops; i++) {\n        txnsp[i] = &amp;auxes[i].txn;\n    }\n    nl_transact_multiple(\u003cspan class=\"hljs-type\"\u003eNETLINK_GENERIC\u003c/span\u003e, txnsp, n_ops);\n\n    for (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; n_ops; i++) {\n        struct op_auxdata *aux = &amp;auxes[i];\n        struct nl_transaction *txn = &amp;auxes[i].txn;\n        struct dpif_op *op = ops[i];\n        struct dpif_flow_put *put;\n        struct dpif_flow_del *del;\n        struct dpif_flow_get *get;\n\n        op-&gt;error = txn-&gt;error;\n\n        switch (op-&gt;\u003cspan class=\"hljs-typedef\"\u003e\u003cspan class=\"hljs-keyword\"\u003etype\u003c/span\u003e) \u003cspan class=\"hljs-container\"\u003e{\n        \u003cspan class=\"hljs-title\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_PUT\u003c/span\u003e:\n            \u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e = &amp;\u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eu\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eflow_put\u003c/span\u003e;\n            \u003cspan class=\"hljs-title\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003estats\u003c/span\u003e) {\n                \u003cspan class=\"hljs-title\"\u003eif\u003c/span\u003e (!\u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eerror\u003c/span\u003e) {\n                    \u003cspan class=\"hljs-title\"\u003estruct\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edpif_netlink_flow\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e;\n\n                    \u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eerror\u003c/span\u003e = \u003cspan class=\"hljs-title\"\u003edpif_netlink_flow_from_ofpbuf\u003c/span\u003e(&amp;\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e,\n                                                              \u003cspan class=\"hljs-title\"\u003etxn\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e);\n                    \u003cspan class=\"hljs-title\"\u003eif\u003c/span\u003e (!\u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eerror\u003c/span\u003e) {\n                        \u003cspan class=\"hljs-title\"\u003edpif_netlink_flow_get_stats\u003c/span\u003e(&amp;\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003estats\u003c/span\u003e);\n                    }\u003c/span\u003e\u003c/span\u003e\n                }\n            }\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_DEL\u003c/span\u003e:\n            del = &amp;op-&gt;u.flow_del;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (del-&gt;stats) {\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!op-&gt;error) {\n                    struct dpif_netlink_flow reply;\n\n                    op-&gt;error = dpif_netlink_flow_from_ofpbuf(&amp;reply,\n                                                              txn-&gt;reply);\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!op-&gt;error) {\n                        dpif_netlink_flow_get_stats(&amp;reply, del-&gt;stats);\n                    }\n                }\n            }\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_EXECUTE\u003c/span\u003e:\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_GET\u003c/span\u003e:\n            get = &amp;op-&gt;u.flow_get;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!op-&gt;error) {\n                struct dpif_netlink_flow reply;\n\n                op-&gt;error = dpif_netlink_flow_from_ofpbuf(&amp;reply, txn-&gt;reply);\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!op-&gt;error) {\n                    dpif_netlink_flow_to_dpif_flow(&amp;dpif-&gt;dpif, get-&gt;flow,\n                                                   &amp;reply);\n                }\n            }\n            break;\n\n        \u003cspan class=\"hljs-default\"\u003e\u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\u003c/span\u003e\n            \u003cspan class=\"hljs-type\"\u003eOVS_NOT_REACHED\u003c/span\u003e();\n        }\n\n        ofpbuf_uninit(&amp;aux-&gt;request);\n        ofpbuf_uninit(&amp;aux-&gt;reply);\n    }\n\n    return n_ops;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这里仍然是调用Netlink的协议族，以OVS_PACKET_CMD_EXECUTE来标识消息类型，当内核收到该类型消息后会相应的调用ovs_packet_cmd_execute方法进行处理\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs vbscript\"\u003estatic \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e ovs_packet_cmd_execute(struct sk_buff *skb, struct genl_info *info)\n{\n    struct ovs_header *ovs_header = info-&gt;userhdr;\n    struct net *net = sock_net(skb-&gt;sk);\n    struct nlattr **a = info-&gt;attrs;\n    struct sw_flow_actions *acts;\n    struct sk_buff *packet;\n    struct sw_flow *flow;\n    struct sw_flow_actions *sf_acts;\n    struct datapath *dp;\n    struct ethhdr *eth;\n    struct vport *input_vport;\n    u16 mru = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e;\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n    bool \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e = !a[OVS_PACKET_ATTR_PROBE];\n\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = -EINVAL;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!a[OVS_PACKET_ATTR_PACKET] || !a[OVS_PACKET_ATTR_KEY] ||\n        !a[OVS_PACKET_ATTR_ACTIONS])\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n\n    \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e = nla_len(a[OVS_PACKET_ATTR_PACKET]);\n    packet = __dev_alloc_skb(NET_IP_ALIGN + \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e, GFP_KERNEL);\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = -ENOMEM;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!packet)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n    skb_reserve(packet, NET_IP_ALIGN);\n\n    nla_memcpy(__skb_put(packet, \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e), a[OVS_PACKET_ATTR_PACKET], \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e);\n\n    skb_reset_mac_header(packet);\n    eth = eth_hdr(packet);\n\n    /* Normally, setting the skb \u003cspan class=\"hljs-comment\"\u003e\u0027protocol\u0027 field would be handled by a\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003ecall\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e eth_type_trans(), but it assumes there\u003cspan class=\"hljs-comment\"\u003e\u0027s a sending\u003c/span\u003e\n     * device, which we may \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have.\n     */\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (eth_proto_is_802_3(eth-&gt;h_proto))\n        packet-&gt;protocol = eth-&gt;h_proto;\n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e\n        packet-&gt;protocol = htons(ETH_P_802_2);\n\n    /* \u003cspan class=\"hljs-keyword\"\u003eSet\u003c/span\u003e packet\u003cspan class=\"hljs-comment\"\u003e\u0027s mru */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (a[OVS_PACKET_ATTR_MRU]) {\n        mru = nla_get_u16(a[OVS_PACKET_ATTR_MRU]);\n        packet-&gt;ignore_df = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n    }\n    OVS_CB(packet)-&gt;mru = mru;\n\n    /* Build an sw_flow \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e sending this packet. */\n    flow = ovs_flow_alloc();\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = PTR_ERR(flow);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (IS_ERR(flow))\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_kfree_skb;\n\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = ovs_flow_key_extract_userspace(net, a[OVS_PACKET_ATTR_KEY],\n                         packet, &amp;flow-&gt;key, \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_flow_free;\n\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = ovs_nla_copy_actions(net, a[OVS_PACKET_ATTR_ACTIONS],\n                   &amp;flow-&gt;key, &amp;acts, \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_flow_free;\n\n    rcu_assign_pointer(flow-&gt;sf_acts, acts);\n    packet-&gt;priority = flow-&gt;key.phy.priority;\n    packet-&gt;mark = flow-&gt;key.phy.skb_mark;\n\n    rcu_read_lock();\n    dp = get_dp_rcu(net, ovs_header-&gt;dp_ifindex);\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = -ENODEV;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!dp)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_unlock;\n\n    input_vport = ovs_vport_rcu(dp, flow-&gt;key.phy.in_port);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!input_vport)\n        input_vport = ovs_vport_rcu(dp, OVSP_LOCAL);\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!input_vport)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_unlock;\n\n    packet-&gt;dev = input_vport-&gt;dev;\n    OVS_CB(packet)-&gt;input_vport = input_vport;\n    sf_acts = rcu_dereference(flow-&gt;sf_acts);\n\n    local_bh_disable();\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = ovs_execute_actions(dp, packet, sf_acts, &amp;flow-&gt;key);\n    local_bh_enable();\n    rcu_read_unlock();\n\n    ovs_flow_free(flow, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    return \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n\nerr_unlock:\n    rcu_read_unlock();\nerr_flow_free:\n    ovs_flow_free(flow, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\nerr_kfree_skb:\n    kfree_skb(packet);\n\u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e:\n    return \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个处理函数会调用到相应的Output方法，将报文从相应的端口发送出去，而对应的，BFD的状态机的维护和对应的处理都在控制面，所以在数据面收到相关的BFD报文时是要上送到控制面进行处理的。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs rust\"\u003e\u003cspan class=\"hljs-keyword\"\u003eenum\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eupcall_type\u003c/span\u003e {\n    BAD_UPCALL,                 \u003cspan class=\"hljs-comment\"\u003e/* Some kind of bug somewhere. */\u003c/span\u003e\n    MISS_UPCALL,                \u003cspan class=\"hljs-comment\"\u003e/* A flow miss.  */\u003c/span\u003e\n    SFLOW_UPCALL,               \u003cspan class=\"hljs-comment\"\u003e/* sFlow sample. */\u003c/span\u003e\n    FLOW_SAMPLE_UPCALL,         \u003cspan class=\"hljs-comment\"\u003e/* Per-flow sampling. */\u003c/span\u003e\n    IPFIX_UPCALL                \u003cspan class=\"hljs-comment\"\u003e/* Per-bridge sampling. */\u003c/span\u003e\n};\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs applescript\"\u003e/* A packet passed up \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e datapath \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e userspace.\n *\n * The \u0027packet\u0027, \u0027key\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027userdata\u0027 may point \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e data \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a buffer\n * provided \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e caller, so \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e buffer should be released only \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * upcall processing has been finished.\n *\n * While being processed, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u0027packet\u0027 may be reallocated, so \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e packet must\n * be separately released \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e ofpbuf_uninit().\n */\nstruct dpif_upcall {\n    /* All types. */\n    struct dp_packet packet;    /* Packet data,\u0027dp_packet\u0027 should be \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efirst\u003c/span\u003e\n                   member \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e avoid a hole. This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e because\n                   \u0027rte_mbuf\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e dp_packet \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e aligned atleast\n                   \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e a \u003cspan class=\"hljs-number\"\u003e64\u003c/span\u003e-byte boundary */\n    enum dpif_upcall_type type;\n    struct nlattr *key;         /* Flow key. */\n    size_t key_len;             /* Length \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027key\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e bytes. */\n    ovs_u128 ufid;              /* Unique flow identifier \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027key\u0027. */\n    struct nlattr *mru;         /* Maximum receive unit. */\n    struct nlattr *cutlen;      /* Number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e bytes shrink \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eend\u003c/span\u003e. */\n\n    /* DPIF_UC_ACTION only. */\n    struct nlattr *userdata;    /* Argument \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e OVS_ACTION_ATTR_USERSPACE. */\n    struct nlattr *out_tun_key;    /* Output tunnel key. */\n    struct nlattr *actions;    /* Argument \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e OVS_ACTION_ATTR_USERSPACE. */\n};\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e从上述代码可以看出Upcall的消息类型，这里面BFD的控制报文会以MISS_UPCALL的消息类型经过Datapath模块调用Upcall上送到控制面进行处理\u003c/p\u003e","markdowncontent":"受限于篇幅，前文只讲述了控制面板关键接口的前两个部分，本篇继续讲述基本二层协议的配置，Openflow的控制又是一个很大的命题，会放到下一篇文章做阐述。\n1. 虚拟设备的生命周期接口 \n2. 虚拟设备的业务配置接口 \n***3. 二层基础协议的运行启动* **\n4. Openflow协议的运行开启与流表下发 \n本节以BFD的配置为例做讲解，无论是STP，BFD的配置，初始的配置接口都是在vsctl中，vsctl客户端是针对OVSDB配置的交互式客户端，除了对OVSDB的表项做直接的配置，也可以二层协议做使能工作，当然默认初始化时这些功能并没有使能。\n\n```\nstatic void\nusage(void)\n{\n    printf(\"\\\n%s: ovs-vswitchd management utility\\n\\\nusage: %s [OPTIONS] COMMAND [ARG...]\\n\\\n\\n\\\nOpen vSwitch commands:\\n\\\n  init                        initialize database, if not yet initialized\\n\\\n  show                        print overview of database contents\\n\\\n  emer-reset                  reset configuration to clean state\\n\\\n\\n\\\nBridge commands:\\n\\\n  add-br BRIDGE               create a new bridge named BRIDGE\\n\\\n  add-br BRIDGE PARENT VLAN   create new fake BRIDGE in PARENT on VLAN\\n\\\n  del-br BRIDGE               delete BRIDGE and all of its ports\\n\\\n  list-br                     print the names of all the bridges\\n\\\n  br-exists BRIDGE            exit 2 if BRIDGE does not exist\\n\\\n  br-to-vlan BRIDGE           print the VLAN which BRIDGE is on\\n\\\n  br-to-parent BRIDGE         print the parent of BRIDGE\\n\\\n  br-set-external-id BRIDGE KEY VALUE  set KEY on BRIDGE to VALUE\\n\\\n  br-set-external-id BRIDGE KEY  unset KEY on BRIDGE\\n\\\n  br-get-external-id BRIDGE KEY  print value of KEY on BRIDGE\\n\\\n  br-get-external-id BRIDGE  list key-value pairs on BRIDGE\\n\\\n\\n\\\nPort commands (a bond is considered to be a single port):\\n\\\n  list-ports BRIDGE           print the names of all the ports on BRIDGE\\n\\\n  add-port BRIDGE PORT        add network device PORT to BRIDGE\\n\\\n  add-bond BRIDGE PORT IFACE...  add bonded port PORT in BRIDGE from IFACES\\n\\\n  del-port [BRIDGE] PORT      delete PORT (which may be bonded) from BRIDGE\\n\\\n  port-to-br PORT             print name of bridge that contains PORT\\n\\\n\\n\\\nInterface commands (a bond consists of multiple interfaces):\\n\\\n  list-ifaces BRIDGE          print the names of all interfaces on BRIDGE\\n\\\n  iface-to-br IFACE           print name of bridge that contains IFACE\\n\\\n\\n\\\nController commands:\\n\\\n  get-controller BRIDGE      print the controllers for BRIDGE\\n\\\n  del-controller BRIDGE      delete the controllers for BRIDGE\\n\\\n  set-controller BRIDGE TARGET...  set the controllers for BRIDGE\\n\\\n  get-fail-mode BRIDGE       print the fail-mode for BRIDGE\\n\\\n  del-fail-mode BRIDGE       delete the fail-mode for BRIDGE\\n\\\n  set-fail-mode BRIDGE MODE  set the fail-mode for BRIDGE to MODE\\n\\\n\\n\\\nManager commands:\\n\\\n  get-manager                print the managers\\n\\\n  del-manager                delete the managers\\n\\\n  set-manager TARGET...      set the list of managers to TARGET...\\n\\\n\\n\\\nSSL commands:\\n\\\n  get-ssl                     print the SSL configuration\\n\\\n  del-ssl                     delete the SSL configuration\\n\\\n  set-ssl PRIV-KEY CERT CA-CERT  set the SSL configuration\\n\\\n\\n\\\nAuto Attach commands:\\n\\\n  add-aa-mapping BRIDGE I-SID VLAN   add Auto Attach mapping to BRIDGE\\n\\\n  del-aa-mapping BRIDGE I-SID VLAN   delete Auto Attach mapping VLAN from BRIDGE\\n\\\n  get-aa-mapping BRIDGE              get Auto Attach mappings from BRIDGE\\n\\\n\\n\\\nSwitch commands:\\n\\\n  emer-reset                  reset switch to known good state\\n\\\n\\n\\\n%s\\\n\\n\\\nOptions:\\n\\\n  --db=DATABASE               connect to DATABASE\\n\\\n                              (default: %s)\\n\\\n  --no-wait                   do not wait for ovs-vswitchd to reconfigure\\n\\\n  --retry                     keep trying to connect to server forever\\n\\\n  -t, --timeout=SECS          wait at most SECS seconds for ovs-vswitchd\\n\\\n  --dry-run                   do not commit changes to database\\n\\\n  --oneline                   print exactly one line of output per command\\n\",\n           program_name, program_name, ctl_get_db_cmd_usage(), ctl_default_db());\n    vlog_usage();\n    printf(\"\\\n  --no-syslog             equivalent to --verbose=vsctl:syslog:warn\\n\");\n    stream_usage(\"database\", true, true, false);\n    printf(\"\\n\\\nOther options:\\n\\\n  -h, --help                  display this help message\\n\\\n  -V, --version               display version information\\n\");\n    exit(EXIT_SUCCESS);\n}\n```\n上部分代码表述命令行的用途，而bfd以及stp的配置都是Bridge数据接口中的配置使能位，只要配置使能了，相关的二层协议就会开始运行。\n```\n/* Configures BFD on \u0027ofp_port\u0027 in \u0027ofproto\u0027.  This function has no effect if\n - \u0027ofproto\u0027 does not have a port \u0027ofp_port\u0027. */\nvoid\nofproto_port_set_bfd(struct ofproto *ofproto, ofp_port_t ofp_port,\n                     const struct smap *cfg)\n{\n    struct ofport *ofport;\n    int error;\n\n    ofport = ofproto_get_port(ofproto, ofp_port);\n    if (!ofport) {\n        VLOG_WARN(\"%s: cannot configure bfd on nonexistent port %\"PRIu32,\n                  ofproto-\u003ename, ofp_port);\n        return;\n    }\n\n    error = (ofproto-\u003eofproto_class-\u003eset_bfd\n             ? ofproto-\u003eofproto_class-\u003eset_bfd(ofport, cfg)\n             : EOPNOTSUPP);\n    if (error) {\n        VLOG_WARN(\"%s: bfd configuration on port %\"PRIu32\" (%s) failed (%s)\",\n                  ofproto-\u003ename, ofp_port, netdev_get_name(ofport-\u003enetdev),\n                  ovs_strerror(error));\n    }\n}\n```\n###先简单介绍下BFD\n为了保护关键应用，网络中会设计有一定的冗余备份链路，网络发生故障时就要求网络设备能够快速检测出故障并将流量切换至备份链路以加快网络收敛速度。目前有些链路（如POS）通过硬件检测机制来实现快速故障检测。但是某些链路（如以太网链路）不具备这样的检测机制。此时，应用就要依靠上层协议自身的机制来进行故障检测，上层协议的检测时间都在1秒以上，这样的故障检测时间对某些应用来说是不能容忍的。某些路由协议如OSPF、IS-IS虽然有Fast Hello功能来加快检测速度，但是检测时间也只能达到1秒的精度，而且Fast Hello功能只是针对本协议的，无法为其它协议提供快速故障检测。\n\nBFD：(Bidirectional Forwarding Detection，双向转发检测)协议提供一种轻负载、快速检测两台邻接路由器/交换机之间转发路径连通状态的方法，它是一个简单的“Hello”协议，在很多方面，它与那些著名的路由协议的邻居检测部分相似。一对系统在它们之间的所建立会话的通道上周期性的发送检测报文，如果某个系统在足够长的时间内没有收到对端的检测报文，则认为在这条到相邻系统的双向通道的某个部分发生了故障协议邻居通过该方式可以快速检测到转发路径的连通故障，加快启用备份转发路径，提升现有网络性能。\n\nBFD 提供的检测机制与所应用的接口介质类型、封装格式、以及关联的上层协议如 OSPF、BGP、RIP 等无关。BFD 在两台路由器之间建立会话，通过快速发送检测故障消息给正在运行的路由协议，以触发路由协议重新计算路由表，大大减少整个网络的收敛时间。BFD 本身没有发现邻居的能力，需要上层协议通知与哪个邻居建立会话。\n   \nBFD报文格式\nBFD发送的检测报文是UDP报文，定义两种类型的报文\n建立BFD会话时缺省采用版本1，如果收到对端系统发送的是版本0的报文，将自动切换到版本0。可以通过show bfd neighbors命令查看采用的版本。\n\n1）控制报文\n其格式如下：\n![BFD报文格式](http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/2013111622828395.png)\n- Vers：BFD协议版本号，目前为1\n- Diag：诊断字，标明本地BFD系统最近一次会话状态发生变化的原因\n- Sta：BFD本地状态\n- P：参数发生改变时，发送方在BFD报文中置该标志，接收方必须立即响应该报文\n- F：响应P标志置位的回应报文中必须将F标志置位\n- C：转发/控制分离标志，一旦置位，控制平面的变化不影响BFD检测，如：控制平面为ISIS，当ISIS重- 启/GR时，BFD可以继续监测链路状态\n- A：认证标识，置位代表会话需要进行验证\n- D：查询请求，置位代表发送方期望采用查询模式对链路进行监测\n- R：预留位\n- Detect Mult：检测超时倍数，用于检测方计算检测超时时间\n- Length：报文长度\n- My Discreaminator：BFD会话连接本地标识符\n- Your Discreaminator：BFD会话连接远端标识符\n- Desired Min Tx Interval：本地支持的最小BFD报文发送间隔\n- Required Min RX Interval：本地支持的最小BFD接收间隔\n- Required Min Echo RX Interval：本地支持的最小Echo报文接收间隔（如果本地不支持Echo功能，则设置0）\n- Auth Type：认证类型，目前协议提供有\n\n - Simple Password    \n - Keyed MD5   \n - Meticulous Keyed MD5   \n - Keyed SHA1     \n - Meticulous Keyed SHA1\n\n-Auth Length：认证数据长度 Authentication Data：认证数据区\n其中认证部分为可选部分，可以在报文中选择使用，其中认证方式可以有：Simple Password、Keyed MD5、Meticulous Keyed MD5、Keyed SHA1、Meticulous Keyed SHA1。协议定义了控制报文所使用的UDP目的端口号为3784。\n\n2）回声报文（ECHO）\nBFD协议并未定义回声报文的格式，但是对于回声报文，其格式只是与本地相关，远端只需把此报文在反向通道上返回，回声报文的源目的IP相同。\n会话建立\nBFD在检测前，需要在通道两端建立对等会话，会话建立以后以协商后的速率各自向对端发送BFD的控制报文来实现故障检测。其会话检测的路径可以是标记交换路径，也可以是其它类型的隧道或是可交换以太网。\n1)会话初始化过程\n对于BFD会话建立过程中的初始化阶段，两端是主动角色还是被动角色是由应用来决定的，但是至少有一端为主动角色。\n2)会话建立过程\n会话建立过程是一个三次握手的过程，经过此过程后两端的会话变为Up状态，在此过程中同时协商好相应的参数，以后的状态变化就是根据缺陷的检测结果来进行，并做相应的处理。其状态机迁移如下：\n![BFD状态机](http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/201311162321833.png)\n以BFD会话连接建立过程为例，简要介绍状态机迁移过程：\n![BFD状态机迁移过程](http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/201311162346188.png)\n - A、B两站启动BFD，各自初始状态为“down”，发送BFD报文携带状态为“down”\n - B站收到状态为“down”的BFD报文，本地状态切换至“init”，发送BFD报文携带状态为“init”\n - B站本地BFD状态为“init”后，再接收到状态为“down”的报文不做处理\n - A站BFD状态变化过程同上\n - B站收到状态为“init”的BFD报文，本地状态切换至“up”\n - A站BFD状态变化过程同上\n - A、B两站在发生“down =\u003e init”变化后，会启动一个超时定时器，该定时器的作用是防止本地状态阻塞在“init”（有可能AB连接此时断连，会话不能正常建立），如果在规定的时间内仍未收到状态为“init/up”的BFD报文，则状态自动切换回“down”\n - 本地状态UP标志会话建立成功\n \n###BFD实现简介\n \n```\n/* Initializes, destroys, or reconfigures the BFD session \u0027bfd\u0027 (named \u0027name\u0027),\n * according to the database configuration contained in \u0027cfg\u0027.  Takes ownership\n * of \u0027bfd\u0027, which may be NULL.  Returns a BFD object which may be used as a\n * handle for the session, or NULL if BFD is not enabled according to \u0027cfg\u0027.\n * Also returns NULL if cfg is NULL. */\nstruct bfd *\nbfd_configure(struct bfd *bfd, const char *name, const struct smap *cfg,\n              struct netdev *netdev) OVS_EXCLUDED(mutex)\n{\n    static atomic_count udp_src = ATOMIC_COUNT_INIT(0);\n\n    int decay_min_rx;\n    long long int min_tx, min_rx;\n    bool need_poll = false;\n    bool cfg_min_rx_changed = false;\n    bool cpath_down, forwarding_if_rx;\n\n    if (!cfg || !smap_get_bool(cfg, \"enable\", false)) {\n        bfd_unref(bfd);\n        return NULL;\n    }\n\n    ovs_mutex_lock(&mutex);\n    if (!bfd) {\n        bfd = xzalloc(sizeof *bfd);\n        bfd-\u003ename = xstrdup(name);\n        bfd-\u003eforwarding_override = -1;\n        bfd-\u003edisc = generate_discriminator();\n        hmap_insert(all_bfds, &bfd-\u003enode, bfd-\u003edisc);\n\n        bfd-\u003ediag = DIAG_NONE;\n        bfd-\u003emin_tx = 1000;\n        bfd-\u003emult = 3;\n        ovs_refcount_init(&bfd-\u003eref_cnt);\n        bfd-\u003enetdev = netdev_ref(netdev);\n        bfd-\u003erx_packets = bfd_rx_packets(bfd);\n        bfd-\u003ein_decay = false;\n        bfd-\u003eflap_count = 0;\n\n        /* RFC 5881 section 4\n         * The source port MUST be in the range 49152 through 65535.  The same\n         * UDP source port number MUST be used for all BFD Control packets\n         * associated with a particular session.  The source port number SHOULD\n         * be unique among all BFD sessions on the system. */\n        bfd-\u003eudp_src = (atomic_count_inc(&udp_src) % 16384) + 49152;\n\n        bfd_set_state(bfd, STATE_DOWN, DIAG_NONE);\n\n        bfd_status_changed(bfd);\n    }\n\n    bfd-\u003eoam = smap_get_bool(cfg, \"oam\", false);\n\n    atomic_store_relaxed(&bfd-\u003echeck_tnl_key,\n                         smap_get_bool(cfg, \"check_tnl_key\", false));\n    min_tx = smap_get_int(cfg, \"min_tx\", 100);\n    min_tx = MAX(min_tx, 1);\n    if (bfd-\u003ecfg_min_tx != min_tx) {\n        bfd-\u003ecfg_min_tx = min_tx;\n        if (bfd-\u003estate != STATE_UP\n            || (!bfd_in_poll(bfd) && bfd-\u003ecfg_min_tx \u003c bfd-\u003emin_tx)) {\n            bfd-\u003emin_tx = bfd-\u003ecfg_min_tx;\n        }\n        need_poll = true;\n    }\n\n    min_rx = smap_get_int(cfg, \"min_rx\", 1000);\n    min_rx = MAX(min_rx, 1);\n    if (bfd-\u003ecfg_min_rx != min_rx) {\n        bfd-\u003ecfg_min_rx = min_rx;\n        if (bfd-\u003estate != STATE_UP\n            || (!bfd_in_poll(bfd) && bfd-\u003ecfg_min_rx \u003e bfd-\u003emin_rx)) {\n            bfd-\u003emin_rx = bfd-\u003ecfg_min_rx;\n        }\n        cfg_min_rx_changed = true;\n        need_poll = true;\n    }\n\n    decay_min_rx = smap_get_int(cfg, \"decay_min_rx\", 0);\n    if (bfd-\u003edecay_min_rx != decay_min_rx || cfg_min_rx_changed) {\n        if (decay_min_rx \u003e 0 && decay_min_rx \u003c bfd-\u003ecfg_min_rx) {\n            VLOG_WARN(\"%s: decay_min_rx cannot be less than %lld ms\",\n                      bfd-\u003ename, bfd-\u003ecfg_min_rx);\n            bfd-\u003edecay_min_rx = 0;\n        } else {\n            bfd-\u003edecay_min_rx = decay_min_rx;\n        }\n        /* Resets decay. */\n        bfd-\u003ein_decay = false;\n        bfd_decay_update(bfd);\n        need_poll = true;\n    }\n\n    cpath_down = smap_get_bool(cfg, \"cpath_down\", false);\n    if (bfd-\u003ecpath_down != cpath_down) {\n        bfd-\u003ecpath_down = cpath_down;\n        bfd_set_state(bfd, bfd-\u003estate, DIAG_NONE);\n        need_poll = true;\n    }\n\n    eth_addr_from_string(smap_get_def(cfg, \"bfd_local_src_mac\", \"\"),\n                         &bfd-\u003elocal_eth_src);\n    eth_addr_from_string(smap_get_def(cfg, \"bfd_local_dst_mac\", \"\"),\n                         &bfd-\u003elocal_eth_dst);\n    eth_addr_from_string(smap_get_def(cfg, \"bfd_remote_dst_mac\", \"\"),\n                         &bfd-\u003ermt_eth_dst);\n\n    bfd_lookup_ip(smap_get_def(cfg, \"bfd_src_ip\", \"\"),\n                  htonl(0xA9FE0101) /* 169.254.1.1 */, &bfd-\u003eip_src);\n    bfd_lookup_ip(smap_get_def(cfg, \"bfd_dst_ip\", \"\"),\n                  htonl(0xA9FE0100) /* 169.254.1.0 */, &bfd-\u003eip_dst);\n\n    forwarding_if_rx = smap_get_bool(cfg, \"forwarding_if_rx\", false);\n    if (bfd-\u003eforwarding_if_rx != forwarding_if_rx) {\n        bfd-\u003eforwarding_if_rx = forwarding_if_rx;\n        if (bfd-\u003estate == STATE_UP && bfd-\u003eforwarding_if_rx) {\n            bfd_forwarding_if_rx_update(bfd);\n        } else {\n            bfd-\u003eforwarding_if_rx_detect_time = 0;\n        }\n    }\n\n    if (need_poll) {\n        bfd_poll(bfd);\n    }\n    ovs_mutex_unlock(&mutex);\n    return bfd;\n}\n```\n可以看到上述代码对BFD的控制报文的相关设置基本覆盖，接下来就是如何把BFD报文编码交给内核进行进一步处理\n\n```\n/* Executes, against \u0027dpif\u0027, up to the first \u0027n_ops\u0027 operations in \u0027ops\u0027.\n * Returns the number actually executed (at least 1, if \u0027n_ops\u0027 is\n * positive). */\nstatic size_t\ndpif_netlink_operate__(struct dpif_netlink *dpif,\n                       struct dpif_op **ops, size_t n_ops)\n{\n    enum { MAX_OPS = 50 };\n\n    struct op_auxdata {\n        struct nl_transaction txn;\n\n        struct ofpbuf request;\n        uint64_t request_stub[1024 / 8];\n\n        struct ofpbuf reply;\n        uint64_t reply_stub[1024 / 8];\n    } auxes[MAX_OPS];\n\n    struct nl_transaction *txnsp[MAX_OPS];\n    size_t i;\n\n    n_ops = MIN(n_ops, MAX_OPS);\n    for (i = 0; i \u003c n_ops; i++) {\n        struct op_auxdata *aux = &auxes[i];\n        struct dpif_op *op = ops[i];\n        struct dpif_flow_put *put;\n        struct dpif_flow_del *del;\n        struct dpif_flow_get *get;\n        struct dpif_netlink_flow flow;\n\n        ofpbuf_use_stub(&aux-\u003erequest,\n                        aux-\u003erequest_stub, sizeof aux-\u003erequest_stub);\n        aux-\u003etxn.request = &aux-\u003erequest;\n\n        ofpbuf_use_stub(&aux-\u003ereply, aux-\u003ereply_stub, sizeof aux-\u003ereply_stub);\n        aux-\u003etxn.reply = NULL;\n\n        switch (op-\u003etype) {\n        case DPIF_OP_FLOW_PUT:\n            put = &op-\u003eu.flow_put;\n            dpif_netlink_init_flow_put(dpif, put, &flow);\n            if (put-\u003estats) {\n                flow.nlmsg_flags |= NLM_F_ECHO;\n                aux-\u003etxn.reply = &aux-\u003ereply;\n            }\n            dpif_netlink_flow_to_ofpbuf(&flow, &aux-\u003erequest);\n            break;\n\n        case DPIF_OP_FLOW_DEL:\n            del = &op-\u003eu.flow_del;\n            dpif_netlink_init_flow_del(dpif, del, &flow);\n            if (del-\u003estats) {\n                flow.nlmsg_flags |= NLM_F_ECHO;\n                aux-\u003etxn.reply = &aux-\u003ereply;\n            }\n            dpif_netlink_flow_to_ofpbuf(&flow, &aux-\u003erequest);\n            break;\n\n        case DPIF_OP_EXECUTE:\n            /* Can\u0027t execute a packet that won\u0027t fit in a Netlink attribute. */\n            if (OVS_UNLIKELY(nl_attr_oversized(\n                                 dp_packet_size(op-\u003eu.execute.packet)))) {\n                /* Report an error immediately if this is the first operation.\n                 * Otherwise the easiest thing to do is to postpone to the next\n                 * call (when this will be the first operation). */\n                if (i == 0) {\n                    VLOG_ERR_RL(&error_rl,\n                                \"dropping oversized %\"PRIu32\"-byte packet\",\n                                dp_packet_size(op-\u003eu.execute.packet));\n                    op-\u003eerror = ENOBUFS;\n                    return 1;\n                }\n                n_ops = i;\n            } else {\n                dpif_netlink_encode_execute(dpif-\u003edp_ifindex, &op-\u003eu.execute,\n                                            &aux-\u003erequest);\n            }\n            break;\n\n        case DPIF_OP_FLOW_GET:\n            get = &op-\u003eu.flow_get;\n            dpif_netlink_init_flow_get(dpif, get, &flow);\n            aux-\u003etxn.reply = get-\u003ebuffer;\n            dpif_netlink_flow_to_ofpbuf(&flow, &aux-\u003erequest);\n            break;\n\n        default:\n            OVS_NOT_REACHED();\n        }\n    }\n\n    for (i = 0; i \u003c n_ops; i++) {\n        txnsp[i] = &auxes[i].txn;\n    }\n    nl_transact_multiple(NETLINK_GENERIC, txnsp, n_ops);\n\n    for (i = 0; i \u003c n_ops; i++) {\n        struct op_auxdata *aux = &auxes[i];\n        struct nl_transaction *txn = &auxes[i].txn;\n        struct dpif_op *op = ops[i];\n        struct dpif_flow_put *put;\n        struct dpif_flow_del *del;\n        struct dpif_flow_get *get;\n\n        op-\u003eerror = txn-\u003eerror;\n\n        switch (op-\u003etype) {\n        case DPIF_OP_FLOW_PUT:\n            put = &op-\u003eu.flow_put;\n            if (put-\u003estats) {\n                if (!op-\u003eerror) {\n                    struct dpif_netlink_flow reply;\n\n                    op-\u003eerror = dpif_netlink_flow_from_ofpbuf(&reply,\n                                                              txn-\u003ereply);\n                    if (!op-\u003eerror) {\n                        dpif_netlink_flow_get_stats(&reply, put-\u003estats);\n                    }\n                }\n            }\n            break;\n\n        case DPIF_OP_FLOW_DEL:\n            del = &op-\u003eu.flow_del;\n            if (del-\u003estats) {\n                if (!op-\u003eerror) {\n                    struct dpif_netlink_flow reply;\n\n                    op-\u003eerror = dpif_netlink_flow_from_ofpbuf(&reply,\n                                                              txn-\u003ereply);\n                    if (!op-\u003eerror) {\n                        dpif_netlink_flow_get_stats(&reply, del-\u003estats);\n                    }\n                }\n            }\n            break;\n\n        case DPIF_OP_EXECUTE:\n            break;\n\n        case DPIF_OP_FLOW_GET:\n            get = &op-\u003eu.flow_get;\n            if (!op-\u003eerror) {\n                struct dpif_netlink_flow reply;\n\n                op-\u003eerror = dpif_netlink_flow_from_ofpbuf(&reply, txn-\u003ereply);\n                if (!op-\u003eerror) {\n                    dpif_netlink_flow_to_dpif_flow(&dpif-\u003edpif, get-\u003eflow,\n                                                   &reply);\n                }\n            }\n            break;\n\n        default:\n            OVS_NOT_REACHED();\n        }\n\n        ofpbuf_uninit(&aux-\u003erequest);\n        ofpbuf_uninit(&aux-\u003ereply);\n    }\n\n    return n_ops;\n}\n\n```\n\n这里仍然是调用Netlink的协议族，以OVS_PACKET_CMD_EXECUTE来标识消息类型，当内核收到该类型消息后会相应的调用ovs_packet_cmd_execute方法进行处理\n\n```\nstatic int ovs_packet_cmd_execute(struct sk_buff *skb, struct genl_info *info)\n{\n\tstruct ovs_header *ovs_header = info-\u003euserhdr;\n\tstruct net *net = sock_net(skb-\u003esk);\n\tstruct nlattr **a = info-\u003eattrs;\n\tstruct sw_flow_actions *acts;\n\tstruct sk_buff *packet;\n\tstruct sw_flow *flow;\n\tstruct sw_flow_actions *sf_acts;\n\tstruct datapath *dp;\n\tstruct ethhdr *eth;\n\tstruct vport *input_vport;\n\tu16 mru = 0;\n\tint len;\n\tint err;\n\tbool log = !a[OVS_PACKET_ATTR_PROBE];\n\n\terr = -EINVAL;\n\tif (!a[OVS_PACKET_ATTR_PACKET] || !a[OVS_PACKET_ATTR_KEY] ||\n\t    !a[OVS_PACKET_ATTR_ACTIONS])\n\t\tgoto err;\n\n\tlen = nla_len(a[OVS_PACKET_ATTR_PACKET]);\n\tpacket = __dev_alloc_skb(NET_IP_ALIGN + len, GFP_KERNEL);\n\terr = -ENOMEM;\n\tif (!packet)\n\t\tgoto err;\n\tskb_reserve(packet, NET_IP_ALIGN);\n\n\tnla_memcpy(__skb_put(packet, len), a[OVS_PACKET_ATTR_PACKET], len);\n\n\tskb_reset_mac_header(packet);\n\teth = eth_hdr(packet);\n\n\t/* Normally, setting the skb \u0027protocol\u0027 field would be handled by a\n\t * call to eth_type_trans(), but it assumes there\u0027s a sending\n\t * device, which we may not have.\n\t */\n\tif (eth_proto_is_802_3(eth-\u003eh_proto))\n\t\tpacket-\u003eprotocol = eth-\u003eh_proto;\n\telse\n\t\tpacket-\u003eprotocol = htons(ETH_P_802_2);\n\n\t/* Set packet\u0027s mru */\n\tif (a[OVS_PACKET_ATTR_MRU]) {\n\t\tmru = nla_get_u16(a[OVS_PACKET_ATTR_MRU]);\n\t\tpacket-\u003eignore_df = 1;\n\t}\n\tOVS_CB(packet)-\u003emru = mru;\n\n\t/* Build an sw_flow for sending this packet. */\n\tflow = ovs_flow_alloc();\n\terr = PTR_ERR(flow);\n\tif (IS_ERR(flow))\n\t\tgoto err_kfree_skb;\n\n\terr = ovs_flow_key_extract_userspace(net, a[OVS_PACKET_ATTR_KEY],\n\t\t\t\t\t     packet, &flow-\u003ekey, log);\n\tif (err)\n\t\tgoto err_flow_free;\n\n\terr = ovs_nla_copy_actions(net, a[OVS_PACKET_ATTR_ACTIONS],\n\t\t\t\t   &flow-\u003ekey, &acts, log);\n\tif (err)\n\t\tgoto err_flow_free;\n\n\trcu_assign_pointer(flow-\u003esf_acts, acts);\n\tpacket-\u003epriority = flow-\u003ekey.phy.priority;\n\tpacket-\u003emark = flow-\u003ekey.phy.skb_mark;\n\n\trcu_read_lock();\n\tdp = get_dp_rcu(net, ovs_header-\u003edp_ifindex);\n\terr = -ENODEV;\n\tif (!dp)\n\t\tgoto err_unlock;\n\n\tinput_vport = ovs_vport_rcu(dp, flow-\u003ekey.phy.in_port);\n\tif (!input_vport)\n\t\tinput_vport = ovs_vport_rcu(dp, OVSP_LOCAL);\n\n\tif (!input_vport)\n\t\tgoto err_unlock;\n\n\tpacket-\u003edev = input_vport-\u003edev;\n\tOVS_CB(packet)-\u003einput_vport = input_vport;\n\tsf_acts = rcu_dereference(flow-\u003esf_acts);\n\n\tlocal_bh_disable();\n\terr = ovs_execute_actions(dp, packet, sf_acts, &flow-\u003ekey);\n\tlocal_bh_enable();\n\trcu_read_unlock();\n\n\tovs_flow_free(flow, false);\n\treturn err;\n\nerr_unlock:\n\trcu_read_unlock();\nerr_flow_free:\n\tovs_flow_free(flow, false);\nerr_kfree_skb:\n\tkfree_skb(packet);\nerr:\n\treturn err;\n}\n```\n这个处理函数会调用到相应的Output方法，将报文从相应的端口发送出去，而对应的，BFD的状态机的维护和对应的处理都在控制面，所以在数据面收到相关的BFD报文时是要上送到控制面进行处理的。\n\n```\nenum upcall_type {\n    BAD_UPCALL,                 /* Some kind of bug somewhere. */\n    MISS_UPCALL,                /* A flow miss.  */\n    SFLOW_UPCALL,               /* sFlow sample. */\n    FLOW_SAMPLE_UPCALL,         /* Per-flow sampling. */\n    IPFIX_UPCALL                /* Per-bridge sampling. */\n};\n\n```\n\n```\n/* A packet passed up from the datapath to userspace.\n *\n * The \u0027packet\u0027, \u0027key\u0027 and \u0027userdata\u0027 may point into data in a buffer\n * provided by the caller, so the buffer should be released only after the\n * upcall processing has been finished.\n *\n * While being processed, the \u0027packet\u0027 may be reallocated, so the packet must\n * be separately released with ofpbuf_uninit().\n */\nstruct dpif_upcall {\n    /* All types. */\n    struct dp_packet packet;    /* Packet data,\u0027dp_packet\u0027 should be the first\n\t\t\t\t   member to avoid a hole. This is because\n\t\t\t\t   \u0027rte_mbuf\u0027 in dp_packet is aligned atleast\n\t\t\t\t   on a 64-byte boundary */\n    enum dpif_upcall_type type;\n    struct nlattr *key;         /* Flow key. */\n    size_t key_len;             /* Length of \u0027key\u0027 in bytes. */\n    ovs_u128 ufid;              /* Unique flow identifier for \u0027key\u0027. */\n    struct nlattr *mru;         /* Maximum receive unit. */\n    struct nlattr *cutlen;      /* Number of bytes shrink from the end. */\n\n    /* DPIF_UC_ACTION only. */\n    struct nlattr *userdata;    /* Argument to OVS_ACTION_ATTR_USERSPACE. */\n    struct nlattr *out_tun_key;    /* Output tunnel key. */\n    struct nlattr *actions;    /* Argument to OVS_ACTION_ATTR_USERSPACE. */\n};\n```\n从上述代码可以看出Upcall的消息类型，这里面BFD的控制报文会以MISS_UPCALL的消息类型经过Datapath模块调用Upcall上送到控制面进行处理","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-12] [chx]
[INFO] 2017-07-28 12:44:29 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74132477 [pool-2-thread-2] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【JAVA 提高班之一】集合大家族》成功 [pool-2-thread-7] [chx]
[INFO] 2017-07-28 12:44:29 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-06-【OpenVswitch源码分析之五】用户空间转发面数据结构与流程.markdown [pool-2-thread-11] [chx]
[INFO] 2017-07-28 12:44:30 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-02-【OpenVswitch源码分析之四】控制面关键接口与调用流程.markdown [pool-2-thread-12] [chx]
[INFO] 2017-07-28 12:44:30 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:31)] -> {"status":true,"error":"","data":{"id":74132477,"title":"【OpenVswitch源码分析之三】控制面关键接口与调用流程","create_at":"\/Date(1498985330000)\/","create":"2017-07-02 04:48:50","view_count":263,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"控制面总览 \n上图只是描述了控制面的调用流程，控制面的接口包括如下几各方面： \n1. 虚拟设备的生命周期接口 \n2. 虚拟设备的业务配置接口 \n3. 二层基础协议的运行启动 \n4. Openflow协议的运行开启与流表下发 \n下面就这几个层面的分别简述一下虚拟设备的生命周期接口虚拟设备不同于物理设备，除了FCAPS管理之外还需要对其生命周期进行管理，在OVS中，设备类型被分成了很多类（图中只标注了四","url":"http://blog.csdn.net/BLACKMOON88/article/details/74132477","categories":"云计算,C语言算法,OpenVswitch","tags":"源码,open flow","content":"\u003ch2 id=\"控制面总览\"\u003e控制面总览\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20170702094534464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"OpenVswitch call stack\" title=\"\"\u003e \u003cbr\u003e\n上图只是描述了控制面的调用流程，控制面的接口包括如下几各方面： \u003cbr\u003e\n1. 虚拟设备的生命周期接口 \u003cbr\u003e\n2. 虚拟设备的业务配置接口 \u003cbr\u003e\n3. 二层基础协议的运行启动 \u003cbr\u003e\n4. Openflow协议的运行开启与流表下发 \u003cbr\u003e\n下面就这几个层面的分别简述一下\u003c/p\u003e\n\n\n\n\u003ch3 id=\"虚拟设备的生命周期接口\"\u003e虚拟设备的生命周期接口\u003c/h3\u003e\n\n\u003cp\u003e虚拟设备不同于物理设备，除了FCAPS管理之外还需要对其生命周期进行管理，在OVS中，设备类型被分成了很多类（图中只标注了四类）：Netdev-linux，Netdev-internal，Netdev-bsd，Netdev-tap等，生命周期类的接口采用的是设备文件描述符+ioctl接口，但是ioctl接口只是一个单工的用户态向内核态通信的接口，而从内核态向用户态传递设备状态的接口仍然是Netlink接口，这里Netlink会订阅NETLINK_ROUTE协议类型的信息。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs vbscript\"\u003estruct netdev_class {\n    /* Type of netdevs \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e, e.g. \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"tap\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"gre\"\u003c/span\u003e, etc.\n     *\n     * One of the providers should supply a \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e type, since this \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * the type assumed \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e no type \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e specified when opening a netdev.\n     * The \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e type corresponds \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e an existing network device \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\n     * the system. */\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *type;\n\n    /* \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027true\u0027 then this netdev should be polled by PMD threads. */\u003c/span\u003e\n    bool is_pmd;\n\n/* ## ------------------- ## */\n/* ## Top-Level Functions ## */\n/* ## ------------------- ## */\n\n    /* Called when the netdev provider \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e registered, typically at program\n     * startup.  Returning an \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e from this \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e will prevent any network\n     * device \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e from being opened.\n     *\n     * This \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e may be \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e a network device \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e needs no\n     * initialization at registration \u003cspan class=\"hljs-built_in\"\u003etime\u003c/span\u003e. */\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*init)(void);\n\n    /* Performs periodic work needed by netdevs of this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e.  May be \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e\n     * no periodic work \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e necessary.\n     *\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027netdev_class\u0027 points to the class.  It is useful in case the same\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e implement different classes. */\n    void (*run)(\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct netdev_class *netdev_class);\n\n    /* Arranges \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e poll_block() \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e wake up \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e the \u003cspan class=\"hljs-string\"\u003e\"run\"\u003c/span\u003e member \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e needs\n     * \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be called.  Implementations are additionally required \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e wake\n     * whenever something changes \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e any of its netdevs which would cause their\n     * -&gt;change_seq() \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e change its result.  May be \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enothing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * needed here.\n     *\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027netdev_class\u0027 points to the class.  It is useful in case the same\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e implement different classes. */\n    void (*wait)(\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct netdev_class *netdev_class);\n\n/* ## ---------------- ## */\n/* ## netdev Functions ## */\n/* ## ---------------- ## */\n\n    /* Life-cycle functions \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a netdev.  See the large comment above \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\n     * struct netdev_class. */\n    struct netdev *(*alloc)(void);\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*construct)(struct netdev *);\n    void (*destruct)(struct netdev *);\n    void (*dealloc)(struct netdev *);\n};\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e除了Netdev的生命周期管理还有内核Datapath的生命周期管理，不过这部分接口是存在于dpif中的，相关代码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs vbscript\"\u003e    /* Datapath interface \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e structure, \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be defined by \u003cspan class=\"hljs-keyword\"\u003eeach\u003c/span\u003e implementation of\n * a datapath interface.\n *\n * These functions return \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e successful \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e a positive errno value \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e failure,\n * except where otherwise noted.\n *\n * These functions are expected \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eexecute\u003c/span\u003e synchronously, that \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e block as\n * necessary \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e obtain a result.  Thus, they may \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e return EAGAIN \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e\n * EWOULDBLOCK \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e EINPROGRESS.  We may relax this requirement \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the future \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e when we encounter performance problems. */\nstruct dpif_class {\n    /* Type of dpif \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e, e.g. \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"netdev\"\u003c/span\u003e, etc.\n     *\n     * One of the providers should supply a \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e type, since this \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * the type assumed \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e no type \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e specified when opening a dpif. */\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *type;\n\n    /* Called when the dpif provider \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e registered, typically at program\n     * startup.  Returning an \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e from this \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e will prevent any\n     * datapath \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e from being created.\n     *\n     * This \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e may be \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e a datapath \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e needs no\n     * initialization at registration \u003cspan class=\"hljs-built_in\"\u003etime\u003c/span\u003e. */\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*init)(void);\n\n    /* Enumerates the names of all known created datapaths (of \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027dpif_class\u0027), if possible, into \u0027all_dps\u0027.  The caller has already\u003c/span\u003e\n     * initialized \u003cspan class=\"hljs-comment\"\u003e\u0027all_dps\u0027 and other dpif classes might already have added\u003c/span\u003e\n     * names \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e it.\n     *\n     * This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e used by the vswitch at startup, so that it can delete any\n     * datapaths that are \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e configured.\n     *\n     * Some kinds of datapaths might \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e be practically enumerable, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e which\n     * \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e may be a \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e pointer. */\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*enumerate)(struct sset *all_dps, \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct dpif_class *dpif_class);\n\n    /* Returns the type \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e pass \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e netdev_open() when a dpif of \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027dpif_class\u0027 has a port of type \u0027type\u0027, for a few special cases\u003c/span\u003e\n     * when a netdev type differs from a port type.  \u003cspan class=\"hljs-keyword\"\u003eFor\u003c/span\u003e example, when\n     * using the userspace datapath, a port of type \u003cspan class=\"hljs-string\"\u003e\"internal\"\u003c/span\u003e needs \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e\n     * be opened as \u003cspan class=\"hljs-string\"\u003e\"tap\"\u003c/span\u003e.\n     *\n     * Returns either \u003cspan class=\"hljs-comment\"\u003e\u0027type\u0027 itself or a string literal, which must not\u003c/span\u003e\n     * be freed. */\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *(*port_open_type)(\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct dpif_class *dpif_class,\n                                  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *type);\n\n    /* Attempts \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e open an existing dpif called \u003cspan class=\"hljs-comment\"\u003e\u0027name\u0027, if \u0027create\u0027 is false,\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e open an existing dpif \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e create a \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e one, \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027create\u0027 is true.\u003c/span\u003e\n     *\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027dpif_class\u0027 is the class of dpif to open.\u003c/span\u003e\n     *\n     * \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e successful, stores a pointer \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e the \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e dpif \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027*dpifp\u0027, which must\u003c/span\u003e\n     * have \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027dpif_class\u0027.  On failure there are no requirements on what\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e stored \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027*dpifp\u0027. */\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*open)(\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct dpif_class *dpif_class,\n                \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *name, bool create, struct dpif **dpifp);\n\n    /* Closes \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027 and frees associated memory. */\u003c/span\u003e\n    void (*close)(struct dpif *dpif);\n\n    /* Attempts \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e destroy the dpif underlying \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027.\u003c/span\u003e\n     *\n     * \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e successful, \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027 will not be used again except as an argument for\u003c/span\u003e\n     * the \u003cspan class=\"hljs-comment\"\u003e\u0027close\u0027 member function. */\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*destroy)(struct dpif *dpif);\n\n    /* Performs periodic work needed by \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027, if any is necessary.\u003c/span\u003e\n     * Returns \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e revalidate. */\n    bool (*run)(struct dpif *dpif);\n\n    /* Arranges \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e poll_block() \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e wake up \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e the \u003cspan class=\"hljs-string\"\u003e\"run\"\u003c/span\u003e member \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e needs\n     * \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be called \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027. */\u003c/span\u003e\n    void (*wait)(struct dpif *dpif);\n};\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch3 id=\"虚拟设备的业务配置接口\"\u003e虚拟设备的业务配置接口\u003c/h3\u003e\n\n\u003cp\u003e虚拟设备的业务配置接口也同样在上数两个类中，除了设备的直接配置还会有设备的组合配置，比如把Netdev绑定到Datapath中\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs mizar\"\u003e\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_class {\n    /* Fetches the device \u0027netdev\u0027\u0027s configuration, storing it \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027args\u0027.\n     * The caller owns \u0027args\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e pre-initializes it to an empty smap.\n     *\n     * If this netdev class does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have any configuration options, this may\n     * \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e a null pointer. */\n    int (*get_config)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *args);\n\n    /* Changes the device \u0027netdev\u0027\u0027s configuration to \u0027args\u0027.\n     *\n     * If this netdev class does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support configuration, this may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e a null\n     * pointer.\n     *\n     * If the return value \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e zero (meaning \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e an error occurred),\n     * the provider can allocate a string with an error message \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027*errp\u0027.\n     * The caller has to call free on it. */\n    int (*set_config)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *args,\n                      char **errp);\n\n    /* Returns the tunnel configuration \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027netdev\u0027.  If \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e a tunnel, returns null.\n     *\n     * If this function would always return null, it may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e null instead. */\n    const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_tunnel_config *\n        (*get_tunnel_config)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n\n    /* Build Tunnel header.  Ethernet \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e ip header parameters are passed to\n     * tunnel implementation to build entire outer header \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e given flow. */\n    int (*build_header)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e ovs_action_push_tnl *data,\n                        const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_tnl_build_header_params *params);\n\n    /* build_header() can \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e build entire header \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e all packets \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e given\n     * flow.  Push header \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e called \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e packet to build header specific to\n     * a packet on actual transmit.  It uses partial header build \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e\n     * build_header() which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e passed \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e data. */\n    void (*push_header)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet *packet,\n                        const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e ovs_action_push_tnl *data);\n\n    /* Pop tunnel header \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e packet, build tunnel metadata \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e resize packet\n     * \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e further processing.\n     * Returns NULL \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e case \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e error \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e tunnel implementation queued packet \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e further\n     * processing. */\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet * (*pop_header)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet *packet);\n\n    /* Returns the id \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the numa node the \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e on.  If there \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e no\n     * \u003cspan class=\"hljs-keyword\"\u003esuch\u003c/span\u003e info, returns NETDEV_NUMA_UNSPEC. */\n    int (*get_numa_id)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n\n    /* Configures the number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e tx queues \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027netdev\u0027. Returns 0 if successful,\n     * otherwise a positive errno value.\n     *\n     * \u0027n_txq\u0027 specifies the exact number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e transmission queues to create.\n     *\n     * The caller will call netdev_reconfigure() (if necessary) before using\n     * netdev_send() on any \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the newly configured queues, giving the provider\n     * a chance to adjust its settings.\n     *\n     * On error, the tx queue configuration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unchanged. */\n    int (*set_tx_multiq)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, unsigned int n_txq);\n\n    /* Sends buffers on \u0027netdev\u0027.\n     * Returns 0 if successful (\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e every buffer), otherwise a positive errno\n     * value.  Returns EAGAIN without blocking if one \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e more packets cannot \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * queued immediately. Returns EMSGSIZE if a partial packet was transmitted\n     * \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e if a packet \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e too big \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e too small to transmit on the device.\n     *\n     * If the function returns a non-zero value, some \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the packets might have\n     * been sent anyway.\n     *\n     * If \u0027may_steal\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e false, the caller retains ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e all the\n     * packets.  If \u0027may_steal\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e true, the caller transfers ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e all\n     * the packets to the network device, regardless \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e success.\n     *\n     * If \u0027concurrent_txq\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e true, the caller may perform concurrent calls\n     * to netdev_send() with the same \u0027qid\u0027. The netdev provider \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e responsible\n     * \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e making sure \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e these concurrent calls do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e create a race\n     * condition \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e using locking \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e other synchronization if required.\n     *\n     * The network device \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e expected to maintain one \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e more packet\n     * transmission queues, so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e the caller does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e ordinarily have to\n     * do additional queuing \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packets.  \u0027qid\u0027 specifies the queue to use\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e can \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e ignored if the implementation does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support multiple\n     * queues.\n     *\n     * May return EOPNOTSUPP if a network device does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e implement packet\n     * transmission through this interface.  This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null\n     * if it would always return EOPNOTSUPP anyhow.  (This will prevent the\n     * network device \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ebeing\u003c/span\u003e usefully used \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the netdev-based \"userspace\n     * datapath\".  It will also prevent the OVS implementation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e bonding \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e\n     * working properly over \u0027netdev\u0027.) */\n    int (*send)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, int qid, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet_batch *batch,\n                bool may_steal, bool concurrent_txq);\n\n    /* Registers with the poll loop to wake up \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e the next call to\n     * poll_block() when the packet transmission queue \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027 has\n     * sufficient room to transmit a packet with netdev_send().\n     *\n     * The network device \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e expected to maintain one \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e more packet\n     * transmission queues, so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e the caller does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e ordinarily have to\n     * do additional queuing \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packets.  \u0027qid\u0027 specifies the queue to use\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e can \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e ignored if the implementation does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support multiple\n     * queues.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e null if \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e needed, \u003cspan class=\"hljs-keyword\"\u003esuch\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a network device \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e\n     * implement packet transmission through the \u0027send\u0027 member function. */\n    void (*send_wait)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, int qid);\n\n    /* Sets \u0027netdev\u0027\u0027s Ethernet address to \u0027mac\u0027 */\n    int (*set_etheraddr)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e eth_addr mac);\n\n    /* Retrieves \u0027netdev\u0027\u0027s Ethernet address into \u0027mac\u0027.\n     *\n     * This address will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e advertised \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u0027netdev\u0027\u0027s MAC address through the\n     * OpenFlow protocol, among other uses. */\n    int (*get_etheraddr)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e eth_addr *mac);\n\n    /* Retrieves \u0027netdev\u0027\u0027s MTU into \u0027*mtup\u0027.\n     *\n     * The MTU \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e the maximum size \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e transmitted (\u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e received) packets, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * bytes, \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e including the hardware header; \u003cspan class=\"hljs-keyword\"\u003ethus\u003c/span\u003e, this \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e typically 1500\n     * bytes \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e Ethernet devices.\n     *\n     * If \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have an MTU (e.g. \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e some tunnels do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e), \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e\n     * this function should return EOPNOTSUPP.  This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to\n     * null if it would always return EOPNOTSUPP. */\n    int (*get_mtu)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, int *mtup);\n\n    /* Sets \u0027netdev\u0027\u0027s MTU to \u0027mtu\u0027.\n     *\n     * If \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have an MTU (e.g. \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e some tunnels do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e), \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e\n     * this function should return EOPNOTSUPP.  This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to\n     * null if it would always return EOPNOTSUPP. */\n    int (*set_mtu)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, int mtu);\n\n    /* Returns the ifindex \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027netdev\u0027, if successful, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a positive number.\n     * On failure, returns a negative errno value.\n     *\n     * The desired semantics \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the ifindex value are a combination \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e those\n     * specified \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e POSIX \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e if_nametoindex() \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e SNMP \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e ifIndex.  An\n     * ifindex value should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e unique within a host \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e remain stable at least\n     * until reboot.  SNMP says an ifindex \"ranges between 1 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e the value \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * ifNumber\" but many systems do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e follow this rule anyhow.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return -EOPNOTSUPP.\n     */\n    int (*get_ifindex)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n\n    /* Sets \u0027carrier\u0027 to true if carrier \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e active (link light \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e on) on\n     * \u0027netdev\u0027.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e null if device does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e provide carrier status (will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e always\n     * up \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e long \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e device \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e up).\n     */\n    int (*get_carrier)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, bool *carrier);\n\n    /* Returns the number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e times \u0027netdev\u0027\u0027s carrier has changed since \u003cspan class=\"hljs-keyword\"\u003ebeing\u003c/span\u003e\n     * initialized.\n     *\n     * If null, callers will \u003cspan class=\"hljs-keyword\"\u003eassume\u003c/span\u003e the number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e carrier resets \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e zero. */\n    long long int (*get_carrier_resets)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n\n    /* Forces -&gt;get_carrier() to poll \u0027netdev\u0027\u0027s MII registers \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e link status\n     * instead \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e checking \u0027netdev\u0027\u0027s carrier.  \u0027netdev\u0027\u0027s MII registers will\n     * \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e polled once every \u0027interval\u0027 milliseconds.  If \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e\n     * support MII, another method may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e used \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a fallback.  If \u0027interval\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * less than \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e equal to zero, reverts -&gt;get_carrier() to its normal\n     * behavior.\n     *\n     * Most network devices won\u0027t support this feature \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e will \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e this\n     * function pointer to NULL, which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e equivalent to returning EOPNOTSUPP.\n     */\n    int (*set_miimon_interval)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, long long int interval);\n\n    /* Retrieves current device stats \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027 into \u0027stats\u0027.\n     *\n     * A network device \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e supports some statistics but \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e others, it should\n     * \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the values \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the unsupported statistics to all-1-bits\n     * (UINT64_MAX). */\n    int (*get_stats)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_stats *);\n\n    /* Stores the features supported \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027netdev\u0027 into each \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027*current\u0027,\n     * \u0027*advertised\u0027, \u0027*supported\u0027, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027*peer\u0027.  Each value \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a bitmap \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * NETDEV_F_* bits.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP.\n     */\n    int (*get_features)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                        enum netdev_features *current,\n                        enum netdev_features *advertised,\n                        enum netdev_features *supported,\n                        enum netdev_features *peer);\n\n    /* Set the features advertised \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027netdev\u0027 to \u0027advertise\u0027, which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a\n     * \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e NETDEV_F_* bits.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a network device \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e\n     * support configuring advertisements. */\n    int (*set_advertisements)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                              enum netdev_features advertise);\n\n    /* Attempts to \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e input rate limiting (policing) policy, \u003cspan class=\"hljs-keyword\"\u003esuch\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e up to\n     * \u0027kbits_rate\u0027 kbps \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e traffic \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e accepted, with a maximum accumulative\n     * burst size \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027kbits\u0027 kb.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if policing \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e supported. */\n    int (*set_policing)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, unsigned int kbits_rate,\n                        unsigned int kbits_burst);\n\n    /* Adds to \u0027types\u0027 all \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the forms \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS supported \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027netdev\u0027, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e leaves\n     * it empty if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS.  Any names added to \u0027types\u0027\n     * should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the \"type\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"QoS\" table\n     * \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e ovs-vswitchd.conf.db(8)).\n     *\n     * Every network device must support disabling QoS with a type \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \"\", but\n     * this function must \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e add \"\" to \u0027types\u0027.\n     *\n     * The caller \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e responsible \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e initializing \u0027types\u0027 (e.g. with\n     * sset_init()) before calling this function.  The caller retains ownership\n     * \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027types\u0027.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*get_qos_types)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e sset *types);\n\n    /* Queries \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e its capabilities regarding the specified \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * QoS.  On success, initializes \u0027caps\u0027 with the QoS capabilities.\n     *\n     * Should return EOPNOTSUPP if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support \u0027type\u0027.  May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*get_qos_capabilities)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                                const char *type,\n                                \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_qos_capabilities *caps);\n\n    /* Queries \u0027netdev\u0027 about its currently configured form \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS.  If\n     * successful, stores the name \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the current form \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS into \u0027*typep\u0027\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e any details \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e configuration \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e string key-value pairs \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * \u0027details\u0027.\n     *\n     * A \u0027*typep\u0027 \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \"\" indicates \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e QoS \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e currently disabled on \u0027netdev\u0027.\n     *\n     * The caller initializes \u0027details\u0027 before calling this function.  The\n     * caller takes ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the string key-values pairs added to\n     * \u0027details\u0027.\n     *\n     * The netdev retains ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027*typep\u0027.\n     *\n     * \u0027*typep\u0027 will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e one \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the types returned \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e netdev_get_qos_types() \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n     * \u0027netdev\u0027.  The contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n     * \u0027*typep\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"QoS\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e ovs-vswitchd.conf.db(8)).\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*get_qos)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                   const char **typep, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Attempts to reconfigure QoS on \u0027netdev\u0027, changing the form \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS to\n     * \u0027type\u0027 with details \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e configuration \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027details\u0027.\n     *\n     * On error, the previous QoS configuration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e retained.\n     *\n     * When this function changes the type \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS (\u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e just \u0027details\u0027), this\n     * also resets all queue configuration \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027 to their defaults\n     * (which depend on the specific type \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS).  Otherwise, the queue\n     * configuration \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unchanged.\n     *\n     * \u0027type\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \"\" (to disable QoS) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e one \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the types returned \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e\n     * netdev_get_qos_types() \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027.  The contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should\n     * \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the given \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column\n     * \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"QoS\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e\n     * ovs-vswitchd.conf.db(8)).\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*set_qos)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                   const char *type, const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Queries \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e information about the queue numbered \u0027queue_id\u0027.\n     * If successful, adds \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e information \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e string key-value pairs to\n     * \u0027details\u0027.  Returns 0 if successful, otherwise a positive errno value.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e greater than \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e equal to the\n     * number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e supported queues (\u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e reported \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \u0027n_queues\u0027 member \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_qos_capabilities \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027get_qos_capabilities\u0027).\n     *\n     * The caller initializes \u0027details\u0027 before calling this function.  The\n     * caller takes ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the string key-values pairs added to\n     * \u0027details\u0027.\n     *\n     * The returned contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the\n     * given \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"Queue\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e ovs-vswitchd.conf.db(8)).\n     */\n    int (*get_queue)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                     unsigned int queue_id, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Configures the queue numbered \u0027queue_id\u0027 on \u0027netdev\u0027 with the key-value\n     * string pairs \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027details\u0027.  The contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the given \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * the \"Queue\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e\n     * ovs-vswitchd.conf.db(8)).  Returns 0 if successful, otherwise a positive\n     * errno value.  On failure, the given queue\u0027s configuration should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * unmodified.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e greater than \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e equal to the\n     * number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e supported queues (\u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e reported \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \u0027n_queues\u0027 member \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_qos_capabilities \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027get_qos_capabilities\u0027), \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e if\n     * \u0027details\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e invalid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the type \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e queue.\n     *\n     * This function does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e modify \u0027details\u0027, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e the caller retains\n     * ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e it.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*set_queue)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                     unsigned int queue_id, const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Attempts to delete the queue numbered \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027netdev\u0027.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e greater than \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e equal to the\n     * number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e supported queues (\u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e reported \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \u0027n_queues\u0027 member \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_qos_capabilities \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027get_qos_capabilities\u0027).  Should\n     * return EOPNOTSUPP if \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e valid but may \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e deleted (e.g. if\n     * \u0027netdev\u0027 has a fixed \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e queues with the current QoS \u003cspan class=\"hljs-keyword\"\u003emode\u003c/span\u003e).\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e if all \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e its\n     * QoS modes have fixed sets \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e queues. */\n    int (*delete_queue)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, unsigned int queue_id);\n\n    /* Obtains statistics about \u0027queue_id\u0027 on \u0027netdev\u0027.  Fills \u0027stats\u0027 with the\n     * queue\u0027s statistics.  May \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e individual members \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027stats\u0027 to all-1-bits\n     * if the statistic \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unavailable.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*get_queue_stats)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, unsigned int queue_id,\n                           \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_queue_stats *stats);\n\n    /* Attempts to \u003cspan class=\"hljs-keyword\"\u003ebegin\u003c/span\u003e dumping the queues \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027netdev\u0027.  On success, returns 0\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e initializes \u0027*statep\u0027 with any data needed \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e iteration.  On\n     * failure, returns a positive errno value.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*queue_dump_start)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, void **statep);\n\n    /* Attempts to retrieve another queue \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027state\u0027, which was\n     * initialized \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e a successful call to the \u0027queue_dump_start\u0027 function \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n     * \u0027netdev\u0027.  On success, stores a queue ID into \u0027*queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e fills\n     * \u0027details\u0027 with the configuration \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the queue with \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e ID.  Returns EOF\n     * if the last queue has been dumped, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e a positive errno value on error.\n     * This function will \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e called again once it returns nonzero once \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n     * a given iteration (but the \u0027queue_dump_done\u0027 function will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e called\n     * afterward).\n     *\n     * The caller initializes \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e clears \u0027details\u0027 before calling this\n     * function.  The caller takes ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the string key-values pairs\n     * added to \u0027details\u0027.\n     *\n     * The returned contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the\n     * given \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"Queue\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e ovs-vswitchd.conf.db(8)).\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*queue_dump_next)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, void *state,\n                           unsigned int *queue_id, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Releases resources \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027state\u0027, which was initialized \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e a\n     * successful call to the \u0027queue_dump_start\u0027 function \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*queue_dump_done)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, void *state);\n\n    /* Iterates over all \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027netdev\u0027\u0027s queues, calling \u0027cb\u0027 with the queue\u0027s\n     * ID, its statistics, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e the \u0027aux\u0027 specified \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the caller.  The order \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * iteration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unspecified, but (when successful) each queue must \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * visited exactly once.\n     *\n     * \u0027cb\u0027 will \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e modify \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e free the statistics passed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e. */\n    int (*dump_queue_stats)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                            void (*cb)(unsigned int queue_id,\n                                       \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_queue_stats *,\n                                       void *aux),\n                            void *aux);\n\n    /* Assigns \u0027addr\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u0027netdev\u0027\u0027s IPv4 address \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027mask\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e its netmask.  If\n     * \u0027addr\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e INADDR_ANY, \u0027netdev\u0027\u0027s IPv4 address \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e cleared.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*set_in4)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr addr,\n                   \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr mask);\n\n    /* Returns all assigned IP address to  \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e returns 0.\n     * API allocates array \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e address \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e masks \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e it to\n     * \u0027*addr\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027*mask\u0027.\n     * Otherwise, returns a positive errno value \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e sets \u0027*addr\u0027, \u0027*mask\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027*n_addr\u0027 to NULL.\n     *\n     * The following error values have well-defined meanings:\n     *\n     *   - EADDRNOTAVAIL: \u0027netdev\u0027 has no assigned IPv6 address.\n     *\n     *   - EOPNOTSUPP: No IPv6 network stack attached to \u0027netdev\u0027.\n     *\n     * \u0027addr\u0027 may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e null, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e which case the address itself \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e reported. */\n    int (*get_addr_list)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr **\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e,\n                         \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr **mask, int *n_in6);\n\n    /* Adds \u0027router\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a default IP gateway \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the TCP/IP stack \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e\n     * corresponds to \u0027netdev\u0027.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*add_router)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr router);\n\n    /* Looks up the next hop \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027host\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the host\u0027s routing table.  If\n     * successful, stores the next hop gateway\u0027s address (0 if \u0027host\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e on a\n     * directly connected network) \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027*next_hop\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e a copy \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the name \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the\n     * device to reach \u0027host\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027*netdev_name\u0027, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e returns 0.  The caller \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * responsible \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e freeing \u0027*netdev_name\u0027 (\u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e calling free()).\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*get_next_hop)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr *host, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr *next_hop,\n                        char **netdev_name);\n\n    /* Retrieves driver information \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the device.\n     *\n     * Populates \u0027smap\u0027 with key-value pairs representing the status \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the\n     * device.  \u0027smap\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e key-value string pairs representing netdev\n     * type specific information.  For more information see\n     * ovs-vswitchd.conf.db(5).\n     *\n     * The caller \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e responsible \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e destroying \u0027smap\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e its data.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*get_status)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *smap);\n\n    /* Looks up the ARP table entry \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027ip\u0027 on \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e stores the\n     * corresponding MAC address \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027mac\u0027.  A return value \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e ENXIO, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * particular, indicates \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e there \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e no ARP table entry \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027ip\u0027 on\n     * \u0027netdev\u0027.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*arp_lookup)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, ovs_be32 ip,\n                      \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e eth_addr *mac);\n\n    /* Retrieves the current \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e flags on \u0027netdev\u0027 into \u0027*old_flags\u0027.  Then,\n     * turns off the flags \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e are \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to 1 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027off\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e turns on the flags\n     * \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e are \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to 1 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027on\u0027.  (No bit will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to 1 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e both \u0027off\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n     * \u0027on\u0027; \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, off &amp; on == 0.)\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e invoked \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e a signal handler.  Therefore, it\n     * should \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e do anything \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e signal-safe (\u003cspan class=\"hljs-keyword\"\u003esuch\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e logging). */\n    int (*update_flags)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, enum netdev_flags off,\n                        enum netdev_flags on, enum netdev_flags *old_flags);\n\n    /* If the provider called netdev_request_reconfigure(), the upper layer\n     * will eventually call this.  The provider can update the device\n     * configuration knowing \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e the upper layer will \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e call rxq_recv() \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e\n     * send() until this function returns.\n     *\n     * On error, the configuration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e indeterminant \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e the device cannot \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * used to send \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e receive packets until a successful configuration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * applied. */\n    int (*reconfigure)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n/* ## -------------------- ## */\n/* ## netdev_rxq Functions ## */\n/* ## -------------------- ## */\n\n/* If a particular netdev class does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support receiving packets, all these\n * function pointers must \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL. */\n\n    /* Life-cycle functions \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a netdev_rxq.  See the large comment above on\n     * \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_class. */\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *(*rxq_alloc)(void);\n    int (*rxq_construct)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *);\n    void (*rxq_destruct)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *);\n    void (*rxq_dealloc)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *);\n\n    /* Attempts to receive a batch \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packets \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027rx\u0027.  In \u0027batch\u0027, the\n     * caller supplies \u0027packets\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e the pointer to the beginning \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e an array\n     * \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e NETDEV_MAX_BURST pointers to dp_packet.  If successful, the\n     * implementation stores pointers to up to NETDEV_MAX_BURST dp_packets into\n     * the array, transferring ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the packets to the caller, stores\n     * the number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e received packets into \u0027count\u0027, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e returns 0.\n     *\n     * The implementation does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e necessarily initialize any non-data members\n     * \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027packets\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027batch\u0027.  That \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, the caller must initialize layer\n     * pointers \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e metadata itself, if desired, e.g. with pkt_metadata_init()\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e miniflow_extract().\n     *\n     * Implementations should allocate buffers with DP_NETDEV_HEADROOM bytes \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * headroom.\n     *\n     * Returns EAGAIN immediately if no packet \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e ready to \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e received \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e\n     * another positive errno value if an error was encountered. */\n    int (*rxq_recv)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *rx, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet_batch *batch);\n\n    /* Registers with the poll loop to wake up \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e the next call to\n     * poll_block() when a packet \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e ready to \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e received with\n     * netdev_rxq_recv() on \u0027rx\u0027. */\n    void (*rxq_wait)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *rx);\n\n    /* Discards all packets waiting to \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e received \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027rx\u0027. */\n    int (*rxq_drain)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *rx);\n};\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在Netdev侧的配置完成之后通常还会配套在Datapath侧做配置，下面以端口绑定流程为例讲解。 \u003cbr\u003e\n具体绑定的接口在Dpif.h中，Dpif模块本身就是Datapath对外暴露的接口，同时也起到协调设备和datapath协同工作的作用。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs applescript\"\u003e/* Attempts \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e add \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a port \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u0027dpif\u0027.  If \u0027port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * non-null \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eits\u003c/span\u003e value \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e ODPP_NONE, \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e attempts \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e use \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * value \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e port \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e.\n *\n * If successful, returns \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e sets \u0027*port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new port\u0027s port\n * \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u0027port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e non-null).  On failure, returns a positive\n * errno value \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e sets \u0027*port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e ODPP_NONE (\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u0027port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * non-null). */\nint\ndpif_port_add(struct dpif *dpif, struct netdev *netdev, odp_port_t *port_nop)\n{\n    const char *netdev_name = netdev_get_name(netdev);\n    odp_port_t port_no = ODPP_NONE;\n    int \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e;\n\n    COVERAGE_INC(dpif_port_add);\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (port_nop) {\n        port_no = *port_nop;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = dpif-&gt;dpif_class-&gt;port_add(dpif, netdev, &amp;port_no);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!\u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e) {\n        VLOG_DBG_RL(&amp;dpmsg_rl, \u003cspan class=\"hljs-string\"\u003e\"%s: added %s as port %\"\u003c/span\u003ePRIu32,\n                    dpif_name(dpif), netdev_name, port_no);\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        VLOG_WARN_RL(&amp;error_rl, \u003cspan class=\"hljs-string\"\u003e\"%s: failed to add %s as port: %s\"\u003c/span\u003e,\n                     dpif_name(dpif), netdev_name, ovs_strerror(\u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e));\n        port_no = ODPP_NONE;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (port_nop) {\n        *port_nop = port_no;\n    }\n\u003cspan class=\"hljs-command\"\u003e    return\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在上述代码在Datapath上创建一个指向netdev的vport，同时其端口号为port_no，这涉及到用户进程和内核进程的交互，用户态使用Netlink发送创建端口的消息给内核datapath进程，在内核态收到对应的消息类型后分别调用对应的方法进行处理，这里会调用ovs_vport_cmd_new方法进行处理\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003estatic struct genl_ops dp_vport_genl_ops[] = {\n    { \u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e = OVS_VPORT_CMD_NEW,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.flags\u003c/span\u003e = GENL_UNS_ADMIN_PERM, \u003cspan class=\"hljs-comment\"\u003e/* Requires CAP_NET_ADMIN privilege. */\u003c/span\u003e\n      \u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e = vport_policy,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.doit\u003c/span\u003e = ovs_vport_cmd_new\n    },\n    { \u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e = OVS_VPORT_CMD_DEL,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.flags\u003c/span\u003e = GENL_UNS_ADMIN_PERM, \u003cspan class=\"hljs-comment\"\u003e/* Requires CAP_NET_ADMIN privilege. */\u003c/span\u003e\n      \u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e = vport_policy,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.doit\u003c/span\u003e = ovs_vport_cmd_del\n    },\n    { \u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e = OVS_VPORT_CMD_GET,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.flags\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,           \u003cspan class=\"hljs-comment\"\u003e/* OK for unprivileged users. */\u003c/span\u003e\n      \u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e = vport_policy,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.doit\u003c/span\u003e = ovs_vport_cmd_get,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.dumpit\u003c/span\u003e = ovs_vport_cmd_dump\n    },\n    { \u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e = OVS_VPORT_CMD_SET,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.flags\u003c/span\u003e = GENL_UNS_ADMIN_PERM, \u003cspan class=\"hljs-comment\"\u003e/* Requires CAP_NET_ADMIN privilege. */\u003c/span\u003e\n      \u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e = vport_policy,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.doit\u003c/span\u003e = ovs_vport_cmd_set,\n    },\n}\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e函数ovs_vport_cmd_new会调用static struct vport *new_vport(const struct vport_parms *parms)会继续调用到struct vport *ovs_vport_add(const struct vport_parms *parms)里面会调用vport = ops-&gt;create(parms); \u003cbr\u003e\nops是什么呢？在dp_init函数中会调用ovs_netdev_init，它会调用ovs_vport_ops_register(&amp;ovs_netdev_vport_ops); \u003cbr\u003e\n所以ops-&gt;create会调用netdev_create，它会调用ovs_netdev_link，其中有下面的代码：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs haskell\"\u003e    vport-&gt;dev = dev_get_by_name(ovs_dp_get_net(vport-&gt;dp), name);\n    err = netdev_rx_handler_register(vport-&gt;dev, netdev_frame_hook,\n                     vport);\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003enetdev_rx_handler_register会注册一个方法叫做netdev_frame_hook到对应的Netdev中，每当网卡收到包的时候，就调用这个方法。 \u003cbr\u003e\n在后面讲数据面的章节中，我们会从这个函数开始，解析整个网络包的处理过程。 \u003cbr\u003e\n另外要说一点，内核是通过用户进程传递的netdev_name在内核对应的namespace中寻找到对应的设备的，namespace可以起到网络设备隔离的作用。\u003c/p\u003e","markdowncontent":"##控制面总览\n![OpenVswitch call stack](http://img.blog.csdn.net/20170702094534464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上图只是描述了控制面的调用流程，控制面的接口包括如下几各方面：\n1. 虚拟设备的生命周期接口\n2. 虚拟设备的业务配置接口\n3. 二层基础协议的运行启动\n4. Openflow协议的运行开启与流表下发\n下面就这几个层面的分别简述一下\n###虚拟设备的生命周期接口\n虚拟设备不同于物理设备，除了FCAPS管理之外还需要对其生命周期进行管理，在OVS中，设备类型被分成了很多类（图中只标注了四类）：Netdev-linux，Netdev-internal，Netdev-bsd，Netdev-tap等，生命周期类的接口采用的是设备文件描述符+ioctl接口，但是ioctl接口只是一个单工的用户态向内核态通信的接口，而从内核态向用户态传递设备状态的接口仍然是Netlink接口，这里Netlink会订阅NETLINK_ROUTE协议类型的信息。\n\n```\nstruct netdev_class {\n    /* Type of netdevs in this class, e.g. \"system\", \"tap\", \"gre\", etc.\n     *\n     * One of the providers should supply a \"system\" type, since this is\n     * the type assumed if no type is specified when opening a netdev.\n     * The \"system\" type corresponds to an existing network device on\n     * the system. */\n    const char *type;\n\n    /* If \u0027true\u0027 then this netdev should be polled by PMD threads. */\n    bool is_pmd;\n\n/* ## ------------------- ## */\n/* ## Top-Level Functions ## */\n/* ## ------------------- ## */\n\n    /* Called when the netdev provider is registered, typically at program\n     * startup.  Returning an error from this function will prevent any network\n     * device in this class from being opened.\n     *\n     * This function may be set to null if a network device class needs no\n     * initialization at registration time. */\n    int (*init)(void);\n\n    /* Performs periodic work needed by netdevs of this class.  May be null if\n     * no periodic work is necessary.\n     *\n     * \u0027netdev_class\u0027 points to the class.  It is useful in case the same\n     * function is used to implement different classes. */\n    void (*run)(const struct netdev_class *netdev_class);\n\n    /* Arranges for poll_block() to wake up if the \"run\" member function needs\n     * to be called.  Implementations are additionally required to wake\n     * whenever something changes in any of its netdevs which would cause their\n     * -\u003echange_seq() function to change its result.  May be null if nothing is\n     * needed here.\n     *\n     * \u0027netdev_class\u0027 points to the class.  It is useful in case the same\n     * function is used to implement different classes. */\n    void (*wait)(const struct netdev_class *netdev_class);\n\n/* ## ---------------- ## */\n/* ## netdev Functions ## */\n/* ## ---------------- ## */\n\n    /* Life-cycle functions for a netdev.  See the large comment above on\n     * struct netdev_class. */\n    struct netdev *(*alloc)(void);\n    int (*construct)(struct netdev *);\n    void (*destruct)(struct netdev *);\n    void (*dealloc)(struct netdev *);\n};\n```\n除了Netdev的生命周期管理还有内核Datapath的生命周期管理，不过这部分接口是存在于dpif中的，相关代码如下：\n\n```\n\t/* Datapath interface class structure, to be defined by each implementation of\n * a datapath interface.\n *\n * These functions return 0 if successful or a positive errno value on failure,\n * except where otherwise noted.\n *\n * These functions are expected to execute synchronously, that is, to block as\n * necessary to obtain a result.  Thus, they may not return EAGAIN or\n * EWOULDBLOCK or EINPROGRESS.  We may relax this requirement in the future if\n * and when we encounter performance problems. */\nstruct dpif_class {\n    /* Type of dpif in this class, e.g. \"system\", \"netdev\", etc.\n     *\n     * One of the providers should supply a \"system\" type, since this is\n     * the type assumed if no type is specified when opening a dpif. */\n    const char *type;\n\n    /* Called when the dpif provider is registered, typically at program\n     * startup.  Returning an error from this function will prevent any\n     * datapath with this class from being created.\n     *\n     * This function may be set to null if a datapath class needs no\n     * initialization at registration time. */\n    int (*init)(void);\n\n    /* Enumerates the names of all known created datapaths (of class\n     * \u0027dpif_class\u0027), if possible, into \u0027all_dps\u0027.  The caller has already\n     * initialized \u0027all_dps\u0027 and other dpif classes might already have added\n     * names to it.\n     *\n     * This is used by the vswitch at startup, so that it can delete any\n     * datapaths that are not configured.\n     *\n     * Some kinds of datapaths might not be practically enumerable, in which\n     * case this function may be a null pointer. */\n    int (*enumerate)(struct sset *all_dps, const struct dpif_class *dpif_class);\n\n    /* Returns the type to pass to netdev_open() when a dpif of class\n     * \u0027dpif_class\u0027 has a port of type \u0027type\u0027, for a few special cases\n     * when a netdev type differs from a port type.  For example, when\n     * using the userspace datapath, a port of type \"internal\" needs to\n     * be opened as \"tap\".\n     *\n     * Returns either \u0027type\u0027 itself or a string literal, which must not\n     * be freed. */\n    const char *(*port_open_type)(const struct dpif_class *dpif_class,\n                                  const char *type);\n\n    /* Attempts to open an existing dpif called \u0027name\u0027, if \u0027create\u0027 is false,\n     * or to open an existing dpif or create a new one, if \u0027create\u0027 is true.\n     *\n     * \u0027dpif_class\u0027 is the class of dpif to open.\n     *\n     * If successful, stores a pointer to the new dpif in \u0027*dpifp\u0027, which must\n     * have class \u0027dpif_class\u0027.  On failure there are no requirements on what\n     * is stored in \u0027*dpifp\u0027. */\n    int (*open)(const struct dpif_class *dpif_class,\n                const char *name, bool create, struct dpif **dpifp);\n\n    /* Closes \u0027dpif\u0027 and frees associated memory. */\n    void (*close)(struct dpif *dpif);\n\n    /* Attempts to destroy the dpif underlying \u0027dpif\u0027.\n     *\n     * If successful, \u0027dpif\u0027 will not be used again except as an argument for\n     * the \u0027close\u0027 member function. */\n    int (*destroy)(struct dpif *dpif);\n\n    /* Performs periodic work needed by \u0027dpif\u0027, if any is necessary.\n     * Returns true if need to revalidate. */\n    bool (*run)(struct dpif *dpif);\n\n    /* Arranges for poll_block() to wake up if the \"run\" member function needs\n     * to be called for \u0027dpif\u0027. */\n    void (*wait)(struct dpif *dpif);\n};\n```\n###虚拟设备的业务配置接口\n虚拟设备的业务配置接口也同样在上数两个类中，除了设备的直接配置还会有设备的组合配置，比如把Netdev绑定到Datapath中\n\n```\nstruct netdev_class {\n    /* Fetches the device \u0027netdev\u0027\u0027s configuration, storing it in \u0027args\u0027.\n     * The caller owns \u0027args\u0027 and pre-initializes it to an empty smap.\n     *\n     * If this netdev class does not have any configuration options, this may\n     * be a null pointer. */\n    int (*get_config)(const struct netdev *netdev, struct smap *args);\n\n    /* Changes the device \u0027netdev\u0027\u0027s configuration to \u0027args\u0027.\n     *\n     * If this netdev class does not support configuration, this may be a null\n     * pointer.\n     *\n     * If the return value is not zero (meaning that an error occurred),\n     * the provider can allocate a string with an error message in \u0027*errp\u0027.\n     * The caller has to call free on it. */\n    int (*set_config)(struct netdev *netdev, const struct smap *args,\n                      char **errp);\n\n    /* Returns the tunnel configuration of \u0027netdev\u0027.  If \u0027netdev\u0027 is\n     * not a tunnel, returns null.\n     *\n     * If this function would always return null, it may be null instead. */\n    const struct netdev_tunnel_config *\n        (*get_tunnel_config)(const struct netdev *netdev);\n\n    /* Build Tunnel header.  Ethernet and ip header parameters are passed to\n     * tunnel implementation to build entire outer header for given flow. */\n    int (*build_header)(const struct netdev *, struct ovs_action_push_tnl *data,\n                        const struct netdev_tnl_build_header_params *params);\n\n    /* build_header() can not build entire header for all packets for given\n     * flow.  Push header is called for packet to build header specific to\n     * a packet on actual transmit.  It uses partial header build by\n     * build_header() which is passed as data. */\n    void (*push_header)(struct dp_packet *packet,\n                        const struct ovs_action_push_tnl *data);\n\n    /* Pop tunnel header from packet, build tunnel metadata and resize packet\n     * for further processing.\n     * Returns NULL in case of error or tunnel implementation queued packet for further\n     * processing. */\n    struct dp_packet * (*pop_header)(struct dp_packet *packet);\n\n    /* Returns the id of the numa node the \u0027netdev\u0027 is on.  If there is no\n     * such info, returns NETDEV_NUMA_UNSPEC. */\n    int (*get_numa_id)(const struct netdev *netdev);\n\n    /* Configures the number of tx queues of \u0027netdev\u0027. Returns 0 if successful,\n     * otherwise a positive errno value.\n     *\n     * \u0027n_txq\u0027 specifies the exact number of transmission queues to create.\n     *\n     * The caller will call netdev_reconfigure() (if necessary) before using\n     * netdev_send() on any of the newly configured queues, giving the provider\n     * a chance to adjust its settings.\n     *\n     * On error, the tx queue configuration is unchanged. */\n    int (*set_tx_multiq)(struct netdev *netdev, unsigned int n_txq);\n\n    /* Sends buffers on \u0027netdev\u0027.\n     * Returns 0 if successful (for every buffer), otherwise a positive errno\n     * value.  Returns EAGAIN without blocking if one or more packets cannot be\n     * queued immediately. Returns EMSGSIZE if a partial packet was transmitted\n     * or if a packet is too big or too small to transmit on the device.\n     *\n     * If the function returns a non-zero value, some of the packets might have\n     * been sent anyway.\n     *\n     * If \u0027may_steal\u0027 is false, the caller retains ownership of all the\n     * packets.  If \u0027may_steal\u0027 is true, the caller transfers ownership of all\n     * the packets to the network device, regardless of success.\n     *\n     * If \u0027concurrent_txq\u0027 is true, the caller may perform concurrent calls\n     * to netdev_send() with the same \u0027qid\u0027. The netdev provider is responsible\n     * for making sure that these concurrent calls do not create a race\n     * condition by using locking or other synchronization if required.\n     *\n     * The network device is expected to maintain one or more packet\n     * transmission queues, so that the caller does not ordinarily have to\n     * do additional queuing of packets.  \u0027qid\u0027 specifies the queue to use\n     * and can be ignored if the implementation does not support multiple\n     * queues.\n     *\n     * May return EOPNOTSUPP if a network device does not implement packet\n     * transmission through this interface.  This function may be set to null\n     * if it would always return EOPNOTSUPP anyhow.  (This will prevent the\n     * network device from being usefully used by the netdev-based \"userspace\n     * datapath\".  It will also prevent the OVS implementation of bonding from\n     * working properly over \u0027netdev\u0027.) */\n    int (*send)(struct netdev *netdev, int qid, struct dp_packet_batch *batch,\n                bool may_steal, bool concurrent_txq);\n\n    /* Registers with the poll loop to wake up from the next call to\n     * poll_block() when the packet transmission queue for \u0027netdev\u0027 has\n     * sufficient room to transmit a packet with netdev_send().\n     *\n     * The network device is expected to maintain one or more packet\n     * transmission queues, so that the caller does not ordinarily have to\n     * do additional queuing of packets.  \u0027qid\u0027 specifies the queue to use\n     * and can be ignored if the implementation does not support multiple\n     * queues.\n     *\n     * May be null if not needed, such as for a network device that does not\n     * implement packet transmission through the \u0027send\u0027 member function. */\n    void (*send_wait)(struct netdev *netdev, int qid);\n\n    /* Sets \u0027netdev\u0027\u0027s Ethernet address to \u0027mac\u0027 */\n    int (*set_etheraddr)(struct netdev *netdev, const struct eth_addr mac);\n\n    /* Retrieves \u0027netdev\u0027\u0027s Ethernet address into \u0027mac\u0027.\n     *\n     * This address will be advertised as \u0027netdev\u0027\u0027s MAC address through the\n     * OpenFlow protocol, among other uses. */\n    int (*get_etheraddr)(const struct netdev *netdev, struct eth_addr *mac);\n\n    /* Retrieves \u0027netdev\u0027\u0027s MTU into \u0027*mtup\u0027.\n     *\n     * The MTU is the maximum size of transmitted (and received) packets, in\n     * bytes, not including the hardware header; thus, this is typically 1500\n     * bytes for Ethernet devices.\n     *\n     * If \u0027netdev\u0027 does not have an MTU (e.g. as some tunnels do not), then\n     * this function should return EOPNOTSUPP.  This function may be set to\n     * null if it would always return EOPNOTSUPP. */\n    int (*get_mtu)(const struct netdev *netdev, int *mtup);\n\n    /* Sets \u0027netdev\u0027\u0027s MTU to \u0027mtu\u0027.\n     *\n     * If \u0027netdev\u0027 does not have an MTU (e.g. as some tunnels do not), then\n     * this function should return EOPNOTSUPP.  This function may be set to\n     * null if it would always return EOPNOTSUPP. */\n    int (*set_mtu)(struct netdev *netdev, int mtu);\n\n    /* Returns the ifindex of \u0027netdev\u0027, if successful, as a positive number.\n     * On failure, returns a negative errno value.\n     *\n     * The desired semantics of the ifindex value are a combination of those\n     * specified by POSIX for if_nametoindex() and by SNMP for ifIndex.  An\n     * ifindex value should be unique within a host and remain stable at least\n     * until reboot.  SNMP says an ifindex \"ranges between 1 and the value of\n     * ifNumber\" but many systems do not follow this rule anyhow.\n     *\n     * This function may be set to null if it would always return -EOPNOTSUPP.\n     */\n    int (*get_ifindex)(const struct netdev *netdev);\n\n    /* Sets \u0027carrier\u0027 to true if carrier is active (link light is on) on\n     * \u0027netdev\u0027.\n     *\n     * May be null if device does not provide carrier status (will be always\n     * up as long as device is up).\n     */\n    int (*get_carrier)(const struct netdev *netdev, bool *carrier);\n\n    /* Returns the number of times \u0027netdev\u0027\u0027s carrier has changed since being\n     * initialized.\n     *\n     * If null, callers will assume the number of carrier resets is zero. */\n    long long int (*get_carrier_resets)(const struct netdev *netdev);\n\n    /* Forces -\u003eget_carrier() to poll \u0027netdev\u0027\u0027s MII registers for link status\n     * instead of checking \u0027netdev\u0027\u0027s carrier.  \u0027netdev\u0027\u0027s MII registers will\n     * be polled once every \u0027interval\u0027 milliseconds.  If \u0027netdev\u0027 does not\n     * support MII, another method may be used as a fallback.  If \u0027interval\u0027 is\n     * less than or equal to zero, reverts -\u003eget_carrier() to its normal\n     * behavior.\n     *\n     * Most network devices won\u0027t support this feature and will set this\n     * function pointer to NULL, which is equivalent to returning EOPNOTSUPP.\n     */\n    int (*set_miimon_interval)(struct netdev *netdev, long long int interval);\n\n    /* Retrieves current device stats for \u0027netdev\u0027 into \u0027stats\u0027.\n     *\n     * A network device that supports some statistics but not others, it should\n     * set the values of the unsupported statistics to all-1-bits\n     * (UINT64_MAX). */\n    int (*get_stats)(const struct netdev *netdev, struct netdev_stats *);\n\n    /* Stores the features supported by \u0027netdev\u0027 into each of \u0027*current\u0027,\n     * \u0027*advertised\u0027, \u0027*supported\u0027, and \u0027*peer\u0027.  Each value is a bitmap of\n     * NETDEV_F_* bits.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP.\n     */\n    int (*get_features)(const struct netdev *netdev,\n                        enum netdev_features *current,\n                        enum netdev_features *advertised,\n                        enum netdev_features *supported,\n                        enum netdev_features *peer);\n\n    /* Set the features advertised by \u0027netdev\u0027 to \u0027advertise\u0027, which is a\n     * set of NETDEV_F_* bits.\n     *\n     * This function may be set to null for a network device that does not\n     * support configuring advertisements. */\n    int (*set_advertisements)(struct netdev *netdev,\n                              enum netdev_features advertise);\n\n    /* Attempts to set input rate limiting (policing) policy, such that up to\n     * \u0027kbits_rate\u0027 kbps of traffic is accepted, with a maximum accumulative\n     * burst size of \u0027kbits\u0027 kb.\n     *\n     * This function may be set to null if policing is not supported. */\n    int (*set_policing)(struct netdev *netdev, unsigned int kbits_rate,\n                        unsigned int kbits_burst);\n\n    /* Adds to \u0027types\u0027 all of the forms of QoS supported by \u0027netdev\u0027, or leaves\n     * it empty if \u0027netdev\u0027 does not support QoS.  Any names added to \u0027types\u0027\n     * should be documented as valid for the \"type\" column in the \"QoS\" table\n     * in vswitchd/vswitch.xml (which is built as ovs-vswitchd.conf.db(8)).\n     *\n     * Every network device must support disabling QoS with a type of \"\", but\n     * this function must not add \"\" to \u0027types\u0027.\n     *\n     * The caller is responsible for initializing \u0027types\u0027 (e.g. with\n     * sset_init()) before calling this function.  The caller retains ownership\n     * of \u0027types\u0027.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*get_qos_types)(const struct netdev *netdev, struct sset *types);\n\n    /* Queries \u0027netdev\u0027 for its capabilities regarding the specified \u0027type\u0027 of\n     * QoS.  On success, initializes \u0027caps\u0027 with the QoS capabilities.\n     *\n     * Should return EOPNOTSUPP if \u0027netdev\u0027 does not support \u0027type\u0027.  May be\n     * NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*get_qos_capabilities)(const struct netdev *netdev,\n                                const char *type,\n                                struct netdev_qos_capabilities *caps);\n\n    /* Queries \u0027netdev\u0027 about its currently configured form of QoS.  If\n     * successful, stores the name of the current form of QoS into \u0027*typep\u0027\n     * and any details of configuration as string key-value pairs in\n     * \u0027details\u0027.\n     *\n     * A \u0027*typep\u0027 of \"\" indicates that QoS is currently disabled on \u0027netdev\u0027.\n     *\n     * The caller initializes \u0027details\u0027 before calling this function.  The\n     * caller takes ownership of the string key-values pairs added to\n     * \u0027details\u0027.\n     *\n     * The netdev retains ownership of \u0027*typep\u0027.\n     *\n     * \u0027*typep\u0027 will be one of the types returned by netdev_get_qos_types() for\n     * \u0027netdev\u0027.  The contents of \u0027details\u0027 should be documented as valid for\n     * \u0027*typep\u0027 in the \"other_config\" column in the \"QoS\" table in\n     * vswitchd/vswitch.xml (which is built as ovs-vswitchd.conf.db(8)).\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*get_qos)(const struct netdev *netdev,\n                   const char **typep, struct smap *details);\n\n    /* Attempts to reconfigure QoS on \u0027netdev\u0027, changing the form of QoS to\n     * \u0027type\u0027 with details of configuration from \u0027details\u0027.\n     *\n     * On error, the previous QoS configuration is retained.\n     *\n     * When this function changes the type of QoS (not just \u0027details\u0027), this\n     * also resets all queue configuration for \u0027netdev\u0027 to their defaults\n     * (which depend on the specific type of QoS).  Otherwise, the queue\n     * configuration for \u0027netdev\u0027 is unchanged.\n     *\n     * \u0027type\u0027 should be \"\" (to disable QoS) or one of the types returned by\n     * netdev_get_qos_types() for \u0027netdev\u0027.  The contents of \u0027details\u0027 should\n     * be documented as valid for the given \u0027type\u0027 in the \"other_config\" column\n     * in the \"QoS\" table in vswitchd/vswitch.xml (which is built as\n     * ovs-vswitchd.conf.db(8)).\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*set_qos)(struct netdev *netdev,\n                   const char *type, const struct smap *details);\n\n    /* Queries \u0027netdev\u0027 for information about the queue numbered \u0027queue_id\u0027.\n     * If successful, adds that information as string key-value pairs to\n     * \u0027details\u0027.  Returns 0 if successful, otherwise a positive errno value.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 is greater than or equal to the\n     * number of supported queues (as reported in the \u0027n_queues\u0027 member of\n     * struct netdev_qos_capabilities by \u0027get_qos_capabilities\u0027).\n     *\n     * The caller initializes \u0027details\u0027 before calling this function.  The\n     * caller takes ownership of the string key-values pairs added to\n     * \u0027details\u0027.\n     *\n     * The returned contents of \u0027details\u0027 should be documented as valid for the\n     * given \u0027type\u0027 in the \"other_config\" column in the \"Queue\" table in\n     * vswitchd/vswitch.xml (which is built as ovs-vswitchd.conf.db(8)).\n     */\n    int (*get_queue)(const struct netdev *netdev,\n                     unsigned int queue_id, struct smap *details);\n\n    /* Configures the queue numbered \u0027queue_id\u0027 on \u0027netdev\u0027 with the key-value\n     * string pairs in \u0027details\u0027.  The contents of \u0027details\u0027 should be\n     * documented as valid for the given \u0027type\u0027 in the \"other_config\" column in\n     * the \"Queue\" table in vswitchd/vswitch.xml (which is built as\n     * ovs-vswitchd.conf.db(8)).  Returns 0 if successful, otherwise a positive\n     * errno value.  On failure, the given queue\u0027s configuration should be\n     * unmodified.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 is greater than or equal to the\n     * number of supported queues (as reported in the \u0027n_queues\u0027 member of\n     * struct netdev_qos_capabilities by \u0027get_qos_capabilities\u0027), or if\n     * \u0027details\u0027 is invalid for the type of queue.\n     *\n     * This function does not modify \u0027details\u0027, and the caller retains\n     * ownership of it.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*set_queue)(struct netdev *netdev,\n                     unsigned int queue_id, const struct smap *details);\n\n    /* Attempts to delete the queue numbered \u0027queue_id\u0027 from \u0027netdev\u0027.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 is greater than or equal to the\n     * number of supported queues (as reported in the \u0027n_queues\u0027 member of\n     * struct netdev_qos_capabilities by \u0027get_qos_capabilities\u0027).  Should\n     * return EOPNOTSUPP if \u0027queue_id\u0027 is valid but may not be deleted (e.g. if\n     * \u0027netdev\u0027 has a fixed set of queues with the current QoS mode).\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all, or if all of its\n     * QoS modes have fixed sets of queues. */\n    int (*delete_queue)(struct netdev *netdev, unsigned int queue_id);\n\n    /* Obtains statistics about \u0027queue_id\u0027 on \u0027netdev\u0027.  Fills \u0027stats\u0027 with the\n     * queue\u0027s statistics.  May set individual members of \u0027stats\u0027 to all-1-bits\n     * if the statistic is unavailable.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*get_queue_stats)(const struct netdev *netdev, unsigned int queue_id,\n                           struct netdev_queue_stats *stats);\n\n    /* Attempts to begin dumping the queues in \u0027netdev\u0027.  On success, returns 0\n     * and initializes \u0027*statep\u0027 with any data needed for iteration.  On\n     * failure, returns a positive errno value.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*queue_dump_start)(const struct netdev *netdev, void **statep);\n\n    /* Attempts to retrieve another queue from \u0027netdev\u0027 for \u0027state\u0027, which was\n     * initialized by a successful call to the \u0027queue_dump_start\u0027 function for\n     * \u0027netdev\u0027.  On success, stores a queue ID into \u0027*queue_id\u0027 and fills\n     * \u0027details\u0027 with the configuration of the queue with that ID.  Returns EOF\n     * if the last queue has been dumped, or a positive errno value on error.\n     * This function will not be called again once it returns nonzero once for\n     * a given iteration (but the \u0027queue_dump_done\u0027 function will be called\n     * afterward).\n     *\n     * The caller initializes and clears \u0027details\u0027 before calling this\n     * function.  The caller takes ownership of the string key-values pairs\n     * added to \u0027details\u0027.\n     *\n     * The returned contents of \u0027details\u0027 should be documented as valid for the\n     * given \u0027type\u0027 in the \"other_config\" column in the \"Queue\" table in\n     * vswitchd/vswitch.xml (which is built as ovs-vswitchd.conf.db(8)).\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*queue_dump_next)(const struct netdev *netdev, void *state,\n                           unsigned int *queue_id, struct smap *details);\n\n    /* Releases resources from \u0027netdev\u0027 for \u0027state\u0027, which was initialized by a\n     * successful call to the \u0027queue_dump_start\u0027 function for \u0027netdev\u0027.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*queue_dump_done)(const struct netdev *netdev, void *state);\n\n    /* Iterates over all of \u0027netdev\u0027\u0027s queues, calling \u0027cb\u0027 with the queue\u0027s\n     * ID, its statistics, and the \u0027aux\u0027 specified by the caller.  The order of\n     * iteration is unspecified, but (when successful) each queue must be\n     * visited exactly once.\n     *\n     * \u0027cb\u0027 will not modify or free the statistics passed in. */\n    int (*dump_queue_stats)(const struct netdev *netdev,\n                            void (*cb)(unsigned int queue_id,\n                                       struct netdev_queue_stats *,\n                                       void *aux),\n                            void *aux);\n\n    /* Assigns \u0027addr\u0027 as \u0027netdev\u0027\u0027s IPv4 address and \u0027mask\u0027 as its netmask.  If\n     * \u0027addr\u0027 is INADDR_ANY, \u0027netdev\u0027\u0027s IPv4 address is cleared.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*set_in4)(struct netdev *netdev, struct in_addr addr,\n                   struct in_addr mask);\n\n    /* Returns all assigned IP address to  \u0027netdev\u0027 and returns 0.\n     * API allocates array of address and masks and set it to\n     * \u0027*addr\u0027 and \u0027*mask\u0027.\n     * Otherwise, returns a positive errno value and sets \u0027*addr\u0027, \u0027*mask\n     * and \u0027*n_addr\u0027 to NULL.\n     *\n     * The following error values have well-defined meanings:\n     *\n     *   - EADDRNOTAVAIL: \u0027netdev\u0027 has no assigned IPv6 address.\n     *\n     *   - EOPNOTSUPP: No IPv6 network stack attached to \u0027netdev\u0027.\n     *\n     * \u0027addr\u0027 may be null, in which case the address itself is not reported. */\n    int (*get_addr_list)(const struct netdev *netdev, struct in6_addr **in,\n                         struct in6_addr **mask, int *n_in6);\n\n    /* Adds \u0027router\u0027 as a default IP gateway for the TCP/IP stack that\n     * corresponds to \u0027netdev\u0027.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*add_router)(struct netdev *netdev, struct in_addr router);\n\n    /* Looks up the next hop for \u0027host\u0027 in the host\u0027s routing table.  If\n     * successful, stores the next hop gateway\u0027s address (0 if \u0027host\u0027 is on a\n     * directly connected network) in \u0027*next_hop\u0027 and a copy of the name of the\n     * device to reach \u0027host\u0027 in \u0027*netdev_name\u0027, and returns 0.  The caller is\n     * responsible for freeing \u0027*netdev_name\u0027 (by calling free()).\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*get_next_hop)(const struct in_addr *host, struct in_addr *next_hop,\n                        char **netdev_name);\n\n    /* Retrieves driver information of the device.\n     *\n     * Populates \u0027smap\u0027 with key-value pairs representing the status of the\n     * device.  \u0027smap\u0027 is a set of key-value string pairs representing netdev\n     * type specific information.  For more information see\n     * ovs-vswitchd.conf.db(5).\n     *\n     * The caller is responsible for destroying \u0027smap\u0027 and its data.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*get_status)(const struct netdev *netdev, struct smap *smap);\n\n    /* Looks up the ARP table entry for \u0027ip\u0027 on \u0027netdev\u0027 and stores the\n     * corresponding MAC address in \u0027mac\u0027.  A return value of ENXIO, in\n     * particular, indicates that there is no ARP table entry for \u0027ip\u0027 on\n     * \u0027netdev\u0027.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*arp_lookup)(const struct netdev *netdev, ovs_be32 ip,\n                      struct eth_addr *mac);\n\n    /* Retrieves the current set of flags on \u0027netdev\u0027 into \u0027*old_flags\u0027.  Then,\n     * turns off the flags that are set to 1 in \u0027off\u0027 and turns on the flags\n     * that are set to 1 in \u0027on\u0027.  (No bit will be set to 1 in both \u0027off\u0027 and\n     * \u0027on\u0027; that is, off & on == 0.)\n     *\n     * This function may be invoked from a signal handler.  Therefore, it\n     * should not do anything that is not signal-safe (such as logging). */\n    int (*update_flags)(struct netdev *netdev, enum netdev_flags off,\n                        enum netdev_flags on, enum netdev_flags *old_flags);\n\n    /* If the provider called netdev_request_reconfigure(), the upper layer\n     * will eventually call this.  The provider can update the device\n     * configuration knowing that the upper layer will not call rxq_recv() or\n     * send() until this function returns.\n     *\n     * On error, the configuration is indeterminant and the device cannot be\n     * used to send and receive packets until a successful configuration is\n     * applied. */\n    int (*reconfigure)(struct netdev *netdev);\n/* ## -------------------- ## */\n/* ## netdev_rxq Functions ## */\n/* ## -------------------- ## */\n\n/* If a particular netdev class does not support receiving packets, all these\n * function pointers must be NULL. */\n\n    /* Life-cycle functions for a netdev_rxq.  See the large comment above on\n     * struct netdev_class. */\n    struct netdev_rxq *(*rxq_alloc)(void);\n    int (*rxq_construct)(struct netdev_rxq *);\n    void (*rxq_destruct)(struct netdev_rxq *);\n    void (*rxq_dealloc)(struct netdev_rxq *);\n\n    /* Attempts to receive a batch of packets from \u0027rx\u0027.  In \u0027batch\u0027, the\n     * caller supplies \u0027packets\u0027 as the pointer to the beginning of an array\n     * of NETDEV_MAX_BURST pointers to dp_packet.  If successful, the\n     * implementation stores pointers to up to NETDEV_MAX_BURST dp_packets into\n     * the array, transferring ownership of the packets to the caller, stores\n     * the number of received packets into \u0027count\u0027, and returns 0.\n     *\n     * The implementation does not necessarily initialize any non-data members\n     * of \u0027packets\u0027 in \u0027batch\u0027.  That is, the caller must initialize layer\n     * pointers and metadata itself, if desired, e.g. with pkt_metadata_init()\n     * and miniflow_extract().\n     *\n     * Implementations should allocate buffers with DP_NETDEV_HEADROOM bytes of\n     * headroom.\n     *\n     * Returns EAGAIN immediately if no packet is ready to be received or\n     * another positive errno value if an error was encountered. */\n    int (*rxq_recv)(struct netdev_rxq *rx, struct dp_packet_batch *batch);\n\n    /* Registers with the poll loop to wake up from the next call to\n     * poll_block() when a packet is ready to be received with\n     * netdev_rxq_recv() on \u0027rx\u0027. */\n    void (*rxq_wait)(struct netdev_rxq *rx);\n\n    /* Discards all packets waiting to be received from \u0027rx\u0027. */\n    int (*rxq_drain)(struct netdev_rxq *rx);\n};\n```\n在Netdev侧的配置完成之后通常还会配套在Datapath侧做配置，下面以端口绑定流程为例讲解。\n具体绑定的接口在Dpif.h中，Dpif模块本身就是Datapath对外暴露的接口，同时也起到协调设备和datapath协同工作的作用。\n\n```\n/* Attempts to add \u0027netdev\u0027 as a port on \u0027dpif\u0027.  If \u0027port_nop\u0027 is\n * non-null and its value is not ODPP_NONE, then attempts to use the\n * value as the port number.\n *\n * If successful, returns 0 and sets \u0027*port_nop\u0027 to the new port\u0027s port\n * number (if \u0027port_nop\u0027 is non-null).  On failure, returns a positive\n * errno value and sets \u0027*port_nop\u0027 to ODPP_NONE (if \u0027port_nop\u0027 is\n * non-null). */\nint\ndpif_port_add(struct dpif *dpif, struct netdev *netdev, odp_port_t *port_nop)\n{\n    const char *netdev_name = netdev_get_name(netdev);\n    odp_port_t port_no = ODPP_NONE;\n    int error;\n\n    COVERAGE_INC(dpif_port_add);\n\n    if (port_nop) {\n        port_no = *port_nop;\n    }\n\n    error = dpif-\u003edpif_class-\u003eport_add(dpif, netdev, &port_no);\n    if (!error) {\n        VLOG_DBG_RL(&dpmsg_rl, \"%s: added %s as port %\"PRIu32,\n                    dpif_name(dpif), netdev_name, port_no);\n    } else {\n        VLOG_WARN_RL(&error_rl, \"%s: failed to add %s as port: %s\",\n                     dpif_name(dpif), netdev_name, ovs_strerror(error));\n        port_no = ODPP_NONE;\n    }\n    if (port_nop) {\n        *port_nop = port_no;\n    }\n    return error;\n}\n```\n在上述代码在Datapath上创建一个指向netdev的vport，同时其端口号为port_no，这涉及到用户进程和内核进程的交互，用户态使用Netlink发送创建端口的消息给内核datapath进程，在内核态收到对应的消息类型后分别调用对应的方法进行处理，这里会调用ovs_vport_cmd_new方法进行处理\n\n```\nstatic struct genl_ops dp_vport_genl_ops[] = {\n\t{ .cmd = OVS_VPORT_CMD_NEW,\n\t  .flags = GENL_UNS_ADMIN_PERM, /* Requires CAP_NET_ADMIN privilege. */\n\t  .policy = vport_policy,\n\t  .doit = ovs_vport_cmd_new\n\t},\n\t{ .cmd = OVS_VPORT_CMD_DEL,\n\t  .flags = GENL_UNS_ADMIN_PERM, /* Requires CAP_NET_ADMIN privilege. */\n\t  .policy = vport_policy,\n\t  .doit = ovs_vport_cmd_del\n\t},\n\t{ .cmd = OVS_VPORT_CMD_GET,\n\t  .flags = 0,\t\t    /* OK for unprivileged users. */\n\t  .policy = vport_policy,\n\t  .doit = ovs_vport_cmd_get,\n\t  .dumpit = ovs_vport_cmd_dump\n\t},\n\t{ .cmd = OVS_VPORT_CMD_SET,\n\t  .flags = GENL_UNS_ADMIN_PERM, /* Requires CAP_NET_ADMIN privilege. */\n\t  .policy = vport_policy,\n\t  .doit = ovs_vport_cmd_set,\n\t},\n};\n```\n函数ovs_vport_cmd_new会调用static struct vport *new_vport(const struct vport_parms *parms)会继续调用到struct vport *ovs_vport_add(const struct vport_parms *parms)里面会调用vport = ops-\u003ecreate(parms);\nops是什么呢？在dp_init函数中会调用ovs_netdev_init，它会调用ovs_vport_ops_register(&ovs_netdev_vport_ops);\n所以ops-\u003ecreate会调用netdev_create，它会调用ovs_netdev_link，其中有下面的代码：\n\n```\n\tvport-\u003edev = dev_get_by_name(ovs_dp_get_net(vport-\u003edp), name);\n\terr = netdev_rx_handler_register(vport-\u003edev, netdev_frame_hook,\n\t\t\t\t\t vport);\n```\nnetdev_rx_handler_register会注册一个方法叫做netdev_frame_hook到对应的Netdev中，每当网卡收到包的时候，就调用这个方法。\n在后面讲数据面的章节中，我们会从这个函数开始，解析整个网络包的处理过程。\n另外要说一点，内核是通过用户进程传递的netdev_name在内核对应的namespace中寻找到对应的设备的，namespace可以起到网络设备隔离的作用。","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-2] [chx]
[INFO] 2017-07-28 12:44:30 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenVswitch源码分析之五】用户空间转发面数据结构与流程》成功 [pool-2-thread-11] [chx]
[INFO] 2017-07-28 12:44:30 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenVswitch源码分析之四】控制面关键接口与调用流程》成功 [pool-2-thread-12] [chx]
[INFO] 2017-07-28 12:44:30 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:45)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-02-【OpenVswitch源码分析之三】控制面关键接口与调用流程.markdown [pool-2-thread-2] [chx]
[INFO] 2017-07-28 12:44:30 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:54)] -> 存储博客《【OpenVswitch源码分析之三】控制面关键接口与调用流程》成功 [pool-2-thread-2] [chx]
[INFO] 2017-07-28 12:44:33 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 25 pages downloaded. [Thread-2] [chx]
[INFO] 2017-07-28 12:46:28 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider blog.csdn.net started! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:46:29 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://blog.csdn.net/ohenry88/article/list/9999 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:29)] -> 开始获取ohenry88的所有博客文章ID... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76221465 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:76100356 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75948544 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75905534 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75790969 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75769704 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75701576 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75451673 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75331436 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75267742 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:75208757 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74937873 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74858141 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74619521 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74156876 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:74132477 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73863848 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73744696 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:73196798 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:41657169 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:38855273 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23599257 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23506175 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23220067 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:47)] -> 已获取到您的博客文章ID:23127865 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:29 [cn.chenhaoxiang.CSDNBlogExport.process(CSDNBlogExport.java:50)] -> 获取所有的文章博客ID完成，您一共有25篇文章... [pool-1-thread-1] [chx]
[INFO] 2017-07-28 12:46:34 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider blog.csdn.net closed! 1 pages downloaded. [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:46:34 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 12:46:34 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23220067 [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:46:34 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":23220067,"title":"寻找兄弟数字","create_at":"\/Date(1396971526000)\/","create":"2014-04-08 11:38:46","view_count":650,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"#ifndef _FIND_SIMILAR_WORD_H_\n#define _FIND_SIMILAR_WORD_H_\n#include \n#include \nusing namespace std;\n/* \n* 编程实现单链表的排序 \n*/ \nclass Brother{ \npublic :\n\tBrother(char *n) :data(n) {}\n\tBrother* addWord(char","url":"http://blog.csdn.net/BLACKMOON88/article/details/23220067","categories":"","tags":"单链表,map,编程,iterator,c","content":"\r\n\u003cpre code_snippet_id=\"282103\" snippet_file_name=\"blog_20140408_1_1902756\"  name=\"code\" class=\"cpp\"\u003e#ifndef _FIND_SIMILAR_WORD_H_\n#define _FIND_SIMILAR_WORD_H_\n#include &lt;string&gt;\n#include &lt;map&gt;\nusing namespace std;\n/* \n* 编程实现单链表的排序 \n*/ \nclass Brother{ \npublic :\n\tBrother(char *n) :data(n) {}\n\tBrother* addWord(char *word);\npublic :\n    char *data; \n    Brother *next; \n\tBrother *pre;\n};\n\nint compareSeq(char *srcWord, char *destWord){\n\tchar *srcChar=srcWord;\n\tchar *destChar=destWord;\n\twhile(*srcChar!=\u0027\\0\u0027){\n\t\tif (*srcChar&gt;*destChar){\n\t\t\treturn 1;\n\t\t}\n\t\telse if(*srcChar&lt;*destChar){\n\t\t\treturn -1;\n\t\t}\n\t\telse{\n\t\t\tsrcChar++;\n\t\t\tdestChar++;\n\t\t}\n\t}\n\treturn 0;\n}\n\nBrother* Brother::addWord(char *srcWord){\n\t\tBrother* currentNode=this;\n\t\tint greaterThan=1;\n\t\tBrother *newWord=new Brother(srcWord);\n\t\tnewWord-&gt;next=NULL;\n\t\tnewWord-&gt;pre=NULL;\n\t\t//不大于后者\n\t\twhile(greaterThan!=-1){\n\t\t\tgreaterThan=compareSeq(srcWord,currentNode-&gt;data);\n\t\t\tif(greaterThan==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(greaterThan!=-1){\n\t\t\t\tif(currentNode-&gt;next!=NULL){\n\t\t\t\t\tcurrentNode=currentNode-&gt;next;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcurrentNode-&gt;next=newWord;\n\t\t\t\t\tnewWord-&gt;pre=currentNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t }\n\t\tif(greaterThan==-1){\n\t\t\tif(currentNode-&gt;pre==NULL){\n\t\t\t\tnewWord-&gt;next=currentNode;\n\t\t\t\tcurrentNode-&gt;pre=newWord;\n\t\t\t\treturn newWord;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcurrentNode-&gt;pre-&gt;next=newWord;\n\t\t\t\tnewWord-&gt;pre=currentNode-&gt;pre;\n\t\t\t\tnewWord-&gt;next=currentNode;\n\t\t\t\tcurrentNode-&gt;pre=newWord;\n\t\t\t}\n\t\t}\n\t\treturn NULL;\n}\n#endif \n\u003c/pre\u003e\u003cpre code_snippet_id=\"282103\" snippet_file_name=\"blog_20140408_2_6123660\"  name=\"code\" class=\"cpp\"\u003e/******************************************************************************\n\n  Copyright (C), 2001-2012, Huawei Tech. Co., Ltd.\n\n ******************************************************************************\n  File Name     : FindSimilarWord.cpp\n  Version       :\n  Author        :\n  Created       : 2012/09\n  Last Modified :\n  Description   :\n  Function List :\n\n  History       :\n  1.Date        : 2012/09\n    Author      :\n    Modification: Created file\n\n******************************************************************************/\n#include &quot;FindSimilarWord.h&quot;\n\ntypedef map&lt;string,Brother*&gt;::iterator DicPtrItr;\nmap&lt;string, Brother*&gt; dic;\n//生成Key\nstring generateKey(char srcWord[]){\n\tint length=(int)strlen(srcWord);\n\tchar srcWord2[60]={};\n\tchar tempChar;\n\tstrcpy(srcWord2,srcWord);\n\tfor(int i=0;i&lt;length-1;i++){\n\t\tfor(int j=0;j&lt;length-i-1;j++){\n\t\t\tif(srcWord2[j]&gt;srcWord2[j+1]){\n\t\t\t\ttempChar=srcWord2[j];\n\t\t\t\tsrcWord2[j]=srcWord2[j+1];\n\t\t\t\tsrcWord2[j+1]=tempChar;\n\t\t\t}\n\t\t}\n\t}\n\treturn string(srcWord2);\n}\n/******************************************************************************\n原    型：int AddOneWord (char* Word);\n功    能：在字典中增加一个单词\n输入参数： \n          Word 单词字符串，调用者保证Word指针不为空，指向的是合法单词\n输出参数：\n          无\n返回值：\n        -1 失败（单词在字典中已存在等情况）\n        0  成功\n********************************************************************************/\nint AddOneWord (char* Word)\n{\n    /* 在这里实现功能 */\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tBrother *brother,*head;\n\tif(dicPtrItr!=dic.end()){\n\t\tbrother=dicPtrItr-&gt;second;\n\t\thead=brother-&gt;addWord(Word);\n\t\tif (head!=NULL){\n\t\t\tdic[s]=head;\n\t\t}\n\t}\n\telse{\n\t\tbrother=new Brother(Word);\n\t\tbrother-&gt;next=NULL;\n\t\tbrother-&gt;pre=NULL;\n\t\tdic[s]=brother;\n\t}\n    return 0;\n}\n\n/******************************************************************************\n原    型：int FindSimilarWordNum (char* Word);\n功    能：查找指定单词在字典中的兄弟单词个数\n输入参数：\n          Word 指定单词字符串，调用者保证Word指针不为空，指向的是合法单词\n输出参数：\n          无\n返回值：\n          返回指定单词在字典中的兄弟单词总个数。如果不存在兄弟单词，返回0\n*******************************************************************************/\nint FindSimilarWordNum (char* Word)\n{\n\n    /* 在这里实现功能 */\n\tint i=0;\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tif(dicPtrItr==dic.end()){\n\t\treturn 0;\n\t}\n\tBrother *tempBro=dicPtrItr-&gt;second;\n\twhile(tempBro!=NULL){\n\t\tif(string(tempBro-&gt;data)!=string(Word)) {\n\t\t\ti++;\n\t\t}\n\t\ttempBro=tempBro-&gt;next;\n\t}\n    return i;\n}\n\n/******************************************************************************\n原    型：int FindOneSimilarWord (char* Word, int Seq, char* SimilarWord);\n功    能：查找指定单词的指定序号的兄弟单词，指定序号指字典中兄弟单词按字典顺序\n          排序后的序号（从1开始）\n输入参数：\n          Word 指定单词字符串，调用者保证Word指针不为空，指向的是合法单词\n          Seq 指定序号（大于等于1）\n输出参数：\n          SimilarWord 返回兄弟单词字符串，指针不为空，指向的内存由调用者预先分配，\n          占51个字节长度，输出的兄弟单词必须紧跟’\\0’结束。如果不存在指定序号的\n          兄弟单词，输出空串。\n返回值：\n          -1 失败（如果不存在指定序号的兄弟单词，返回失败）\n          0  成功\n*******************************************************************************/\nint FindOneSimilarWord (char* Word, int Seq, char* SimilarWord)\n{\n    /* 在这里实现功能 */\n\tif(FindSimilarWordNum(Word)&lt;Seq){\n\t\treturn -1;\n\t}\n\tint i=0;\n\tstring s=generateKey(Word);\n\tDicPtrItr dicPtrItr=dic.find(s);\n\tBrother *tempBro=dicPtrItr-&gt;second;\n\twhile(tempBro!=NULL){\n\t\tif(string(tempBro-&gt;data)!=string(Word)) {\n\t\t\ti++;\n\t\t\tif(i==Seq){\n\t\t\t\tstrcpy(SimilarWord,tempBro-&gt;data);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\ttempBro=tempBro-&gt;next;\n\t}\n    return -1;\n}\n\n/******************************************************************************\n原    型：void ClearAllWords(void);\n功    能：清空字典中所有单词\n输入参数： \n          无\n输出参数：\n          无\n返回值：\n          无\n\n*******************************************************************************/\nvoid ClearWords(Brother *currentNode){\n\tBrother * pr=NULL;\n\twhile(currentNode!=NULL){\n\t\t\tpr=currentNode-&gt;next;\n\t\t\tdelete currentNode;\n\t\t\tcurrentNode=pr;\n\t\t}\n}\n\nvoid ClearAllWords(void)\n{\n    /* 在这里实现功能 */\n\tDicPtrItr dicPtrItr=dic.begin();\n\tBrother *currentNode;\n\twhile(dicPtrItr!=dic.end()){\n\t\tcurrentNode=dicPtrItr-&gt;second;\n\t\tClearWords(currentNode);\n\t\tdicPtrItr++;\n\t}\n\tdic.clear();\n}\n\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:46:34 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-08-寻找兄弟数字.markdown [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:46:34 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《寻找兄弟数字》成功 [pool-2-thread-1] [chx]
[INFO] 2017-07-28 12:46:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=76100356 [pool-2-thread-19] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":76100356,"title":"【OpenStack源码分析之十一】分布式事务和相关算法","create_at":"\/Date(1500996897000)\/","create":"2017-07-25 11:34:57","view_count":1178,"comment_count":4,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前言在【OpenStack源码分析之六】从虚拟机启动流程看安全认证 中有提到一个问题是关于OpenStack的HA机制和灾难恢复（DR机制）的，HA和DR都是保障可用性的，两者都可以用两个维度来衡量，RTO （Recovery Time Objective）和 RPO（Recovery Point Objective）。RTO 是服务恢复的时间，最佳的情况是 0，这意味着服务立即恢复；最坏是无穷大意","url":"http://blog.csdn.net/BLACKMOON88/article/details/76100356","categories":"云计算,OpenStack","tags":"openstack,分布式,事务","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e在\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75701576\" target=\"_blank\"\u003e【OpenStack源码分析之六】从虚拟机启动流程看安全认证\u003c/a\u003e 中有提到一个问题是关于OpenStack的HA机制和灾难恢复（DR机制）的，HA和DR都是保障可用性的，两者都可以用两个维度来衡量，RTO （Recovery Time Objective）和 RPO（Recovery Point Objective）。RTO 是服务恢复的时间，最佳的情况是 0，这意味着服务立即恢复；最坏是无穷大意味着服务永远恢复不了；RPO 是切换时向前恢复的数据的时间长度，0 意味着使用同步的数据，大于 0 意味着有数据丢失，比如 ” RPO = 1 天“ 意味着恢复时使用一天前的数据，那么一天之内的数据就丢失了。因此，恢复的最佳结果是 RTO = RPO = 0，但是这个太理想，或者要实现的话成本太高，全球估计 Visa 等少数几个公司能实现，或者几乎实现。\u003c/p\u003e\n\n\u003cp\u003eHA和DR两者相互关联，互相补充，互有交叉，同时又有显著的区别：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eHA 往往指本地的高可用系统，表示在多个服务器运行一个或多种应用的情况下，应确保任意服务器出现任何故障时，其运行的应用不能中断，应用程序和系统应能迅速切换到其它服务器上运行，即本地系统集群和热备份。HA 往往是用共享存储，因此往往不会有数据丢失（RPO = 0），更多的是切换时间长度考虑即 RTO。\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDR 是指异地（同城或者异地）的高可用系统，表示在灾害发生时，数据、应用以及业务的恢复能力。异地灾备的数据灾备部分是使用数据复制，根据使用的不同数据复制技术（同步、异步、Strectched Cluster 等），数据往往有损失导致 RPO &gt;0；而异地的应用切换往往需要更长的时间，这样 RT0 &gt;0。 因此，需要结合特定的业务需求，来定制所需要的 RTO 和 RPO，以实现最优的 CTO。\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e这里先对HA机制里的分布式事务做一些分析，因为OpenStack自身是一个分布式系统，比如Nova Compute在创建虚拟机的流程涉及多个远程资源的操作，这里对整体的分布式事务的处理就是一个很重要的技术点。但是本节我并没有去探究OpenStack的实现，下面的技术可能并不是OpenStack选用的解决方案，我先列一下通用方案，有时间时我再去研究OpenStack的实现方式。\u003c/p\u003e\n\n\u003ch3 id=\"分布式事务\"\u003e分布式事务\u003c/h3\u003e\n\n\u003cp\u003e分布式事务当前的处理是有比较成熟的技术，比如两阶段提交和三阶段提交技术，鉴于篇幅，先介绍一下两阶段提交。\u003c/p\u003e\n\n\u003cp\u003e先举个栗子，比如在电商系统中，当有用户下单后，除了在订单表插入一条记录外，对应商品表的这个商品数量必须减1吧，怎么保证？！在搜索广告系统中，当用户点击某广告后，除了在点击事件表中增加一条记录外，还得去商家账户表中找到这个商家并扣除广告费吧，怎么保证？！等等，相信大家或多或多少都能碰到相似情景。\u003c/p\u003e\n\n\u003cp\u003e本质上问题可以抽象为：当一个表数据更新后，怎么保证另一个表的数据也必须要更新成功。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e本地事务\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n还是以支付宝转账余额宝为例，假设有\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e支付宝账户表：A（id，userId，amount）\u003c/li\u003e\n\u003cli\u003e余额宝账户表：B（id，userId，amount）\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e用户的userId=1； \u003cbr\u003e\n从支付宝转账1万块钱到余额宝的动作分为两步：\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e1）支付宝表扣除1万：update A set amount=amount-10000 where userId=1;\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e2）余额宝表增加1万：update B set amount=amount+10000 where userId=1;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如何确保支付宝余额宝收支平衡呢？\u003c/p\u003e\n\n\u003cp\u003e有人说这个很简单嘛，可以用事务解决。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eBegin\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n         \u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e A \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e amount=amount-\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e userId=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\n         \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e B \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e amount=amount+\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e userId=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eEnd\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e非常正确，如果你使用spring的话一个注解就能搞定上述事务功能。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs java\"\u003e\u003cspan class=\"hljs-annotation\"\u003e@Transactional\u003c/span\u003e(rollbackFor=Exception.class)\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eupdate\u003c/span\u003e() {\n        updateATable(); \u003cspan class=\"hljs-comment\"\u003e//更新A表\u003c/span\u003e\n        updateBTable(); \u003cspan class=\"hljs-comment\"\u003e//更新B表\u003c/span\u003e\n    }\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e如果系统规模较小，数据表都在一个数据库实例上，上述本地事务方式可以很好地运行，但是如果系统规模较大，比如支付宝账户表和余额宝账户表显然不会在同一个数据库实例上，他们往往分布在不同的物理节点上，这时本地事务已经失去用武之地。\u003c/p\u003e\n\n\u003cp\u003e既然本地事务失效，分布式事务自然就登上舞台。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e分布式事务—两阶段提交协议\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n两阶段提交协议（Two-phase Commit，2PC）经常被用来实现分布式事务。一般分为协调器C和若干事务执行者Si两种角色，这里的事务执行者就是具体的数据库，协调器可以和事务执行器在一台机器上. \u003cbr\u003e\n\u003cimg src=\"http://ww2.sinaimg.cn/large/7cc829d3gw1eux5nfbny7j20l908xta6.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e1） 我们的应用程序（client）发起一个开始请求到TC；\u003c/p\u003e\n\n\u003cp\u003e2） TC先将消息写到本地日志，之后向所有的Si发起消息。以支付宝转账到余额宝为例，TC给A的prepare消息是通知支付宝数据库相应账目扣款1万，TC给B的prepare消息是通知余额宝数据库相应账目增加1w。为什么在执行任务前需要先写本地日志，主要是为了故障后恢复用，本地日志起到现实生活中凭证 的效果，如果没有本地日志（凭证），出问题容易死无对证；\u003c/p\u003e\n\n\u003cp\u003e3） Si收到消息后，执行具体本机事务，但不会进行commit，如果成功返回，不成功返回。同理，返回前都应把要返回的消息写到日志里，当作凭证。\u003c/p\u003e\n\n\u003cp\u003e4） TC收集所有执行器返回的消息，如果所有执行器都返回yes，那么给所有执行器发生送commit消息，执行器收到commit后执行本地事务的commit操作；如果有任一个执行器返回no，那么给所有执行器发送abort消息，执行器收到abort消息后执行事务abort操作。\u003c/p\u003e\n\n\u003cp\u003e注：TC或Si把发送或接收到的消息先写到日志里，主要是为了故障后恢复用。如某一Si从故障中恢复后，先检查本机的日志，如果已收到，则提交，如果则回滚。如果是，则再向TC询问一下，确定下一步。如果什么都没有，则很可能在阶段Si就崩溃了，因此需要回滚。\u003c/p\u003e\n\n\u003cp\u003e现如今实现基于两阶段提交的分布式事务也没那么困难了，如果使用java，那么可以使用开源软件atomikos(\u003ca href=\"http://www.atomikos.com/\" target=\"_blank\"\u003ehttp://www.atomikos.com/\u003c/a\u003e)来快速实现。\u003c/p\u003e\n\n\u003cp\u003e不过但凡使用过的上述两阶段提交的同学都可以发现性能实在是太差，根本不适合高并发的系统。为什么？\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e1）两阶段提交涉及多次节点间的网络通信，通信时间太长！\u003c/li\u003e\n\u003cli\u003e2）事务时间相对于变长了，锁定的资源的时间也变长了，造成资源等待时间也增加好多！\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e正是由于分布式事务存在很严重的性能问题，大部分高并发服务都在避免使用，往往通过其他途径来解决数据一致性问题。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e使用消息队列来避免分布式事务\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e如果仔细观察生活的话，生活的很多场景已经给了我们提示。\u003c/p\u003e\n\n\u003cp\u003e比如在北京很有名的姚记炒肝点了炒肝并付了钱后，他们并不会直接把你点的炒肝给你，而是给你一张小票，然后让你拿着小票到出货区排队去取。为什么他们要将付钱和取货两个动作分开呢？原因很多，其中一个很重要的原因是为了使他们接待能力增强（并发量更高）。\u003c/p\u003e\n\n\u003cp\u003e还是回到我们的问题，只要这张小票在，你最终是能拿到炒肝的。同理转账服务也是如此，当支付宝账户扣除1万后，我们只要生成一个凭证（消息）即可，这个凭证（消息）上写着“让余额宝账户增加 1万”，只要这个凭证（消息）能可靠保存，我们最终是可以拿着这个凭证（消息）让余额宝账户增加1万的，即我们能依靠这个凭证（消息）完成最终一致性。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e如何可靠保存凭证（消息）\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n有两种方法：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e业务与消息耦合的方式\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e支付宝在完成扣款的同时，同时记录消息数据，这个消息数据与业务数据保存在同一数据库实例里（消息记录表表名为message）。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003e\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eBegin\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n         \u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e A \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e amount=amount-\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e userId=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\n         \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einsert\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e message(userId, amount,status) \u003cspan class=\"hljs-keyword\"\u003evalues\u003c/span\u003e(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\n\u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eEnd\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e上述事务能保证只要支付宝账户里被扣了钱，消息一定能保存下来。\u003c/p\u003e\n\n\u003cp\u003e当上述事务提交成功后，我们通过实时消息服务将此消息通知余额宝，余额宝处理成功后发送回复成功消息，支付宝收到回复后删除该条消息数据。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e业务与消息解耦方式\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e上述保存消息的方式使得消息数据和业务数据紧耦合在一起，从架构上看不够优雅，而且容易诱发其他问题。为了解耦，可以采用以下方式。\u003c/p\u003e\n\n\u003cp\u003e1）支付宝在扣款事务提交之前，向实时消息服务请求发送消息，实时消息服务只记录消息数据，而不真正发送，只有消息发送成功后才会提交事务；\u003c/p\u003e\n\n\u003cp\u003e2）当支付宝扣款事务被提交成功后，向实时消息服务确认发送。只有在得到确认发送指令后，实时消息服务才真正发送该消息；\u003c/p\u003e\n\n\u003cp\u003e3）当支付宝扣款事务提交失败回滚后，向实时消息服务取消发送。在得到取消发送指令后，该消息将不会被发送；\u003c/p\u003e\n\n\u003cp\u003e4）对于那些未确认的消息或者取消的消息，需要有一个消息状态确认系统定时去支付宝系统查询这个消息的状态并进行更新。为什么需要这一步骤，举个例子：假设在第2步支付宝扣款事务被成功提交后，系统挂了，此时消息状态并未被更新为“确认发送”，从而导致消息不能被发送。\u003c/p\u003e\n\n\u003cp\u003e优点：消息数据独立存储，降低业务系统与消息系统间的耦合；\u003c/p\u003e\n\n\u003cp\u003e缺点：一次消息发送需要两次请求；业务处理服务需要实现消息状态回查接口。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20160702104538494\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e如何解决消息重复投递的问题\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n还有一个很严重的问题就是消息重复投递，以我们支付宝转账到余额宝为例，如果相同的消息被重复投递两次，那么我们余额宝账户将会增加2万而不是1万了。这里面涉及到消费者接口的幂等性设计，简单来说，一个操作如果具有任意多次执行所产生的影响均与一次执行的影响相同，我们就称之为幂等。可见参考资料：\u003ca href=\"https://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\" target=\"_blank\"\u003ehttps://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e为什么相同的消息会被重复投递？比如余额宝处理完消息msg后，发送了处理成功的消息给支付宝，正常情况下支付宝应该要删除消息msg，但如果支付宝这时候悲剧的挂了，重启后一看消息msg还在，就会继续发送消息msg。\u003c/p\u003e\n\n\u003cp\u003e解决方法很简单，在余额宝这边增加消息应用状态表（message_apply），通俗来说就是个账本，用于记录消息的消费情况，每次来一个消息，在真正执行之前，先去消息应用状态表中查询一遍，如果找到说明是重复消息，丢弃即可，如果没找到才执行，同时插入到消息应用状态表（同一事务）。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003efor each msg in queue\n  \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eBegin\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eselect\u003c/span\u003e \u003cspan class=\"hljs-aggregate\"\u003ecount\u003c/span\u003e(*) \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e cnt \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e message_apply \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e msg_id=msg.msg_id;\u003c/span\u003e\n    if cnt==0 then\n      \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eupdate\u003c/span\u003e B \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e amount=amount+\u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e userId=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\n      \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003einsert\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e message_apply(msg_id) \u003cspan class=\"hljs-keyword\"\u003evalues\u003c/span\u003e(msg.msg_id);\u003c/span\u003e\n  \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eEnd\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e\n  \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eebay的研发人员其实在2008年就提出了应用消息状态确认表来解决消息重复投递的问题：\u003ca href=\"http://queue.acm.org/detail.cfm?id=1394128\" target=\"_blank\"\u003ehttp://queue.acm.org/detail.cfm?id=1394128\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch3 id=\"cap理论与相关算法\"\u003eCAP理论与相关算法\u003c/h3\u003e\n\n\u003cp\u003e在理论计算机科学中，CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e一致性 (Consistency)（等同于所有节点访问同一份最新的数据副本）\u003c/li\u003e\n\u003cli\u003e可用性（Availability）（对数据更新具备高可用性）\u003c/li\u003e\n\u003cli\u003e网络分区容忍性（Partition tolerance）（以实际效果而言，数据存在的节点越多，分区容忍性越高）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e详细理论可见参考文献四。\u003c/p\u003e\n\n\u003cp\u003e这里我们把一致性分为两类，强一致性（CP）和最终一致性（AP），为了实现强一致性会有很多算法，这其中Raft算法的使用范围也比较广泛。详细教程见：\u003ca href=\"http://thesecretlivesofdata.com/raft/#home\"\u003ehttp://thesecretlivesofdata.com/raft/#home\u003c/a\u003e ；关于最终一致性也有不少算法，Gossip算法也是其中的使用度交广的一种，详细分析材料见：\u003ca href=\"http://blog.csdn.net/chen77716/article/details/6275762\"\u003ehttp://blog.csdn.net/chen77716/article/details/6275762\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://blog.jobbole.com/89140/\"\u003ehttp://blog.jobbole.com/89140/\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/dinglang_2009/article/details/51810151\"\u003ehttp://blog.csdn.net/dinglang_2009/article/details/51810151\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"https://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\"\u003ehttps://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"https://zhuanlan.zhihu.com/p/20399316?columnSlug=auxten\"\u003ehttps://zhuanlan.zhihu.com/p/20399316?columnSlug=auxten\u003c/a\u003e\u003c/p\u003e","markdowncontent":"###前言\n在[【OpenStack源码分析之六】从虚拟机启动流程看安全认证](http://blog.csdn.net/ohenry88/article/details/75701576) 中有提到一个问题是关于OpenStack的HA机制和灾难恢复（DR机制）的，HA和DR都是保障可用性的，两者都可以用两个维度来衡量，RTO （Recovery Time Objective）和 RPO（Recovery Point Objective）。RTO 是服务恢复的时间，最佳的情况是 0，这意味着服务立即恢复；最坏是无穷大意味着服务永远恢复不了；RPO 是切换时向前恢复的数据的时间长度，0 意味着使用同步的数据，大于 0 意味着有数据丢失，比如 ” RPO = 1 天“ 意味着恢复时使用一天前的数据，那么一天之内的数据就丢失了。因此，恢复的最佳结果是 RTO = RPO = 0，但是这个太理想，或者要实现的话成本太高，全球估计 Visa 等少数几个公司能实现，或者几乎实现。\n\nHA和DR两者相互关联，互相补充，互有交叉，同时又有显著的区别：\n\n- HA 往往指本地的高可用系统，表示在多个服务器运行一个或多种应用的情况下，应确保任意服务器出现任何故障时，其运行的应用不能中断，应用程序和系统应能迅速切换到其它服务器上运行，即本地系统集群和热备份。HA 往往是用共享存储，因此往往不会有数据丢失（RPO = 0），更多的是切换时间长度考虑即 RTO。\n\n- DR 是指异地（同城或者异地）的高可用系统，表示在灾害发生时，数据、应用以及业务的恢复能力。异地灾备的数据灾备部分是使用数据复制，根据使用的不同数据复制技术（同步、异步、Strectched Cluster 等），数据往往有损失导致 RPO \u003e0；而异地的应用切换往往需要更长的时间，这样 RT0 \u003e0。 因此，需要结合特定的业务需求，来定制所需要的 RTO 和 RPO，以实现最优的 CTO。\n\n这里先对HA机制里的分布式事务做一些分析，因为OpenStack自身是一个分布式系统，比如Nova Compute在创建虚拟机的流程涉及多个远程资源的操作，这里对整体的分布式事务的处理就是一个很重要的技术点。但是本节我并没有去探究OpenStack的实现，下面的技术可能并不是OpenStack选用的解决方案，我先列一下通用方案，有时间时我再去研究OpenStack的实现方式。\n\n###分布式事务\n分布式事务当前的处理是有比较成熟的技术，比如两阶段提交和三阶段提交技术，鉴于篇幅，先介绍一下两阶段提交。\n\n先举个栗子，比如在电商系统中，当有用户下单后，除了在订单表插入一条记录外，对应商品表的这个商品数量必须减1吧，怎么保证？！在搜索广告系统中，当用户点击某广告后，除了在点击事件表中增加一条记录外，还得去商家账户表中找到这个商家并扣除广告费吧，怎么保证？！等等，相信大家或多或多少都能碰到相似情景。\n\n本质上问题可以抽象为：当一个表数据更新后，怎么保证另一个表的数据也必须要更新成功。\n\n***本地事务***\n还是以支付宝转账余额宝为例，假设有\n\n- 支付宝账户表：A（id，userId，amount）\n- 余额宝账户表：B（id，userId，amount）\n- 用户的userId=1；\n从支付宝转账1万块钱到余额宝的动作分为两步：\n\n- 1）支付宝表扣除1万：update A set amount=amount-10000 where userId=1;\n- 2）余额宝表增加1万：update B set amount=amount+10000 where userId=1;\n\n如何确保支付宝余额宝收支平衡呢？\n\n有人说这个很简单嘛，可以用事务解决。\n```\nBegin transaction\n         update A set amount=amount-10000 where userId=1;\n         update B set amount=amount+10000 where userId=1;\nEnd transaction\ncommit;\n```\n非常正确，如果你使用spring的话一个注解就能搞定上述事务功能。\n\n```\n@Transactional(rollbackFor=Exception.class)\n    public void update() {\n        updateATable(); //更新A表\n        updateBTable(); //更新B表\n    }\n```\n如果系统规模较小，数据表都在一个数据库实例上，上述本地事务方式可以很好地运行，但是如果系统规模较大，比如支付宝账户表和余额宝账户表显然不会在同一个数据库实例上，他们往往分布在不同的物理节点上，这时本地事务已经失去用武之地。\n\n既然本地事务失效，分布式事务自然就登上舞台。\n\n***分布式事务—两阶段提交协议***\n两阶段提交协议（Two-phase Commit，2PC）经常被用来实现分布式事务。一般分为协调器C和若干事务执行者Si两种角色，这里的事务执行者就是具体的数据库，协调器可以和事务执行器在一台机器上.\n![这里写图片描述](http://ww2.sinaimg.cn/large/7cc829d3gw1eux5nfbny7j20l908xta6.jpg)\n\n1） 我们的应用程序（client）发起一个开始请求到TC；\n\n2） TC先将\u003cprepare\u003e消息写到本地日志，之后向所有的Si发起\u003cprepare\u003e消息。以支付宝转账到余额宝为例，TC给A的prepare消息是通知支付宝数据库相应账目扣款1万，TC给B的prepare消息是通知余额宝数据库相应账目增加1w。为什么在执行任务前需要先写本地日志，主要是为了故障后恢复用，本地日志起到现实生活中凭证 的效果，如果没有本地日志（凭证），出问题容易死无对证；\n\n3） Si收到\u003cprepare\u003e消息后，执行具体本机事务，但不会进行commit，如果成功返回\u003cyes\u003e，不成功返回\u003cno\u003e。同理，返回前都应把要返回的消息写到日志里，当作凭证。\n\n4） TC收集所有执行器返回的消息，如果所有执行器都返回yes，那么给所有执行器发生送commit消息，执行器收到commit后执行本地事务的commit操作；如果有任一个执行器返回no，那么给所有执行器发送abort消息，执行器收到abort消息后执行事务abort操作。\n\n注：TC或Si把发送或接收到的消息先写到日志里，主要是为了故障后恢复用。如某一Si从故障中恢复后，先检查本机的日志，如果已收到\u003ccommit \u003e，则提交，如果\u003cabort \u003e则回滚。如果是\u003cyes\u003e，则再向TC询问一下，确定下一步。如果什么都没有，则很可能在\u003cprepare\u003e阶段Si就崩溃了，因此需要回滚。\n\n现如今实现基于两阶段提交的分布式事务也没那么困难了，如果使用java，那么可以使用开源软件atomikos(http://www.atomikos.com/)来快速实现。\n\n不过但凡使用过的上述两阶段提交的同学都可以发现性能实在是太差，根本不适合高并发的系统。为什么？\n\n- 1）两阶段提交涉及多次节点间的网络通信，通信时间太长！\n- 2）事务时间相对于变长了，锁定的资源的时间也变长了，造成资源等待时间也增加好多！\n\n正是由于分布式事务存在很严重的性能问题，大部分高并发服务都在避免使用，往往通过其他途径来解决数据一致性问题。\n\n***使用消息队列来避免分布式事务***\n\n如果仔细观察生活的话，生活的很多场景已经给了我们提示。\n\n比如在北京很有名的姚记炒肝点了炒肝并付了钱后，他们并不会直接把你点的炒肝给你，而是给你一张小票，然后让你拿着小票到出货区排队去取。为什么他们要将付钱和取货两个动作分开呢？原因很多，其中一个很重要的原因是为了使他们接待能力增强（并发量更高）。\n\n还是回到我们的问题，只要这张小票在，你最终是能拿到炒肝的。同理转账服务也是如此，当支付宝账户扣除1万后，我们只要生成一个凭证（消息）即可，这个凭证（消息）上写着“让余额宝账户增加 1万”，只要这个凭证（消息）能可靠保存，我们最终是可以拿着这个凭证（消息）让余额宝账户增加1万的，即我们能依靠这个凭证（消息）完成最终一致性。\n\n***如何可靠保存凭证（消息）***\n有两种方法：\n\n- 业务与消息耦合的方式\n\n支付宝在完成扣款的同时，同时记录消息数据，这个消息数据与业务数据保存在同一数据库实例里（消息记录表表名为message）。\n```\nBegin transaction\n         update A set amount=amount-10000 where userId=1;\n         insert into message(userId, amount,status) values(1, 10000, 1);\nEnd transaction\ncommit;\n```\n上述事务能保证只要支付宝账户里被扣了钱，消息一定能保存下来。\n\n当上述事务提交成功后，我们通过实时消息服务将此消息通知余额宝，余额宝处理成功后发送回复成功消息，支付宝收到回复后删除该条消息数据。\n\n- 业务与消息解耦方式\n\n上述保存消息的方式使得消息数据和业务数据紧耦合在一起，从架构上看不够优雅，而且容易诱发其他问题。为了解耦，可以采用以下方式。\n\n1）支付宝在扣款事务提交之前，向实时消息服务请求发送消息，实时消息服务只记录消息数据，而不真正发送，只有消息发送成功后才会提交事务；\n\n2）当支付宝扣款事务被提交成功后，向实时消息服务确认发送。只有在得到确认发送指令后，实时消息服务才真正发送该消息；\n\n3）当支付宝扣款事务提交失败回滚后，向实时消息服务取消发送。在得到取消发送指令后，该消息将不会被发送；\n\n4）对于那些未确认的消息或者取消的消息，需要有一个消息状态确认系统定时去支付宝系统查询这个消息的状态并进行更新。为什么需要这一步骤，举个例子：假设在第2步支付宝扣款事务被成功提交后，系统挂了，此时消息状态并未被更新为“确认发送”，从而导致消息不能被发送。\n\n优点：消息数据独立存储，降低业务系统与消息系统间的耦合；\n\n缺点：一次消息发送需要两次请求；业务处理服务需要实现消息状态回查接口。\n\n![这里写图片描述](http://img.blog.csdn.net/20160702104538494)\n\n***如何解决消息重复投递的问题***\n还有一个很严重的问题就是消息重复投递，以我们支付宝转账到余额宝为例，如果相同的消息被重复投递两次，那么我们余额宝账户将会增加2万而不是1万了。这里面涉及到消费者接口的幂等性设计，简单来说，一个操作如果具有任意多次执行所产生的影响均与一次执行的影响相同，我们就称之为幂等。可见参考资料：https://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\n\n为什么相同的消息会被重复投递？比如余额宝处理完消息msg后，发送了处理成功的消息给支付宝，正常情况下支付宝应该要删除消息msg，但如果支付宝这时候悲剧的挂了，重启后一看消息msg还在，就会继续发送消息msg。\n\n解决方法很简单，在余额宝这边增加消息应用状态表（message_apply），通俗来说就是个账本，用于记录消息的消费情况，每次来一个消息，在真正执行之前，先去消息应用状态表中查询一遍，如果找到说明是重复消息，丢弃即可，如果没找到才执行，同时插入到消息应用状态表（同一事务）。\n\n```\nfor each msg in queue\n  Begin transaction\n    select count(*) as cnt from message_apply where msg_id=msg.msg_id;\n    if cnt==0 then\n      update B set amount=amount+10000 where userId=1;\n      insert into message_apply(msg_id) values(msg.msg_id);\n  End transaction\n  commit;\n```\nebay的研发人员其实在2008年就提出了应用消息状态确认表来解决消息重复投递的问题：http://queue.acm.org/detail.cfm?id=1394128。\n\n\n###CAP理论与相关算法\n在理论计算机科学中，CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：\n\n- 一致性 (Consistency)（等同于所有节点访问同一份最新的数据副本）\n- 可用性（Availability）（对数据更新具备高可用性）\n- 网络分区容忍性（Partition tolerance）（以实际效果而言，数据存在的节点越多，分区容忍性越高）\n\n详细理论可见参考文献四。\n\n这里我们把一致性分为两类，强一致性（CP）和最终一致性（AP），为了实现强一致性会有很多算法，这其中Raft算法的使用范围也比较广泛。详细教程见：http://thesecretlivesofdata.com/raft/#home ；关于最终一致性也有不少算法，Gossip算法也是其中的使用度交广的一种，详细分析材料见：http://blog.csdn.net/chen77716/article/details/6275762\n\n\n参考文献：\nhttp://blog.jobbole.com/89140/\nhttp://blog.csdn.net/dinglang_2009/article/details/51810151\nhttps://mp.weixin.qq.com/s/EDkuMW5-hdIxs2GXMFnj_Q\nhttps://zhuanlan.zhihu.com/p/20399316?columnSlug=auxten","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-19] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-25-【OpenStack源码分析之十一】分布式事务和相关算法.markdown [pool-2-thread-19] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之十一】分布式事务和相关算法》成功 [pool-2-thread-19] [chx]
[INFO] 2017-07-28 12:46:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74858141 [pool-2-thread-18] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":74858141,"title":"【OpenVswitch源码分析之六】内核空间转发面数据结构与流程","create_at":"\/Date(1499593934000)\/","create":"2017-07-09 05:52:14","view_count":82,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"内核态的报文处理起始有不少人已经写了比较详细的分析，这里有SDNLAB的一篇文章（http://www.sdnlab.com/15713.html），这里只是对那些文章再做些总结；内核对报文的处理整体上分为三个大的步骤：\n报文头的提取\n流表项的匹配\n动作的执行 \n对于报文头的提取，与传统的路由器、交换机不同，OpenFlow的匹配域包含了L2-L4等匹配域。所以其设计了一个数据结构sw_flow_k","url":"http://blog.csdn.net/BLACKMOON88/article/details/74858141","categories":"云计算,C语言算法,OpenVswitch","tags":"数据结构,内核,源码,交换机","content":"\u003cp\u003e内核态的报文处理起始有不少人已经写了比较详细的分析，这里有SDNLAB的一篇文章（\u003ca href=\"http://www.sdnlab.com/15713.html\"\u003ehttp://www.sdnlab.com/15713.html\u003c/a\u003e），这里只是对那些文章再做些总结；内核对报文的处理整体上分为三个大的步骤：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e报文头的提取\u003c/li\u003e\n\u003cli\u003e流表项的匹配\u003c/li\u003e\n\u003cli\u003e动作的执行\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e对于报文头的提取，与传统的路由器、交换机不同，OpenFlow的匹配域包含了L2-L4等匹配域。所以其设计了一个数据结构sw_flow_key来做提取 \u003cbr\u003e\n \u003cimg src=\"http://img1.sdnlab.com/wp-content/uploads/2014/11/Open-vSwitch%E7%9A%84%E6%95%B4%E4%B8%AA%E6%A1%86%E6%9E%B6%E5%9B%BE.png\" alt=\"OVS Datapeth数据结构\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs d\"\u003e\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e sw_flow_key {\n    u8 tun_opts[\u003cspan class=\"hljs-number\"\u003e255\u003c/span\u003e];\n    u8 tun_opts_len;\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e ip_tunnel_key tun_key;  \u003cspan class=\"hljs-comment\"\u003e/* Encapsulating tunnel key. */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n        u32 priority;   \u003cspan class=\"hljs-comment\"\u003e/* Packet QoS priority. */\u003c/span\u003e\n        u32 skb_mark;   \u003cspan class=\"hljs-comment\"\u003e/* SKB mark. */\u003c/span\u003e\n        u16 in_port;    \u003cspan class=\"hljs-comment\"\u003e/* Input switch port (or DP_MAX_PORTS). */\u003c/span\u003e\n    } __packed phy; \u003cspan class=\"hljs-comment\"\u003e/* Safe when right after \u0027tun_key\u0027. */\u003c/span\u003e\n    u8 tun_proto;                   \u003cspan class=\"hljs-comment\"\u003e/* Protocol of encapsulating tunnel. */\u003c/span\u003e\n    u32 ovs_flow_hash;      \u003cspan class=\"hljs-comment\"\u003e/* Datapath computed hash value.  */\u003c/span\u003e\n    u32 recirc_id;          \u003cspan class=\"hljs-comment\"\u003e/* Recirculation ID.  */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n        u8     src[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* Ethernet source address. */\u003c/span\u003e\n        u8     dst[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* Ethernet destination address. */\u003c/span\u003e\n        __be16 tci;     \u003cspan class=\"hljs-comment\"\u003e/* 0 if no VLAN, VLAN_TAG_PRESENT set otherwise. */\u003c/span\u003e\n        __be16 type;        \u003cspan class=\"hljs-comment\"\u003e/* Ethernet frame type. */\u003c/span\u003e\n    } eth;\n    \u003cspan class=\"hljs-keyword\"\u003eunion\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n            __be32 top_lse; \u003cspan class=\"hljs-comment\"\u003e/* top label stack entry */\u003c/span\u003e\n        } mpls;\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n            u8     proto;   \u003cspan class=\"hljs-comment\"\u003e/* IP protocol or lower 8 bits of ARP opcode. */\u003c/span\u003e\n            u8     tos;     \u003cspan class=\"hljs-comment\"\u003e/* IP ToS. */\u003c/span\u003e\n            u8     ttl;     \u003cspan class=\"hljs-comment\"\u003e/* IP TTL/hop limit. */\u003c/span\u003e\n            u8     frag;    \u003cspan class=\"hljs-comment\"\u003e/* One of OVS_FRAG_TYPE_*. */\u003c/span\u003e\n        } ip;\n    };\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n        __be16 src;     \u003cspan class=\"hljs-comment\"\u003e/* TCP/UDP/SCTP source port. */\u003c/span\u003e\n        __be16 dst;     \u003cspan class=\"hljs-comment\"\u003e/* TCP/UDP/SCTP destination port. */\u003c/span\u003e\n        __be16 flags;       \u003cspan class=\"hljs-comment\"\u003e/* TCP flags. */\u003c/span\u003e\n    } tp;\n    \u003cspan class=\"hljs-keyword\"\u003eunion\u003c/span\u003e {\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n            \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n                __be32 src; \u003cspan class=\"hljs-comment\"\u003e/* IP source address. */\u003c/span\u003e\n                __be32 dst; \u003cspan class=\"hljs-comment\"\u003e/* IP destination address. */\u003c/span\u003e\n            } addr;\n            \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n                u8 sha[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* ARP source hardware address. */\u003c/span\u003e\n                u8 tha[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* ARP target hardware address. */\u003c/span\u003e\n            } arp;\n        } ipv4;\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n            \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n                \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr src;    \u003cspan class=\"hljs-comment\"\u003e/* IPv6 source address. */\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr dst;    \u003cspan class=\"hljs-comment\"\u003e/* IPv6 destination address. */\u003c/span\u003e\n            } addr;\n            __be32 label;           \u003cspan class=\"hljs-comment\"\u003e/* IPv6 flow label. */\u003c/span\u003e\n            \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n                \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr target; \u003cspan class=\"hljs-comment\"\u003e/* ND target address. */\u003c/span\u003e\n                u8 sll[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* ND source link layer address. */\u003c/span\u003e\n                u8 tll[ETH_ALEN];   \u003cspan class=\"hljs-comment\"\u003e/* ND target link layer address. */\u003c/span\u003e\n            } nd;\n        } ipv6;\n    };\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e {\n        \u003cspan class=\"hljs-comment\"\u003e/* Connection tracking fields. */\u003c/span\u003e\n        u16 zone;\n        u32 mark;\n        u8 state;\n        \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e ovs_key_ct_labels labels;\n    } ct;\n\n} __aligned(BITS_PER_LONG/\u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e/* Ensure that we can do comparisons as longs. */\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs applescript\"\u003estruct sw_flow {\n    struct rcu_head rcu;\n    struct {\n        struct hlist_node node[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\n        u32 hash;\n    } flow_table, ufid_table;\n    int stats_last_writer;      /* NUMA-node \u003cspan class=\"hljs-property\"\u003eid\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elast\u003c/span\u003e writer \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e\n                     * \u0027stats[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]\u0027.\n                     */\n    struct sw_flow_key key;\n    struct sw_flow_id \u003cspan class=\"hljs-property\"\u003eid\u003c/span\u003e;\n    struct sw_flow_mask *mask;\n    struct sw_flow_actions __rcu *sf_acts;\n    struct flow_stats __rcu *stats[]; /* One \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e each NUMA node.  First one\n                       * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e allocated \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e flow creation \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e,\n                       * \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-property\"\u003erest\u003c/span\u003e are allocated \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e demand\n                       * \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e holding \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u0027stats[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e].lock\u0027.\n                       */\n};\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e相关数据结构的关系及详细内容都在上面有表述，下面讲讲具体的工作步骤：\u003c/p\u003e\n\n\u003cp\u003e第一步，它会根据网桥上的流表结构体（table）中的mask_list成员来遍历，这个mask_list成员是一条链表的头结点，这条链表是由mask元素链接组成（里面的list是没有数据的链表结构，作用就是负责链接多个mask结构，是mask的成员）；流表查询函数开始就是循环遍历这条链表，每遍历到得到一个mask结构体，就调用函数进入第二步。\u003c/p\u003e\n\n\u003cp\u003e第二步，是操作key值，调用函数让从数据包提取到的key值和第一步得到的mask中的key值，进行与操作，然后把结构存放到另外一个key值中（masked_key）。顺序执行第三步。\u003c/p\u003e\n\n\u003cp\u003e第三步，把第二步中得到的那个与操作后的key值（masked_key），传入 jhash2()算法函数中，该算法是经典的哈希算法，想深入了解可以自己查资料（不过都是些数学推理，感觉挺难的），linux内核中也多处使用到了这个算法函数。通过这个函数把key值（masked_key）转换成hash关键字。\u003c/p\u003e\n\n\u003cp\u003e第四步，把第三步得到的hash值，传入 find_bucket()函数中，在该函数中再通过jhash_1word()算法函数，把hash关键字再次哈希得到一个全新的hash关键字。这个函数和第三步的哈希算法函数类似，只是参数不同，多了一个word。经过两个哈希算法函数的计算得到一个新的hash值。\u003c/p\u003e\n\n\u003cp\u003e第五步，把第四步得到的hash关键字，传入到flex_array_get()函数中，这个函数的作用就是找到对应的哈希头位置。具体的请看上面的图，流表结构（table）中有个buckets成员，该成员称作为哈希桶，哈希桶里面存放的是成员字段和弹性数组parts[n]，而这个parts[n]数组里面存放的就是所要找的哈希头指针，这个哈希头指针指向了一个流表项链表（在图中的最下面struct sw_flow），所以这个才是我们等下要匹配的流表项。（这个哈希桶到弹性数组这一段，我有点疑问，不是很清楚，在下一篇blog中会分析下这个疑问，大家看到如果和源代码有出入，请按源代码来分析），这一步就是根据hash关键字查找到流表项的链表头指针。\u003c/p\u003e\n\n\u003cp\u003e第六步，由第五步得到的流表项链表头指针，根据这个指针遍历整个流表项节点元素（就是struct sw_flow结构体元素），每遍历得到一个流表项sw_flow结构体元素，就把流表项中的mask成员和第一步遍历得到的mask变量（忘记了可以重新回到第一步去看下）进行比较；比较完后还要让流表项sw_flow结构体元素中的key值成员和第二步中得到的key值（masked_key）进行比较；只有当上面两个比较都相等时，这个流表项才是我们要匹配查询的流表项了。然后直接返回该流表项的地址。如果找到了，很好说明用户态的流表已经放入内核，则走fast path就可了。于是直接调用ovs_execute_actions，执行这个key对应的action。\u003c/p\u003e\n\n\u003cp\u003e如果不能找到，则只好调用ovs_dp_upcall，让用户态去查找流表。会调用static int queue_userspace_packet(struct datapath *dp, struct sk_buff *skb, const struct sw_flow_key *key, const struct dp_upcall_info *upcall_info)\u003c/p\u003e\n\n\u003cp\u003e它会调用err = genlmsg_unicast(ovs_dp_get_net(dp), user_skb, upcall_info-&gt;portid);通过netlink将消息发送给用户态。在用户态，有线程监听消息，一旦有消息，则触发udpif_upcall_handler。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://images2015.cnblogs.com/blog/635909/201609/635909-20160913232546570-59130550.png\" alt=\"OVS Fast Path和Slow Path\" title=\"\"\u003e\u003c/p\u003e","markdowncontent":"内核态的报文处理起始有不少人已经写了比较详细的分析，这里有SDNLAB的一篇文章（http://www.sdnlab.com/15713.html），这里只是对那些文章再做些总结；内核对报文的处理整体上分为三个大的步骤：\n\n - 报文头的提取\n - 流表项的匹配\n - 动作的执行\n \n对于报文头的提取，与传统的路由器、交换机不同，OpenFlow的匹配域包含了L2-L4等匹配域。所以其设计了一个数据结构sw_flow_key来做提取\n ![OVS Datapeth数据结构](http://img1.sdnlab.com/wp-content/uploads/2014/11/Open-vSwitch%E7%9A%84%E6%95%B4%E4%B8%AA%E6%A1%86%E6%9E%B6%E5%9B%BE.png)\n\n```\nstruct sw_flow_key {\n\tu8 tun_opts[255];\n\tu8 tun_opts_len;\n\tstruct ip_tunnel_key tun_key;  /* Encapsulating tunnel key. */\n\tstruct {\n\t\tu32\tpriority;\t/* Packet QoS priority. */\n\t\tu32\tskb_mark;\t/* SKB mark. */\n\t\tu16\tin_port;\t/* Input switch port (or DP_MAX_PORTS). */\n\t} __packed phy; /* Safe when right after \u0027tun_key\u0027. */\n\tu8 tun_proto;                   /* Protocol of encapsulating tunnel. */\n\tu32 ovs_flow_hash;\t\t/* Datapath computed hash value.  */\n\tu32 recirc_id;\t\t\t/* Recirculation ID.  */\n\tstruct {\n\t\tu8     src[ETH_ALEN];\t/* Ethernet source address. */\n\t\tu8     dst[ETH_ALEN];\t/* Ethernet destination address. */\n\t\t__be16 tci;\t\t/* 0 if no VLAN, VLAN_TAG_PRESENT set otherwise. */\n\t\t__be16 type;\t\t/* Ethernet frame type. */\n\t} eth;\n\tunion {\n\t\tstruct {\n\t\t\t__be32 top_lse;\t/* top label stack entry */\n\t\t} mpls;\n\t\tstruct {\n\t\t\tu8     proto;\t/* IP protocol or lower 8 bits of ARP opcode. */\n\t\t\tu8     tos;\t    /* IP ToS. */\n\t\t\tu8     ttl;\t    /* IP TTL/hop limit. */\n\t\t\tu8     frag;\t/* One of OVS_FRAG_TYPE_*. */\n\t\t} ip;\n\t};\n\tstruct {\n\t\t__be16 src;\t\t/* TCP/UDP/SCTP source port. */\n\t\t__be16 dst;\t\t/* TCP/UDP/SCTP destination port. */\n\t\t__be16 flags;\t\t/* TCP flags. */\n\t} tp;\n\tunion {\n\t\tstruct {\n\t\t\tstruct {\n\t\t\t\t__be32 src;\t/* IP source address. */\n\t\t\t\t__be32 dst;\t/* IP destination address. */\n\t\t\t} addr;\n\t\t\tstruct {\n\t\t\t\tu8 sha[ETH_ALEN];\t/* ARP source hardware address. */\n\t\t\t\tu8 tha[ETH_ALEN];\t/* ARP target hardware address. */\n\t\t\t} arp;\n\t\t} ipv4;\n\t\tstruct {\n\t\t\tstruct {\n\t\t\t\tstruct in6_addr src;\t/* IPv6 source address. */\n\t\t\t\tstruct in6_addr dst;\t/* IPv6 destination address. */\n\t\t\t} addr;\n\t\t\t__be32 label;\t\t\t/* IPv6 flow label. */\n\t\t\tstruct {\n\t\t\t\tstruct in6_addr target;\t/* ND target address. */\n\t\t\t\tu8 sll[ETH_ALEN];\t/* ND source link layer address. */\n\t\t\t\tu8 tll[ETH_ALEN];\t/* ND target link layer address. */\n\t\t\t} nd;\n\t\t} ipv6;\n\t};\n\tstruct {\n\t\t/* Connection tracking fields. */\n\t\tu16 zone;\n\t\tu32 mark;\n\t\tu8 state;\n\t\tstruct ovs_key_ct_labels labels;\n\t} ct;\n\n} __aligned(BITS_PER_LONG/8); /* Ensure that we can do comparisons as longs. */\n```\n\n```\nstruct sw_flow {\n\tstruct rcu_head rcu;\n\tstruct {\n\t\tstruct hlist_node node[2];\n\t\tu32 hash;\n\t} flow_table, ufid_table;\n\tint stats_last_writer;\t\t/* NUMA-node id of the last writer on\n\t\t\t\t\t * \u0027stats[0]\u0027.\n\t\t\t\t\t */\n\tstruct sw_flow_key key;\n\tstruct sw_flow_id id;\n\tstruct sw_flow_mask *mask;\n\tstruct sw_flow_actions __rcu *sf_acts;\n\tstruct flow_stats __rcu *stats[]; /* One for each NUMA node.  First one\n\t\t\t\t\t   * is allocated at flow creation time,\n\t\t\t\t\t   * the rest are allocated on demand\n\t\t\t\t\t   * while holding the \u0027stats[0].lock\u0027.\n\t\t\t\t\t   */\n};\n```\n相关数据结构的关系及详细内容都在上面有表述，下面讲讲具体的工作步骤：\n\n第一步，它会根据网桥上的流表结构体（table）中的mask_list成员来遍历，这个mask_list成员是一条链表的头结点，这条链表是由mask元素链接组成（里面的list是没有数据的链表结构，作用就是负责链接多个mask结构，是mask的成员）；流表查询函数开始就是循环遍历这条链表，每遍历到得到一个mask结构体，就调用函数进入第二步。\n\n第二步，是操作key值，调用函数让从数据包提取到的key值和第一步得到的mask中的key值，进行与操作，然后把结构存放到另外一个key值中（masked_key）。顺序执行第三步。\n\n第三步，把第二步中得到的那个与操作后的key值（masked_key），传入 jhash2()算法函数中，该算法是经典的哈希算法，想深入了解可以自己查资料（不过都是些数学推理，感觉挺难的），linux内核中也多处使用到了这个算法函数。通过这个函数把key值（masked_key）转换成hash关键字。\n\n第四步，把第三步得到的hash值，传入 find_bucket()函数中，在该函数中再通过jhash_1word()算法函数，把hash关键字再次哈希得到一个全新的hash关键字。这个函数和第三步的哈希算法函数类似，只是参数不同，多了一个word。经过两个哈希算法函数的计算得到一个新的hash值。\n\n第五步，把第四步得到的hash关键字，传入到flex_array_get()函数中，这个函数的作用就是找到对应的哈希头位置。具体的请看上面的图，流表结构（table）中有个buckets成员，该成员称作为哈希桶，哈希桶里面存放的是成员字段和弹性数组parts[n]，而这个parts[n]数组里面存放的就是所要找的哈希头指针，这个哈希头指针指向了一个流表项链表（在图中的最下面struct sw_flow），所以这个才是我们等下要匹配的流表项。（这个哈希桶到弹性数组这一段，我有点疑问，不是很清楚，在下一篇blog中会分析下这个疑问，大家看到如果和源代码有出入，请按源代码来分析），这一步就是根据hash关键字查找到流表项的链表头指针。\n\n第六步，由第五步得到的流表项链表头指针，根据这个指针遍历整个流表项节点元素（就是struct sw_flow结构体元素），每遍历得到一个流表项sw_flow结构体元素，就把流表项中的mask成员和第一步遍历得到的mask变量（忘记了可以重新回到第一步去看下）进行比较；比较完后还要让流表项sw_flow结构体元素中的key值成员和第二步中得到的key值（masked_key）进行比较；只有当上面两个比较都相等时，这个流表项才是我们要匹配查询的流表项了。然后直接返回该流表项的地址。如果找到了，很好说明用户态的流表已经放入内核，则走fast path就可了。于是直接调用ovs_execute_actions，执行这个key对应的action。\n\n如果不能找到，则只好调用ovs_dp_upcall，让用户态去查找流表。会调用static int queue_userspace_packet(struct datapath *dp, struct sk_buff *skb, const struct sw_flow_key *key, const struct dp_upcall_info *upcall_info)\n\n它会调用err = genlmsg_unicast(ovs_dp_get_net(dp), user_skb, upcall_info-\u003eportid);通过netlink将消息发送给用户态。在用户态，有线程监听消息，一旦有消息，则触发udpif_upcall_handler。\n\n![OVS Fast Path和Slow Path](http://images2015.cnblogs.com/blog/635909/201609/635909-20160913232546570-59130550.png)","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-18] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-09-【OpenVswitch源码分析之六】内核空间转发面数据结构与流程.markdown [pool-2-thread-18] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenVswitch源码分析之六】内核空间转发面数据结构与流程》成功 [pool-2-thread-18] [chx]
[INFO] 2017-07-28 12:46:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75451673 [pool-2-thread-17] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":75451673,"title":"【OpenStack源码分析之五】Nova API 的插件管理","create_at":"\/Date(1500469518000)\/","create":"2017-07-19 09:05:18","view_count":82,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"Openstack使用 stevedore作为其第三方开发和加载的框架，其使用setuptools的entry points来定义并加载插件。entry point引用的是定义在模块中的对象，比如类、函数、实例等，只要在import模块时能够被创建的对象都可以。[nova.api.v21.extensions]\nremote_consoles = nova.api.openstack.compute","url":"http://blog.csdn.net/BLACKMOON88/article/details/75451673","categories":"云计算,Python相关,OpenStack","tags":"openstack,api,插件,源码","content":"\u003cp\u003eOpenstack使用 stevedore作为其第三方开发和加载的框架，其使用setuptools的entry points来定义并加载插件。entry point引用的是定义在模块中的对象，比如类、函数、实例等，只要在import模块时能够被创建的对象都可以。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e[nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.v\u003c/span\u003e21\u003cspan class=\"hljs-preprocessor\"\u003e.extensions\u003c/span\u003e]\nremote_consoles = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.remote\u003c/span\u003e_consoles:RemoteConsoles\nnetworks = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.networks\u003c/span\u003e:Networks\nconsoles = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.consoles\u003c/span\u003e:Consoles\nconsole_auth_tokens = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.console\u003c/span\u003e_auth_tokens:ConsoleAuthTokens\nquota_classes = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.quota\u003c/span\u003e_classes:QuotaClasses\nimages = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.images\u003c/span\u003e:Images\nversions = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.versionsV\u003c/span\u003e21:Versions\nvolumes = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.volumes\u003c/span\u003e:Volumes\nserver_groups = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.server\u003c/span\u003e_groups:ServerGroups\nextension_info = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.extension\u003c/span\u003e_info:ExtensionInfo\nbaremetal_nodes = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.baremetal\u003c/span\u003e_nodes:BareMetalNodes\nsecurity_group_default_rules = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.security\u003c/span\u003e_group_default_rules:SecurityGroupDefaultRules\nblock_device_mapping = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.block\u003c/span\u003e_device_mapping:BlockDeviceMapping\nimage_size = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.image\u003c/span\u003e_size:ImageSize\nuser_data = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.user\u003c/span\u003e_data:UserData\nimage_metadata = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.image\u003c/span\u003e_metadata:ImageMetadata\ncloudpipe = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.cloudpipe\u003c/span\u003e:Cloudpipe\nnetworks_associate = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.networks\u003c/span\u003e_associate:NetworksAssociate\nsecurity_groups = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.security\u003c/span\u003e_groups:SecurityGroups\nmultiple_create = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.multiple\u003c/span\u003e_create:MultipleCreate\ntenant_networks = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.tenant\u003c/span\u003e_networks:TenantNetworks\ncells = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.cells\u003c/span\u003e:Cells\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e上面的代码可以看出在Nova api模块要启动的plugin列表。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"插件的使用方式\"\u003e插件的使用方式\u003c/h3\u003e\n\n\u003cp\u003e在stevedore中，有三种使用插件的方式：Drivers、Hooks、Extensions \u003cbr\u003e\n1：Drivers \u003cbr\u003e\n         一个名字对应一个entry point。使用时根据插件的命名空间和名字，定位到单独的插件： \u003cbr\u003e\n         \u003cimg src=\"http://img.blog.csdn.net/20151103184426775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e2：Hooks，一个名字对应多个entry point。允许同一个命名空间中的插件具有相同的名字，根据给定的命名空间和名字，加载该名字对应的多个插件。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20151103184441892?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e3：Extensions，多个名字，多个entry point。给定命名空间，加载该命名空间中所有的插件，当然也允许同一个命名空间中的插件具有相同的名字。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20151103184454565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"openstack的实现\"\u003eOpenstack的实现\u003c/h3\u003e\n\n\u003cp\u003eOpenstack 在Rest Call上选择的是第三种方式，通过给定的命名空间 nova.api.v21.extensions，再加上entrypoint名称定为到对应的插件。但是通过前一篇介绍\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75331436\" target=\"_blank\"\u003eNova-API启动\u003c/a\u003e的文章我们看到Restful URL还会通过APIRouterV21这个WSGI middleware来进行request和应用的处理映射。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160607143425699\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n那么API Router通过哪些Key值来做的映射呢？\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs vala\"\u003e\u003cspan class=\"hljs-preprocessor\"\u003e#(\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#     (\u0027Route path\u0027: {\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#         \u0027HTTP method: [\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#             \u0027Controller\u0027,\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#             \u0027The method of controller is used to handle this route\u0027\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#         ],\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#         ...\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#     }),\u003c/span\u003e\n(\u003cspan class=\"hljs-string\"\u003e\u0027/flavors\u0027\u003c/span\u003e, {\n        \u003cspan class=\"hljs-string\"\u003e\u0027GET\u0027\u003c/span\u003e: [flavor_controller, \u003cspan class=\"hljs-string\"\u003e\u0027index\u0027\u003c/span\u003e],\n        \u003cspan class=\"hljs-string\"\u003e\u0027POST\u0027\u003c/span\u003e: [flavor_controller, \u003cspan class=\"hljs-string\"\u003e\u0027create\u0027\u003c/span\u003e]\n    }),\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e最终的Route会包含类似信息(path, method, controller, action)，正是通过这个组合Key值来寻找对应的Controller。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"自定义api\"\u003e自定义API\u003c/h3\u003e\n\n\u003cp\u003e自定义API分为三种可能性，分别如下： \u003cbr\u003e\n- 在原有的资源上增加函数，例如在servers上增加一个接口，查看虚拟机的资源利用情况 \u003cbr\u003e\n- 添加扩展资源，定义新的扩展资源 \u003cbr\u003e\n- 添加核心资源,定义新的核心资源\u003c/p\u003e\n\n\u003cp\u003e对于第一种情况，应该是最简单的，我们想在现有的servers上添加一个接口，意味着在servers的controller中添加一个函数，如何能够正确的添加了，我们需要像下图一样，给该函数添加几个装饰器，其中@wsgi.action装饰器需要起一个短名字，然后再http请求的body中添加一条记录{action:name}，这样就OK了。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions09.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e第二种情况下，添加新的扩展资源，我们需要写一个py文件，定义一个class，将其放在nova.api.openstack.compute.contrib目录下面，文件名小写，然后再文件中定义一个class，类名和文件一样，只是首字母大写，该class要继承于ExtensionDescriptor,并且定义四个变量，name,alias,updated,namespace,并且要保证alias不和其他的冲突，唯一性。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e1.如果新定义的扩展资源只是扩展以存在的核心资源，需要重写get_controller_extensions方法，该方法需要有一个新的Controller class，该class 继承于所扩展的核心资源的controller，并且该class的成员函数需要添加@wsgi.extends装饰器 \u003c/li\u003e\n\u003cli\u003e2.如果新定义的扩展资源也定义了新的资源，那么需要再定义个属于自己的Controller类，包含，index，create，delete等等函数\u003c/li\u003e\n\u003cli\u003e3.以上可以二者兼备\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions10.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions11.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions12.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e对于第三种情况，定义一个新的核心资源，我们需要在nova.api.openstack.compute目录下面创建一个新的py文件，按照servers这样的文件来写一个自己的核心资源，大家可以参考servers.py的方法，还有上面两种方法，最复杂的是在nova.api.openstack.compute.init.py文件中的APIRouter class中使用mapper.resource方法\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.choudan.net/assets/img/openstack_novaapi_extensions13.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://www.choudan.net/2013/07/31/OpenStack-API%E5%88%86%E6%9E%90(%E4%B8%89).html\"\u003ehttp://www.choudan.net/2013/07/31/OpenStack-API%E5%88%86%E6%9E%90(%E4%B8%89).html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/gtt116/article/details/51603543\"\u003ehttp://blog.csdn.net/gtt116/article/details/51603543\u003c/a\u003e\u003c/p\u003e","markdowncontent":"Openstack使用 stevedore作为其第三方开发和加载的框架，其使用setuptools的entry points来定义并加载插件。entry point引用的是定义在模块中的对象，比如类、函数、实例等，只要在import模块时能够被创建的对象都可以。\n\n```\n[nova.api.v21.extensions]\nremote_consoles = nova.api.openstack.compute.remote_consoles:RemoteConsoles\nnetworks = nova.api.openstack.compute.networks:Networks\nconsoles = nova.api.openstack.compute.consoles:Consoles\nconsole_auth_tokens = nova.api.openstack.compute.console_auth_tokens:ConsoleAuthTokens\nquota_classes = nova.api.openstack.compute.quota_classes:QuotaClasses\nimages = nova.api.openstack.compute.images:Images\nversions = nova.api.openstack.compute.versionsV21:Versions\nvolumes = nova.api.openstack.compute.volumes:Volumes\nserver_groups = nova.api.openstack.compute.server_groups:ServerGroups\nextension_info = nova.api.openstack.compute.extension_info:ExtensionInfo\nbaremetal_nodes = nova.api.openstack.compute.baremetal_nodes:BareMetalNodes\nsecurity_group_default_rules = nova.api.openstack.compute.security_group_default_rules:SecurityGroupDefaultRules\nblock_device_mapping = nova.api.openstack.compute.block_device_mapping:BlockDeviceMapping\nimage_size = nova.api.openstack.compute.image_size:ImageSize\nuser_data = nova.api.openstack.compute.user_data:UserData\nimage_metadata = nova.api.openstack.compute.image_metadata:ImageMetadata\ncloudpipe = nova.api.openstack.compute.cloudpipe:Cloudpipe\nnetworks_associate = nova.api.openstack.compute.networks_associate:NetworksAssociate\nsecurity_groups = nova.api.openstack.compute.security_groups:SecurityGroups\nmultiple_create = nova.api.openstack.compute.multiple_create:MultipleCreate\ntenant_networks = nova.api.openstack.compute.tenant_networks:TenantNetworks\ncells = nova.api.openstack.compute.cells:Cells\n```\n上面的代码可以看出在Nova api模块要启动的plugin列表。\n###插件的使用方式\n在stevedore中，有三种使用插件的方式：Drivers、Hooks、Extensions\n1：Drivers      \n         一个名字对应一个entry point。使用时根据插件的命名空间和名字，定位到单独的插件：\n         ![这里写图片描述](http://img.blog.csdn.net/20151103184426775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n2：Hooks，一个名字对应多个entry point。允许同一个命名空间中的插件具有相同的名字，根据给定的命名空间和名字，加载该名字对应的多个插件。\n![这里写图片描述](http://img.blog.csdn.net/20151103184441892?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n3：Extensions，多个名字，多个entry point。给定命名空间，加载该命名空间中所有的插件，当然也允许同一个命名空间中的插件具有相同的名字。\n![这里写图片描述](http://img.blog.csdn.net/20151103184454565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n###Openstack的实现\nOpenstack 在Rest Call上选择的是第三种方式，通过给定的命名空间 nova.api.v21.extensions，再加上entrypoint名称定为到对应的插件。但是通过前一篇介绍[Nova-API启动](http://blog.csdn.net/ohenry88/article/details/75331436)的文章我们看到Restful URL还会通过APIRouterV21这个WSGI middleware来进行request和应用的处理映射。\n![这里写图片描述](http://img.blog.csdn.net/20160607143425699)\n那么API Router通过哪些Key值来做的映射呢？\n```\n#(\n#     (\u0027Route path\u0027: {\n#         \u0027HTTP method: [\n#             \u0027Controller\u0027,\n#             \u0027The method of controller is used to handle this route\u0027\n#         ],\n#         ...\n#     }),\n(\u0027/flavors\u0027, {\n        \u0027GET\u0027: [flavor_controller, \u0027index\u0027],\n        \u0027POST\u0027: [flavor_controller, \u0027create\u0027]\n    }),\n```\n最终的Route会包含类似信息(path, method, controller, action)，正是通过这个组合Key值来寻找对应的Controller。\n\n###自定义API\n自定义API分为三种可能性，分别如下：\n- 在原有的资源上增加函数，例如在servers上增加一个接口，查看虚拟机的资源利用情况\n- 添加扩展资源，定义新的扩展资源\n- 添加核心资源,定义新的核心资源\n\n对于第一种情况，应该是最简单的，我们想在现有的servers上添加一个接口，意味着在servers的controller中添加一个函数，如何能够正确的添加了，我们需要像下图一样，给该函数添加几个装饰器，其中@wsgi.action装饰器需要起一个短名字，然后再http请求的body中添加一条记录{action:name}，这样就OK了。\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions09.png)\n\n第二种情况下，添加新的扩展资源，我们需要写一个py文件，定义一个class，将其放在nova.api.openstack.compute.contrib目录下面，文件名小写，然后再文件中定义一个class，类名和文件一样，只是首字母大写，该class要继承于ExtensionDescriptor,并且定义四个变量，name,alias,updated,namespace,并且要保证alias不和其他的冲突，唯一性。\n\n- 1.如果新定义的扩展资源只是扩展以存在的核心资源，需要重写get_controller_extensions方法，该方法需要有一个新的Controller class，该class 继承于所扩展的核心资源的controller，并且该class的成员函数需要添加@wsgi.extends装饰器 \n- 2.如果新定义的扩展资源也定义了新的资源，那么需要再定义个属于自己的Controller类，包含，index，create，delete等等函数\n- 3.以上可以二者兼备\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions10.png)\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions11.png)\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions12.png)\n\n对于第三种情况，定义一个新的核心资源，我们需要在nova.api.openstack.compute目录下面创建一个新的py文件，按照servers这样的文件来写一个自己的核心资源，大家可以参考servers.py的方法，还有上面两种方法，最复杂的是在nova.api.openstack.compute.init.py文件中的APIRouter class中使用mapper.resource方法\n\n![这里写图片描述](http://www.choudan.net/assets/img/openstack_novaapi_extensions13.png)\n\n参考文献：\nhttp://www.choudan.net/2013/07/31/OpenStack-API%E5%88%86%E6%9E%90(%E4%B8%89).html\nhttp://blog.csdn.net/gtt116/article/details/51603543\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-17] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-19-【OpenStack源码分析之五】Nova API 的插件管理.markdown [pool-2-thread-17] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之五】Nova API 的插件管理》成功 [pool-2-thread-17] [chx]
[INFO] 2017-07-28 12:46:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=41657169 [pool-2-thread-10] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":41657169,"title":"tarjan算法的原理和实现","create_at":"\/Date(1417444999000)\/","create":"2014-12-01 10:43:19","view_count":484,"comment_count":0,"comment_allowed":"true","type":"original","channel":17,"digg":0,"bury":0,"description":"Tarjan算法的操作原理如下：\n\n在任何深度优先搜索中，同一强连通分量内的所有顶点均在同一棵深度优先搜索树中。也就是说，强连通分量一定是有向图的某个深度搜树子树。我们用low值记录该点所在强连通子图对应的搜索子树的根节点的Dfn值。注意，该子树中的元素在栈中一定是相邻的，且根节点在栈中一定位于所有子树元素的最下方。强连通分量是由若干个环组成的。所以，当有环形成时（也就是搜索的下一个点已在栈中","url":"http://blog.csdn.net/BLACKMOON88/article/details/41657169","categories":"C语言算法","tags":"编程,算法,algorithm,递归,栈","content":"\r\n\u003cp style=\"margin-top:0px; margin-bottom:0px; padding-top:0px; padding-bottom:0px; font-family:Arial; font-size:14px; line-height:26px\"\u003e\r\nTarjan算法的操作原理如下：\u003c/p\u003e\r\n\u003col style=\"font-family:Arial; font-size:14px; line-height:26px\"\u003e\r\n\u003cli\u003e在任何深度优先搜索中，同一强连通分量内的所有顶点均在同一棵深度优先搜索树中。也就是说，强连通分量一定是有向图的某个深度搜树子树。\u003c/li\u003e\u003cli\u003e我们用\u003cspan style=\"color:#ff0000\"\u003elow&#20540;记录该点所在强连通子图对应的搜索子树的根节点的Dfn&#20540;\u003c/span\u003e。注意，该子树中的元素在栈中一定是相邻的，且根节点在栈中一定位于所有子树元素的最下方。\u003c/li\u003e\u003cli\u003e强连通分量是由若干个环组成的。所以，当有环形成时（也就是搜索的下一个点已在栈中），我们将这一条路径的low&#20540;统一，即这条路径上的点属于同一个强连通分量。\u003c/li\u003e\u003cli\u003e如果遍历完整个搜索树后某个点的dfn&#20540;等于low&#20540;，则它是该搜索子树的根。这时，它以上（包括它自己）一直到栈顶的所有元素组成一个强连通分量。\u003c/li\u003e\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:Arial; font-size:12px\"\u003e\u003cspan style=\"line-height:26px\"\u003elow&#20540;和Dfn&#20540;各代表什么：\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:Arial; font-size:12px\"\u003e\u003cspan style=\"line-height:26px\"\u003eDfn&#20540;代表在一次深度优先搜索中各节点所处的次序，如果一个图是强连通的，它必然是可以被一个环串起所有的点，反之则不然，所以叶子节点必然是存在的。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:Arial; font-size:12px\"\u003e\u003cspan style=\"line-height:26px\"\u003e什么样的节点可以看成根节点：low[v]=Dfn[v]。这个根节点是强连通子图的根节点。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:Arial; font-size:12px\"\u003e\u003cspan style=\"line-height:26px\"\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre code_snippet_id=\"2445889\" snippet_file_name=\"blog_20170613_1_7330485\"  name=\"code\" class=\"plain\"\u003e== 伪代码 ==\n \u0027\u0027\u0027algorithm\u0027\u0027\u0027 tarjan \u0027\u0027\u0027is\u0027\u0027\u0027\n   \u0027\u0027\u0027input:\u0027\u0027\u0027 图 \u0027\u0027G\u0027\u0027 = (\u0027\u0027V\u0027\u0027, \u0027\u0027E\u0027\u0027)\n   \u0027\u0027\u0027output:\u0027\u0027\u0027 以所在的强连通分量划分的顶点集\n \n   \u0027\u0027index\u0027\u0027 := 0\n   \u0027\u0027S\u0027\u0027 := empty    \u0027\u0027// 置栈为空\u0027\u0027\n   \u0027\u0027\u0027for each\u0027\u0027\u0027 \u0027\u0027v\u0027\u0027 \u0027\u0027\u0027in\u0027\u0027\u0027 \u0027\u0027V\u0027\u0027 \u0027\u0027\u0027do\u0027\u0027\u0027\n     \u0027\u0027\u0027if\u0027\u0027\u0027 (\u0027\u0027v\u0027\u0027.index is undefined)\n       strongconnect(\u0027\u0027v\u0027\u0027)\n     \u0027\u0027\u0027end if\u0027\u0027\u0027\n \n   \u0027\u0027\u0027function\u0027\u0027\u0027 strongconnect(\u0027\u0027v\u0027\u0027)\n     \u0027\u0027// 将未使用的最小index值作为结点v的index\u0027\u0027\n     \u0027\u0027v\u0027\u0027.index := \u0027\u0027index\u0027\u0027\n     \u0027\u0027v\u0027\u0027.lowlink := \u0027\u0027index\u0027\u0027\n     \u0027\u0027index\u0027\u0027 := \u0027\u0027index\u0027\u0027 + 1\n     \u0027\u0027S\u0027\u0027.push(\u0027\u0027v\u0027\u0027)\n \n     \u0027\u0027// 考虑v的后继结点\u0027\u0027\n     \u0027\u0027\u0027for each\u0027\u0027\u0027 (\u0027\u0027v\u0027\u0027, \u0027\u0027w\u0027\u0027) \u0027\u0027\u0027in\u0027\u0027\u0027 \u0027\u0027E\u0027\u0027 \u0027\u0027\u0027do\u0027\u0027\u0027\n       \u0027\u0027\u0027if\u0027\u0027\u0027 (\u0027\u0027w\u0027\u0027.index is undefined) \u0027\u0027\u0027then\u0027\u0027\u0027\n         \u0027\u0027// 后继结点w未访问，递归调用\u0027\u0027\n         strongconnect(\u0027\u0027w\u0027\u0027)\n         \u0027\u0027v\u0027\u0027.lowlink := min(\u0027\u0027v\u0027\u0027.lowlink, \u0027\u0027w\u0027\u0027.lowlink)\n       \u0027\u0027\u0027else if\u0027\u0027\u0027 (\u0027\u0027w\u0027\u0027 is in \u0027\u0027S\u0027\u0027) \u0027\u0027\u0027then\u0027\u0027\u0027\n         \u0027\u0027// w已在栈S中，亦即在当前强连通分量中\u0027\u0027\n         \u0027\u0027v\u0027\u0027.lowlink := min(\u0027\u0027v\u0027\u0027.lowlink, \u0027\u0027w\u0027\u0027.index)\n       \u0027\u0027\u0027end if\u0027\u0027\u0027\n \n     \u0027\u0027// 若v是根则出栈，并求得一个强连通分量\u0027\u0027\n     \u0027\u0027\u0027if\u0027\u0027\u0027 (\u0027\u0027v\u0027\u0027.lowlink = \u0027\u0027v\u0027\u0027.index) \u0027\u0027\u0027then\u0027\u0027\u0027\n       start a new strongly connected component\n       \u0027\u0027\u0027repeat\u0027\u0027\u0027\n         \u0027\u0027w\u0027\u0027 := \u0027\u0027S\u0027\u0027.pop()\n         add \u0027\u0027w\u0027\u0027 to current strongly connected component\n       \u0027\u0027\u0027until\u0027\u0027\u0027 (\u0027\u0027w\u0027\u0027 = \u0027\u0027v\u0027\u0027)\n       output the current strongly connected component\n     \u0027\u0027\u0027end if\u0027\u0027\u0027\n   \u0027\u0027\u0027end function\u0027\u0027\u0027\n\n变量&lt;tt&gt;index&lt;/tt&gt;是深度优先搜索的结点计数器。&lt;tt&gt;S&lt;/tt&gt;是栈，初始为空，用于存储已经访问但未被判定属于任一强连通分量的结点。注意这并非一个一般深度优先搜索的栈，结点不是在以它为根的子树搜索完成后出栈，而是在整个强连通分量被找到时。\n\n最外层循环用于查找未访问的结点，以保证所有结点最终都会被访问。&lt;tt&gt;strongconnect&lt;/tt&gt;进行一次深度优先搜索，并找到结点&lt;tt&gt;v&lt;/tt&gt;的后继结点构成的子图中所有的强连通分量。\n\n当一个结点完成递归时，若它的&lt;tt&gt;lowlink&lt;/tt&gt;仍等于&lt;tt&gt;index&lt;/tt&gt;，那么它就是强连通分量的根。算法将在此结点之后入栈（包含此结点）且仍在栈中的结点出栈，并作为一个强连通分量输出。\n\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-10] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-12\2014-12-01-tarjan算法的原理和实现.markdown [pool-2-thread-10] [chx]
[INFO] 2017-07-28 12:46:37 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《tarjan算法的原理和实现》成功 [pool-2-thread-10] [chx]
[INFO] 2017-07-28 12:46:37 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=73744696 [pool-2-thread-5] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=73863848 [pool-2-thread-9] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74937873 [pool-2-thread-13] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23599257 [pool-2-thread-16] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":73744696,"title":"【OpenVswitch源码分析之一】背景","create_at":"\/Date(1498484653000)\/","create":"2017-06-26 09:44:13","view_count":194,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"什么是OpenVswitch \nOpen vSwitch是基于开源Apache 2 license的多层软件交换机，其目的是实现一个产品级质量的交换平台，其支持标准的管理接口，并开放转发功能接口供编程扩展和控制。 \nOpen vSwitch适于VM环境中的虚拟交换，除了开放标准的控制和可视化接口给虚拟网络层，它还支持跨多个物理服务器的分布式部署，另外OpenVswitch还兼容多个基于Linux的虚","url":"http://blog.csdn.net/BLACKMOON88/article/details/73744696","categories":"云计算,OpenVswitch,C语言算法","tags":"交换机,服务器,分布式,apache","content":"\u003ch2 id=\"什么是openvswitch\"\u003e什么是OpenVswitch\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://docs.openvswitch.org/en/latest/_images/overview.png\" alt=\"OpenVswitch Overview\" title=\"\"\u003e \u003cbr\u003e\nOpen vSwitch是基于开源Apache 2 license的多层软件交换机，其目的是实现一个产品级质量的交换平台，其支持标准的管理接口，并开放转发功能接口供编程扩展和控制。 \u003cbr\u003e\nOpen vSwitch适于VM环境中的虚拟交换，除了开放标准的控制和可视化接口给虚拟网络层，它还支持跨多个物理服务器的分布式部署，另外OpenVswitch还兼容多个基于Linux的虚拟化技术包括Xen,KVM,VirtualBox。 \u003cbr\u003e\n代码块使用与平台无关的C写成，易于安装在其他环境。当前的Release支持如下特性：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e标准802.1Q VLAN，端口模式有trunk和access。\u003c/li\u003e\n\u003cli\u003e有链路聚合和无链路聚合的网卡绑定\u003c/li\u003e\n\u003cli\u003eNetFlow, sFlow(R), 和镜像功能用以增加可视化\u003c/li\u003e\n\u003cli\u003eQoS (Quality of Service) 配置, 流量整形\u003c/li\u003e\n\u003cli\u003eGeneve, GRE, VXLAN, STT, 和 LISP 隧道支持\u003c/li\u003e\n\u003cli\u003e支持BFD和802.1ag连通性故障管理。\u003c/li\u003e\n\u003cli\u003eOpenFlow 1.0 以上版本及相关扩展的支持\u003c/li\u003e\n\u003cli\u003e使用C和Python绑定的事务配置数据库\u003c/li\u003e\n\u003cli\u003e使用Linux内核模块的高性能转发\u003c/li\u003e\n\u003cli\u003e支持IPV6\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"为什么需要openvswitch\"\u003e为什么需要OpenVswitch\u003c/h2\u003e\n\n\u003cp\u003e虚拟机管理程序（Hypervisor）需要桥接宿主内的虚拟机以及其与外部世界通信的能力。这意味着需要一个Linux内置的L2交换机（Linux网桥），而且这个交换机需要是快速和可靠的。这是Open vSwitch产生的最大需求 \u003cbr\u003e\nOpenVswitch瞄准的是多服务器的虚拟化部署，这种场景下传统的技术栈并不好处理，这些环境通常是高度动态的，需要逻辑抽象网络的维护，并且有大量和专用交换硬件集成或者把以前CPU的工作Offload到专用硬件上的工作。 \u003cbr\u003e\n对于上述需求，OpenVswitch通过如下的设计理念以及特征来达到目标：\u003c/p\u003e\n\n\n\n\u003ch3 id=\"状态的移动\"\u003e状态的移动\u003c/h3\u003e\n\n\u003cp\u003e所有和网络实体相关（比如虚拟机）的网络状态都应易于识别并且可以在不同主机之间迁移。这可能包括传统的“软状态”（如在L2学习表项），L3转发状态、策略路由、ACL、QoS，监控配置（如NetFlow、sFlow IPFIX，），等。 \u003cbr\u003e\nOpen vSwitch为已经支持不同实例配置和迁移Slow（配置）和Fast网络的网络状态。例如，如果一个VM在不同的服务器上迁移，不仅可以迁移相关的配置（跨规则，ACL，QoS）也可以迁移任何运行时的网络状态。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"网络动态变化的响应\"\u003e网络动态变化的响应\u003c/h3\u003e\n\n\u003cp\u003e虚拟环境通常以高变化率为特征。VMS来回运行，改变逻辑网络环境，等等。 \u003cbr\u003e\nOpen vSwitch有许多特性来实现网络控制系统响应和适应网络环境的变化。这包括简单的统计和可视化支持如NetFlow和sFlow，IPFIX。更有用的是，Open vSwitch支持网络状态数据库（OVSDB），支持远程触发。因此，一个编排层可以“监视”网络的各个方面并在它们发生变化时作出响应。例如，这在今天被大量使用的响应和跟踪VM迁移情况。 \u003cbr\u003e\nOpen vSwitch也支持OpenFlow把远程访问导出到控制层的方法。比如可以用于导出链路状态流量和链路发现流量（例如LLDP、CDP、OSPF等）。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"逻辑标签的维护\"\u003e逻辑标签的维护\u003c/h3\u003e\n\n\u003cp\u003e分布式虚拟交换机（如VMware VDS和思科的Nexus 1000V）经常通过在网络数据包中追加或者修改标签来承载网络的逻辑上下文。这种方式可以用来唯一地标识VM（以抵抗硬件欺骗的方式），或者持有只在逻辑域中相关的其他上下文。构建分布式虚拟交换机的大部分问题是如何高效而正确地管理这些标签。 \u003cbr\u003e\nOpen vSwitch有多个指定和维护标注的规则，这些都可以被远程的协同层所访问处理。此外，在许多情况下，这些标记规则存储在优化的表单中，因此它们不必与重量级网络设备耦合。这允许，例如，成千上万的标签或地址映射规则进行配置，更改，和迁移。 \u003cbr\u003e\n同理，Open vSwitch支持GRE的实现，可以同时处理成千上万支持GRE隧道隧道创建，远程配置，并推倒。例如，它可以用于连接不同数据中心的私有VM网络。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"硬件集成\"\u003e硬件集成\u003c/h3\u003e\n\n\u003cp\u003eOpen vSwitch的转发面（Linux Kernel datapath）的设计是可以做到把报文处理“委托”给硬件芯片来做的，无论这个硬件芯片是装在一个经典的硬件交换机框中还是在终端主机的网卡里。这使得Open vSwitch控制面能够控制一个纯软件实现同时也兼容硬件实现。 \u003cbr\u003e\n有许多公司正在进行努力把Open vSwitch移植到硬件芯片上运行。包括多个芯片商（Broadcom和Marvell），以及一些厂商定制的平台。文档中的“移植”部分讨论了如何去做这样一个移植。 \u003cbr\u003e\n硬件集成的优点不仅仅是在于虚拟环境中的性能。如果物理交换机也暴露Open vSwitch的控制抽象，那么裸机和虚拟宿主环境可以使用相同的自动化网络管控机制来管理。\u003c/p\u003e\n\n\n\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\n\u003cp\u003e在许多方面，Open vSwitch不同于之前Hypervisor网络栈的设计目标，其专注于满足大规模的基于Linux的虚拟化环境的自动化与动态网络控制需求。 \u003cbr\u003e\nOpen vSwitch的目标是保持内核代码量尽可能小（满足必要的性能即可）和重用现有系统的可用部件（例如Open vSwitch使用现有的QoS协议栈）。在Linux 3.3版本，Open vSwitch作为内核和用户空间工具包装的一部分在大部分的发行版中发布\u003c/p\u003e","markdowncontent":"## 什么是OpenVswitch\n![OpenVswitch Overview](http://docs.openvswitch.org/en/latest/_images/overview.png)\nOpen vSwitch是基于开源Apache 2 license的多层软件交换机，其目的是实现一个产品级质量的交换平台，其支持标准的管理接口，并开放转发功能接口供编程扩展和控制。\nOpen vSwitch适于VM环境中的虚拟交换，除了开放标准的控制和可视化接口给虚拟网络层，它还支持跨多个物理服务器的分布式部署，另外OpenVswitch还兼容多个基于Linux的虚拟化技术包括Xen,KVM,VirtualBox。\n代码块使用与平台无关的C写成，易于安装在其他环境。当前的Release支持如下特性：\n\n\n- 标准802.1Q VLAN，端口模式有trunk和access。\n- 有链路聚合和无链路聚合的网卡绑定\n- NetFlow, sFlow(R), 和镜像功能用以增加可视化\n- QoS (Quality of Service) 配置, 流量整形\n- Geneve, GRE, VXLAN, STT, 和 LISP 隧道支持\n- 支持BFD和802.1ag连通性故障管理。\n- OpenFlow 1.0 以上版本及相关扩展的支持\n- 使用C和Python绑定的事务配置数据库\n- 使用Linux内核模块的高性能转发\n- 支持IPV6\n\n\n## 为什么需要OpenVswitch\n虚拟机管理程序（Hypervisor）需要桥接宿主内的虚拟机以及其与外部世界通信的能力。这意味着需要一个Linux内置的L2交换机（Linux网桥），而且这个交换机需要是快速和可靠的。这是Open vSwitch产生的最大需求\nOpenVswitch瞄准的是多服务器的虚拟化部署，这种场景下传统的技术栈并不好处理，这些环境通常是高度动态的，需要逻辑抽象网络的维护，并且有大量和专用交换硬件集成或者把以前CPU的工作Offload到专用硬件上的工作。\n对于上述需求，OpenVswitch通过如下的设计理念以及特征来达到目标：\n### 状态的移动\n所有和网络实体相关（比如虚拟机）的网络状态都应易于识别并且可以在不同主机之间迁移。这可能包括传统的“软状态”（如在L2学习表项），L3转发状态、策略路由、ACL、QoS，监控配置（如NetFlow、sFlow IPFIX，），等。\nOpen vSwitch为已经支持不同实例配置和迁移Slow（配置）和Fast网络的网络状态。例如，如果一个VM在不同的服务器上迁移，不仅可以迁移相关的配置（跨规则，ACL，QoS）也可以迁移任何运行时的网络状态。\n### 网络动态变化的响应\n虚拟环境通常以高变化率为特征。VMS来回运行，改变逻辑网络环境，等等。\nOpen vSwitch有许多特性来实现网络控制系统响应和适应网络环境的变化。这包括简单的统计和可视化支持如NetFlow和sFlow，IPFIX。更有用的是，Open vSwitch支持网络状态数据库（OVSDB），支持远程触发。因此，一个编排层可以“监视”网络的各个方面并在它们发生变化时作出响应。例如，这在今天被大量使用的响应和跟踪VM迁移情况。\nOpen vSwitch也支持OpenFlow把远程访问导出到控制层的方法。比如可以用于导出链路状态流量和链路发现流量（例如LLDP、CDP、OSPF等）。\n### 逻辑标签的维护\n分布式虚拟交换机（如VMware VDS和思科的Nexus 1000V）经常通过在网络数据包中追加或者修改标签来承载网络的逻辑上下文。这种方式可以用来唯一地标识VM（以抵抗硬件欺骗的方式），或者持有只在逻辑域中相关的其他上下文。构建分布式虚拟交换机的大部分问题是如何高效而正确地管理这些标签。\nOpen vSwitch有多个指定和维护标注的规则，这些都可以被远程的协同层所访问处理。此外，在许多情况下，这些标记规则存储在优化的表单中，因此它们不必与重量级网络设备耦合。这允许，例如，成千上万的标签或地址映射规则进行配置，更改，和迁移。\n同理，Open vSwitch支持GRE的实现，可以同时处理成千上万支持GRE隧道隧道创建，远程配置，并推倒。例如，它可以用于连接不同数据中心的私有VM网络。\n### 硬件集成\nOpen vSwitch的转发面（Linux Kernel datapath）的设计是可以做到把报文处理“委托”给硬件芯片来做的，无论这个硬件芯片是装在一个经典的硬件交换机框中还是在终端主机的网卡里。这使得Open vSwitch控制面能够控制一个纯软件实现同时也兼容硬件实现。\n有许多公司正在进行努力把Open vSwitch移植到硬件芯片上运行。包括多个芯片商（Broadcom和Marvell），以及一些厂商定制的平台。文档中的“移植”部分讨论了如何去做这样一个移植。\n硬件集成的优点不仅仅是在于虚拟环境中的性能。如果物理交换机也暴露Open vSwitch的控制抽象，那么裸机和虚拟宿主环境可以使用相同的自动化网络管控机制来管理。\n## 总结\n在许多方面，Open vSwitch不同于之前Hypervisor网络栈的设计目标，其专注于满足大规模的基于Linux的虚拟化环境的自动化与动态网络控制需求。\nOpen vSwitch的目标是保持内核代码量尽可能小（满足必要的性能即可）和重用现有系统的可用部件（例如Open vSwitch使用现有的QoS协议栈）。在Linux 3.3版本，Open vSwitch作为内核和用户空间工具包装的一部分在大部分的发行版中发布\n\n\n\n\n\n\n\n\n[1]: http://docs.openvswitch.org/en/latest/intro/why-ovs/","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-5] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75769704 [pool-2-thread-14] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23506175 [pool-2-thread-22] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-06\2017-06-26-【OpenVswitch源码分析之一】背景.markdown [pool-2-thread-5] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":74937873,"title":"【OpenStack源码分析之一】初探OpenStack","create_at":"\/Date(1499863923000)\/","create":"2017-07-12 08:52:03","view_count":170,"comment_count":1,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"打算开始写一个Openstack的分析系列，其实接触Openstack也比较久了，但是一直没有深入了解，而且因为本人对Python知之甚少，用之甚少，所以想研究Openstack的代码上手就会比较困难，再加上代码量也比较大。 \n不过还是打算下定决心做一个系列的分析，不会全部看，大概只看NOVA和Neutron两个模块，而且按照我的认知习惯，还是先要了解全局再去深入细节，所以头几篇分析都会集中在Wha","url":"http://blog.csdn.net/BLACKMOON88/article/details/74937873","categories":"云计算,OpenStack,Python相关","tags":"openstack,nova,python","content":"\u003cp\u003e打算开始写一个Openstack的分析系列，其实接触Openstack也比较久了，但是一直没有深入了解，而且因为本人对Python知之甚少，用之甚少，所以想研究Openstack的代码上手就会比较困难，再加上代码量也比较大。 \u003cbr\u003e\n不过还是打算下定决心做一个系列的分析，不会全部看，大概只看NOVA和Neutron两个模块，而且按照我的认知习惯，还是先要了解全局再去深入细节，所以头几篇分析都会集中在What， Why以及How上来看，重点是怎么用，解决方案是什么。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"what-is-openstack\"\u003eWhat is OpenStack\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img1.51cto.com/attachment/201208/090301988.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n在Openstack的官方网站上对这一点说的非常简单，而且非常好，我先把原文附上：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-C++ hljs livecodeserver\"\u003eOpenStack is \u003cspan class=\"hljs-operator\"\u003ea\u003c/span\u003e cloud operating \u003cspan class=\"hljs-keyword\"\u003esystem\u003c/span\u003e that controls large pools \u003cspan class=\"hljs-operator\"\u003eof\u003c/span\u003e compute, storage,\n\u003cspan class=\"hljs-operator\"\u003eand\u003c/span\u003e networking resources throughout \u003cspan class=\"hljs-operator\"\u003ea\u003c/span\u003e datacenter, all managed through \u003cspan class=\"hljs-operator\"\u003ea\u003c/span\u003e dashboard\nthat gives administrators control \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e empowering their users \u003cspan class=\"hljs-built_in\"\u003eto\u003c/span\u003e provision\nresources through \u003cspan class=\"hljs-operator\"\u003ea\u003c/span\u003e web interface.\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e说Openstack是一个云操作系统，这里我们不免要和Linux做对比，同样作为操作系统，Linux需要做如下几件事情：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e资源管理：这里的资源包括CPU，网卡，显卡，内存，硬盘等\u003c/li\u003e\n\u003cli\u003e进程管理：本质上就是任务的调度，在合适的时间分配合适的资源来执行任务\u003c/li\u003e\n\u003cli\u003e存储管理：包括文件系统，内存管理等\u003c/li\u003e\n\u003cli\u003e网络通讯：包括主机协议栈的实现以及虚拟设备的支持\u003c/li\u003e\n\u003cli\u003e安全问题 …\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e其实从以上几点我们已经看出同为操作系统，大家都大同小异，都要解决资源的抽象和管理问题，资源的分配和调度问题，和用户的人机交互问题，应用的生命周期管理问题，以及系统的管理维护问题。 不同点在于，OpenStack需要管理更多的资源，它管理的CPU已经不仅仅局限于一台服务器内部的CPU而是整个数据中心的资源；另外作为云服务，很重要的一点就是业务上要支持多租户，虽然Linux是支持多核，多任务的操作系统，可以在一定程度上支持资源隔离。但是在云操作系统这个层面才是真正实现多租户的业务场景。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"openstack能做什么\"\u003eOpenStack能做什么\u003c/h3\u003e\n\n\u003cp\u003eOpenStack当前在私有云的解决方案更多，基于OpenStack做公有云的还比较少，而且近些年用OpenStack做公有云的公司有越来越多的撤出的趋势，另外是托管云，像Rackspace等传统IDC厂商开始提供此类服务，12%的受访者通过合约委托服务供应商托管专属的OpenStack部署，借此帮助客户省略繁琐的管理问题。其实还有一个大的市场没有没计入，这就是电信云，随着近些年NFV的兴起，电信运营商也开始大规模投入希望完成网络业务云化转型。这里面以AT&amp;T, 中国移动为首。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170712205054699?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOpenStack在整个云解决方案中是一个什么样的角色呢？OpenStack在云平台这个大的系统里面也只是一个部件，这个部件的定位就是前面所说的操作系统，以OpenStack为框架，将计算、存储、网络、管理、运营、运维等多个领域的软硬件产品组件整合在一起，共同组成面向业务场景的整体解决方案。OpenStack优先关注控制面：OpenStack优先考虑如何将计算、存储、网络领域的各类资源抽象为资源池。在此基础上，对资源池内的各类逻辑对象实施控制操作，并将控制操作包装成服务。数据面、运维面、管理面目前不是OpenStack的重点关注内容。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20170712205117272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e鉴于OpenStack的定位，OpenStack社区的核心项目主要都是提供IAAS的服务，也有提供PAAS服务和SAAS服务的项目，但是应用度并不广。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"openstack的设计思想\"\u003eOpenStack的设计思想\u003c/h3\u003e\n\n\u003cp\u003eOpenStack在设计初期就是对标AWS，很多项目在AWS上都能找到对应的模块，但是在设计思想上其秉承着开放，灵活，可扩展的原则。 \u003cbr\u003e\n开放性\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e源代码开放，设计与开发流程开放\u003c/li\u003e\n\u003cli\u003e“不重复发明轮子”，“站在巨人的肩膀上”，大量使用其他开源软件\u003c/li\u003e\n\u003cli\u003e不使用任何不可替代的商业产品\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e灵活\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e架构可裁减，可以根据实际需要决定选取的组件范围\u003c/li\u003e\n\u003cli\u003e大量采用驱动与插件机制\u003c/li\u003e\n\u003cli\u003e通过配置项控制对系统功能特性进行便捷配置\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e可扩展\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e松耦合架构，组件间RESTful API通信，组件内消息总线通信\u003c/li\u003e\n\u003cli\u003e无中心架构，核心组件无中心节点，有效避免单点故障\u003c/li\u003e\n\u003cli\u003e无状态架构，各组件无本地持久化数据，所有持久化数据保存在数据库中\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"openstack的部署\"\u003eOpenStack的部署\u003c/h3\u003e\n\n\u003cp\u003e云计算的理念是在可以网络接入的地方像用水用电一样随时获取计算资源并且按需使用和付费。亚马逊AWS是公共云计算的先驱，一些云计算中重要的产品设计和基础概念可以说都是亚马逊引入的。这其中有两个非常重要的概念：地域（Region）和可用区（AZ：Available Zone）。很多第一次接触云计算的同学，光看这两个名字的字面意义，虽然也能够猜出大致的意思，但深入的学习了解云计算一段时间之后，才能深刻的体会这两个概念对于云计算的重要影响。包括国内的这些云计算服务商，也是过了很长时间才陆续在产品中引入可用区的设计的。\u003c/p\u003e\n\n\u003cp\u003e理想情况下，我们当然希望云计算能够彻底消除地域的影响，就像我们用电的时候不用关心发电厂在哪里一样。但现实显然没有那么美好，不同地域的机房之间的网络还做不到像电网一样透明。所以在云计算产品的最底层，首先需要考虑不同地域的影响。不同地域之间，一般只能通过公网连通，内部之间网络是不通的。当然，对于云计算服务商来说，为管理需要，一般还是会通过有限的带宽来连通不同地域的机房，用于云计算内部资源管理，以及一些特殊的产品场景，比如跨地域的镜像复制。但因为内部带宽有限，一般不会完全开放给用户使用。\u003c/p\u003e\n\n\u003cp\u003e所以，地域就是物理意义上的不同地方的机房，这个不同地方，一般来说距离较远，机房之间用光纤直连的成本较高。并且相对来说会在用户需求量较大的地方部署地域机房，比如阿里云的云服务器的地域在境内有杭州，上海，北京，深圳，青岛，海外已经上线的包括香港、硅谷和新加坡。实际上阿里云一开始是没有上海地域的，因为上海杭州距离较近，部署直连光纤的成本也相对可控，阿里内部之前很多应用都是分别部署在杭州和上海，基本上是当作一个地域来使用的，后来可能因为需求大而分开了。\u003c/p\u003e\n\n\u003cp\u003e所以，地域很好理解，就是物理上相隔较远的机房，因为跨地域的机房之间的带宽无法满足内网需求，所以不同地域的机器之间内网是不通的。当然，随着骨干网络等物理层基础设施的发展，未来跨地域内网连通并非完全不可能的事情。在这个过程中，公共云计算服务商也可能根据用户的诉求，在某些场景开放一些有限的内部网络带宽来做产品，比如，前面说的阿里云的跨地域镜像复制，以及最近推出来的OSS跨地域复制等。一般来说，在数据和存储领域内的产品会先行支持跨地域的功能，毕竟数据容灾是更强烈的需求。\u003c/p\u003e\n\n\u003cp\u003e那么，同一个地域之内又分成多个可用区，为什么要搞这么复杂？原因很简单，IT系统从远古时代就有同城容灾的需求，那使用云计算以后，怎么实现同城跨机房容灾呢？如果用户购买的云服务器无法区分在哪个机房，那么就无法在业务应用层面来设计同城容灾。所以云计算服务商提出了同地域内不同可用区的概念，简单点理解，可以认为就是同城不同机房，云计算服务商会从底层的机房电力/网络等层面仔细设计来保障一个可用区出现故障的时候不会影响到另外一个可用区，当然你要说杭州彻底被钱塘江潮淹没的情况，那可用区也救不了你，要在业务应用层面考虑通过不同的地域来设计异地容灾了。\u003c/p\u003e\n\n\u003cp\u003e所以，简单来说，可以将地域理解为不同城市的机房，将可用区理解为同一个城市的不同机房。当然，实际上不同可用区也可能是在同一个机房，可用区的概念严格来说是按照电力和网络设备等相互独立来设计的。同一个地域内的不同可用区之间，内网是连通的，但是网络的响应时间会有差异。下面是我用阿里云杭州地域做的一次ping的测试，来观察同地域不同可用区之间的网络情况。\u003c/p\u003e\n\n\u003cp\u003eOpenStack在AWS的基础上又引入了Cell 和 Host Aggregates Zone(HAZ) 两个概念，其中 Cell 是为了扩充一个 Region 下的集群的规模而引入的，Host Aggregates 是优化资源调度和利用引入的。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"region的部署\"\u003eRegion的部署\u003c/h4\u003e\n\n\u003cp\u003e顾名思义，Region 直译过来就是区域，地域的概念，而事实上，AWS 按地域(国家或者城市)设置一个 Region，每个 Region 下有多个 Availability Zone。Openstack 同样支持 Region 的概念，支持全球化部署，比如为了降低网络延时，用户可以选择特定的 Region 来部署服务。各个 Region 之间的计算资源、网络资源、存储资源都是独立的，但所有 Region 共享账户用户信息，因为 Keystone 是实现 openstack 租户用户管理和认证的功能的组件，所以 Keystone 全局唯一，所有 Region 共享一个 Keystone，Keystone endpoint 中存储了访问各个 Region 的 URL。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20141214144520137\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"cell的部署\"\u003eCell的部署\u003c/h4\u003e\n\n\u003cp\u003eCell 概念的引入，是为了扩充单个 Region 下的集群规模，主要解决 AMQP 和 Database 的性能瓶颈，每个 Region 下的 openstack 集群都有自己的消息中间件和数据库，当计算节点达到一定规模(和IBM，easystack，华为等交流的数据是300~500)，消息中间件就成为了扩展计算节点的性能瓶颈。Cell 的引入就是为了解决单个 Region 的规模问题，每个 Region 下可以有多个 Cell，每个 Cell 维护自己的数据库和消息中间件，所有 Cell 共享本 Region 下的 nova-api，共享全局唯一的 Keystone。\u003c/p\u003e\n\n\u003cp\u003e官网手册提到 Cell 不成熟（Considered experimental），巴黎峰会也提到 Cell 的痛点，虽然现在已进入 K 版本迭代开发中了，但是本人还未听说业界成熟使用 Cell 的案例。关于 Cell 更详细的介绍，请参考以下链接 \u003cbr\u003e\n\u003ca href=\"http://www.ibm.com/developerworks/cn/cloud/library/1409_zhaojian_openstacknovacell/index.html\" target=\"_blank\"\u003ehttp://www.ibm.com/developerworks/cn/cloud/library/1409_zhaojian_openstacknovacell/index.html\u003c/a\u003e \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20141214144524318\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"availability-zone-host-aggregates-zone\"\u003eAvailability Zone &amp; Host Aggregates Zone\u003c/h4\u003e\n\n\u003cp\u003e之所以把 AZ 和 HAZ 放到一同分析，是因为二者的概念实在类似。\u003c/p\u003e\n\n\u003cp\u003eAWS 每个 Region 下有多个 AZ。Openstack 也引入了 AZ 的概念，我个人理解 AZ 的引入是基于可靠性的角度考虑，比如我们定义一个机房为一个 AZ，把该机房所有计算节点纳入到一个 AZ 中，其中一个机房因为某种原因down 掉，不会影响其它机房的虚拟机和网络；同时， AZ 对用户来说是一个可见的概念，用户创建虚拟机时，可以明确指出在哪个 AZ，用户可以通过在多个 AZ 创建虚拟机来保证高可靠性。\u003c/p\u003e\n\n\u003cp\u003eHAZ 也是把一批具有共同属性的计算节点划分到同一个 Zone 中，HAZ 可以对 AZ 进一步细分，一个 AZ 可以有多个 HAZ。 同一个 HAZ 下的机器都具有某种共同的属性，比如高性能计算，高性能存储(SSD)，高性能网络(支持SRIOV等)。HAZ 和 AZ 另一个不同之处在于 HAZ 对用户不是明确可见的，用户在创建虚拟机时不能像指定 AZ 一样直接指定 HAZ，但是可以通过在 Instance Flavor 中设置相关属性，由 nova-scheduler 调度根据该调度策略调度到满足该属性的的 Host Aggregates Zones 中。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20141214144628406\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e那么，同一个地域之内又分成多个可用区，为什么要搞这么复杂？原因很简单，IT系统从远古时代就有同城容灾的需求，那使用云计算以后，怎么实现同城跨机房容灾呢？如果用户购买的云服务器无法区分在哪个机房，那么就无法在业务应用层面来设计同城容灾。所以云计算服务商提出了同地域内不同可用区的概念，简单点理解，可以认为就是同城不同机房，云计算服务商会从底层的机房电力/网络等层面仔细设计来保障一个可用区出现故障的时候不会影响到另外一个可用区，当然你要说杭州彻底被钱塘江潮淹没的情况，那可用区也救不了你，要在业务应用层面考虑通过不同的地域来设计异地容灾了。\u003c/p\u003e\n\n\u003cp\u003e所以，简单来说，可以将地域理解为不同城市的机房，将可用区理解为同一个城市的不同机房。当然，实际上不同可用区也可能是在同一个机房，可用区的概念严格来说是按照电力和网络设备等相互独立来设计的。同一个地域内的不同可用区之间，内网是连通的，但是网络的响应时间会有差异。在阿里云杭州地域做的一次ping的测试，来观察同地域不同可用区之间的网络情况，发现同可用区之间的内网是连通的，但响应时间比同一个可用区之内要慢1ms多。所以，在实际应用中，如果需要考虑同城容灾或者同城双活，需要尽量将应用和数据库分布部署在不同的可用区。如果对响应时间高度敏感，则建议部署在同一个可用区内。在购买云服务器和数据库的时候，要注意选择了。\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/u010305706/article/details/54406060\"\u003ehttp://blog.csdn.net/u010305706/article/details/54406060\u003c/a\u003e\u003c/p\u003e","markdowncontent":"打算开始写一个Openstack的分析系列，其实接触Openstack也比较久了，但是一直没有深入了解，而且因为本人对Python知之甚少，用之甚少，所以想研究Openstack的代码上手就会比较困难，再加上代码量也比较大。\n不过还是打算下定决心做一个系列的分析，不会全部看，大概只看NOVA和Neutron两个模块，而且按照我的认知习惯，还是先要了解全局再去深入细节，所以头几篇分析都会集中在What， Why以及How上来看，重点是怎么用，解决方案是什么。\n###What is OpenStack\n![这里写图片描述](http://img1.51cto.com/attachment/201208/090301988.png)\n在Openstack的官方网站上对这一点说的非常简单，而且非常好，我先把原文附上：\n\n``` C++\nOpenStack is a cloud operating system that controls large pools of compute, storage,\nand networking resources throughout a datacenter, all managed through a dashboard\nthat gives administrators control while empowering their users to provision\nresources through a web interface.\n```\n\n说Openstack是一个云操作系统，这里我们不免要和Linux做对比，同样作为操作系统，Linux需要做如下几件事情：\n\n - 资源管理：这里的资源包括CPU，网卡，显卡，内存，硬盘等\n - 进程管理：本质上就是任务的调度，在合适的时间分配合适的资源来执行任务\n - 存储管理：包括文件系统，内存管理等\n - 网络通讯：包括主机协议栈的实现以及虚拟设备的支持\n - 安全问题 ...\n\n其实从以上几点我们已经看出同为操作系统，大家都大同小异，都要解决资源的抽象和管理问题，资源的分配和调度问题，和用户的人机交互问题，应用的生命周期管理问题，以及系统的管理维护问题。 不同点在于，OpenStack需要管理更多的资源，它管理的CPU已经不仅仅局限于一台服务器内部的CPU而是整个数据中心的资源；另外作为云服务，很重要的一点就是业务上要支持多租户，虽然Linux是支持多核，多任务的操作系统，可以在一定程度上支持资源隔离。但是在云操作系统这个层面才是真正实现多租户的业务场景。\n###OpenStack能做什么\nOpenStack当前在私有云的解决方案更多，基于OpenStack做公有云的还比较少，而且近些年用OpenStack做公有云的公司有越来越多的撤出的趋势，另外是托管云，像Rackspace等传统IDC厂商开始提供此类服务，12%的受访者通过合约委托服务供应商托管专属的OpenStack部署，借此帮助客户省略繁琐的管理问题。其实还有一个大的市场没有没计入，这就是电信云，随着近些年NFV的兴起，电信运营商也开始大规模投入希望完成网络业务云化转型。这里面以AT&T, 中国移动为首。\n![这里写图片描述](http://img.blog.csdn.net/20170712205054699?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nOpenStack在整个云解决方案中是一个什么样的角色呢？OpenStack在云平台这个大的系统里面也只是一个部件，这个部件的定位就是前面所说的操作系统，以OpenStack为框架，将计算、存储、网络、管理、运营、运维等多个领域的软硬件产品组件整合在一起，共同组成面向业务场景的整体解决方案。OpenStack优先关注控制面：OpenStack优先考虑如何将计算、存储、网络领域的各类资源抽象为资源池。在此基础上，对资源池内的各类逻辑对象实施控制操作，并将控制操作包装成服务。数据面、运维面、管理面目前不是OpenStack的重点关注内容。\n\n![这里写图片描述](http://img.blog.csdn.net/20170712205117272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n鉴于OpenStack的定位，OpenStack社区的核心项目主要都是提供IAAS的服务，也有提供PAAS服务和SAAS服务的项目，但是应用度并不广。\n###OpenStack的设计思想\nOpenStack在设计初期就是对标AWS，很多项目在AWS上都能找到对应的模块，但是在设计思想上其秉承着开放，灵活，可扩展的原则。\n开放性\n \n - 源代码开放，设计与开发流程开放\n - “不重复发明轮子”，“站在巨人的肩膀上”，大量使用其他开源软件\n - 不使用任何不可替代的商业产品\n  \n灵活\n\n- 架构可裁减，可以根据实际需要决定选取的组件范围\n- 大量采用驱动与插件机制\n- 通过配置项控制对系统功能特性进行便捷配置\n\n可扩展\n\n- 松耦合架构，组件间RESTful API通信，组件内消息总线通信\n- 无中心架构，核心组件无中心节点，有效避免单点故障\n- 无状态架构，各组件无本地持久化数据，所有持久化数据保存在数据库中\n\n###OpenStack的部署\n云计算的理念是在可以网络接入的地方像用水用电一样随时获取计算资源并且按需使用和付费。亚马逊AWS是公共云计算的先驱，一些云计算中重要的产品设计和基础概念可以说都是亚马逊引入的。这其中有两个非常重要的概念：地域（Region）和可用区（AZ：Available Zone）。很多第一次接触云计算的同学，光看这两个名字的字面意义，虽然也能够猜出大致的意思，但深入的学习了解云计算一段时间之后，才能深刻的体会这两个概念对于云计算的重要影响。包括国内的这些云计算服务商，也是过了很长时间才陆续在产品中引入可用区的设计的。\n\n理想情况下，我们当然希望云计算能够彻底消除地域的影响，就像我们用电的时候不用关心发电厂在哪里一样。但现实显然没有那么美好，不同地域的机房之间的网络还做不到像电网一样透明。所以在云计算产品的最底层，首先需要考虑不同地域的影响。不同地域之间，一般只能通过公网连通，内部之间网络是不通的。当然，对于云计算服务商来说，为管理需要，一般还是会通过有限的带宽来连通不同地域的机房，用于云计算内部资源管理，以及一些特殊的产品场景，比如跨地域的镜像复制。但因为内部带宽有限，一般不会完全开放给用户使用。\n\n所以，地域就是物理意义上的不同地方的机房，这个不同地方，一般来说距离较远，机房之间用光纤直连的成本较高。并且相对来说会在用户需求量较大的地方部署地域机房，比如阿里云的云服务器的地域在境内有杭州，上海，北京，深圳，青岛，海外已经上线的包括香港、硅谷和新加坡。实际上阿里云一开始是没有上海地域的，因为上海杭州距离较近，部署直连光纤的成本也相对可控，阿里内部之前很多应用都是分别部署在杭州和上海，基本上是当作一个地域来使用的，后来可能因为需求大而分开了。\n\n所以，地域很好理解，就是物理上相隔较远的机房，因为跨地域的机房之间的带宽无法满足内网需求，所以不同地域的机器之间内网是不通的。当然，随着骨干网络等物理层基础设施的发展，未来跨地域内网连通并非完全不可能的事情。在这个过程中，公共云计算服务商也可能根据用户的诉求，在某些场景开放一些有限的内部网络带宽来做产品，比如，前面说的阿里云的跨地域镜像复制，以及最近推出来的OSS跨地域复制等。一般来说，在数据和存储领域内的产品会先行支持跨地域的功能，毕竟数据容灾是更强烈的需求。\n\n那么，同一个地域之内又分成多个可用区，为什么要搞这么复杂？原因很简单，IT系统从远古时代就有同城容灾的需求，那使用云计算以后，怎么实现同城跨机房容灾呢？如果用户购买的云服务器无法区分在哪个机房，那么就无法在业务应用层面来设计同城容灾。所以云计算服务商提出了同地域内不同可用区的概念，简单点理解，可以认为就是同城不同机房，云计算服务商会从底层的机房电力/网络等层面仔细设计来保障一个可用区出现故障的时候不会影响到另外一个可用区，当然你要说杭州彻底被钱塘江潮淹没的情况，那可用区也救不了你，要在业务应用层面考虑通过不同的地域来设计异地容灾了。\n\n所以，简单来说，可以将地域理解为不同城市的机房，将可用区理解为同一个城市的不同机房。当然，实际上不同可用区也可能是在同一个机房，可用区的概念严格来说是按照电力和网络设备等相互独立来设计的。同一个地域内的不同可用区之间，内网是连通的，但是网络的响应时间会有差异。下面是我用阿里云杭州地域做的一次ping的测试，来观察同地域不同可用区之间的网络情况。\n\nOpenStack在AWS的基础上又引入了Cell 和 Host Aggregates Zone(HAZ) 两个概念，其中 Cell 是为了扩充一个 Region 下的集群的规模而引入的，Host Aggregates 是优化资源调度和利用引入的。\n\n####Region的部署\n顾名思义，Region 直译过来就是区域，地域的概念，而事实上，AWS 按地域(国家或者城市)设置一个 Region，每个 Region 下有多个 Availability Zone。Openstack 同样支持 Region 的概念，支持全球化部署，比如为了降低网络延时，用户可以选择特定的 Region 来部署服务。各个 Region 之间的计算资源、网络资源、存储资源都是独立的，但所有 Region 共享账户用户信息，因为 Keystone 是实现 openstack 租户用户管理和认证的功能的组件，所以 Keystone 全局唯一，所有 Region 共享一个 Keystone，Keystone endpoint 中存储了访问各个 Region 的 URL。\n![这里写图片描述](http://img.blog.csdn.net/20141214144520137)\n\n####Cell的部署\nCell 概念的引入，是为了扩充单个 Region 下的集群规模，主要解决 AMQP 和 Database 的性能瓶颈，每个 Region 下的 openstack 集群都有自己的消息中间件和数据库，当计算节点达到一定规模(和IBM，easystack，华为等交流的数据是300~500)，消息中间件就成为了扩展计算节点的性能瓶颈。Cell 的引入就是为了解决单个 Region 的规模问题，每个 Region 下可以有多个 Cell，每个 Cell 维护自己的数据库和消息中间件，所有 Cell 共享本 Region 下的 nova-api，共享全局唯一的 Keystone。\n \n官网手册提到 Cell 不成熟（Considered experimental），巴黎峰会也提到 Cell 的痛点，虽然现在已进入 K 版本迭代开发中了，但是本人还未听说业界成熟使用 Cell 的案例。关于 Cell 更详细的介绍，请参考以下链接\nhttp://www.ibm.com/developerworks/cn/cloud/library/1409_zhaojian_openstacknovacell/index.html\n![这里写图片描述](http://img.blog.csdn.net/20141214144524318)\n\n####Availability Zone & Host Aggregates Zone\n之所以把 AZ 和 HAZ 放到一同分析，是因为二者的概念实在类似。\n\n AWS 每个 Region 下有多个 AZ。Openstack 也引入了 AZ 的概念，我个人理解 AZ 的引入是基于可靠性的角度考虑，比如我们定义一个机房为一个 AZ，把该机房所有计算节点纳入到一个 AZ 中，其中一个机房因为某种原因down 掉，不会影响其它机房的虚拟机和网络；同时， AZ 对用户来说是一个可见的概念，用户创建虚拟机时，可以明确指出在哪个 AZ，用户可以通过在多个 AZ 创建虚拟机来保证高可靠性。\n\n HAZ 也是把一批具有共同属性的计算节点划分到同一个 Zone 中，HAZ 可以对 AZ 进一步细分，一个 AZ 可以有多个 HAZ。 同一个 HAZ 下的机器都具有某种共同的属性，比如高性能计算，高性能存储(SSD)，高性能网络(支持SRIOV等)。HAZ 和 AZ 另一个不同之处在于 HAZ 对用户不是明确可见的，用户在创建虚拟机时不能像指定 AZ 一样直接指定 HAZ，但是可以通过在 Instance Flavor 中设置相关属性，由 nova-scheduler 调度根据该调度策略调度到满足该属性的的 Host Aggregates Zones 中。\n![这里写图片描述](http://img.blog.csdn.net/20141214144628406)\n\n那么，同一个地域之内又分成多个可用区，为什么要搞这么复杂？原因很简单，IT系统从远古时代就有同城容灾的需求，那使用云计算以后，怎么实现同城跨机房容灾呢？如果用户购买的云服务器无法区分在哪个机房，那么就无法在业务应用层面来设计同城容灾。所以云计算服务商提出了同地域内不同可用区的概念，简单点理解，可以认为就是同城不同机房，云计算服务商会从底层的机房电力/网络等层面仔细设计来保障一个可用区出现故障的时候不会影响到另外一个可用区，当然你要说杭州彻底被钱塘江潮淹没的情况，那可用区也救不了你，要在业务应用层面考虑通过不同的地域来设计异地容灾了。\n\n\n所以，简单来说，可以将地域理解为不同城市的机房，将可用区理解为同一个城市的不同机房。当然，实际上不同可用区也可能是在同一个机房，可用区的概念严格来说是按照电力和网络设备等相互独立来设计的。同一个地域内的不同可用区之间，内网是连通的，但是网络的响应时间会有差异。在阿里云杭州地域做的一次ping的测试，来观察同地域不同可用区之间的网络情况，发现同可用区之间的内网是连通的，但响应时间比同一个可用区之内要慢1ms多。所以，在实际应用中，如果需要考虑同城容灾或者同城双活，需要尽量将应用和数据库分布部署在不同的可用区。如果对响应时间高度敏感，则建议部署在同一个可用区内。在购买云服务器和数据库的时候，要注意选择了。\n\n参考文献：\nhttp://blog.csdn.net/u010305706/article/details/54406060","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-13] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenVswitch源码分析之一】背景》成功 [pool-2-thread-5] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":73863848,"title":"【OpenVswitch源码分析之二】架构","create_at":"\/Date(1498653902000)\/","create":"2017-06-28 08:45:02","view_count":230,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"OpenVswitch架构概览 \n        Open vSwitch的架构和模块与传统的物理交换机是一一对应的，包括控制面和数据平台，只是传统的物理交换机通常使用NP芯片来进行转发，而Openvswitch使用Linux内核模块做数据平面。OpenVswitch包括三个核心模块：ovs-vswitchd，ovsdb-server以及内核模块openvswitch datapath。每个模块有不","url":"http://blog.csdn.net/BLACKMOON88/article/details/73863848","categories":"OpenVswitch,云计算","tags":"linux kernel,交换机,架构,源码","content":"\u003ch2 id=\"openvswitch架构概览\"\u003eOpenVswitch架构概览\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://images2015.cnblogs.com/blog/635909/201609/635909-20160907114623473-1291020451.png\" alt=\"OpenVswitch Architecture\" title=\"\"\u003e \u003cbr\u003e\nOpen vSwitch的架构和模块与传统的物理交换机是一一对应的，包括控制面和数据平台，只是传统的物理交换机通常使用NP芯片来进行转发，而Openvswitch使用Linux内核模块做数据平面。OpenVswitch包括三个核心模块：ovs-vswitchd，ovsdb-server以及内核模块openvswitch datapath。每个模块有不同的功能\u003c/p\u003e\n\n\u003ch3 id=\"ovs-vswitchd功能模块介绍\"\u003eovs-vswitchd功能模块介绍\u003c/h3\u003e\n\n\u003cp\u003eovs-vswitchd是一个守护进程，在用户启动该组件不久其就会脱离控制终端，作为OVS的管理和控制进程对外提供服务，一方面它通过unix Socket和OVSDB通信，加载OVSDB内的配置信息，也能把设备信息更新到服务器中，这部分属于设备的配置管理能力。另一方面其内置了多个协议的支持，包括MAC Learning, LLDP, STP等，同时其支持和拉远的控制器建立Openflow连接，通过Openflow协议下发控制流表给内核模块。内核模块和OVS-Vswitchd通过Netlink进行通信，Netlink相较于其他的IPC通信方式，其支持双工，而且是异步通信，支持组播，另外可以自定义协议族。总而言之，Netlink是一个高效的内核态和用户态通信方式，同时其可扩展性也很好。\u003c/p\u003e\n\n\u003ch3 id=\"ovsdb-server功能模块介绍\"\u003eOvsdb-server功能模块介绍\u003c/h3\u003e\n\n\u003cp\u003eovsdb-server是一个轻量级的数据库服务，主要保存了整个OVS的配置信息，包括接口，交换内容，VLAN等等。其数据库结构如图所示： \u003cbr\u003e\n\u003cimg src=\"http://images2015.cnblogs.com/blog/635909/201609/635909-20160907114625238-1863348603.png\" alt=\"OVSDB Database Schema\" title=\"\"\u003e \u003cbr\u003e\n从OVSDB的数据库结构可以看出网桥是支持SFlow，QoS, Mirror等可视化和调优功能，OVSDB对外提供Json RPC接口，提供CURD接口供客户端对数据库进行操作。\u003c/p\u003e\n\n\u003ch3 id=\"openvswitch-datapath\"\u003eopenvswitch datapath\u003c/h3\u003e\n\n\u003cp\u003eopenvswitchd.ko是内核中负责vswitch的快转面，根据openflow流表转发，并接收ovs-vswitchd的配置，内核模块在初始化以及做Port binding时，会注册钩子函数，把端口的报文处理接管到内核模块。当Datapath出现table miss情况时会把报文送入队列供用户控件的vswitchd模块读取，在用户空间有slow path的exact table的精确匹配与wildcard table的模糊匹配。而当Datapath配置了sflow时，也会将报文上送到控制面进行处理。\u003c/p\u003e\n\n\u003ch2 id=\"openvswitch-模块概述\"\u003eOpenVswitch 模块概述\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode\u003e           |   +-------------------+\n           |   |    ovs-vswitchd   |&lt;--&gt;ovsdb-server\n           |   +-------------------+\n           |   |      ofproto      |&lt;--&gt;OpenFlow controllers\n           |   +--------+-+--------+  _\n           |   | netdev | |ofproto-|   |\n userspace |   +--------+ |  dpif  |   |\n           |   | netdev | +--------+   |\n           |   |provider| |  dpif  |   |\n           |   +---||---+ +--------+   |\n           |       ||     |  dpif  |   | implementation of\n           |       ||     |provider|   | ofproto provider\n           |_      ||     +---||---+   |\n                   ||         ||       |\n            _  +---||-----+---||---+   |\n           |   |          |datapath|   |\n    kernel |   |          +--------+  _|\n           |   |                   |\n           |_  +--------||---------+\n                        ||\n                     physical\n                       NIC\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e从上图可以看出vswitchd本身是分层的结构，最上面的daemon层主要用于和ovsdb通信，做配置的下发和更新等，中间是ofproto层，ofproto是交换机的控制平面实现，通过该模块可以和外界的SDN控制器建立Openflow通道，而在ofproto下层有两个插件，分别是ofproto provider和netdev，ofproto provider对接datapath，负责流表以及datapath的配置下发，以及报文上送等。在ovs的定义里，netdev代表了具体平台的设备实现，e.g. linux内核的net_device或者移植到交换机平台下的port等，struct netdev_class定义了netdev-provider的具体实现需要的接口，具体的平台实现需要支持这些统一的接口，从而完成netdev设备的创建，销毁，打开，关闭等一系列操作。\u003c/p\u003e","markdowncontent":"## OpenVswitch架构概览\n\n![OpenVswitch Architecture](http://images2015.cnblogs.com/blog/635909/201609/635909-20160907114623473-1291020451.png)\nOpen vSwitch的架构和模块与传统的物理交换机是一一对应的，包括控制面和数据平台，只是传统的物理交换机通常使用NP芯片来进行转发，而Openvswitch使用Linux内核模块做数据平面。OpenVswitch包括三个核心模块：ovs-vswitchd，ovsdb-server以及内核模块openvswitch datapath。每个模块有不同的功能\n\n### ovs-vswitchd功能模块介绍\novs-vswitchd是一个守护进程，在用户启动该组件不久其就会脱离控制终端，作为OVS的管理和控制进程对外提供服务，一方面它通过unix Socket和OVSDB通信，加载OVSDB内的配置信息，也能把设备信息更新到服务器中，这部分属于设备的配置管理能力。另一方面其内置了多个协议的支持，包括MAC Learning, LLDP, STP等，同时其支持和拉远的控制器建立Openflow连接，通过Openflow协议下发控制流表给内核模块。内核模块和OVS-Vswitchd通过Netlink进行通信，Netlink相较于其他的IPC通信方式，其支持双工，而且是异步通信，支持组播，另外可以自定义协议族。总而言之，Netlink是一个高效的内核态和用户态通信方式，同时其可扩展性也很好。\n\n### Ovsdb-server功能模块介绍\novsdb-server是一个轻量级的数据库服务，主要保存了整个OVS的配置信息，包括接口，交换内容，VLAN等等。其数据库结构如图所示：\n![OVSDB Database Schema](http://images2015.cnblogs.com/blog/635909/201609/635909-20160907114625238-1863348603.png)\n从OVSDB的数据库结构可以看出网桥是支持SFlow，QoS, Mirror等可视化和调优功能，OVSDB对外提供Json RPC接口，提供CURD接口供客户端对数据库进行操作。\n\n###openvswitch datapath\nopenvswitchd.ko是内核中负责vswitch的快转面，根据openflow流表转发，并接收ovs-vswitchd的配置，内核模块在初始化以及做Port binding时，会注册钩子函数，把端口的报文处理接管到内核模块。当Datapath出现table miss情况时会把报文送入队列供用户控件的vswitchd模块读取，在用户空间有slow path的exact table的精确匹配与wildcard table的模糊匹配。而当Datapath配置了sflow时，也会将报文上送到控制面进行处理。\n##OpenVswitch 模块概述\n               |   +-------------------+\n               |   |    ovs-vswitchd   |\u003c--\u003eovsdb-server\n               |   +-------------------+\n               |   |      ofproto      |\u003c--\u003eOpenFlow controllers\n               |   +--------+-+--------+  _\n               |   | netdev | |ofproto-|   |\n     userspace |   +--------+ |  dpif  |   |\n               |   | netdev | +--------+   |\n               |   |provider| |  dpif  |   |\n               |   +---||---+ +--------+   |\n               |       ||     |  dpif  |   | implementation of\n               |       ||     |provider|   | ofproto provider\n               |_      ||     +---||---+   |\n                       ||         ||       |\n                _  +---||-----+---||---+   |\n               |   |          |datapath|   |\n        kernel |   |          +--------+  _|\n               |   |                   |\n               |_  +--------||---------+\n                            ||\n                         physical\n                           NIC\n从上图可以看出vswitchd本身是分层的结构，最上面的daemon层主要用于和ovsdb通信，做配置的下发和更新等，中间是ofproto层，ofproto是交换机的控制平面实现，通过该模块可以和外界的SDN控制器建立Openflow通道，而在ofproto下层有两个插件，分别是ofproto provider和netdev，ofproto provider对接datapath，负责流表以及datapath的配置下发，以及报文上送等。在ovs的定义里，netdev代表了具体平台的设备实现，e.g. linux内核的net_device或者移植到交换机平台下的port等，struct netdev_class定义了netdev-provider的具体实现需要的接口，具体的平台实现需要支持这些统一的接口，从而完成netdev设备的创建，销毁，打开，关闭等一系列操作。","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-9] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-06\2017-06-28-【OpenVswitch源码分析之二】架构.markdown [pool-2-thread-9] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":23506175,"title":"计算二叉树的深度和宽度","create_at":"\/Date(1397259096000)\/","create":"2014-04-12 07:31:36","view_count":1194,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"如何求解二叉树的深度，可以先分析一下下图：\r\n\r\n\r\n在这个图中，根节点R的高度H1=max{左子节点高度H2，右子节点高度H3}+1;可以得出H1=H3+1;\r\n而H2=max{H4,0}+1;H3=H5+1;\r\n....;...\r\n所以可以看出对高度的求解可以满足以下递归：\r\n求得左子树的高度 LHeight;\r\n求得右子树的高度RHeight;\r\n根的高度为max（LHeight+1,RHe","url":"http://blog.csdn.net/BLACKMOON88/article/details/23506175","categories":"","tags":"c,二叉树,算法,递归","content":"\r\n\u003cp\u003e如何求解二叉树的深度，可以先分析一下下图：\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20140412010646484?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"\u003e\u003cbr\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e在这个图中，根节点R的高度H1=max{左子节点高度H2，右子节点高度H3}&#43;1;可以得出H1=H3&#43;1;\u003c/p\u003e\r\n\u003cp\u003e而H2=max{H4,0}&#43;1;H3=H5&#43;1;\u003c/p\u003e\r\n\u003cp\u003e....;...\u003c/p\u003e\r\n\u003cp\u003e所以可以看出对高度的求解可以满足以下递归：\u003c/p\u003e\r\n\u003cp\u003e求得左子树的高度 LHeight;\u003c/p\u003e\r\n\u003cp\u003e求得右子树的高度RHeight;\u003c/p\u003e\r\n\u003cp\u003e根的高度为max（LHeight&#43;1,RHeight;&#43;1）.\u003c/p\u003e\r\n\u003cp\u003e具体代码如下：\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cpre name=\"code\" class=\"cpp\"\u003eint GetHeightInfo(BiNode *head){\n\tint LHeight,RHeight;\n\t//边界条件\n\tif (head==NULL) return 0;\n\t//得到左子树的高度\n\tLHeight=GetHeightInfo(head-&gt;left);\n\t//得到右子树的高度\n\tRHeight=GetHeightInfo(head-&gt;right);\n\t//取左右子树高度的最大值+1\n\treturn LHeight&gt;RHeight? LHeight+1:RHeight+1;\n}\u003c/pre\u003e二叉树的深度求解，也可以先分析啊下图：\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20140412011321687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"\u003e\u003c/p\u003e\r\n\u003cp\u003e求宽度本质上还是求各层的节点数，对宽度优先遍历算法稍微改进，可以得到各层的节点&#20540;，宽度优先算法需要队列，而层数的计算可以采用两个参数来维持：\u003c/p\u003e\r\n\u003cp\u003e上层的节点数LastLayerValue;本层的节点数CurrentLayerValue;这样就可以确定各层的节点数。\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cpre code_snippet_id=\"287717\" snippet_file_name=\"blog_20140412_2_43016\"  name=\"code\" class=\"cpp\"\u003eint GetWidthInfo(BiNode *head){\n\t//需要保存的三个数据\n\tint LastLayerValue;\n\tint CurrentLayerValue;\n\tint maxWidth=0;\n\n\t//维护队列\n\tqueue&lt;BiNode *&gt; myQueue;  \n\t\n\tif(head-&gt;data==NULL)\n\t{\n\t\treturn 0;\n\t}\n\telse \n\t{\n\t\tLastLayerValue=1;\n\t\tmyQueue.push(head);\n\t}\n\twhile(!myQueue.empty())\n\t{\n\t\twhile(LastLayerValue!=0)\n\t\t{\n\t\t\thead=myQueue.front();\n\t\t\tmyQueue.pop();\n\t\t\tif(head-&gt;left!=NULL)\n\t\t\t{\n\t\t\t\tmyQueue.push(head-&gt;left);\n\t\t\t}\n\t\t\tif(head-&gt;right!=NULL)\n\t\t\t{\n\t\t\t\tmyQueue.push(head-&gt;right);\n\t\t\t}\n\t\t\tLastLayerValue--;\n\t\t}\n\t\tCurrentLayerValue=myQueue.size();\n\t\tLastLayerValue=CurrentLayerValue;\n\t\tmaxWidth=maxWidth&gt;CurrentLayerValue? maxWidth:CurrentLayerValue;\n\t}\n\treturn maxWidth;\n}\u003c/pre\u003e最后给出求解两者的函数：\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cpre code_snippet_id=\"287717\" snippet_file_name=\"blog_20140412_3_3391869\"  name=\"code\" class=\"cpp\"\u003e/*\nDescription  \n         给定一个二叉树，获取该二叉树的宽度深度。\nPrototype\n         int GetBiNodeInfo(BiNode &amp;head, unsigned int *pulWidth, unsigned int *pulHeight)\nInput Param \n         head   需要获取深度的二叉树头结点\nOutput Param \n         pulWidth   宽度\n         pulHeight  高度\nReturn Value\n         0          成功\n         1          失败或其他异常\n*/\nint GetBiNodeInfo(BiNode &amp;head, unsigned int *pulWidth, unsigned int *pulHeight)\n{\n\t/*在这里实现功能*/\n\n    *pulWidth=GetWidthInfo(&amp;head);\n\t*pulHeight=GetHeightInfo(&amp;head);\n\treturn 0;\n}\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-22] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":75769704,"title":"【OpenStack源码分析之七】openstack中的RPC请求分析","create_at":"\/Date(1500714228000)\/","create":"2017-07-22 05:03:48","view_count":169,"comment_count":0,"comment_allowed":"true","type":"repost","channel":2,"digg":0,"bury":0,"description":"转自：http://blog.csdn.net/hhp_hhp/article/details/51497560概述在OpenStack各个项目中，我们通常会用到如下几种RPC请求：RPC.call：发送请求到消息队列，等待返回最终结果。 \nRPC.cast：发送请求到消息队列，不需要等待最终返回的结果。 \nRPC.Notifier：发送各类操作消息到队列，不需要等待最终的返回结果。 \nRPC.ca","url":"http://blog.csdn.net/BLACKMOON88/article/details/75769704","categories":"云计算,OpenStack","tags":"openstack,源码","content":"\u003cp\u003e转自：\u003ca href=\"http://blog.csdn.net/hhp_hhp/article/details/51497560\"\u003ehttp://blog.csdn.net/hhp_hhp/article/details/51497560\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3 id=\"概述\"\u003e概述\u003c/h3\u003e\n\n\u003cp\u003e在OpenStack各个项目中，我们通常会用到如下几种RPC请求：\u003c/p\u003e\n\n\u003cp\u003eRPC.call：发送请求到消息队列，等待返回最终结果。 \u003cbr\u003e\nRPC.cast：发送请求到消息队列，不需要等待最终返回的结果。 \u003cbr\u003e\nRPC.Notifier：发送各类操作消息到队列，不需要等待最终的返回结果。 \u003cbr\u003e\nRPC.call、RPC.cast一般用于同一个项目下的服务之间进行的“内部“请求；RPC.Notifier发送的操作消息，目前被ceilometer notification服务所接收。\u003c/p\u003e\n\n\u003ch3 id=\"rpccall-rpccast\"\u003eRPC.call &amp; RPC.cast\u003c/h3\u003e\n\n\u003cp\u003e一般情况下，openstack各个项目之间通过RestAPI接口进行相互访问，而项目内部服务之间则通过RPC请求的方式进行通信。\u003c/p\u003e\n\n\u003cp\u003eRPC.call 请求\u003c/p\u003e\n\n\u003cp\u003e对于RPC.call请求，借助官方一张经典的图来描述：  \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160525105930045\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e以nova-compute服务调用nova-network服务分配网络为例：  \u003cbr\u003e\n1. nova-compute服务向消息队列服务的compute.node队列发送RPC请求，并等待请求的最终回复。  \u003cbr\u003e\n2. nova-network服务通过nova exchange（topic exchange）从compute.node队列中获取消息并作出相应的处理。  \u003cbr\u003e\n3. nova-network服务消息处理完了之后，向reply_XXX队列发送一条回复消息  \u003cbr\u003e\n4. nova-compute服务通过reply_XXX exchange（direct exchange）接受从nova-network发送的RPC消息。\u003c/p\u003e\n\n\u003ch3 id=\"rpccast请求\"\u003eRPC.cast请求\u003c/h3\u003e\n\n\u003cp\u003e对于RPC.cast请求，同样借助官方一张经典的图来描述：  \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20160525112836506\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e以nova-conductor服务调用nova-compute服务build_and_run_instance为例：  \u003cbr\u003e\n1. nova-conductor服务向消息队列服务的compute队列发送RPC请求，请求结束，不需要等待请求的最终回复。  \u003cbr\u003e\n2. nova-compute服务通过nova exchange（topic exchange）从compute队列中获取消息并作出相应的处理。\u003c/p\u003e\n\n\u003cp\u003e在openstack项目中，一般情况下，RPC server端发送一个请求到消息队列，一般只有一个消费者（及时有多个消费者）接受并处理这条消息，还有一种类型的RPC.cast请求，也称为fanout_cast请求，fanout_cast发送的是广播请求，所有对应的consumer都能接收到。\u003c/p\u003e\n\n\u003ch3 id=\"rpcnotifier\"\u003eRPC.Notifier\u003c/h3\u003e\n\n\u003cp\u003eopenstack中对于资源的操作，如创建虚拟机，会向向消息队列的notifications.info，notifications.warn，notifications.error等队列发送对应的RPC消息，而ceilometer的notification服务会充当RPC 消费者端，获取对应的操作消息进行处理。  \u003cbr\u003e\nRPC.Notifier提供的notifier消息有如下几种：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eaudit：审计类消息，如compute.instance.exist\u003c/li\u003e\n\u003cli\u003einfo：正常操作消息，如compute.instance.create.end\u003c/li\u003e\n\u003cli\u003ewarn：告警类操作消息，暂无\u003c/li\u003e\n\u003cli\u003eerror：错误类操作消息，如scheduler.run_instance\u003c/li\u003e\n\u003cli\u003ecritical：严重错误，暂无\u003c/li\u003e\n\u003cli\u003esample：sample消息，ceilometer中使用\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e实际上openstack RPC notifier消息就是topic类型的消息，以虚拟机开始创建为例：  \u003cbr\u003e\n1. nova-compute服务向消息队列服务的notifications.info队列发送RPC消息。  \u003cbr\u003e\n2. ceilometer-agent-notification服务通过nova exchange（topic exchange）从notifications.info队列中获取消息并作出相应的处理。\u003c/p\u003e","markdowncontent":"转自：http://blog.csdn.net/hhp_hhp/article/details/51497560\n\n###概述\n在OpenStack各个项目中，我们通常会用到如下几种RPC请求：\n\nRPC.call：发送请求到消息队列，等待返回最终结果。\nRPC.cast：发送请求到消息队列，不需要等待最终返回的结果。\nRPC.Notifier：发送各类操作消息到队列，不需要等待最终的返回结果。\nRPC.call、RPC.cast一般用于同一个项目下的服务之间进行的“内部“请求；RPC.Notifier发送的操作消息，目前被ceilometer notification服务所接收。\n\n###RPC.call & RPC.cast\n\n一般情况下，openstack各个项目之间通过RestAPI接口进行相互访问，而项目内部服务之间则通过RPC请求的方式进行通信。\n\nRPC.call 请求\n\n对于RPC.call请求，借助官方一张经典的图来描述： \n![这里写图片描述](http://img.blog.csdn.net/20160525105930045)\n\n以nova-compute服务调用nova-network服务分配网络为例： \n1. nova-compute服务向消息队列服务的compute.node队列发送RPC请求，并等待请求的最终回复。 \n2. nova-network服务通过nova exchange（topic exchange）从compute.node队列中获取消息并作出相应的处理。 \n3. nova-network服务消息处理完了之后，向reply_XXX队列发送一条回复消息 \n4. nova-compute服务通过reply_XXX exchange（direct exchange）接受从nova-network发送的RPC消息。\n\n###RPC.cast请求\n\n对于RPC.cast请求，同样借助官方一张经典的图来描述： \n![这里写图片描述](http://img.blog.csdn.net/20160525112836506)\n\n以nova-conductor服务调用nova-compute服务build_and_run_instance为例： \n1. nova-conductor服务向消息队列服务的compute队列发送RPC请求，请求结束，不需要等待请求的最终回复。 \n2. nova-compute服务通过nova exchange（topic exchange）从compute队列中获取消息并作出相应的处理。\n\n在openstack项目中，一般情况下，RPC server端发送一个请求到消息队列，一般只有一个消费者（及时有多个消费者）接受并处理这条消息，还有一种类型的RPC.cast请求，也称为fanout_cast请求，fanout_cast发送的是广播请求，所有对应的consumer都能接收到。\n\n###RPC.Notifier\n\nopenstack中对于资源的操作，如创建虚拟机，会向向消息队列的notifications.info，notifications.warn，notifications.error等队列发送对应的RPC消息，而ceilometer的notification服务会充当RPC 消费者端，获取对应的操作消息进行处理。 \nRPC.Notifier提供的notifier消息有如下几种：\n\n- audit：审计类消息，如compute.instance.exist\n- info：正常操作消息，如compute.instance.create.end\n- warn：告警类操作消息，暂无\n- error：错误类操作消息，如scheduler.run_instance\n- critical：严重错误，暂无\n- sample：sample消息，ceilometer中使用\n\n实际上openstack RPC notifier消息就是topic类型的消息，以虚拟机开始创建为例： \n1. nova-compute服务向消息队列服务的notifications.info队列发送RPC消息。 \n2. ceilometer-agent-notification服务通过nova exchange（topic exchange）从notifications.info队列中获取消息并作出相应的处理。","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-14] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-12-【OpenStack源码分析之一】初探OpenStack.markdown [pool-2-thread-13] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":23599257,"title":"开心的小明——动态规划","create_at":"\/Date(1397367124000)\/","create":"2014-04-13 01:32:04","view_count":708,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"问题描述：\r\n\r\n\r\n小明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早小明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的N元。\r\n\r\n于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的","url":"http://blog.csdn.net/BLACKMOON88/article/details/23599257","categories":"","tags":"c,二维数组,动态规划","content":"\r\n\u003cp\u003e问题描述：\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"font-size:12px; color:#000099\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e小明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003eN\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e元钱就行”。今天一早小明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003eN\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e元。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"font-size:12px; color:#000099\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e于是，他把每件物品规定了一个重要度，分为\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e5\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e等：用整数\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e1\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e~\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e表示，第\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e5\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e等最重要。他还从因特网上查到了每件物品的价&#26684;（都是整数元）。他希望在不超过\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003eN\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e元（可以等于\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003eN\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e元）的前提下，使每件物品的价&#26684;与重要度的乘积的总和最大。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"font-size:12px; color:#000099\"\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e设第\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ej\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e件物品的价&#26684;为\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ev[j]\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，重要度为\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ew[j]\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，共选中了\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ek\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e件物品，编号依次为\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ej\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e1\u003c/span\u003e\u003c/sub\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ej\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e2\u003c/span\u003e\u003c/sub\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，……，\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ej\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003ek\u003c/span\u003e\u003c/sub\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e，则所求的总和为：\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"font-size:12px; color:#000099\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027dejavu serif\u0027,serif\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003ev[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]*w[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]&#43;v[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]*w[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]&#43;&nbsp;\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:宋体,simsun\"\u003e…\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e&#43;v[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003ek\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]*w[j\u003c/span\u003e\u003c/span\u003e\u003csub style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003ek\u003c/span\u003e\u003c/span\u003e\u003c/sub\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e\u003cspan lang=\"pl-PL\" style=\"margin:0px; padding:0px\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e。（其中\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:\u0027courier new\u0027,monospace\"\u003e*\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px\"\u003e为乘号）\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"margin-top:0.49cm; margin-bottom:0.49cm; padding-top:0px; padding-bottom:0px; font-family:Simsun; line-height:0.64cm; widows:2; text-indent:0.77cm; orphans:2\"\u003e\r\n\u003cspan style=\"margin:0px; padding:0px\"\u003e\u003cspan style=\"font-size:12px; color:#000099\"\u003e请你帮助小明设计一个满足要求的购物单。\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n初看这个问题，和0-1背包问题很相&#20284;，可以采用动态规划方法来求解：\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e什么是动态规划（DP）？\u003c/span\u003e\u003cbr style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e\r\n\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e非常重要！，不要认为概念不重要，理解的深刻，你才知道\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(255,0,0)\"\u003e对于什么样的问题去考虑有没有动态规划的方法，以及如何去使用动态规划\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e。\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cbr\u003e\r\n\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e1）动态规划是运筹学中用于求\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e解决策过程中的最优化数学方法\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e。\r\n 当然，我们在这里关注的是作为一种算法设计技术，作为一种使用\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(128,0,128)\"\u003e多阶段决策过程最优的通用方法\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e。\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e它是应用数学中用于\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(128,0,128)\"\u003e解决某类最优化问题\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e的重要工具。\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cbr\u003e\r\n\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e2）如果问题是由\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(128,0,128)\"\u003e交叠的子问题\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e所构成，我们就可以用动态规划技术来解决它，一般来说，这样的子问题出现在对给定问题求解的\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; color:rgb(153,51,102)\"\u003e递推关系\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e中，\u003c/span\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e这个递推关系包含了相\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"white-space:pre\"\u003e\u003cspan style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e同问题的更小子问题的解\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px\"\u003e。动态规划法建议，与其对交叠子问题一次又一次的求解，不如把每个较小子问题只求解一次并把结果记录在表中（动态规划也是空间换时间\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"color:rgb(51,51,51); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:13px; line-height:23px; white-space:pre\"\u003e的），这样就可以从表中得到原始问题的解。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"white-space:pre\"\u003e\u003c/span\u003e由于动态规划具备最优子结构的性质，这意味着它属于递归的一种。\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"white-space:pre\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre code_snippet_id=\"289566\" snippet_file_name=\"blog_20140413_1_6361701\"  name=\"code\" class=\"cpp\"\u003e#include &quot;OJ.h&quot;\n#include &lt;stdlib.h&gt;\nint** initStateMatrix(int*p)\n{\n\tint** StateMatrix=(int **)malloc(sizeof(int*)*(*(p+1)));\n\tint No=0,money=0;\n\t//int 状态矩阵\n\tfor(No=0;No&lt;=*(p+1);No++)\n\t{\n\t\tStateMatrix[No]=(int*)malloc(*p*sizeof(int));\n\t\tfor(money=0;money&lt;=*p;money++)\n\t\t{\n\t\t\tStateMatrix[No][money]=0;\n\t\t}\n\t}\n\tfor(No=1;No&lt;=*(p+1);No++)\n\t{\n\t\tfor(money=1;money&lt;=*p;money++)\n\t\t{\n\t\t\tif(*(p+No*2)&lt;=money)\n\t\t\t{\n\t\t\t\tStateMatrix[No][money]=StateMatrix[No-1][money]&gt;(StateMatrix[No-1][money-*(p+No*2)]+(*(p+No*2)*(*(p+No*2+1))))?StateMatrix[No-1][money]:StateMatrix[No-1][money-*(p+No*2)]+(*(p+No*2)*(*(p+No*2+1)));\n\t\t\t}\n\t\t\telse StateMatrix[No][money]=StateMatrix[No-1][money];\n\t\t}\n\t}\n\treturn StateMatrix;\n} \n/*\n功能:\n\n输入参数：int*p 指向二维数组的首地址，该二维数组第0行的两个数分别表示：总钱数&lt;30000，和希望购买物品的个数&lt;25;\n          该数组从第1行到第m行(1&lt;=j&lt;=m)中给出了编号为j的物品的基本数据，每行有2个非负整数，\n\t\t  表示该物品的价格(&lt;=10000)和该物品的重要度(1~5)。\n\n\t\t  GetResult表示不超过总钱数的物品的价格与重要度乘积的总和的最大值(&lt;100000000)。\n\n\t\t  不需做入参检查，测试用例可以保证～\n\t\t  \n    例如：4000 8（第0行）\n\t\t  821 3  （第1行）\n\t\t  422 5\n\t\t  458 5\n\t\t  500 3\n\t\t  200 2\n\t\t  430 4\n\t\t  530 3\n\t\t  239 3\n\t\t \n\t\t  则表示 总钱数为4000，希望购买物品个数为8个，因此从第1行到第8行表示编号为j的物品的价格及物品的重要度。\n\t \t\n          \n\n\t \t\t\n返回值：无\n\n温馨提示：根据题意可知，该二维数组只有两列，且行数为第0行的第二个元素数值+1;入参p不能按照二维数组的方法来取值，要将\n          二维的转换成一维的哦～\n\n*/\n\nvoid GetResult(int*p,int&amp; Get_Result)\n{\t \n    //\t在这里实现功能\n\tint i;\n\tint** StateMatrix=initStateMatrix(p);\n\tfor(int i=0;i&lt;=*(p+1);i++)\n\t{\n\t\tGet_Result=StateMatrix[i][*p]&gt;Get_Result?StateMatrix[i][*p]:Get_Result;\n\t}\n} \n\n\t\u003c/pre\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-16] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-22-【OpenStack源码分析之七】openstack中的RPC请求分析.markdown [pool-2-thread-14] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之七】openstack中的RPC请求分析》成功 [pool-2-thread-14] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenVswitch源码分析之二】架构》成功 [pool-2-thread-9] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=23127865 [pool-2-thread-3] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-12-计算二叉树的深度和宽度.markdown [pool-2-thread-22] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75905534 [pool-2-thread-24] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之一】初探OpenStack》成功 [pool-2-thread-13] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-13-开心的小明——动态规划.markdown [pool-2-thread-16] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75948544 [pool-2-thread-20] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":75905534,"title":"【OpenStack源码分析之九】看 nova-scheduler 如何选择计算节点","create_at":"\/Date(1500785432000)\/","create":"2017-07-23 12:50:32","view_count":154,"comment_count":0,"comment_allowed":"true","type":"repost","channel":2,"digg":0,"bury":0,"description":"本节重点介绍 nova-scheduler 的调度机制和实现方法：即解决如何选择在哪个计算节点上启动 instance 的问题。创建 Instance 时，用户会提出资源需求，例如 CPU、内存、磁盘各需要多少。OpenStack 将这些需求定义在 flavor 中，用户只需要指定用哪个 flavor 就可以了。  \n \n可用的 flavor 在 System-\u003eFlavors 中管理。  \n \nF","url":"http://blog.csdn.net/BLACKMOON88/article/details/75905534","categories":"云计算,OpenStack","tags":"openstack,源码","content":"\u003cp\u003e转自：\u003ca href=\"http://cloudman.blog.51cto.com/10425448/1768866\" target=\"_blank\"\u003ehttp://cloudman.blog.51cto.com/10425448/1768866\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e本节重点介绍 nova-scheduler 的调度机制和实现方法：即解决如何选择在哪个计算节点上启动 instance 的问题。\u003c/p\u003e\n\n\u003cp\u003e创建 Instance 时，用户会提出资源需求，例如 CPU、内存、磁盘各需要多少。\u003c/p\u003e\n\n\u003cp\u003eOpenStack 将这些需求定义在 flavor 中，用户只需要指定用哪个 flavor 就可以了。  \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696174053384.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n可用的 flavor 在 System-&gt;Flavors 中管理。  \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696325049036.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nFlavor 主要定义了 VCPU，RAM，DISK 和 Metadata 这四类。 nova-scheduler 会按照 flavor 去选择合适的计算节点。 VCPU，RAM，DISK 比较好理解，而 Metatdata 比较有意思，我们后面会具体讨论。 \u003c/p\u003e\n\n\u003cp\u003e下面介绍 nova-scheduler 是如何实现调度的。 \u003c/p\u003e\n\n\u003cp\u003e在 /etc/nova/nova.conf 中，nova 通过 scheduler_driver，scheduler_available_filters 和 scheduler\u003c/p\u003e\n\n\n\n\u003ch3 id=\"filter-scheduler\"\u003eFilter scheduler\u003c/h3\u003e\n\n\u003cp\u003eFilter scheduler 是 nova-scheduler 默认的调度器，调度过程分为两步： \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e通过过滤器（filter）选择满足条件的计算节点（运行 nova-compute）\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e通过权重计算（weighting）选择在最优（权重值最大）的计算节点上创建 Instance。\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003escheduler_driver=nova.scheduler.filter_scheduler.FilterScheduler \u003cbr\u003e\nNova 允许使用第三方 scheduler，配置 scheduler_driver 即可。 这又一次体现了OpenStack的开放性。 \u003c/p\u003e\n\n\u003cp\u003eScheduler 可以使用多个 filter 依次进行过滤，过滤之后的节点再通过计算权重选出最适合的节点。 \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696491079257.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e上图是调度过程的一个示例： \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e最开始有 6 个计算节点 Host1-Host6\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e通过多个 filter 层层过滤，Host2 和 Host4 没有通过，被刷掉了\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHost1，Host3，Host5，Host6 计算权重，结果 Host5 得分最高，最终入选\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"filter\"\u003eFilter\u003c/h3\u003e\n\n\u003cp\u003e当 Filter scheduler 需要执行调度操作时，会让 filter 对计算节点进行判断，filter 返回 True 或 False。 \u003c/p\u003e\n\n\u003cp\u003eNova.conf 中的 scheduler_available_filters 选项用于配置 scheduler 可用的 filter，默认是所有 nova \u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003escheduler_available_filters = nova\u003cspan class=\"hljs-preprocessor\"\u003e.scheduler\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.filters\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.all\u003c/span\u003e_filters\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e另外还有一个选项 scheduler_default_filters，用于指定 scheduler 真正使用的 filter，默认值如下 \u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003escheduler_default_filters \u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e RetryFilter, AvailabilityZoneFilter, RamFilter, DiskFilter, Compute\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFilter scheduler 将按照列表中的顺序依次过滤。 下面依次介绍每个 filter。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"retryfilter\"\u003eRetryFilter\u003c/h4\u003e\n\n\u003cp\u003eRetryFilter 的作用是刷掉之前已经调度过的节点。 \u003c/p\u003e\n\n\u003cp\u003e举个例子方便大家理解： 假设 A,B,C 三个节点都通过了过滤，最终 A 因为权重值最大被选中执行操作。 但由于某个原因，操作在 A 上失败了。 默认情况下，nova-scheduler 会重新执行过滤操作（重复次数由 scheduler_max_attempts 选项指定，默认是 3）。 那么这时候 RetryFilter 就会将 A 直接刷掉，避免操作再次失败。 RetryFilter 通常作为第一个 filter。 \u003c/p\u003e\n\n\n\n\u003ch4 id=\"availabilityzonefilter\"\u003eAvailabilityZoneFilter\u003c/h4\u003e\n\n\u003cp\u003e为提高容灾性和提供隔离服务，可以将计算节点划分到不同的Availability Zone中。 \u003c/p\u003e\n\n\u003cp\u003e例如把一个机架上的机器划分在一个 Availability Zone 中。 OpenStack 默认有一个命名为 “Nova” \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696674029728.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e创建 Instance 时，需要指定将 Instance 部署到在哪个 Availability Zone中。 \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696804076285.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003enova-scheduler 在做 filtering 时，会使用 AvailabilityZoneFilter 将不属于指定 Availability Zone 的Host过滤掉\u003c/p\u003e\n\n\n\n\u003ch4 id=\"ramfilter\"\u003eRamFilter\u003c/h4\u003e\n\n\u003cp\u003eRamFilter 将不能满足 flavor 内存需求的计算节点过滤掉。 \u003c/p\u003e\n\n\u003cp\u003e对于内存有一点需要注意： 为了提高系统的资源使用率，OpenStack 在计算节点可用内存时允许Overcommit。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003eram_allocation_ratio \u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e 1.5\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e其含义是：如果计算节点的内存有 10GB，OpenStack 则会认为它有 15GB（10*1.5）的内存。 \u003c/p\u003e\n\n\n\n\u003ch4 id=\"diskfilter\"\u003eDiskFilter\u003c/h4\u003e\n\n\u003cp\u003eDiskFilter 将不能满足 flavor 磁盘需求的计算节点过滤掉。 \u003c/p\u003e\n\n\u003cp\u003eDisk 同样允许 overcommit，通过 nova.conf 中 disk_allocation_ratio 控制，默认值为 1 \u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003edisk_allocation_ratio \u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e 1.0\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch4 id=\"corefilter\"\u003eCoreFilter\u003c/h4\u003e\n\n\u003cp\u003eCoreFilter 将不能满足 flavor vCPU 需求的计算节点过滤掉。 \u003c/p\u003e\n\n\u003cp\u003evCPU 同样允许 overcommit，通过 nova.conf 中 cpu_allocation_ratio 控制，默认值为 16 \u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003ecpu_allocation_ratio \u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e 16.0\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这意味着一个 8 vCPU 的计算节点，nova-scheduler 在调度时认为它有 128 个 vCPU。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"computefilter\"\u003eComputeFilter\u003c/h4\u003e\n\n\u003cp\u003eComputeFilter 保证只有 nova-compute 服务正常工作的计算节点才能够被 nova-scheduler调度。 \u003cbr\u003e\nComputeFilter 显然是必选的 filter。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"computecapabilitiesfilter\"\u003eComputeCapabilitiesFilter\u003c/h4\u003e\n\n\u003cp\u003eComputeCapabilitiesFilter 根据计算节点的特性来筛选。\u003c/p\u003e\n\n\u003cp\u003e这个比较高级，我们举例说明。 \u003cbr\u003e\n例如我们的节点有 x86_64 和 ARM 架构的，如果想将 Instance 指定部署到 x86_64 架构的节点上，就可以利用到 ComputeCapabilitiesFilter。\u003c/p\u003e\n\n\u003cp\u003e还记得 flavor 中有个 Metadata 吗，Compute 的 Capabilitie s就在 Metadata中 指定。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696981049450.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e“Compute Host Capabilities” 列出了所有可设置 Capabilities。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697223063965.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n点击 “Architecture” 后面的 “+”，就可以在右边的列表中指定具体的架构。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697342039435.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e配置好后，ComputeCapabilitiesFilter 在调度时只会筛选出 x86_64 的节点。 \u003cbr\u003e\n如果没有设置 Metadata，ComputeCapabilitiesFilter 不会起作用，所有节点都会通过筛选。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"imagepropertiesfilter\"\u003eImagePropertiesFilter\u003c/h4\u003e\n\n\u003cp\u003eImagePropertiesFilter 根据所选 image 的属性来筛选匹配的计算节点。 \u003cbr\u003e\n跟 flavor 类似，image 也有 metadata，用于指定其属性。 \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697471014542.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n例如希望某个 image 只能运行在 kvm 的 hypervisor 上，可以通过 “Hypervisor Type” 属性来指定 \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697570006487.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n点击 “+”，然后在右边的列表中选择 “kvm”。 \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697690933206.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n配置好后，ImagePropertiesFilter 在调度时只会筛选出 kvm 的节点。 \u003cbr\u003e\n如果没有设置 Image 的Metadata，ImagePropertiesFilter 不会起作用，所有节点都会通过筛选。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"servergroupantiaffinityfilter\"\u003eServerGroupAntiAffinityFilter\u003c/h4\u003e\n\n\u003cp\u003eServerGroupAntiAffinityFilter 可以尽量将 Instance 分散部署到不同的节点上。\u003c/p\u003e\n\n\u003cp\u003e例如有 inst1，inst2 和 inst3 三个 instance，计算节点有 A,B 和 C。 \u003cbr\u003e\n为保证分散部署，进行如下操作：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e创建一个 anti-affinity 策略的 server group “group-1”\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003enova server\u003cspan class=\"hljs-attribute\"\u003e-group\u003c/span\u003e\u003cspan class=\"hljs-attribute\"\u003e-create\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003epolicy anti\u003cspan class=\"hljs-attribute\"\u003e-affinity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003egroup\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e请注意，这里的 server group 其实是 instance group，并不是计算节点的 group。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e依次创建 Instance，将inst1, inst2和inst3放到group-1中\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs brainfuck\"\u003e\u003cspan class=\"hljs-comment\"\u003enova\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eboot\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eimage\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eIMAGE_ID\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eflavor\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003ehint\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003egroup=group\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003einst1\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003enova\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eboot\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eimage\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eIMAGE_ID\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eflavor\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003ehint\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003egroup=group\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003einst2\u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003enova\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eboot\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eimage\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003eIMAGE_ID\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003eflavor\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003ehint\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003egroup=group\u003c/span\u003e\u003cspan class=\"hljs-literal\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-comment\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003einst3\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e因为 group-1 的策略是 AntiAffinity，调度时 ServerGroupAntiAffinityFilter 会将 inst1, inst2 和 inst3 部署到不同计算节点 A, B 和 C。\u003c/p\u003e\n\n\u003cp\u003e目前只能在 CLI 中指定 server group 来创建 instance。\u003c/p\u003e\n\n\u003cp\u003e创建 instance 时如果没有指定 server group，ServerGroupAntiAffinityFilter 会直接通过。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"weight\"\u003eWeight\u003c/h3\u003e\n\n\u003cp\u003e经过前面一堆 filter 的过滤，nova-scheduler 选出了能够部署 instance 的计算节点。 \u003cbr\u003e\n如果有多个计算节点通过了过滤，那么最终选择哪个节点呢？\u003c/p\u003e\n\n\u003cp\u003eScheduler 会对每个计算节点打分，得分最高的获胜。 \u003cbr\u003e\n打分的过程就是 weight，翻译过来就是计算权重值，那么 scheduler 是根据什么来计算权重值呢？\u003c/p\u003e\n\n\u003cp\u003e目前 nova-scheduler 的默认实现是根据计算节点空闲的内存量计算权重值： \u003cbr\u003e\n空闲内存越多，权重越大，instance 将被部署到当前空闲内存最多的计算节点上。\u003c/p\u003e\n\n\u003ch3 id=\"日志\"\u003e日志\u003c/h3\u003e\n\n\u003cp\u003e是时候完整的回顾一下 nova-scheduler 的工作过程了。 \u003cbr\u003e\n整个过程都被记录到 nova-scheduler 的日志中。 \u003cbr\u003e\n比如当我们部署一个 instance 时\u003c/p\u003e\n\n\u003cp\u003e打开 nova-scheduler 的日志 /opt/stack/logs/n-sch.log\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697818083020.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n日志显示初始有两个 host（在我们的实验环境中就是 devstack-controller 和 devstack-compute1），依次经过 9 个 filter 的过滤（RetryFilter, AvailabilityZoneFilter, RamFilter, \u003cbr\u003e\nDiskFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, \u003cbr\u003e\nServerGroupAntiAffinityFilter, ServerGroupAffinityFilter），两个计算节点都通过了。\u003c/p\u003e\n\n\u003cp\u003e那么接下来就该 weight 了： \u003cbr\u003e\n\u003cimg src=\"http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697965069919.jpg\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n可以看到因为 devstack-controller 的空闲内存比 devstack-compute1 多（7466 &gt; 3434），权重值更大（1.0 &gt; 0.4599），最终选择 devstack-controller。\u003c/p\u003e\n\n\u003cp\u003e注：要显示 DEBUG 日志，需要在 /etc/nova/nova.conf 中打开 debug 选项。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs ini\"\u003e\u003cspan class=\"hljs-title\"\u003e[DEFAULT]\u003c/span\u003e\n\u003cspan class=\"hljs-setting\"\u003edebug = \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"转自：http://cloudman.blog.51cto.com/10425448/1768866\n\n本节重点介绍 nova-scheduler 的调度机制和实现方法：即解决如何选择在哪个计算节点上启动 instance 的问题。\n\n创建 Instance 时，用户会提出资源需求，例如 CPU、内存、磁盘各需要多少。\n\nOpenStack 将这些需求定义在 flavor 中，用户只需要指定用哪个 flavor 就可以了。 \n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696174053384.jpg)\n可用的 flavor 在 System-\u003eFlavors 中管理。 \n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696325049036.jpg)\nFlavor 主要定义了 VCPU，RAM，DISK 和 Metadata 这四类。 nova-scheduler 会按照 flavor 去选择合适的计算节点。 VCPU，RAM，DISK 比较好理解，而 Metatdata 比较有意思，我们后面会具体讨论。 \n\n下面介绍 nova-scheduler 是如何实现调度的。 \n\n在 /etc/nova/nova.conf 中，nova 通过 scheduler_driver，scheduler_available_filters 和 scheduler\n\n###Filter scheduler\nFilter scheduler 是 nova-scheduler 默认的调度器，调度过程分为两步： \n\n- 通过过滤器（filter）选择满足条件的计算节点（运行 nova-compute）\n\n- 通过权重计算（weighting）选择在最优（权重值最大）的计算节点上创建 Instance。\n\nscheduler_driver=nova.scheduler.filter_scheduler.FilterScheduler\nNova 允许使用第三方 scheduler，配置 scheduler_driver 即可。 这又一次体现了OpenStack的开放性。 \n\nScheduler 可以使用多个 filter 依次进行过滤，过滤之后的节点再通过计算权重选出最适合的节点。 \n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696491079257.jpg)\n\n上图是调度过程的一个示例： \n\n- 最开始有 6 个计算节点 Host1-Host6\n\n- 通过多个 filter 层层过滤，Host2 和 Host4 没有通过，被刷掉了\n\n- Host1，Host3，Host5，Host6 计算权重，结果 Host5 得分最高，最终入选\n\n###Filter\n当 Filter scheduler 需要执行调度操作时，会让 filter 对计算节点进行判断，filter 返回 True 或 False。 \n\nNova.conf 中的 scheduler_available_filters 选项用于配置 scheduler 可用的 filter，默认是所有 nova \n```\nscheduler_available_filters = nova.scheduler.filters.all_filters\n```\n另外还有一个选项 scheduler_default_filters，用于指定 scheduler 真正使用的 filter，默认值如下 \n```\nscheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, DiskFilter, Compute\n```\nFilter scheduler 将按照列表中的顺序依次过滤。 下面依次介绍每个 filter。\n\n####RetryFilter\n\nRetryFilter 的作用是刷掉之前已经调度过的节点。 \n\n举个例子方便大家理解： 假设 A,B,C 三个节点都通过了过滤，最终 A 因为权重值最大被选中执行操作。 但由于某个原因，操作在 A 上失败了。 默认情况下，nova-scheduler 会重新执行过滤操作（重复次数由 scheduler_max_attempts 选项指定，默认是 3）。 那么这时候 RetryFilter 就会将 A 直接刷掉，避免操作再次失败。 RetryFilter 通常作为第一个 filter。 \n\n####AvailabilityZoneFilter\n\n为提高容灾性和提供隔离服务，可以将计算节点划分到不同的Availability Zone中。 \n\n例如把一个机架上的机器划分在一个 Availability Zone 中。 OpenStack 默认有一个命名为 “Nova”\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696674029728.jpg)\n\n创建 Instance 时，需要指定将 Instance 部署到在哪个 Availability Zone中。 \n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696804076285.jpg)\n\nnova-scheduler 在做 filtering 时，会使用 AvailabilityZoneFilter 将不属于指定 Availability Zone 的Host过滤掉\n\n####RamFilter\nRamFilter 将不能满足 flavor 内存需求的计算节点过滤掉。 \n\n对于内存有一点需要注意： 为了提高系统的资源使用率，OpenStack 在计算节点可用内存时允许Overcommit。\n\n```\nram_allocation_ratio = 1.5\n```\n其含义是：如果计算节点的内存有 10GB，OpenStack 则会认为它有 15GB（10*1.5）的内存。 \n\n####DiskFilter\nDiskFilter 将不能满足 flavor 磁盘需求的计算节点过滤掉。 \n\nDisk 同样允许 overcommit，通过 nova.conf 中 disk_allocation_ratio 控制，默认值为 1 \n```\ndisk_allocation_ratio = 1.0\n```\n####CoreFilter\nCoreFilter 将不能满足 flavor vCPU 需求的计算节点过滤掉。 \n\nvCPU 同样允许 overcommit，通过 nova.conf 中 cpu_allocation_ratio 控制，默认值为 16 \n\n```\ncpu_allocation_ratio = 16.0\n```\n这意味着一个 8 vCPU 的计算节点，nova-scheduler 在调度时认为它有 128 个 vCPU。\n\n####ComputeFilter\n\nComputeFilter 保证只有 nova-compute 服务正常工作的计算节点才能够被 nova-scheduler调度。\nComputeFilter 显然是必选的 filter。\n\n####ComputeCapabilitiesFilter\nComputeCapabilitiesFilter 根据计算节点的特性来筛选。\n\n这个比较高级，我们举例说明。\n例如我们的节点有 x86_64 和 ARM 架构的，如果想将 Instance 指定部署到 x86_64 架构的节点上，就可以利用到 ComputeCapabilitiesFilter。\n\n还记得 flavor 中有个 Metadata 吗，Compute 的 Capabilitie s就在 Metadata中 指定。\n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809696981049450.jpg)\n\n“Compute Host Capabilities” 列出了所有可设置 Capabilities。\n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697223063965.jpg)\n点击 “Architecture” 后面的 “+”，就可以在右边的列表中指定具体的架构。\n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697342039435.jpg)\n\n配置好后，ComputeCapabilitiesFilter 在调度时只会筛选出 x86_64 的节点。\n如果没有设置 Metadata，ComputeCapabilitiesFilter 不会起作用，所有节点都会通过筛选。\n####ImagePropertiesFilter\nImagePropertiesFilter 根据所选 image 的属性来筛选匹配的计算节点。\n跟 flavor 类似，image 也有 metadata，用于指定其属性。\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697471014542.jpg)\n例如希望某个 image 只能运行在 kvm 的 hypervisor 上，可以通过 “Hypervisor Type” 属性来指定\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697570006487.jpg)\n点击 “+”，然后在右边的列表中选择 “kvm”。\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697690933206.jpg)\n配置好后，ImagePropertiesFilter 在调度时只会筛选出 kvm 的节点。\n如果没有设置 Image 的Metadata，ImagePropertiesFilter 不会起作用，所有节点都会通过筛选。\n####ServerGroupAntiAffinityFilter\n\nServerGroupAntiAffinityFilter 可以尽量将 Instance 分散部署到不同的节点上。\n\n例如有 inst1，inst2 和 inst3 三个 instance，计算节点有 A,B 和 C。\n为保证分散部署，进行如下操作：\n\n- 创建一个 anti-affinity 策略的 server group “group-1”\n\n```\nnova server-group-create --policy anti-affinity group-1\n```\n请注意，这里的 server group 其实是 instance group，并不是计算节点的 group。\n\n- 依次创建 Instance，将inst1, inst2和inst3放到group-1中\n\n```\nnova boot --image IMAGE_ID --flavor 1 --hint group=group-1 inst1\nnova boot --image IMAGE_ID --flavor 1 --hint group=group-1 inst2\nnova boot --image IMAGE_ID --flavor 1 --hint group=group-1 inst3\n```\n因为 group-1 的策略是 AntiAffinity，调度时 ServerGroupAntiAffinityFilter 会将 inst1, inst2 和 inst3 部署到不同计算节点 A, B 和 C。\n\n目前只能在 CLI 中指定 server group 来创建 instance。\n\n创建 instance 时如果没有指定 server group，ServerGroupAntiAffinityFilter 会直接通过。\n\n###Weight\n\n经过前面一堆 filter 的过滤，nova-scheduler 选出了能够部署 instance 的计算节点。\n如果有多个计算节点通过了过滤，那么最终选择哪个节点呢？\n\nScheduler 会对每个计算节点打分，得分最高的获胜。\n打分的过程就是 weight，翻译过来就是计算权重值，那么 scheduler 是根据什么来计算权重值呢？\n\n目前 nova-scheduler 的默认实现是根据计算节点空闲的内存量计算权重值：\n空闲内存越多，权重越大，instance 将被部署到当前空闲内存最多的计算节点上。\n\n###日志\n是时候完整的回顾一下 nova-scheduler 的工作过程了。\n整个过程都被记录到 nova-scheduler 的日志中。\n比如当我们部署一个 instance 时\n\n打开 nova-scheduler 的日志 /opt/stack/logs/n-sch.log\n\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697818083020.jpg)\n日志显示初始有两个 host（在我们的实验环境中就是 devstack-controller 和 devstack-compute1），依次经过 9 个 filter 的过滤（RetryFilter, AvailabilityZoneFilter, RamFilter,\nDiskFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter,\nServerGroupAntiAffinityFilter, ServerGroupAffinityFilter），两个计算节点都通过了。\n\n那么接下来就该 weight 了：\n![这里写图片描述](http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20160428-1461809697965069919.jpg)\n可以看到因为 devstack-controller 的空闲内存比 devstack-compute1 多（7466 \u003e 3434），权重值更大（1.0 \u003e 0.4599），最终选择 devstack-controller。\n\n注：要显示 DEBUG 日志，需要在 /etc/nova/nova.conf 中打开 debug 选项。\n\n```\n[DEFAULT]\ndebug = True\n```\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-24] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《计算二叉树的深度和宽度》成功 [pool-2-thread-22] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=73196798 [pool-2-thread-25] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《开心的小明——动态规划》成功 [pool-2-thread-16] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":73196798,"title":"对Python协程的理解","create_at":"\/Date(1497370467000)\/","create":"2017-06-14 12:14:27","view_count":152,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"前言之前看Python教程的时候了解了一些协程的概念，相对还是比较肤浅，但是协程对Python语言而言是一个很重要的特性，加上近期看了我司架构师标哥的一篇讲协程的文章，感觉豁然开朗。为什么需要协程协程这东西，不是Python独有的，在很多其他脚本语言比如Lua也有，协程的存在，让单线程跑出了并发的效果，对计算资源的利用率高，开销小。但是说起来和Python解释器的设计也有关系，Python解释器对于","url":"http://blog.csdn.net/BLACKMOON88/article/details/73196798","categories":"Python相关","tags":"python,协程,线程","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e之前看Python教程的时候了解了一些协程的概念，相对还是比较肤浅，但是协程对Python语言而言是一个很重要的特性，加上近期看了我司架构师标哥的一篇讲协程的文章，感觉豁然开朗。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"为什么需要协程\"\u003e为什么需要协程\u003c/h3\u003e\n\n\u003cp\u003e协程这东西，不是Python独有的，在很多其他脚本语言比如Lua也有，协程的存在，让单线程跑出了并发的效果，对计算资源的利用率高，开销小。但是说起来和Python解释器的设计也有关系，Python的多线程并不支持多核，因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。\u003c/p\u003e\n\n\u003cp\u003eGIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"实现一个协程\"\u003e实现一个协程\u003c/h3\u003e\n\n\u003cp\u003e协程是一种用户态的轻量级线程。本篇主要研究协程的C/C++的实现。\u003c/p\u003e\n\n\u003cp\u003e首先我们可以看看有哪些语言已经具备协程语义：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e比较重量级的有C#、erlang、golang*\u003c/li\u003e\n\u003cli\u003e轻量级有python、lua、javascript、ruby\u003c/li\u003e\n\u003cli\u003e还有函数式的scala、scheme等。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e目前看到大概有四种实现协程的方式：\u003c/p\u003e\n\n\u003cp\u003e第一种：利用glibc 的 ucontext组件(云风的库) \u003cbr\u003e\n第二种：使用汇编代码来切换上下文(实现c协程) \u003cbr\u003e\n第三种：利用C语言语法switch-case的奇淫技巧来实现（Protothreads) \u003cbr\u003e\n第四种：利用了 C 语言的 setjmp 和 longjmp（ 一种协程的 C/C++ 实现,要求函数里面使用 static local 的变量来保存协程内部的数据）\u003c/p\u003e\n\n\u003cp\u003e这里有一个兄弟已经使用ucontext来实现简单的协程库（\u003ca href=\"http://blog.csdn.net/qq910894904/article/details/41911175\" target=\"_blank\"\u003ehttp://blog.csdn.net/qq910894904/article/details/41911175\u003c/a\u003e），我就不Copy了。\u003c/p\u003e\n\n\u003cp\u003e可以看出来，协程相对线程而言，有一定的相似性，它是借助用户空间的上下文切换调度来达到调用者与被调用者之间多次协同的目的。但是调度的主动权却在用户，以下是进程，线程，协程的一个对比。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170714202328915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e协程最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。\u003c/p\u003e\n\n\u003cp\u003e第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。\u003c/p\u003e\n\n\u003cp\u003e因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"协程的使用场景\"\u003e协程的使用场景\u003c/h3\u003e\n\n\u003cp\u003e前面介绍了协程的概念，但是，协程在什么情况下使用呢？协程既然诞生了，总有它的理由。前面我们看到，一个线程内的多个协程是串行执行的，不能利用多核，所以，显然，协程不适合计算密集型的场景。那么，协程适合什么场景呢？\u003c/p\u003e\n\n\u003cp\u003e异步非阻塞式I/O。\u003c/p\u003e\n\n\u003cp\u003eI/O 本来是阻塞的（相较于 CPU 的时间世界而言），就目前而言，无论 I/O 的速度多块，也比不上 CPU 的速度，所以一个 I/O 相关的程序，当其在进行 I/O 操作时，CPU 实际上是空闲的。我们假设这样的场景： 1个线程有5个 I/O 相关的事情（子程序）要处理。如果我们绝对的串行化，那么当其中一个 I/O 阻塞时，其他4个 I/O 并不能得到执行，因为程序是绝对串行的，5个 I/O 必须一个一个排队等候处理，当一个 I/O 阻塞时，其它四个也得在那傻等着。如下图所示： \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170714202732340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e而协程则能比较好地解决这个问题，当一个协程（特殊的子程序）阻塞时，它可以切换到其他没有阻塞的协程上去继续执行，这样就能得到比较高的效率。如下图所示：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20170714202941159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e还有一个简单的例子证明协程的实用性。假设你有一个生产者－消费者的关系，这里一个协程生产产品并将它们加入队列，另一个协程从队列中取出产品并使用它。为了提高效率，你想一次增加或删除多个产品。代码可能是这样的：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-python hljs \"\u003evar q := new queue\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e生产者协程\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-python hljs \"\u003eloop\n       \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e q \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e full\n           create some new items\n           add the items to q\n       \u003cspan class=\"hljs-keyword\"\u003eyield\u003c/span\u003e to consume\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e消费者协程\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-python hljs \"\u003e  loop\n       \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e q \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e empty\n           remove some items \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e q\n           use the items\n       \u003cspan class=\"hljs-keyword\"\u003eyield\u003c/span\u003e to produce\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e详细比较： \u003cbr\u003e\n因为相对于子例程，协程可以有多个入口和出口点，可以用协程来实现任何的子例程。事实上，正如Knuth所说：“子例程是协程的特例。”\u003c/p\u003e\n\n\u003cp\u003e每当子例程被调用时，执行从被调用子例程的起始处开始；然而，接下来的每次协程被调用时，从协程返回（或yield）的位置接着执行。\u003c/p\u003e\n\n\u003cp\u003e因为子例程只返回一次，要返回多个值就要通过集合的形式。这在有些语言，如Forth里很方便；而其他语言，如C，只允许单一的返回值，所以就需要引用一个集合。相反地，因为协程可以返回多次，返回多个值只需要在后继的协程调用中返回附加的值即可。在后继调用中返回附加值的协程常被称为产生器。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"python协程库eventlet\"\u003ePython协程库Eventlet\u003c/h3\u003e\n\n\u003cp\u003e前文也讲了，协程在异步IO上是能提升很多效率的，Python在这块就有一个针对异步IO的协程库Eventlet，eventlet是一个用来处理和网络相关的Python库函数，而且可以通过协程来实现并发，在eventlet里，把“协程”叫做greenthread(绿色线程)。所谓并发，就是开启了多个greenthread，并且对这些greenthread进行管理，以实现非阻塞式的I/O。比如说用eventlet可以很方便的写一个性能很好的web服务器，或者是一个效率很高的网页爬虫，这都归功于eventlet的“绿色线程”，以及对“绿色线程”的管理机制。更让人不可思议的是，eventlet为了实现“绿色线程”，竟然对python的和网络相关的几个标准库函数进行了改写，并且可以以补丁（patch）的方式导入到程序中，因为python的库函数只支持普通的线程，而不支持协程，eventlet称之为“绿化”。\u003c/p\u003e\n\n\u003cp\u003e这里要注意的是Eventlet的使用场景，因为异步IO的多个协程之间的调度相对而言规则比较简单，所以其调度是由Eventlet里的Hub组件完成的，而完全定制化的由用户来做调度，并不能使用Eventlet\u003c/p\u003e\n\n\n\n\u003ch3 id=\"eventlet-api分析\"\u003eEventlet API分析\u003c/h3\u003e\n\n\n\n\u003ch4 id=\"1-greenthread-spawn-生成函数\"\u003e1. Greenthread Spawn 生成函数\u003c/h4\u003e\n\n\u003cp\u003e（1）Greenthread Spawn（spawn，孵化的意思，即如何产生greenthread） \u003cbr\u003e\n       主要有3个函数可以创建绿色线程：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e    \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e）spawn(func, \u003cspan class=\"hljs-variable\"\u003e*args\u003c/span\u003e, \u003cspan class=\"hljs-variable\"\u003e**\u003c/span\u003ekwargs)：\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e创建一个绿色线程去运行func这个函数，后面的参数是传递给这个函数的参数。返回值是一个eventlet.GreenThread对象，这个对象可以用来接受func函数运行的返回值。在绿色线程池还没有满的情况下，这个绿色线程一被创建就立刻被执行。其实，用这种方法去创建线程也是可以理解的，线程被创建出来，肯定是有一定的任务要去执行，这里直接把函数当作参数传递进去，去执行一定的任务，就好像标准库中的线程用run()方法去执行任务一样。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e    \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e）spawn_n(func, \u003cspan class=\"hljs-variable\"\u003e*args\u003c/span\u003e, \u003cspan class=\"hljs-variable\"\u003e**\u003c/span\u003ekwargs)：\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个函数和spawn()类似，不同的就是它没有返回值，因而更加高效，这种特性，使它也有存在的价值。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs livecodeserver\"\u003e    \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e）spawn_after(\u003cspan class=\"hljs-built_in\"\u003eseconds\u003c/span\u003e, func, *args, **kwargs)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个函数和spawn()基本上一样，都有一样的返回值，不同的是它可以限定在什么时候执行这个绿色线程，即在seconds秒之后，启动这个绿色线程。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"2-greenthread-control-协程控制函数\"\u003e2. Greenthread Control 协程控制函数\u003c/h4\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003e    1）sleep(seconds\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e0)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e中止当前的绿色线程，以允许其它的绿色线程执行。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs oxygene\"\u003e    \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e）eventlet.GreenPool \n        starmap(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e, \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eiterable\u003c/span\u003e)和\u003cspan class=\"hljs-title\"\u003eimap\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e, *iterables)\u003c/span\u003e：\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这是一个类，在这个类中用set集合来容纳所创建的绿色线程，并且可以指定容纳线程的最大数量（默认是1000个），它的内部是用Semaphore和Event这两个类来对池进行控制的，这样就构成了线程池。\u003c/p\u003e\n\n\u003cp\u003eStarmap和imap这两个函数和标准的库函数中的这两个函数实现的功能是一样的，所不同的是这里将这两个函数的执行放到了绿色线程中。前者实现的是从iterable中取出每一项作为function的参数来执行，后者则是分别从iterables中各取一项，作为function的参数去执行。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs avrasm\"\u003e    \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e）eventlet\u003cspan class=\"hljs-preprocessor\"\u003e.GreenPile\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这也是一个类，而且是一个很有用的类，在它内部维护了一个GreenPool对象和一个Queue对象。这个GreenPool对象可以是从外部传递进来的，也可以是在类内部创建的，GreenPool对象主要是用来创建绿色线程的，即在GreenPile内部调用了GreenPool.spawn()方法。而Queue对象则是用来保存spawn()方法的返回值的，即Queue中保存的是GreenThread对象。并且它还实现了next()方法，也就意味着GreenPile对象具有了迭代器的性质。所以如果我们要对绿色线程的返回值进行操作的话，用这个类是再好不过的了。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs avrasm\"\u003e    \u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e）eventlet\u003cspan class=\"hljs-preprocessor\"\u003e.Queue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e说到队列就不得不画个类图了，基类是LightQueue，它实现了大部分的队列的常用方法。它是用collections做为实现队列的基本数据结构的。而且这个LightQueue的实现，不单单实现了存取操作，我觉得在本质上它实现了一个生产者和消费者问题，定义了两个set()类型的成员变量putters和getters，前者用来存放在队列满时，被阻塞的绿色线程，后者用来存放当队列空时，被阻塞的绿色线程。类中的putting()和getting()方法就是分别得到被阻塞的绿色线程的数量。 \u003cbr\u003e\nQueue继承了LightQueue，并且又增加了它自己的两个方法：task_done()和join()。task_done()是被消费者的绿色线程所调用的，表示在这个项上的所有工作都做完了，join()是阻塞，直到队列中所有的任务都完成。LifoQueue和PriorityQueue是存放数据的两种不同的方式。 \u003cbr\u003e\n\u003cimg src=\"http://my.csdn.net/uploads/201208/07/1344276770_7117.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"3-network-convenience-functions和网络相关的函数\"\u003e3. Network Convenience Functions（和网络相关的函数）\u003c/h4\u003e\n\n\u003cp\u003e这些函数定义在convenience.py文件中，对和socket相关的网络通信进行了包装，注意，这里用的socket是经过修改后的socket，以使它使用绿色线程，主要有以下一个函数：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e      \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e）\u003cspan class=\"hljs-keyword\"\u003econnect\u003c/span\u003e(addr, family=\u003cspan class=\"hljs-keyword\"\u003esocket\u003c/span\u003e.AF_INET, \u003cspan class=\"hljs-keyword\"\u003ebind\u003c/span\u003e=None)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e主要执行了以下几个步骤：新建了一个TCP类型的socket，绑定本地的ip和端口，和远程的地址进行连接，源码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003econnect\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(addr, family=socket.AF_INET, bind=None)\u003c/span\u003e:\u003c/span\u003e  \n    sock = socket.socket(family, socket.SOCK_STREAM)  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e bind \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e:  \n        sock.bind(bind)  \n    sock.connect(addr)  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sock\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e     \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e）\u003cspan class=\"hljs-keyword\"\u003elisten\u003c/span\u003e(addr, family=\u003cspan class=\"hljs-keyword\"\u003esocket\u003c/span\u003e.AF_INET, backlog=\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e过程和connect()类似，只是把connect()换成了listen()，backlog指定了最大的连接数量，源码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elisten\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(addr, family=socket.AF_INET, backlog=\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e)\u003c/span\u003e:\u003c/span\u003e  \n    sock = socket.socket(family, socket.SOCK_STREAM)  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e sys.platform[:\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e]==\u003cspan class=\"hljs-string\"\u003e\"win\"\u003c/span\u003e:  \n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) \n    sock.bind(addr)  \n    sock.listen(backlog)  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e sock  \u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003e     3）serve(sock, handle, concurrency\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003e1000)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个函数直接创建了一个socket服务器，在它内部创建了一个GreenPool对象，默认的最大绿色线程数是1000，然后是一个循环来接受连接，源码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eserve\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(sock, handle, concurrency=\u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e)\u003c/span\u003e:\u003c/span\u003e  \n    pool = greenpool.GreenPool(concurrency)  \n    server_gt = greenthread.getcurrent()  \n\n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e:  \n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e:  \n            conn, addr = sock.accept()  \n            gt = pool.spawn(handle, conn, addr)  \n            gt.link(_stop_checker, server_gt, conn)  \n            conn, addr, gt = \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003eexcept\u003c/span\u003e StopServe:  \n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs markdown\"\u003e 4）wrap_ssl(sock, \u003cspan class=\"hljs-emphasis\"\u003e*a, *\u003c/span\u003e*kw)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e给socket加上ssl(安全套接层)，对数据进行加密。 \u003cbr\u003e\n 还有几个比较重要的API这里就不罗列了，等以后用到了再进行分析吧，下面看几个官方的例子：\u003c/p\u003e\n\n\n\n\u003ch4 id=\"4-use-case\"\u003e4. Use Case\u003c/h4\u003e\n\n\u003cp\u003e（1）官方上引以为傲的“网页爬虫”，用到了绿色线程池和imap()函数\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003eurls = [\u003cspan class=\"hljs-string\"\u003e\"http://www.google.com/intl/en_ALL/images/logo.gif\"\u003c/span\u003e,  \n     \u003cspan class=\"hljs-string\"\u003e\"https://wiki.secondlife.com/w/images/secondlife.jpg\"\u003c/span\u003e,  \n     \u003cspan class=\"hljs-string\"\u003e\"http://us.i1.yimg.com/us.yimg.com/i/ww/beta/y3.gif\"\u003c/span\u003e]  \n\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e eventlet  \n\u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e eventlet.green \u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e urllib2    \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efetch\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(url)\u003c/span\u003e:\u003c/span\u003e  \n  \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"opening\"\u003c/span\u003e, url  \n  body = urllib2.urlopen(url).read()  \n  \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"done with\"\u003c/span\u003e, url  \n  \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e url, body  \n\npool = eventlet.GreenPool(\u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e)  \n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e url, body \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e pool.imap(fetch, urls):  \n  \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"got body from\"\u003c/span\u003e, url, \u003cspan class=\"hljs-string\"\u003e\"of length\"\u003c/span\u003e, len(body)  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e（2）socket服务器\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e eventlet  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehandle\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(fd)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"client connected\"\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e:  \n        \u003cspan class=\"hljs-comment\"\u003e# pass through every non-eof line  \u003c/span\u003e\n        x = fd.readline()  \n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e x: \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e  \n        fd.write(x)  \n        fd.flush()  \n        \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"echoed\"\u003c/span\u003e, x,  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"client disconnected\"\u003c/span\u003e  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"server socket listening on port 6000\"\u003c/span\u003e  \nserver = eventlet.listen((\u003cspan class=\"hljs-string\"\u003e\u00270.0.0.0\u0027\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e6000\u003c/span\u003e))  \npool = eventlet.GreenPool()  \n\u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e:  \n    \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e:  \n        new_sock, address = server.accept()  \n        \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"accepted\"\u003c/span\u003e, address  \n        pool.spawn_n(handle, new_sock.makefile(\u003cspan class=\"hljs-string\"\u003e\u0027rw\u0027\u003c/span\u003e))  \n    \u003cspan class=\"hljs-keyword\"\u003eexcept\u003c/span\u003e (SystemExit, KeyboardInterrupt):  \n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e（3）使用GreenPile的例子\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs python\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e eventlet  \n\u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e eventlet.green \u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e socket  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egeturl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(url)\u003c/span\u003e:\u003c/span\u003e  \n    c = socket.socket()  \n    ip = socket.gethostbyname(url)  \n    c.connect((ip, \u003cspan class=\"hljs-number\"\u003e80\u003c/span\u003e))  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027%s connected\u0027\u003c/span\u003e % url  \n    c.sendall(\u003cspan class=\"hljs-string\"\u003e\u0027GET /\\r\\n\\r\\n\u0027\u003c/span\u003e)  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e c.recv(\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e)  \n\nurls = [\u003cspan class=\"hljs-string\"\u003e\u0027www.google.com\u0027\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\u0027www.yandex.ru\u0027\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\u0027www.python.org\u0027\u003c/span\u003e]  \npile = eventlet.GreenPile()  \n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e x \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e urls:  \n    pile.spawn(geturl, x)  \n\n\u003cspan class=\"hljs-comment\"\u003e# note that the pile acts as a collection of return values from the functions  \u003c/span\u003e\n\u003cspan class=\"hljs-comment\"\u003e# if any exceptions are raised by the function they\u0027ll get raised here  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e url, result \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e zip(urls, pile):  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027%s: %s\u0027\u003c/span\u003e % (url, repr(result)[:\u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e])  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e参考资料： \u003cbr\u003e\n\u003ca href=\"http://eventlet.net/doc/index.html\" target=\"_blank\"\u003ehttp://eventlet.net/doc/index.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/hackerain/article/details/7836993\" target=\"_blank\"\u003ehttp://blog.csdn.net/hackerain/article/details/7836993\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://mp.weixin.qq.com/s?__biz=MzAwNDAxOTM5Mw==&amp;mid=508479846&amp;idx=5&amp;sn=ee86e3914c01bf290b6da1a61b96e343&amp;chksm=00882cc837ffa5de480c3b7674832d182562bf35e78eac9eb8094c5001093efd20bbfb631126&amp;mpshare=1&amp;scene=23&amp;srcid=0712c6k1wJ1QCYISc3m4m8FP#rd\" target=\"_blank\"\u003ehttp://mp.weixin.qq.com/s?__biz=MzAwNDAxOTM5Mw==&amp;mid=508479846&amp;idx=5&amp;sn=ee86e3914c01bf290b6da1a61b96e343&amp;chksm=00882cc837ffa5de480c3b7674832d182562bf35e78eac9eb8094c5001093efd20bbfb631126&amp;mpshare=1&amp;scene=23&amp;srcid=0712c6k1wJ1QCYISc3m4m8FP#rd\u003c/a\u003e\u003c/p\u003e","markdowncontent":"###前言\n之前看Python教程的时候了解了一些协程的概念，相对还是比较肤浅，但是协程对Python语言而言是一个很重要的特性，加上近期看了我司架构师标哥的一篇讲协程的文章，感觉豁然开朗。\n###为什么需要协程\n协程这东西，不是Python独有的，在很多其他脚本语言比如Lua也有，协程的存在，让单线程跑出了并发的效果，对计算资源的利用率高，开销小。但是说起来和Python解释器的设计也有关系，Python的多线程并不支持多核，因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。\n\nGIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。\n\n###实现一个协程\n协程是一种用户态的轻量级线程。本篇主要研究协程的C/C++的实现。\n\n首先我们可以看看有哪些语言已经具备协程语义：\n\n- 比较重量级的有C#、erlang、golang*\n- 轻量级有python、lua、javascript、ruby\n- 还有函数式的scala、scheme等。\n\n目前看到大概有四种实现协程的方式：\n\n第一种：利用glibc 的 ucontext组件(云风的库)\n第二种：使用汇编代码来切换上下文(实现c协程)\n第三种：利用C语言语法switch-case的奇淫技巧来实现（Protothreads)\n第四种：利用了 C 语言的 setjmp 和 longjmp（ 一种协程的 C/C++ 实现,要求函数里面使用 static local 的变量来保存协程内部的数据）\n\n这里有一个兄弟已经使用ucontext来实现简单的协程库（http://blog.csdn.net/qq910894904/article/details/41911175），我就不Copy了。\n\n可以看出来，协程相对线程而言，有一定的相似性，它是借助用户空间的上下文切换调度来达到调用者与被调用者之间多次协同的目的。但是调度的主动权却在用户，以下是进程，线程，协程的一个对比。\n![这里写图片描述](http://img.blog.csdn.net/20170714202328915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n协程最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。\n\n第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。\n\n因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。\n\n###协程的使用场景\n前面介绍了协程的概念，但是，协程在什么情况下使用呢？协程既然诞生了，总有它的理由。前面我们看到，一个线程内的多个协程是串行执行的，不能利用多核，所以，显然，协程不适合计算密集型的场景。那么，协程适合什么场景呢？\n\n异步非阻塞式I/O。\n\nI/O 本来是阻塞的（相较于 CPU 的时间世界而言），就目前而言，无论 I/O 的速度多块，也比不上 CPU 的速度，所以一个 I/O 相关的程序，当其在进行 I/O 操作时，CPU 实际上是空闲的。我们假设这样的场景： 1个线程有5个 I/O 相关的事情（子程序）要处理。如果我们绝对的串行化，那么当其中一个 I/O 阻塞时，其他4个 I/O 并不能得到执行，因为程序是绝对串行的，5个 I/O 必须一个一个排队等候处理，当一个 I/O 阻塞时，其它四个也得在那傻等着。如下图所示：\n![这里写图片描述](http://img.blog.csdn.net/20170714202732340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n而协程则能比较好地解决这个问题，当一个协程（特殊的子程序）阻塞时，它可以切换到其他没有阻塞的协程上去继续执行，这样就能得到比较高的效率。如下图所示：\n\n![这里写图片描述](http://img.blog.csdn.net/20170714202941159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n还有一个简单的例子证明协程的实用性。假设你有一个生产者－消费者的关系，这里一个协程生产产品并将它们加入队列，另一个协程从队列中取出产品并使用它。为了提高效率，你想一次增加或删除多个产品。代码可能是这样的：\n``` python\nvar q := new queue\n``` \n生产者协程\n``` python\nloop\n       while q is not full\n           create some new items\n           add the items to q\n       yield to consume\n``` \n消费者协程\n``` python\n  loop\n       while q is not empty\n           remove some items from q\n           use the items\n       yield to produce\n``` \n\n详细比较：\n因为相对于子例程，协程可以有多个入口和出口点，可以用协程来实现任何的子例程。事实上，正如Knuth所说：“子例程是协程的特例。”\n\n每当子例程被调用时，执行从被调用子例程的起始处开始；然而，接下来的每次协程被调用时，从协程返回（或yield）的位置接着执行。\n\n因为子例程只返回一次，要返回多个值就要通过集合的形式。这在有些语言，如Forth里很方便；而其他语言，如C，只允许单一的返回值，所以就需要引用一个集合。相反地，因为协程可以返回多次，返回多个值只需要在后继的协程调用中返回附加的值即可。在后继调用中返回附加值的协程常被称为产生器。\n\n###Python协程库Eventlet\n前文也讲了，协程在异步IO上是能提升很多效率的，Python在这块就有一个针对异步IO的协程库Eventlet，eventlet是一个用来处理和网络相关的Python库函数，而且可以通过协程来实现并发，在eventlet里，把“协程”叫做greenthread(绿色线程)。所谓并发，就是开启了多个greenthread，并且对这些greenthread进行管理，以实现非阻塞式的I/O。比如说用eventlet可以很方便的写一个性能很好的web服务器，或者是一个效率很高的网页爬虫，这都归功于eventlet的“绿色线程”，以及对“绿色线程”的管理机制。更让人不可思议的是，eventlet为了实现“绿色线程”，竟然对python的和网络相关的几个标准库函数进行了改写，并且可以以补丁（patch）的方式导入到程序中，因为python的库函数只支持普通的线程，而不支持协程，eventlet称之为“绿化”。\n\n这里要注意的是Eventlet的使用场景，因为异步IO的多个协程之间的调度相对而言规则比较简单，所以其调度是由Eventlet里的Hub组件完成的，而完全定制化的由用户来做调度，并不能使用Eventlet\n###Eventlet API分析\n####1. Greenthread Spawn 生成函数\n（1）Greenthread Spawn（spawn，孵化的意思，即如何产生greenthread）\n       主要有3个函数可以创建绿色线程：\n   \n\n``` Python\n    1）spawn(func, *args, **kwargs)：\n```\n创建一个绿色线程去运行func这个函数，后面的参数是传递给这个函数的参数。返回值是一个eventlet.GreenThread对象，这个对象可以用来接受func函数运行的返回值。在绿色线程池还没有满的情况下，这个绿色线程一被创建就立刻被执行。其实，用这种方法去创建线程也是可以理解的，线程被创建出来，肯定是有一定的任务要去执行，这里直接把函数当作参数传递进去，去执行一定的任务，就好像标准库中的线程用run()方法去执行任务一样。\n``` Python\n    2）spawn_n(func, *args, **kwargs)：\n```\n这个函数和spawn()类似，不同的就是它没有返回值，因而更加高效，这种特性，使它也有存在的价值。\n``` Python\n    3）spawn_after(seconds, func, *args, **kwargs)\n```\n\n这个函数和spawn()基本上一样，都有一样的返回值，不同的是它可以限定在什么时候执行这个绿色线程，即在seconds秒之后，启动这个绿色线程。\n\n####2. Greenthread Control 协程控制函数\n\n``` Python\n    1）sleep(seconds=0)\n```\n中止当前的绿色线程，以允许其它的绿色线程执行。\n``` Python\n\t2）eventlet.GreenPool \n\t    starmap(self, function, iterable)和imap(self, function, *iterables)：\n```\n这是一个类，在这个类中用set集合来容纳所创建的绿色线程，并且可以指定容纳线程的最大数量（默认是1000个），它的内部是用Semaphore和Event这两个类来对池进行控制的，这样就构成了线程池。\n\nStarmap和imap这两个函数和标准的库函数中的这两个函数实现的功能是一样的，所不同的是这里将这两个函数的执行放到了绿色线程中。前者实现的是从iterable中取出每一项作为function的参数来执行，后者则是分别从iterables中各取一项，作为function的参数去执行。\n``` Python\n\t3）eventlet.GreenPile\n```\n这也是一个类，而且是一个很有用的类，在它内部维护了一个GreenPool对象和一个Queue对象。这个GreenPool对象可以是从外部传递进来的，也可以是在类内部创建的，GreenPool对象主要是用来创建绿色线程的，即在GreenPile内部调用了GreenPool.spawn()方法。而Queue对象则是用来保存spawn()方法的返回值的，即Queue中保存的是GreenThread对象。并且它还实现了next()方法，也就意味着GreenPile对象具有了迭代器的性质。所以如果我们要对绿色线程的返回值进行操作的话，用这个类是再好不过的了。\n``` Python\n    4）eventlet.Queue\n```\n说到队列就不得不画个类图了，基类是LightQueue，它实现了大部分的队列的常用方法。它是用collections做为实现队列的基本数据结构的。而且这个LightQueue的实现，不单单实现了存取操作，我觉得在本质上它实现了一个生产者和消费者问题，定义了两个set()类型的成员变量putters和getters，前者用来存放在队列满时，被阻塞的绿色线程，后者用来存放当队列空时，被阻塞的绿色线程。类中的putting()和getting()方法就是分别得到被阻塞的绿色线程的数量。\nQueue继承了LightQueue，并且又增加了它自己的两个方法：task_done()和join()。task_done()是被消费者的绿色线程所调用的，表示在这个项上的所有工作都做完了，join()是阻塞，直到队列中所有的任务都完成。LifoQueue和PriorityQueue是存放数据的两种不同的方式。\n![这里写图片描述](http://my.csdn.net/uploads/201208/07/1344276770_7117.png)\n\n####3. Network Convenience Functions（和网络相关的函数）\n这些函数定义在convenience.py文件中，对和socket相关的网络通信进行了包装，注意，这里用的socket是经过修改后的socket，以使它使用绿色线程，主要有以下一个函数：\n``` Python\n      1）connect(addr, family=socket.AF_INET, bind=None)\n```\n主要执行了以下几个步骤：新建了一个TCP类型的socket，绑定本地的ip和端口，和远程的地址进行连接，源码如下：\n\n``` Python\ndef connect(addr, family=socket.AF_INET, bind=None):  \n    sock = socket.socket(family, socket.SOCK_STREAM)  \n    if bind is not None:  \n        sock.bind(bind)  \n    sock.connect(addr)  \n    return sock\n```\n``` Python\n\t 2）listen(addr, family=socket.AF_INET, backlog=50)\n```\n过程和connect()类似，只是把connect()换成了listen()，backlog指定了最大的连接数量，源码如下：\n\n``` Python\ndef listen(addr, family=socket.AF_INET, backlog=50):  \n    sock = socket.socket(family, socket.SOCK_STREAM)  \n    if sys.platform[:3]==\"win\":  \n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) \n    sock.bind(addr)  \n    sock.listen(backlog)  \n    return sock  \n```\n``` Python\n\t 3）serve(sock, handle, concurrency=1000)\n```\n这个函数直接创建了一个socket服务器，在它内部创建了一个GreenPool对象，默认的最大绿色线程数是1000，然后是一个循环来接受连接，源码如下：\n\n``` Python\ndef serve(sock, handle, concurrency=1000):  \n    pool = greenpool.GreenPool(concurrency)  \n    server_gt = greenthread.getcurrent()  \n   \n    while True:  \n        try:  \n            conn, addr = sock.accept()  \n            gt = pool.spawn(handle, conn, addr)  \n            gt.link(_stop_checker, server_gt, conn)  \n            conn, addr, gt = None, None, None  \n        except StopServe:  \n            return  \n```\n\n``` Python\n 4）wrap_ssl(sock, *a, **kw)\n```\n 给socket加上ssl(安全套接层)，对数据进行加密。\n 还有几个比较重要的API这里就不罗列了，等以后用到了再进行分析吧，下面看几个官方的例子：\n####4. Use Case\n（1）官方上引以为傲的“网页爬虫”，用到了绿色线程池和imap()函数\n\n``` Python\nurls = [\"http://www.google.com/intl/en_ALL/images/logo.gif\",  \n     \"https://wiki.secondlife.com/w/images/secondlife.jpg\",  \n     \"http://us.i1.yimg.com/us.yimg.com/i/ww/beta/y3.gif\"]  \n  \nimport eventlet  \nfrom eventlet.green import urllib2    \n  \ndef fetch(url):  \n  print \"opening\", url  \n  body = urllib2.urlopen(url).read()  \n  print \"done with\", url  \n  return url, body  \n  \npool = eventlet.GreenPool(200)  \nfor url, body in pool.imap(fetch, urls):  \n  print \"got body from\", url, \"of length\", len(body)  \n```\n（2）socket服务器\n\n``` Python\nimport eventlet  \n  \ndef handle(fd):  \n    print \"client connected\"  \n    while True:  \n        # pass through every non-eof line  \n        x = fd.readline()  \n        if not x: break  \n        fd.write(x)  \n        fd.flush()  \n        print \"echoed\", x,  \n    print \"client disconnected\"  \n  \nprint \"server socket listening on port 6000\"  \nserver = eventlet.listen((\u00270.0.0.0\u0027, 6000))  \npool = eventlet.GreenPool()  \nwhile True:  \n    try:  \n        new_sock, address = server.accept()  \n        print \"accepted\", address  \n        pool.spawn_n(handle, new_sock.makefile(\u0027rw\u0027))  \n    except (SystemExit, KeyboardInterrupt):  \n        break  \n```\n（3）使用GreenPile的例子\n\n```\nimport eventlet  \nfrom eventlet.green import socket  \n  \ndef geturl(url):  \n    c = socket.socket()  \n    ip = socket.gethostbyname(url)  \n    c.connect((ip, 80))  \n    print \u0027%s connected\u0027 % url  \n    c.sendall(\u0027GET /\\r\\n\\r\\n\u0027)  \n    return c.recv(1024)  \n  \nurls = [\u0027www.google.com\u0027, \u0027www.yandex.ru\u0027, \u0027www.python.org\u0027]  \npile = eventlet.GreenPile()  \nfor x in urls:  \n    pile.spawn(geturl, x)  \n  \n# note that the pile acts as a collection of return values from the functions  \n# if any exceptions are raised by the function they\u0027ll get raised here  \nfor url, result in zip(urls, pile):  \n    print \u0027%s: %s\u0027 % (url, repr(result)[:50])  \n```\n参考资料：\nhttp://eventlet.net/doc/index.html\nhttp://blog.csdn.net/hackerain/article/details/7836993\nhttp://mp.weixin.qq.com/s?__biz=MzAwNDAxOTM5Mw==&mid=508479846&idx=5&sn=ee86e3914c01bf290b6da1a61b96e343&chksm=00882cc837ffa5de480c3b7674832d182562bf35e78eac9eb8094c5001093efd20bbfb631126&mpshare=1&scene=23&srcid=0712c6k1wJ1QCYISc3m4m8FP#rd\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-25] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-06\2017-06-14-对Python协程的理解.markdown [pool-2-thread-25] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-23-【OpenStack源码分析之九】看 nova-scheduler 如何选择计算节点.markdown [pool-2-thread-24] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":23127865,"title":"内存文件操作系统","create_at":"\/Date(1396875210000)\/","create":"2014-04-07 08:53:30","view_count":684,"comment_count":1,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"模拟实现的一个文件操作系统","url":"http://blog.csdn.net/BLACKMOON88/article/details/23127865","categories":"","tags":"文件系统,c,iterator,map","content":"\r\n模拟实现的一个文件操作系统，头文件如下：\u003cpre code_snippet_id=\"279549\" snippet_file_name=\"blog_20140407_2_4615976\"  class=\"cpp\" name=\"code\" snippet_file_name=\"blog_20140407_2_4615976\" code_snippet_id=\"279549\"\u003e#ifndef _FILE_MANAGER_H_\n#define _FILE_MANAGER_H_\n#include &lt;map&gt;\n#include &lt;string&gt;\nclass Dir;\n//文件节点\nclass File{\npublic:\n\tFile() {\n\t\tparent = NULL;\n\t}\n\tFile(const std::string &amp;n) : fileName(n) {}\n\tbool operator == (const File &amp;other) const{\n\t\tif(fileName == other.fileName) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\npublic: \n    std::string fileName;  \n\tDir *parent;\n};\n//目录节点\nclass Dir{\npublic:\n\tDir() {\n\t\tparent = NULL;\n\t}\n\tDir(const std::string &amp;n) : dirName(n) {}\n\tbool operator == (const Dir &amp;other) const{\n\t\tif(dirName == other.dirName) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\npublic:\n\tstd::string dirName;\n\tDir *parent;\n\tstd::map&lt;std::string, Dir *&gt; subDirs;\n\tstd::map&lt;std::string, File *&gt; files;\n};\nint CreateDir(const char * ParentDirName, const char * DirName);\n\nvoid DeleteDir(const char * DirName);\n\nint MoveDir(const char * SrcDirName, const char * DestDirName);\n\nint CreateFile(const char * DirName, const char * FileName);\n\nvoid DeleteFile(const char * FileName);\n\nunsigned int GetFileNum(const char * DirName);\n\nvoid Clear(void);\n\n#endif\n\u003c/pre\u003e\r\n\u003cp\u003e具体实现代码如下：\u003c/p\u003e\r\n\u003cp\u003e\u003cpre code_snippet_id=\"279549\" snippet_file_name=\"blog_20140407_3_3503943\"  class=\"cpp\" name=\"code\" snippet_file_name=\"blog_20140407_3_3503943\" code_snippet_id=\"279549\"\u003e/******************************************************************************\n\nCopyright (C), 2001-2013, Huawei Tech. Co., Ltd.\n\n******************************************************************************\nFile Name     :\nVersion       :\nAuthor        :\nCreated       : 2013/9\nLast Modified :\nDescription   :\nFunction List :\n\nHistory       :\n1.Date        : 2013/9\nAuthor      :\nModification: Created file\n\n******************************************************************************/\n#include &quot;FileManager.h&quot;\nusing namespace std;\ntypedef map&lt;string, Dir&gt;::iterator DirItr;\ntypedef map&lt;string, File&gt;::iterator FileItr;\ntypedef map&lt;string, Dir*&gt;::iterator DirPtrItr;\ntypedef map&lt;string, File*&gt;::iterator FilePtrItr;\n//维护一个hash的目录索引\nmap&lt;string, Dir*&gt; dirs;\nmap&lt;string, File*&gt; files;\n//定义用于表示文件系统的树结构   \nDir *Root=new Dir(&quot;root&quot;);\nDir *CurrentDir;\nFile *CurrentFile;\nstring getString(const char *s) {\n\treturn string(s);\n}\n\nDir* FindDir(const char * DirName)\n{\n\tif(getString(DirName) == &quot;root&quot;) {\n\t\treturn Root;\n\t}\n\n\tDirPtrItr itr = dirs.find(getString(DirName));\n\tif(itr == dirs.end()) {\n\t\treturn NULL;\n\t}\n\treturn itr-&gt;second;\n}\n\nFile* FindFile(const char *FileName) {\n\tFilePtrItr itr = files.find(getString(FileName));\n\tif(itr == files.end()) {\n\t\treturn NULL;\n\t}\n\treturn itr-&gt;second;\n}\n\nint CreateDir(const char * ParentDirName, const char * DirName)\n{\n\tCurrentDir=FindDir(ParentDirName);\n\tif(CurrentDir==NULL){\n\t\treturn -1;\n\t}\n\tDir *TemptDir=FindDir(DirName);\n\tif(TemptDir!=NULL){\n\t\treturn -1;\n\t}\n\tDir *NewDir=new Dir(getString(DirName));\n\tCurrentDir-&gt;subDirs[getString(DirName)]=NewDir;\n\tNewDir-&gt;parent=CurrentDir;\n\tdirs[getString(DirName)]=NewDir;\n\treturn 0;\n}\n\nDir* RemoveFile(const char *FileName) {\n\tFile *filePtr = FindFile(FileName);\n\tif(filePtr == NULL) {\n\t\treturn NULL;\n\t}\n\tDir *parentPtr = filePtr-&gt;parent;\n\tfiles.erase(getString(FileName));\n\treturn parentPtr;\n}\n\nDir* RemoveDir(const char *DirName) {\n\tDir *pDir = FindDir(DirName);\n\tif(pDir == NULL) {\n\t\treturn NULL;\n\t}\n\tif( !(pDir-&gt;subDirs.empty())){\n\t\tDirPtrItr sItr = pDir-&gt;subDirs.begin();\n\t\t//后序删除所有子目录节点\n\t\twhile(sItr != pDir-&gt;subDirs.end()) {\n\t\t\tRemoveDir(sItr-&gt;first.c_str());\n\t\t\tsItr++;\n\t\t}\n\t}\n\t\t//后序删除所有子文件节点\n\t\tFilePtrItr fItr = pDir-&gt;files.begin();\n\t\twhile(fItr != pDir-&gt;files.end()) {\n\t\t\tRemoveFile(fItr-&gt;first.c_str());\n\t\t\tif( !(pDir-&gt;files.empty())) fItr++;\n\t\t\telse break;\n\t\t}\n\t\tDir *parentPtr = pDir-&gt;parent;\n\t\tdelete pDir;\n\t\tdirs.erase(getString(DirName));\n\t\treturn parentPtr;\n}\n\n\nvoid DeleteDir(const char * DirName)\n{\n\tDir *parentPtr = RemoveDir(DirName);\n\tif(parentPtr != NULL) {\n\t\tparentPtr-&gt;subDirs.erase(getString(DirName));\n\t}\n    return;\n}\n\nint MoveDir(const char * SrcDirName, const char * DestDirName)\n{\n    Dir *srcDir = FindDir(SrcDirName);\n\tDir *destDir = FindDir(DestDirName);\n\tif(srcDir == NULL || destDir == NULL) {\n\t\treturn -1;\n\t}\n\tif(srcDir-&gt;parent == destDir) {\n\t\treturn -1;\n\t}\n\tDir *tempDir = destDir;\n\twhile(tempDir != Root) {\n\t\tif(tempDir == srcDir) {\n\t\t\treturn -1;\n\t\t}\n\t\ttempDir = tempDir-&gt;parent;\n\t}\n\n\tDir *srcParent = srcDir-&gt;parent;\n\tsrcParent-&gt;subDirs.erase(srcDir-&gt;dirName);\n\tsrcDir-&gt;parent = destDir;\n\tdestDir-&gt;subDirs[srcDir-&gt;dirName] = srcDir;\n    return 0;\n}\n\nint CreateFile(const char * DirName, const char * FileName)\n{\n    File *filePtr = FindFile(FileName);\n\tif(filePtr != NULL) {\n\t\treturn -1;\n\t}\n\tDir *dirPtr = FindDir(DirName);\n\tif(dirPtr == NULL) {\n\t\treturn -1;\n\t}\n\tFile *f=new File(getString(FileName));\n\tfiles[getString(FileName)] = f;\n\tfilePtr = files[getString(FileName)];\n\tfilePtr-&gt;parent = dirPtr;\n\tdirPtr-&gt;files[getString(FileName)] = filePtr;\n    return 0;\n}\n\n\nvoid DeleteFile(const char * FileName)\n{\n    Dir *parentPtr = RemoveFile(FileName);\n\tif(parentPtr != NULL) {\n\t\tparentPtr-&gt;files.erase(getString(FileName));\n\t}\n\treturn;\n}\n\nunsigned int GetFileNum(const char * DirName)\n{\n    Dir *dirPtr = FindDir(DirName);\n\tif(dirPtr == NULL) {\n\t\treturn 0;\n\t}\n\tunsigned int fileNum = dirPtr-&gt;files.size();\n\tDirPtrItr itr = dirPtr-&gt;subDirs.begin();\n\twhile(itr != dirPtr-&gt;subDirs.end()) {\n\t\tfileNum += GetFileNum(itr-&gt;first.c_str());\n\t\titr++;\n\t}\n    return fileNum;\n}\n\nvoid Clear(void)\n{\n    dirs.clear();\n\tfiles.clear();\n\tRoot-&gt;files.clear();\n\tRoot-&gt;subDirs.clear();\n    return;\n}\n\u003c/pre\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\r\n\u003c/p\u003e\r\n\u003cdiv style=\"top:0px\"\u003e&#65279;&#65279;\u003c/div\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-3] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=76221465 [pool-2-thread-7] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":76221465,"title":"【JAVA 提高班之一】集合大家族","create_at":"\/Date(1501160566000)\/","create":"2017-07-27 09:02:46","view_count":45,"comment_count":0,"comment_allowed":"true","type":"repost","channel":16,"digg":0,"bury":0,"description":"前言本篇文章转自chenssy的 java提高篇（二十）—–集合大家族，写得不错，转载以记之，我个人觉得一个功力不错的JAVA码工至少熟悉以下几个领域：\n不错的抽象的能力（设计模式）\n常用数据结构的特点（集合类等）\nJAVA虚拟机的机制（提升性能）\n并发编程\n我的JAVA提高班系列也会从这几个方面出发来写。集合大家族分析在编写Java程序中，我们最常用的除了八种基本数据类型，String对象外还有一","url":"http://blog.csdn.net/BLACKMOON88/article/details/76221465","categories":"java提高","tags":"java,数据结构,设计模式","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e本篇文章转自chenssy的 \u003ca href=\"http://blog.csdn.net/chenssy/article/details/17732841\" target=\"_blank\"\u003ejava提高篇（二十）—–集合大家族\u003c/a\u003e，写得不错，转载以记之，我个人觉得一个功力不错的JAVA码工至少熟悉以下几个领域：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e不错的抽象的能力（设计模式）\u003c/li\u003e\n\u003cli\u003e常用数据结构的特点（集合类等）\u003c/li\u003e\n\u003cli\u003eJAVA虚拟机的机制（提升性能）\u003c/li\u003e\n\u003cli\u003e并发编程\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e我的JAVA提高班系列也会从这几个方面出发来写。\u003c/p\u003e\n\n\u003ch3 id=\"集合大家族分析\"\u003e集合大家族分析\u003c/h3\u003e\n\n\u003cp\u003e在编写Java程序中，我们最常用的除了八种基本数据类型，String对象外还有一个集合类，在我们的的程序中到处充斥着集合类的身影！java中集合大家族的成员实在是太丰富了，有常用的ArrayList、HashMap、HashSet，也有不常用的Stack、Queue，有线程安全的Vector、HashTable，也有线程不安全的LinkedList、TreeMap等等！\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20140101105109140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbnNzeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e上面的图展示了整个集合大家族的成员以及他们之间的关系。下面就上面的各个接口、基类做一些简单的介绍(主要介绍各个集合的特点。区别)，更加详细的介绍会在不久的将来一一讲解。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"collection接口\"\u003eCollection接口\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20170727191947219?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003eCollection接口是最基本的集合接口，从上图可以看出它提供了实现类的公共API，但是它不提供直接的实现，Java SDK提供的类都是继承自Collection的“子接口”如List和Set。Collection所代表的是元素集，它所包含的元素有以下特点：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e有些允许重复而有些则不能重复；\u003c/li\u003e\n\u003cli\u003e有些自身来维护排序，有些需要用户维护排序，所以支持随机访问，有些根本不Care排序；\u003c/li\u003e\n\u003cli\u003e有些线程安全，有些线程不安全；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e在Java中所有实现了Collection接口的类都必须提供两套标准的构造函数，一个是无参，用于创建一个空的Collection，一个是带有Collection参数的有参构造函数，用于创建一个新的Collection，这个新的Collection与传入进来的Collection具备相同的元素。\u003c/p\u003e\n\n\u003ch3 id=\"list接口\"\u003eList接口\u003c/h3\u003e\n\n\u003cp\u003eList接口为Collection直接接口。List所代表的是有序的Collection，即它用某种特定的插入顺序来维护元素顺序。用户可以对列表中每个元素的插入位置进行精确地控制，同时可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eArrayList\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nArrayList是一个动态数组，也是我们最常用的集合。它允许任何符合规则的元素插入甚至包括null。每一个ArrayList都有一个初始容量（10），该容量代表了数组的大小。随着容器中的元素不断增加，容器的大小也会随着增加。在每次向容器中增加元素的同时都会进行容量检查，当快溢出时，就会进行扩容操作。所以如果我们明确所插入元素的多少，最好指定一个初始容量值，避免过多的进行扩容操作而浪费时间、效率。\u003c/p\u003e\n\n\u003cp\u003esize、isEmpty、get、set、iterator 和 listIterator 操作都以固定时间运行。add 操作以分摊的固定时间运行，也就是说，添加 n 个元素需要 O(n) 时间（由于要考虑到扩容，所以这不只是添加元素会带来分摊固定时间开销那样简单）。\u003c/p\u003e\n\n\u003cp\u003eArrayList擅长于随机访问。同时ArrayList是非同步的。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eLinkedList\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n同样实现List接口的LinkedList与ArrayList不同，ArrayList是一个动态数组，而LinkedList是一个双向链表。所以它除了有ArrayList的基本操作方法外还额外提供了get，remove，insert方法在LinkedList的首部或尾部。\u003c/p\u003e\n\n\u003cp\u003e由于实现的方式不同，LinkedList不能随机访问，它所有的操作都是要按照双重链表的需要执行。在列表中索引的操作将从开头或结尾遍历列表（从靠近指定索引的一端）。这样做的好处就是可以通过较低的代价在List中进行插入和删除操作。\u003c/p\u003e\n\n\u003cp\u003e与ArrayList一样，LinkedList也是线程不安全的。如果多个线程同时访问一个List，则必须自己实现访问同步。一种解决方法是在创建List时构造一个同步的List： \u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs r\"\u003eList list = Collections.synchronizedList(new LinkedList(\u003cspan class=\"hljs-keyword\"\u003e...\u003c/span\u003e));\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eVector\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n与ArrayList相似，但是Vector是线程安全的。所以说Vector是线程安全的动态数组。它的操作与ArrayList几乎一样。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eStack\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nStack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop 方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"set接口\"\u003eSet接口\u003c/h3\u003e\n\n\u003cp\u003eSet是一种不包括重复元素的Collection。它维持它自己的内部排序，所以随机访问没有任何意义。与List一样，它同样运行null的存在但是仅有一个。由于Set接口的特殊性，所有传入Set集合中的元素都必须不同，同时要注意任何可变对象，如果在对集合中元素进行操作时，导致e1.equals(e2)==true，则必定会产生某些问题。实现了Set接口的集合有：EnumSet、HashSet、TreeSet。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eEnumSet\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n是枚举的专用Set。所有的元素都是枚举类型。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eHashSet\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nHashSet堪称查询速度最快的集合，因为其内部是以HashCode来实现的。它内部元素的顺序是由哈希码来决定的，所以它不保证set 的迭代顺序；特别是它不保证该顺序恒久不变。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTreeSet\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n基于TreeMap，生成一个总是处于排序状态的set，内部以TreeMap来实现。它是使用元素的自然顺序对元素进行排序，或者根据创建Set 时提供的 Comparator 进行排序，具体取决于使用的构造方法。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"map接口\"\u003eMap接口\u003c/h3\u003e\n\n\u003cp\u003eMap与List、Set接口不同，它是由一系列键值对组成的集合，提供了key到Value的映射。同时它也没有继承Collection。在Map中它保证了key与value之间的一一对应关系。也就是说一个key对应一个value，所以它不能存在相同的key值，当然value值可以相同。实现map的有：HashMap、TreeMap、HashTable、Properties、EnumMap。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eHashMap\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n以哈希表数据结构实现，查找对象时通过哈希函数计算其位置，它是为快速查询而设计的，其内部定义了一个hash表数组（Entry[] table），元素会通过哈希转换函数将元素的哈希地址转换成数组中存放的索引，如果有冲突，则使用散列链表的形式将所有相同哈希地址的元素串起来，可能通过查看HashMap.Entry的源码它是一个单链表结构。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTreeMap\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n键以某种排序规则排序，内部以red-black（红-黑）树数据结构实现，实现了SortedMap接口\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eHashTable\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n也是以哈希表数据结构实现的，解决冲突时与HashMap也一样也是采用了散列链表的形式，不过性能比HashMap要低，因为HashTable是线程安全的。\u003c/p\u003e\n\n\u003ch3 id=\"queue\"\u003eQueue\u003c/h3\u003e\n\n\u003cp\u003e队列，它主要分为两大类，一类是阻塞式队列，队列满了以后再插入元素则会抛出异常，主要包括ArrayBlockQueue、PriorityBlockingQueue、LinkedBlockingQueue。另一种队列则是双端队列，支持在头、尾两端插入和移除元素，主要包括：ArrayDeque、LinkedBlockingDeque、LinkedList。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"对集合的选择\"\u003e对集合的选择\u003c/h3\u003e\n\n\u003ch4 id=\"对list的选择\"\u003e对List的选择\u003c/h4\u003e\n\n\u003cp\u003e1、对于随机查询与迭代遍历操作，数组比所有的容器都要快。所以在随机访问中一般使用ArrayList \u003cbr\u003e\n2、LinkedList使用双向链表对元素的增加和删除提供了非常好的支持，而ArrayList执行增加和删除元素需要进行元素位移。 \u003cbr\u003e\n3、对于Vector而已，我们一般都是避免使用。 \u003cbr\u003e\n4、将ArrayList当做首选，毕竟对于集合元素而已我们都是进行遍历，只有当程序的性能因为List的频繁插入和删除而降低时，再考虑LinkedList。\u003c/p\u003e\n\n\u003ch4 id=\"对set的选择\"\u003e对Set的选择\u003c/h4\u003e\n\n\u003cp\u003e1、HashSet由于使用HashCode实现，所以在某种程度上来说它的性能永远比TreeSet要好，尤其是进行增加和查找操作。 \u003cbr\u003e\n2、虽然TreeSet没有HashSet性能好，但是由于它可以维持元素的排序，所以它还是存在用武之地的。\u003c/p\u003e\n\n\u003ch4 id=\"对map的选择\"\u003e对Map的选择\u003c/h4\u003e\n\n\u003cp\u003e1、HashMap与HashSet同样，支持快速查询。虽然HashTable速度的速度也不慢，但是在HashMap面前还是稍微慢了些，所以HashMap在查询方面可以取代HashTable。 \u003cbr\u003e\n2、由于TreeMap需要维持内部元素的顺序，所以它通常要比HashMap和HashTable慢。但是对于大规模数据的查找，比如百万路由表查找等适合用TreeMap\u003c/p\u003e\n\n\u003ch3 id=\"iterator和iterable接口\"\u003eIterator和Iterable接口\u003c/h3\u003e\n\n\u003cp\u003e先给大家看看源码\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs coffeescript\"\u003epublic interface Iterable&lt;T&gt; {\n    /**\n     * Returns an iterator over elements \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e type {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e T}.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@return\u003c/span\u003e an Iterator.\n     */\n    Iterator&lt;T&gt; iterator();\n\n    /**\n     * Performs the given action \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e each element \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e Iterable}\n     * \u003cspan class=\"hljs-keyword\"\u003euntil\u003c/span\u003e all elements have been processed \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e the action throws an\n     * exception.  Unless otherwise specified \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the implementing \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e,\u003c/span\u003e\n     * actions are performed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the order \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e iteration (\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e an iteration order\n     * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e specified).  Exceptions thrown \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the action are relayed to the\n     * caller.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@implSpec\u003c/span\u003e\n     * &lt;p&gt;The \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e implementation behaves as \u003cspan class=\"hljs-attribute\"\u003eif\u003c/span\u003e:\n     * &lt;pre&gt;{\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e\n     *     \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (T t : \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e)\n     *         action.accept(t);\n     * }&lt;/pre&gt;\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@param\u003c/span\u003e action The action to be performed \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e each element\n     * \u003cspan class=\"hljs-property\"\u003e@throws\u003c/span\u003e NullPointerException \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e the specified action \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e\n     * \u003cspan class=\"hljs-property\"\u003e@since\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1.8\u003c/span\u003e\n     */\n    \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e \u003cspan class=\"hljs-reserved\"\u003evoid\u003c/span\u003e forEach(Consumer&lt;? \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e T&gt; action) {\n        Objects.requireNonNull(action);\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (T t : \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e) {\n            action.accept(t);\n        }\n    }\n\n    /**\n     * Creates a {\u003cspan class=\"hljs-property\"\u003e@link\u003c/span\u003e Spliterator} over the elements described \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n     * {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e Iterable}.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@implSpec\u003c/span\u003e\n     * The \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e implementation creates an\n     * &lt;em&gt;&lt;a href=\u003cspan class=\"hljs-string\"\u003e\"Spliterator.html#binding\"\u003c/span\u003e&gt;early-binding&lt;/a&gt;&lt;/em&gt;\n     * spliterator from the iterable\u003cspan class=\"hljs-string\"\u003e\u0027s {@code Iterator}.  The spliterator\n     * inherits the &lt;em&gt;fail-fast&lt;/em&gt; properties of the iterable\u0027\u003c/span\u003es iterator.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@implNote\u003c/span\u003e\n     * The \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e implementation should usually be overridden.  The\n     * spliterator returned \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e implementation has poor splitting\n     * capabilities, \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unsized, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e report any spliterator\n     * characteristics. Implementing classes can nearly always provide a\n     * better implementation.\n     *\n     * \u003cspan class=\"hljs-property\"\u003e@return\u003c/span\u003e a {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e Spliterator} over the elements described \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e\n     * {\u003cspan class=\"hljs-property\"\u003e@code\u003c/span\u003e Iterable}.\n     * \u003cspan class=\"hljs-property\"\u003e@since\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1.8\u003c/span\u003e\n     */\n    \u003cspan class=\"hljs-reserved\"\u003edefault\u003c/span\u003e Spliterator&lt;T&gt; spliterator() {\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e Spliterators.spliteratorUnknownSize(iterator(), \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n    }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这里Iterator是放在Iterable接口中的，集合类为什么一定要去实现Iterable这个接口呢？ 为什么不直接实现Iterator接口呢？\u003c/p\u003e\n\n\u003cp\u003e因为Iterator接口相当于接口的一个指针，如果集合类实现这个指针接口的next方法，很显然和对象实例就直接绑定了，无法支持多线程。采用这种实现方式之后，每次调用都会返回一个从头开始计数的迭代器。\u003c/p\u003e\n\n\u003cp\u003e为什么需要实现迭代器呢？前文也已经讲述过，集合类中有按序管理的，有支持随机访问的，采用Iterator的方式可以隔离使用者和集合类的直接耦合。\u003c/p\u003e\n\n\u003ch3 id=\"fail-fast机制\"\u003efail-fast机制\u003c/h3\u003e\n\n\u003cp\u003e在JDK的Collection中我们时常会看到类似于这样的话：\u003c/p\u003e\n\n\u003cp\u003e例如，ArrayList:\u003c/p\u003e\n\n\u003cp\u003e注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出 ConcurrentModificationException。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。\u003c/p\u003e\n\n\u003cp\u003eHashMap中：\u003c/p\u003e\n\n\u003cp\u003e注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 ConcurrentModificationException。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。\u003c/p\u003e\n\n\u003cp\u003e在这两段话中反复地提到”快速失败”。那么何为”快速失败”机制呢？\u003c/p\u003e\n\n\u003cp\u003e“快速失败”也就是fail-fast，它是Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。记住是有可能，而不是一定。例如：假设存在两个线程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生fail-fast机制。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003efail-fast示例\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFailFastTest\u003c/span\u003e {\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e List&lt;Integer&gt; list = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList&lt;&gt;();  \n\n    \u003cspan class=\"hljs-javadoc\"\u003e/** \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @desc\u003c/span\u003e:线程one迭代list \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @Project\u003c/span\u003e:test \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @file\u003c/span\u003e:FailFastTest.java \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @Authro\u003c/span\u003e:chenssy \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @data\u003c/span\u003e:2014年7月26日 \n     */\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ethreadOne\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThread\u003c/span\u003e{\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e() {  \n            Iterator&lt;Integer&gt; iterator = list.iterator();  \n            \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(iterator.hasNext()){  \n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = iterator.next();  \n                System.out.println(\u003cspan class=\"hljs-string\"\u003e\"ThreadOne 遍历:\"\u003c/span\u003e + i);  \n                \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {  \n                    Thread.sleep(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e);  \n                } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (InterruptedException e) {  \n                    e.printStackTrace();  \n                }  \n            }  \n        }  \n    }  \n\n    \u003cspan class=\"hljs-javadoc\"\u003e/** \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @desc\u003c/span\u003e:当i == 3时，修改list \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @Project\u003c/span\u003e:test \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @file\u003c/span\u003e:FailFastTest.java \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @Authro\u003c/span\u003e:chenssy \n     *\u003cspan class=\"hljs-javadoctag\"\u003e @data\u003c/span\u003e:2014年7月26日 \n     */\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ethreadTwo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eThread\u003c/span\u003e{\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e(){  \n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ;   \n            \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e(i &lt; \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e){  \n                System.out.println(\u003cspan class=\"hljs-string\"\u003e\"ThreadTwo run：\"\u003c/span\u003e + i);  \n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(i == \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e){  \n                    list.remove(i);  \n                }  \n                i++;  \n            }  \n        }  \n    }  \n\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e(String[] args) {  \n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e ; i &lt; \u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e;i++){  \n            list.add(i);  \n        }  \n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e threadOne().start();  \n        \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e threadTwo().start();  \n    }  \n}  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e运行结果：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs avrasm\"\u003eThreadOne 遍历:\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003e  \nThreadTwo run：\u003cspan class=\"hljs-number\"\u003e5\u003c/span\u003e  \nException \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e thread \u003cspan class=\"hljs-string\"\u003e\"Thread-0\"\u003c/span\u003e java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ConcurrentModificationException\u003c/span\u003e  \n    at java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ArrayList\u003c/span\u003e$Itr\u003cspan class=\"hljs-preprocessor\"\u003e.checkForComodification\u003c/span\u003e(Unknown Source)  \n    at java\u003cspan class=\"hljs-preprocessor\"\u003e.util\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.ArrayList\u003c/span\u003e$Itr\u003cspan class=\"hljs-preprocessor\"\u003e.next\u003c/span\u003e(Unknown Source)  \n    at test\u003cspan class=\"hljs-preprocessor\"\u003e.ArrayListTest\u003c/span\u003e$threadOne\u003cspan class=\"hljs-preprocessor\"\u003e.run\u003c/span\u003e(ArrayListTest\u003cspan class=\"hljs-preprocessor\"\u003e.java\u003c/span\u003e:\u003cspan class=\"hljs-number\"\u003e23\u003c/span\u003e)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003efail-fast产生原因\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n 通过上面的示例和讲解，我初步知道fail-fast产生的原因就在于程序在对 collection 进行迭代时，某个线程对该 collection 在结构上对其做了修改，这时迭代器就会抛出 ConcurrentModificationException 异常信息，从而产生 fail-fast。\u003c/p\u003e\n\n\u003cp\u003e要了解fail-fast机制，我们首先要对ConcurrentModificationException 异常有所了解。当方法检测到对象的并发修改，但不允许这种修改时就抛出该异常。同时需要注意的是，该异常不会始终指出对象已经由不同线程并发修改，如果单线程违反了规则，同样也有可能会抛出改异常。\u003c/p\u003e\n\n\u003cp\u003e诚然，迭代器的快速失败行为无法得到保证，它不能保证一定会出现该错误，但是快速失败操作会尽最大努力抛出ConcurrentModificationException异常，所以因此，为提高此类操作的正确性而编写一个依赖于此异常的程序是错误的做法，正确做法是：ConcurrentModificationException 应该仅用于检测 bug。下面我将以ArrayList为例进一步分析fail-fast产生的原因。\u003c/p\u003e\n\n\u003cp\u003e从前面我们知道fail-fast是在操作迭代器时产生的。现在我们来看看ArrayList中迭代器的源代码：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs axapta\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItr\u003c/span\u003e \u003cspan class=\"hljs-inheritance\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eIterator\u003c/span\u003e&lt;\u003cspan class=\"hljs-title\"\u003eE\u003c/span\u003e&gt; {\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e cursor;  \n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e lastRet = -\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;  \n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e expectedModCount = ArrayList.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount;  \n\n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e hasNext() {  \n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.cursor != ArrayList.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.size);  \n        }  \n\n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e E next() {  \n            checkForComodification();  \n            \u003cspan class=\"hljs-comment\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n        }  \n\n        \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e remove() {  \n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.lastRet &lt; \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)  \n                \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e IllegalStateException();  \n            checkForComodification();  \n            \u003cspan class=\"hljs-comment\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n        }  \n\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e checkForComodification() {  \n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (ArrayList.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount == \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.expectedModCount)  \n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;  \n            \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ConcurrentModificationException();  \n        }  \n    }  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e从上面的源代码我们可以看出，迭代器在调用next()、remove()方法时都是调用checkForComodification()方法，该方法主要就是检测modCount == expectedModCount ? 若不等则抛出ConcurrentModificationException 异常，从而产生fail-fast机制。所以要弄清楚为什么会产生fail-fast机制我们就必须要用弄明白为什么modCount != expectedModCount ，他们的值在什么时候发生改变的。\u003c/p\u003e\n\n\u003cp\u003eexpectedModCount 是在Itr中定义的：int expectedModCount = ArrayList.this.modCount;所以他的值是不可能会修改的，所以会变的就是modCount。modCount是在 AbstractList 中定义的，为全局变量：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etransient\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e modCount = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e那么他什么时候因为什么原因而发生改变呢？请看ArrayList的源码：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-JAVA hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eadd\u003c/span\u003e(E paramE) {  \n    ensureCapacityInternal(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.size + \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);  \n    \u003cspan class=\"hljs-javadoc\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n}  \n\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eensureCapacityInternal\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e paramInt) {  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elementData == EMPTY_ELEMENTDATA)  \n        paramInt = Math.max(\u003cspan class=\"hljs-number\"\u003e10\u003c/span\u003e, paramInt);  \n    ensureExplicitCapacity(paramInt);  \n}  \n\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eensureExplicitCapacity\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e paramInt) {  \n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;    \u003cspan class=\"hljs-comment\"\u003e//修改modCount  \u003c/span\u003e\n    \u003cspan class=\"hljs-javadoc\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n}  \n\nublic \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e remove(Object paramObject) {  \n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i;  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (paramObject == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)  \n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.size; ++i) {  \n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elementData[i] != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e)  \n                \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;  \n            fastRemove(i);  \n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;  \n        }  \n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.size; ++i) {  \n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!(paramObject.equals(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.elementData[i])))  \n                \u003cspan class=\"hljs-keyword\"\u003econtinue\u003c/span\u003e;  \n            fastRemove(i);  \n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;  \n        }  \n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;  \n}  \n\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efastRemove\u003c/span\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e paramInt) {  \n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;   \u003cspan class=\"hljs-comment\"\u003e//修改modCount  \u003c/span\u003e\n    \u003cspan class=\"hljs-javadoc\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n}  \n\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eclear\u003c/span\u003e() {  \n    \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.modCount += \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;    \u003cspan class=\"hljs-comment\"\u003e//修改modCount  \u003c/span\u003e\n    \u003cspan class=\"hljs-javadoc\"\u003e/** 省略此处代码 */\u003c/span\u003e  \n}  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e从上面的源代码我们可以看出，ArrayList中无论add、remove、clear方法只要是涉及了改变ArrayList元素的个数的方法都会导致modCount的改变。所以我们这里可以初步判断由于expectedModCount 得值与modCount的改变不同步，导致两者之间不等从而产生fail-fast机制。知道产生fail-fast产生的根本原因了，我们可以有如下场景：\u003c/p\u003e\n\n\u003cp\u003e有两个线程（线程A，线程B），其中线程A负责遍历list、线程B修改list。线程A在遍历list过程的某个时候（此时expectedModCount = modCount=N），线程启动，同时线程B增加一个元素，这是modCount的值发生改变（modCount + 1 = N + 1）。线程A继续遍历执行next方法时，通告checkForComodification方法发现expectedModCount  = N  ，而modCount = N + 1，两者不等，这时就抛出ConcurrentModificationException 异常，从而产生fail-fast机制。\u003c/p\u003e\n\n\u003cp\u003e所以，直到这里我们已经完全了解了fail-fast产生的根本原因了。知道了原因就好找解决办法了。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003efail-fast解决办法\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n通过前面的实例、源码分析，我想各位已经基本了解了fail-fast的机制，下面我就产生的原因提出解决方案。这里有两种解决方案：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e方案一：在遍历过程中所有涉及到改变modCount值得地方全部加上synchronized或者直接使用Collections.synchronizedList，这样就可以解决。但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作。\u003c/li\u003e\n\u003cli\u003e方案二：使用CopyOnWriteArrayList来替换ArrayList。推荐使用该方案。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eCopyOnWriteArrayList为何物？ArrayList 的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。 该类产生的开销比较大，但是在两种情况下，它非常适合使用。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e1：在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时。\u003c/li\u003e\n\u003cli\u003e2：当遍历操作的数量大大超过可变操作的数量时。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e遇到这两种情况使用CopyOnWriteArrayList来替代ArrayList再适合不过了。那么为什么CopyOnWriterArrayList可以替代ArrayList呢？\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e第一、CopyOnWriterArrayList的无论是从数据结构、定义都和ArrayList一样。它和ArrayList一样，同样是实现List接口，底层使用数组实现。在方法上也包含add、remove、clear、iterator等方法。\u003c/li\u003e\n\u003cli\u003e第二、CopyOnWriterArrayList根本就不会产生ConcurrentModificationException异常，也就是它使用迭代器完全不会产生fail-fast机制。\u003c/li\u003e\n\u003c/ul\u003e","markdowncontent":"###前言\n本篇文章转自chenssy的 [java提高篇（二十）-----集合大家族](http://blog.csdn.net/chenssy/article/details/17732841)，写得不错，转载以记之，我个人觉得一个功力不错的JAVA码工至少熟悉以下几个领域：\n\n- 不错的抽象的能力（设计模式）\n- 常用数据结构的特点（集合类等）\n- JAVA虚拟机的机制（提升性能）\n- 并发编程\n\n我的JAVA提高班系列也会从这几个方面出发来写。\n\n###集合大家族分析\n在编写Java程序中，我们最常用的除了八种基本数据类型，String对象外还有一个集合类，在我们的的程序中到处充斥着集合类的身影！java中集合大家族的成员实在是太丰富了，有常用的ArrayList、HashMap、HashSet，也有不常用的Stack、Queue，有线程安全的Vector、HashTable，也有线程不安全的LinkedList、TreeMap等等！\n\n![这里写图片描述](http://img.blog.csdn.net/20140101105109140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbnNzeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n上面的图展示了整个集合大家族的成员以及他们之间的关系。下面就上面的各个接口、基类做一些简单的介绍(主要介绍各个集合的特点。区别)，更加详细的介绍会在不久的将来一一讲解。\n\n###Collection接口\n\n![这里写图片描述](http://img.blog.csdn.net/20170727191947219?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nCollection接口是最基本的集合接口，从上图可以看出它提供了实现类的公共API，但是它不提供直接的实现，Java SDK提供的类都是继承自Collection的“子接口”如List和Set。Collection所代表的是元素集，它所包含的元素有以下特点：\n\n- 有些允许重复而有些则不能重复；\n- 有些自身来维护排序，有些需要用户维护排序，所以支持随机访问，有些根本不Care排序；\n- 有些线程安全，有些线程不安全；\n\n在Java中所有实现了Collection接口的类都必须提供两套标准的构造函数，一个是无参，用于创建一个空的Collection，一个是带有Collection参数的有参构造函数，用于创建一个新的Collection，这个新的Collection与传入进来的Collection具备相同的元素。\n\n###List接口\nList接口为Collection直接接口。List所代表的是有序的Collection，即它用某种特定的插入顺序来维护元素顺序。用户可以对列表中每个元素的插入位置进行精确地控制，同时可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。\n\n***ArrayList***\nArrayList是一个动态数组，也是我们最常用的集合。它允许任何符合规则的元素插入甚至包括null。每一个ArrayList都有一个初始容量（10），该容量代表了数组的大小。随着容器中的元素不断增加，容器的大小也会随着增加。在每次向容器中增加元素的同时都会进行容量检查，当快溢出时，就会进行扩容操作。所以如果我们明确所插入元素的多少，最好指定一个初始容量值，避免过多的进行扩容操作而浪费时间、效率。\n\nsize、isEmpty、get、set、iterator 和 listIterator 操作都以固定时间运行。add 操作以分摊的固定时间运行，也就是说，添加 n 个元素需要 O(n) 时间（由于要考虑到扩容，所以这不只是添加元素会带来分摊固定时间开销那样简单）。\n\nArrayList擅长于随机访问。同时ArrayList是非同步的。\n\n***LinkedList***\n同样实现List接口的LinkedList与ArrayList不同，ArrayList是一个动态数组，而LinkedList是一个双向链表。所以它除了有ArrayList的基本操作方法外还额外提供了get，remove，insert方法在LinkedList的首部或尾部。\n\n由于实现的方式不同，LinkedList不能随机访问，它所有的操作都是要按照双重链表的需要执行。在列表中索引的操作将从开头或结尾遍历列表（从靠近指定索引的一端）。这样做的好处就是可以通过较低的代价在List中进行插入和删除操作。\n\n与ArrayList一样，LinkedList也是线程不安全的。如果多个线程同时访问一个List，则必须自己实现访问同步。一种解决方法是在创建List时构造一个同步的List： \n\n```\nList list = Collections.synchronizedList(new LinkedList(...));\n```\n***Vector***\n与ArrayList相似，但是Vector是线程安全的。所以说Vector是线程安全的动态数组。它的操作与ArrayList几乎一样。\n\n***Stack***\nStack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop 方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。\n\n###Set接口\nSet是一种不包括重复元素的Collection。它维持它自己的内部排序，所以随机访问没有任何意义。与List一样，它同样运行null的存在但是仅有一个。由于Set接口的特殊性，所有传入Set集合中的元素都必须不同，同时要注意任何可变对象，如果在对集合中元素进行操作时，导致e1.equals(e2)==true，则必定会产生某些问题。实现了Set接口的集合有：EnumSet、HashSet、TreeSet。\n\n***EnumSet***\n是枚举的专用Set。所有的元素都是枚举类型。\n\n***HashSet***\nHashSet堪称查询速度最快的集合，因为其内部是以HashCode来实现的。它内部元素的顺序是由哈希码来决定的，所以它不保证set 的迭代顺序；特别是它不保证该顺序恒久不变。\n\n***TreeSet***\n基于TreeMap，生成一个总是处于排序状态的set，内部以TreeMap来实现。它是使用元素的自然顺序对元素进行排序，或者根据创建Set 时提供的 Comparator 进行排序，具体取决于使用的构造方法。\n\n###Map接口\nMap与List、Set接口不同，它是由一系列键值对组成的集合，提供了key到Value的映射。同时它也没有继承Collection。在Map中它保证了key与value之间的一一对应关系。也就是说一个key对应一个value，所以它不能存在相同的key值，当然value值可以相同。实现map的有：HashMap、TreeMap、HashTable、Properties、EnumMap。\n\n***HashMap***\n以哈希表数据结构实现，查找对象时通过哈希函数计算其位置，它是为快速查询而设计的，其内部定义了一个hash表数组（Entry[] table），元素会通过哈希转换函数将元素的哈希地址转换成数组中存放的索引，如果有冲突，则使用散列链表的形式将所有相同哈希地址的元素串起来，可能通过查看HashMap.Entry的源码它是一个单链表结构。\n\n***TreeMap***\n键以某种排序规则排序，内部以red-black（红-黑）树数据结构实现，实现了SortedMap接口\n\n***HashTable***\n也是以哈希表数据结构实现的，解决冲突时与HashMap也一样也是采用了散列链表的形式，不过性能比HashMap要低，因为HashTable是线程安全的。\n\n###Queue\n队列，它主要分为两大类，一类是阻塞式队列，队列满了以后再插入元素则会抛出异常，主要包括ArrayBlockQueue、PriorityBlockingQueue、LinkedBlockingQueue。另一种队列则是双端队列，支持在头、尾两端插入和移除元素，主要包括：ArrayDeque、LinkedBlockingDeque、LinkedList。\n\n###对集合的选择\n\n####对List的选择\n1、对于随机查询与迭代遍历操作，数组比所有的容器都要快。所以在随机访问中一般使用ArrayList\n2、LinkedList使用双向链表对元素的增加和删除提供了非常好的支持，而ArrayList执行增加和删除元素需要进行元素位移。\n3、对于Vector而已，我们一般都是避免使用。\n4、将ArrayList当做首选，毕竟对于集合元素而已我们都是进行遍历，只有当程序的性能因为List的频繁插入和删除而降低时，再考虑LinkedList。\n\n####对Set的选择\n1、HashSet由于使用HashCode实现，所以在某种程度上来说它的性能永远比TreeSet要好，尤其是进行增加和查找操作。\n2、虽然TreeSet没有HashSet性能好，但是由于它可以维持元素的排序，所以它还是存在用武之地的。\n\n####对Map的选择\n1、HashMap与HashSet同样，支持快速查询。虽然HashTable速度的速度也不慢，但是在HashMap面前还是稍微慢了些，所以HashMap在查询方面可以取代HashTable。\n2、由于TreeMap需要维持内部元素的顺序，所以它通常要比HashMap和HashTable慢。但是对于大规模数据的查找，比如百万路由表查找等适合用TreeMap\n\n###Iterator和Iterable接口\n先给大家看看源码\n\n``` JAVA\npublic interface Iterable\u003cT\u003e {\n    /**\n     * Returns an iterator over elements of type {@code T}.\n     *\n     * @return an Iterator.\n     */\n    Iterator\u003cT\u003e iterator();\n\n    /**\n     * Performs the given action for each element of the {@code Iterable}\n     * until all elements have been processed or the action throws an\n     * exception.  Unless otherwise specified by the implementing class,\n     * actions are performed in the order of iteration (if an iteration order\n     * is specified).  Exceptions thrown by the action are relayed to the\n     * caller.\n     *\n     * @implSpec\n     * \u003cp\u003eThe default implementation behaves as if:\n     * \u003cpre\u003e{@code\n     *     for (T t : this)\n     *         action.accept(t);\n     * }\u003c/pre\u003e\n     *\n     * @param action The action to be performed for each element\n     * @throws NullPointerException if the specified action is null\n     * @since 1.8\n     */\n    default void forEach(Consumer\u003c? super T\u003e action) {\n        Objects.requireNonNull(action);\n        for (T t : this) {\n            action.accept(t);\n        }\n    }\n\n    /**\n     * Creates a {@link Spliterator} over the elements described by this\n     * {@code Iterable}.\n     *\n     * @implSpec\n     * The default implementation creates an\n     * \u003cem\u003e\u003ca href=\"Spliterator.html#binding\"\u003eearly-binding\u003c/a\u003e\u003c/em\u003e\n     * spliterator from the iterable\u0027s {@code Iterator}.  The spliterator\n     * inherits the \u003cem\u003efail-fast\u003c/em\u003e properties of the iterable\u0027s iterator.\n     *\n     * @implNote\n     * The default implementation should usually be overridden.  The\n     * spliterator returned by the default implementation has poor splitting\n     * capabilities, is unsized, and does not report any spliterator\n     * characteristics. Implementing classes can nearly always provide a\n     * better implementation.\n     *\n     * @return a {@code Spliterator} over the elements described by this\n     * {@code Iterable}.\n     * @since 1.8\n     */\n    default Spliterator\u003cT\u003e spliterator() {\n        return Spliterators.spliteratorUnknownSize(iterator(), 0);\n    }\n}\n```\n这里Iterator是放在Iterable接口中的，集合类为什么一定要去实现Iterable这个接口呢？ 为什么不直接实现Iterator接口呢？\n\n因为Iterator接口相当于接口的一个指针，如果集合类实现这个指针接口的next方法，很显然和对象实例就直接绑定了，无法支持多线程。采用这种实现方式之后，每次调用都会返回一个从头开始计数的迭代器。\n\n为什么需要实现迭代器呢？前文也已经讲述过，集合类中有按序管理的，有支持随机访问的，采用Iterator的方式可以隔离使用者和集合类的直接耦合。\n\n###fail-fast机制\n 在JDK的Collection中我们时常会看到类似于这样的话：\n\n例如，ArrayList:\n\n注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出 ConcurrentModificationException。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。\n\nHashMap中：\n\n注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 ConcurrentModificationException。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。\n\n在这两段话中反复地提到”快速失败”。那么何为”快速失败”机制呢？\n\n“快速失败”也就是fail-fast，它是Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。记住是有可能，而不是一定。例如：假设存在两个线程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生fail-fast机制。\n\n***fail-fast示例***\n\n``` JAVA\npublic class FailFastTest {  \n    private static List\u003cInteger\u003e list = new ArrayList\u003c\u003e();  \n      \n    /** \n     * @desc:线程one迭代list \n     * @Project:test \n     * @file:FailFastTest.java \n     * @Authro:chenssy \n     * @data:2014年7月26日 \n     */  \n    private static class threadOne extends Thread{  \n        public void run() {  \n            Iterator\u003cInteger\u003e iterator = list.iterator();  \n            while(iterator.hasNext()){  \n                int i = iterator.next();  \n                System.out.println(\"ThreadOne 遍历:\" + i);  \n                try {  \n                    Thread.sleep(10);  \n                } catch (InterruptedException e) {  \n                    e.printStackTrace();  \n                }  \n            }  \n        }  \n    }  \n      \n    /** \n     * @desc:当i == 3时，修改list \n     * @Project:test \n     * @file:FailFastTest.java \n     * @Authro:chenssy \n     * @data:2014年7月26日 \n     */  \n    private static class threadTwo extends Thread{  \n        public void run(){  \n            int i = 0 ;   \n            while(i \u003c 6){  \n                System.out.println(\"ThreadTwo run：\" + i);  \n                if(i == 3){  \n                    list.remove(i);  \n                }  \n                i++;  \n            }  \n        }  \n    }  \n      \n    public static void main(String[] args) {  \n        for(int i = 0 ; i \u003c 10;i++){  \n            list.add(i);  \n        }  \n        new threadOne().start();  \n        new threadTwo().start();  \n    }  \n}  \n```\n 运行结果：\n \n``` JAVA\nThreadOne 遍历:0  \nThreadTwo run：0  \nThreadTwo run：1  \nThreadTwo run：2  \nThreadTwo run：3  \nThreadTwo run：4  \nThreadTwo run：5  \nException in thread \"Thread-0\" java.util.ConcurrentModificationException  \n    at java.util.ArrayList$Itr.checkForComodification(Unknown Source)  \n    at java.util.ArrayList$Itr.next(Unknown Source)  \n    at test.ArrayListTest$threadOne.run(ArrayListTest.java:23)\n```\n***fail-fast产生原因***\n 通过上面的示例和讲解，我初步知道fail-fast产生的原因就在于程序在对 collection 进行迭代时，某个线程对该 collection 在结构上对其做了修改，这时迭代器就会抛出 ConcurrentModificationException 异常信息，从而产生 fail-fast。\n\n要了解fail-fast机制，我们首先要对ConcurrentModificationException 异常有所了解。当方法检测到对象的并发修改，但不允许这种修改时就抛出该异常。同时需要注意的是，该异常不会始终指出对象已经由不同线程并发修改，如果单线程违反了规则，同样也有可能会抛出改异常。\n\n诚然，迭代器的快速失败行为无法得到保证，它不能保证一定会出现该错误，但是快速失败操作会尽最大努力抛出ConcurrentModificationException异常，所以因此，为提高此类操作的正确性而编写一个依赖于此异常的程序是错误的做法，正确做法是：ConcurrentModificationException 应该仅用于检测 bug。下面我将以ArrayList为例进一步分析fail-fast产生的原因。\n\n从前面我们知道fail-fast是在操作迭代器时产生的。现在我们来看看ArrayList中迭代器的源代码：\n\n``` JAVA\nprivate class Itr implements Iterator\u003cE\u003e {  \n        int cursor;  \n        int lastRet = -1;  \n        int expectedModCount = ArrayList.this.modCount;  \n  \n        public boolean hasNext() {  \n            return (this.cursor != ArrayList.this.size);  \n        }  \n  \n        public E next() {  \n            checkForComodification();  \n            /** 省略此处代码 */  \n        }  \n  \n        public void remove() {  \n            if (this.lastRet \u003c 0)  \n                throw new IllegalStateException();  \n            checkForComodification();  \n            /** 省略此处代码 */  \n        }  \n  \n        final void checkForComodification() {  \n            if (ArrayList.this.modCount == this.expectedModCount)  \n                return;  \n            throw new ConcurrentModificationException();  \n        }  \n    }  \n```\n从上面的源代码我们可以看出，迭代器在调用next()、remove()方法时都是调用checkForComodification()方法，该方法主要就是检测modCount == expectedModCount ? 若不等则抛出ConcurrentModificationException 异常，从而产生fail-fast机制。所以要弄清楚为什么会产生fail-fast机制我们就必须要用弄明白为什么modCount != expectedModCount ，他们的值在什么时候发生改变的。\n\nexpectedModCount 是在Itr中定义的：int expectedModCount = ArrayList.this.modCount;所以他的值是不可能会修改的，所以会变的就是modCount。modCount是在 AbstractList 中定义的，为全局变量：\n\n```JAVA\nprotected transient int modCount = 0;  \n```\n\n那么他什么时候因为什么原因而发生改变呢？请看ArrayList的源码：\n\n``` JAVA\npublic boolean add(E paramE) {  \n    ensureCapacityInternal(this.size + 1);  \n    /** 省略此处代码 */  \n}  \n  \nprivate void ensureCapacityInternal(int paramInt) {  \n    if (this.elementData == EMPTY_ELEMENTDATA)  \n        paramInt = Math.max(10, paramInt);  \n    ensureExplicitCapacity(paramInt);  \n}  \n  \nprivate void ensureExplicitCapacity(int paramInt) {  \n    this.modCount += 1;    //修改modCount  \n    /** 省略此处代码 */  \n}  \n  \nublic boolean remove(Object paramObject) {  \n    int i;  \n    if (paramObject == null)  \n        for (i = 0; i \u003c this.size; ++i) {  \n            if (this.elementData[i] != null)  \n                continue;  \n            fastRemove(i);  \n            return true;  \n        }  \n    else  \n        for (i = 0; i \u003c this.size; ++i) {  \n            if (!(paramObject.equals(this.elementData[i])))  \n                continue;  \n            fastRemove(i);  \n            return true;  \n        }  \n    return false;  \n}  \n  \nprivate void fastRemove(int paramInt) {  \n    this.modCount += 1;   //修改modCount  \n    /** 省略此处代码 */  \n}  \n  \npublic void clear() {  \n    this.modCount += 1;    //修改modCount  \n    /** 省略此处代码 */  \n}  \n```\n 从上面的源代码我们可以看出，ArrayList中无论add、remove、clear方法只要是涉及了改变ArrayList元素的个数的方法都会导致modCount的改变。所以我们这里可以初步判断由于expectedModCount 得值与modCount的改变不同步，导致两者之间不等从而产生fail-fast机制。知道产生fail-fast产生的根本原因了，我们可以有如下场景：\n\n有两个线程（线程A，线程B），其中线程A负责遍历list、线程B修改list。线程A在遍历list过程的某个时候（此时expectedModCount = modCount=N），线程启动，同时线程B增加一个元素，这是modCount的值发生改变（modCount + 1 = N + 1）。线程A继续遍历执行next方法时，通告checkForComodification方法发现expectedModCount  = N  ，而modCount = N + 1，两者不等，这时就抛出ConcurrentModificationException 异常，从而产生fail-fast机制。\n\n所以，直到这里我们已经完全了解了fail-fast产生的根本原因了。知道了原因就好找解决办法了。\n\n***fail-fast解决办法***\n通过前面的实例、源码分析，我想各位已经基本了解了fail-fast的机制，下面我就产生的原因提出解决方案。这里有两种解决方案：\n\n- 方案一：在遍历过程中所有涉及到改变modCount值得地方全部加上synchronized或者直接使用Collections.synchronizedList，这样就可以解决。但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作。\n-  方案二：使用CopyOnWriteArrayList来替换ArrayList。推荐使用该方案。\n\nCopyOnWriteArrayList为何物？ArrayList 的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。 该类产生的开销比较大，但是在两种情况下，它非常适合使用。\n\n- 1：在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时。\n- 2：当遍历操作的数量大大超过可变操作的数量时。\n\n遇到这两种情况使用CopyOnWriteArrayList来替代ArrayList再适合不过了。那么为什么CopyOnWriterArrayList可以替代ArrayList呢？\n\n- 第一、CopyOnWriterArrayList的无论是从数据结构、定义都和ArrayList一样。它和ArrayList一样，同样是实现List接口，底层使用数组实现。在方法上也包含add、remove、clear、iterator等方法。\n- 第二、CopyOnWriterArrayList根本就不会产生ConcurrentModificationException异常，也就是它使用迭代器完全不会产生fail-fast机制。","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-7] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-27-【JAVA 提高班之一】集合大家族.markdown [pool-2-thread-7] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【JAVA 提高班之一】集合大家族》成功 [pool-2-thread-7] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75331436 [pool-2-thread-23] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":75331436,"title":"【OpenStack源码分析之四】WSGI与Nova API服务启动","create_at":"\/Date(1500389370000)\/","create":"2017-07-18 10:49:30","view_count":175,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前言前文已经介绍了RPC Server的启动，而Nova API启动的是WSGI服务，所以先介绍一下WSGI。WSGIWeb服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。WSGI是作为Web服务器","url":"http://blog.csdn.net/BLACKMOON88/article/details/75331436","categories":"Python相关,云计算,OpenStack","tags":"openstack,api,python,源码","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e前文已经介绍了RPC Server的启动，而Nova API启动的是WSGI服务，所以先介绍一下WSGI。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"wsgi\"\u003eWSGI\u003c/h3\u003e\n\n\u003cp\u003eWeb服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。WSGI是作为Web服务器与Web应用程序或应用框架之间的一种低级别的接口，以提升可移植Web应用开发的共同点。WSGI是基于现存的CGI标准而设计的。\u003c/p\u003e\n\n\u003cp\u003eWSGI区分为两个部份：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e重写环境变量，根据目标URL，将请求消息路由到不同的应用对象。\u003c/li\u003e\n\u003cli\u003e允许在一个进程中同时运行多个应用程序或应用框架。\u003c/li\u003e\n\u003cli\u003e负载均衡和远程处理，通过在网络上转发请求和响应消息。\u003c/li\u003e\n\u003cli\u003e进行内容后处理，例如应用XSLT样式表。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e以前，如何选择合适的Web应用程序框架成为困扰Python初学者的一个问题，这是因为，一般而言，Web应用框架的选择将限制可用的Web服务器的选择，反之亦然。那时的Python应用程序通常是为CGI，FastCGI，mod_python中的一个而设计，甚至是为特定Web服务器的自定义的API接口而设计的。WSGI没有官方的实现, 因为WSGI更像一个协议。只要遵照这些协议,WSGI应用(Application)都可以在任何服务器(Server)上运行, 反之亦然。WSGI就是Python的CGI包装，相对于Fastcgi是PHP的CGI包装。\u003c/p\u003e\n\n\u003cp\u003eWSGI将 web 组件分为三类： web服务器，web中间件,web应用程序， wsgi基本处理模式为 ： WSGI Server -&gt; (WSGI Middleware)* -&gt; WSGI Application 。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWSGI Server/gateway\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ewsgi server可以理解为一个符合wsgi规范的web server，接收request请求，封装一系列环境变量，按照wsgi规范调用注册的wsgi app，最后将response返回给客户端。文字很难解释清楚wsgi server到底是什么东西，以及做些什么事情，最直观的方式还是看wsgi server的实现代码。以python自带的wsgiref为例，wsgiref是按照wsgi规范实现的一个简单wsgi server。它的代码也不复杂。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.biaodianfu.com/wp-content/uploads/2014/08/wsgi-gateway.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e服务器创建socket，监听端口，等待客户端连接。\u003c/li\u003e\n\u003cli\u003e当有请求来时，服务器解析客户端信息放到环境变量environ中，并调用绑定的handler来处理请求。\u003c/li\u003e\n\u003cli\u003ehandler解析这个http请求，将请求信息例如method，path等放到environ中。\u003c/li\u003e\n\u003cli\u003ewsgi handler再将一些服务器端信息也放到environ中，最后服务器信息，客户端信息，本次请求信息全部都保存到了环境变量environ中。\u003c/li\u003e\n\u003cli\u003ewsgi handler 调用注册的wsgi app，并将environ和回调函数传给wsgi app\u003c/li\u003e\n\u003cli\u003ewsgi app 将reponse header/status/body 回传给wsgi handler\u003c/li\u003e\n\u003cli\u003e最终handler还是通过socket将response信息塞回给客户端。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWSGI Application\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ewsgi application就是一个普通的callable对象，当有请求到来时，wsgi server会调用这个wsgi app。这个对象接收两个参数，通常为environ,start_response。environ就像前面介绍的，可以理解为环境变量，跟一次请求相关的所有信息都保存在了这个环境变量中，包括服务器信息，客户端信息，请求信息。start_response是一个callback函数，wsgi application通过调用start_response，将response headers/status 返回给wsgi server。此外这个wsgi app会return 一个iterator对象 ，这个iterator就是response body。这么空讲感觉很虚，对着下面这个简单的例子看就明白很多了。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWSGI MiddleWare\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e有些功能可能介于服务器程序和应用程序之间，例如，服务器拿到了客户端请求的URL, 不同的URL需要交由不同的函数处理，这个功能叫做 URL Routing，这个功能就可以放在二者中间实现，这个中间层就是 middleware。middleware对服务器程序和应用是透明的，也就是说，服务器程序以为它就是应用程序，而应用程序以为它就是服务器。这就告诉我们，middleware需要把自己伪装成一个服务器，接受应用程序，调用它，同时middleware还需要把自己伪装成一个应用程序，传给服务器程序。 \u003cbr\u003e\n其实无论是服务器程序，middleware 还是应用程序，都在服务端，为客户端提供服务，之所以把他们抽象成不同层，就是为了控制复杂度，使得每一次都不太复杂，各司其职\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eCGI\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n关于CGI的解释，知乎上有位hellocode兄弟在 \u003cbr\u003e\n\u003ca href=\"https://www.zhihu.com/question/19998865/answer/29395327\" target=\"_blank\"\u003ehttps://www.zhihu.com/question/19998865/answer/29395327\u003c/a\u003e 讲的比较清楚，我摘抄如下：\u003c/p\u003e\n\n\u003cp\u003eCGI是比较原始的开发动态网站的方式。你可以想象一下，一个网站的动态内容肯定是程序生成的，光是静态的html页面无法达到这个效果。那么，这个程序就需要接受客户端的请求，然后进行相应处理，再返回给客户端，客户端和服务端的通信当然是通过HTTP协议。\u003c/p\u003e\n\n\u003cp\u003e然后我们会发现，这个程序在处理客户端请求的时候，大部分时候会进行很多重复的工作，比如说HTTP请求的解析。也就是说，你的程序需要解析HTTP请求，我的程序也需要解析。\u003c/p\u003e\n\n\u003cp\u003e于是为了DRY原则，Web服务器诞生了。（以下所说的都是CGI的工作模式）于是Web服务器可以解析这个HTTP请求，然后把这个请求的各种参数写进进程的环境变量，比如REQUEST_METHOD，PATH_INFO之类的。之后呢，服务器会调用相应的程序来处理这个请求，这个程序也就是我们所要写的CGI程序了。它会负责生成动态内容，然后返回给服务器，再由服务器转交给客户端。服务器和CGI程序之间通信，一般是通过进程的环境变量和管道。\u003c/p\u003e\n\n\u003cp\u003e这样做虽然很清晰，但缺点就是每次有请求，服务器都会fork and exec，每次都会有一个新的进程产生，开销还是比较大的。原因在与CGI程序是一个独立的程序，它是可以独立运行的（在提供HTTP请求的情况下），它可以用几乎所有语言来写，包括perl，c，lua，python等等。所以对于一个程序，服务器只能以fork and exec的方式来调用它了。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"nova-api-服务启动流程\"\u003eNova API 服务启动流程\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eOpenStack api-paste.ini 详解\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n这里先摘抄 Nova模块的api-paste.ini文件如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e\u003cspan class=\"hljs-preprocessor\"\u003e############\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# Metadata #\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e############\u003c/span\u003e\n[composite:metadata]\nuse = egg:Paste\u003cspan class=\"hljs-preprocessor\"\u003e#urlmap\u003c/span\u003e\n/: meta\n\n[pipeline:meta]\npipeline = cors metaapp\n\n[app:metaapp]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.app\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.metadata\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.handler\u003c/span\u003e:MetadataRequestHandler\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n\u003cspan class=\"hljs-preprocessor\"\u003e#############\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# OpenStack #\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e#############\u003c/span\u003e\n\n[composite:osapi_compute]\nuse = \u003cspan class=\"hljs-keyword\"\u003ecall\u003c/span\u003e:nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.urlmap\u003c/span\u003e:urlmap_factory\n/: oscomputeversions\n\u003cspan class=\"hljs-preprocessor\"\u003e# v21 is an exactly feature match for v2, except it has more stringent\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# input validation on the wsgi surface (prevents fuzzing early on the\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# API). It also provides new features via API microversions which are\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# opt into for clients. Unaware clients will receive the same frozen\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# v2 API feature set, but with some relaxed validation\u003c/span\u003e\n/v2: openstack_compute_api_v21_legacy_v2_compatible\n/v2\u003cspan class=\"hljs-number\"\u003e.1\u003c/span\u003e: openstack_compute_api_v21\n\n[composite:openstack_compute_api_v21]\nuse = \u003cspan class=\"hljs-keyword\"\u003ecall\u003c/span\u003e:nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e:pipeline_factory_v21\nnoauth2 = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler noauth2 osapi_compute_app_v21\nkeystone = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext osapi_compute_app_v21\n\n[composite:openstack_compute_api_v21_legacy_v2_compatible]\nuse = \u003cspan class=\"hljs-keyword\"\u003ecall\u003c/span\u003e:nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e:pipeline_factory_v21\nnoauth2 = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler noauth2 legacy_v2_compatible osapi_compute_app_v21\nkeystone = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext legacy_v2_compatible osapi_compute_app_v21\n\n[filter:request_id]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = oslo_middleware:RequestId\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:compute_req_id]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e_req_id:ComputeReqIdMiddleware\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:faultwrap]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e:FaultWrapper\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:noauth2]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e:NoAuthMiddleware\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:osprofiler]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.profiler\u003c/span\u003e:WsgiMiddleware\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:sizelimit]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = oslo_middleware:RequestBodySizeLimiter\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:http_proxy_to_wsgi]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = oslo_middleware\u003cspan class=\"hljs-preprocessor\"\u003e.http\u003c/span\u003e_proxy_to_wsgi:HTTPProxyToWSGI\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:legacy_v2_compatible]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e:LegacyV2CompatibleWrapper\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[app:osapi_compute_app_v21]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.app\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e:APIRouterV21\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[pipeline:oscomputeversions]\npipeline = cors faultwrap http_proxy_to_wsgi oscomputeversionapp\n\n[app:oscomputeversionapp]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.app\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.versions\u003c/span\u003e:Versions\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n\u003cspan class=\"hljs-preprocessor\"\u003e##########\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e# Shared #\u003c/span\u003e\n\u003cspan class=\"hljs-preprocessor\"\u003e##########\u003c/span\u003e\n\n[filter:cors]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = oslo_middleware\u003cspan class=\"hljs-preprocessor\"\u003e.cors\u003c/span\u003e:filter_factory\noslo_config_project = nova\n\n[filter:keystonecontext]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e:NovaKeystoneContext\u003cspan class=\"hljs-preprocessor\"\u003e.factory\u003c/span\u003e\n\n[filter:authtoken]\npaste\u003cspan class=\"hljs-preprocessor\"\u003e.filter\u003c/span\u003e_factory = keystonemiddleware\u003cspan class=\"hljs-preprocessor\"\u003e.auth\u003c/span\u003e_token:filter_factory\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这里面涉及到几个术语，分别解释一下：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ecomposite section：Request 进来后第一个通过的 Section，表示需要将一个 HTTP URL Request 调度到一个或者多种 Application 上。\u003c/li\u003e\n\u003cli\u003euse：是一个关键字，指定处理请求的代码，这里表示我们使用 Paste egg包中 urlmap 来实现 composite 请求分发方式。 ==&gt; 决定请求的分发方式为 urlmap(urlmap 算是一个通用的请求分发程序)。\u003c/li\u003e\n\u003cli\u003epipeline section : 指定的 section 有如下要求： \u003cbr\u003e\n\u003cul\u003e\u003cli\u003e1.最后一个名字对应的 section 一定要是一个 app 类型。\u003c/li\u003e\n\u003cli\u003e2.非最后一个名字对应的 section 一定要是一个 filter 类型。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003efilter section: 是一个实现了过滤器功能的中间件(将 Application 进行进一步的封装)，用于过滤 Request 和 Response。\u003c/li\u003e\n\u003cli\u003eApp: 一个 app 就是一个实现主要功能的具体的 application 。所以 app 必须是 Callable Object 类型，接受的参数(environ,start_response)，这是WSGI Server交给Application的符合WSGI规范的参数。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEXAMPLE: Keystone Request URL 为 \u003ca href=\"http://homename:35357/v3/auth/tokens\" target=\"_blank\"\u003ehttp://homename:35357/v3/auth/tokens\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eStep1. （hostname:35357）： 这一部分由 Web Server 来获取并处理的(EG.虚拟机功能)。\u003c/p\u003e\n\n\u003cp\u003eStep2. （/v3/auth/tokens）: 根据 paste.ini 中的配置来对剩下的 URL（/v3/auth/tokens）部分进行处理。首先请求的 Port =35357 决定了会经过 [composite:admin] section 。\u003c/p\u003e\n\n\u003cp\u003eStep3. （/v3）: composite section 会根据 /v3 这个 URL 前缀来决定将 Request 路由到哪一个 pipeline secion，这里就把请求转发给 [pipeline:api_v3] 处理，转发之前，会把 /v3 这个部分的 URL 去掉。\u003c/p\u003e\n\n\u003cp\u003eStep4. （/auth/tokens） : [pipeline:api_v3] 收到请求，URL_Path是 （/auth/tokens），然后开始调用各个 filter(中间件) 来处理请求。最后会把请求交给 [app:service_v3] 进行处理。\u003c/p\u003e\n\n\u003cp\u003eStep5. （/auth/tokens）: [app:service_v3] 收到请求，URL_Path是 (/auth/tokens)，最后交由的 WSGI Application:keystone.service:v3_app_factory 去处理。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"服务如何部署\"\u003e服务如何部署？\u003c/h3\u003e\n\n\u003cp\u003e目前Python有两种方式来开发和部署一个Web应用：用WSGI和不用WSGI。OpenStack的API服务都是使用WSGI的方式来部署的。在生产环境中部署WSGI，一般会考虑使用Web服务器 + 应用服务器 + 应用(框架)的方案。OpenStack官方推荐的是使用Apache + mod_wsgi的方案，不过这个要换成其他方案也很容易，你也可以选nginx + uWSGI。对于开发调试的目的，有些项目也会提供使用eventlet的单进程部署方案，比如Keystone项目的keystone-all命令。采用eventlet这种异步架构来进行应用开发也是一个比较大的话题，本文不覆盖这方面的内容。\u003c/p\u003e\n\n\u003cp\u003e当然，也可以不用WSGI。在Python中，如果不使用WSGI的化，一般开发者会选择一些专门的服务器和框架，比如Tornado，或者最新最潮的aiohttp。不过在OpenStack的项目中我还没见过不使用WSGI的。\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"https://www.biaodianfu.com/cgi-fastcgi-wsgi.html\"\u003ehttps://www.biaodianfu.com/cgi-fastcgi-wsgi.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/Jmilk/article/details/52081748\"\u003ehttp://blog.csdn.net/Jmilk/article/details/52081748\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"https://segmentfault.com/a/1190000003718598\"\u003ehttps://segmentfault.com/a/1190000003718598\u003c/a\u003e\u003c/p\u003e","markdowncontent":"###前言\n前文已经介绍了RPC Server的启动，而Nova API启动的是WSGI服务，所以先介绍一下WSGI。\n###WSGI\nWeb服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。WSGI是作为Web服务器与Web应用程序或应用框架之间的一种低级别的接口，以提升可移植Web应用开发的共同点。WSGI是基于现存的CGI标准而设计的。\n\nWSGI区分为两个部份：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：\n\n- 重写环境变量，根据目标URL，将请求消息路由到不同的应用对象。\n- 允许在一个进程中同时运行多个应用程序或应用框架。\n- 负载均衡和远程处理，通过在网络上转发请求和响应消息。\n- 进行内容后处理，例如应用XSLT样式表。\n\n以前，如何选择合适的Web应用程序框架成为困扰Python初学者的一个问题，这是因为，一般而言，Web应用框架的选择将限制可用的Web服务器的选择，反之亦然。那时的Python应用程序通常是为CGI，FastCGI，mod_python中的一个而设计，甚至是为特定Web服务器的自定义的API接口而设计的。WSGI没有官方的实现, 因为WSGI更像一个协议。只要遵照这些协议,WSGI应用(Application)都可以在任何服务器(Server)上运行, 反之亦然。WSGI就是Python的CGI包装，相对于Fastcgi是PHP的CGI包装。\n\nWSGI将 web 组件分为三类： web服务器，web中间件,web应用程序， wsgi基本处理模式为 ： WSGI Server -\u003e (WSGI Middleware)* -\u003e WSGI Application 。\n\n***WSGI Server/gateway***\n\nwsgi server可以理解为一个符合wsgi规范的web server，接收request请求，封装一系列环境变量，按照wsgi规范调用注册的wsgi app，最后将response返回给客户端。文字很难解释清楚wsgi server到底是什么东西，以及做些什么事情，最直观的方式还是看wsgi server的实现代码。以python自带的wsgiref为例，wsgiref是按照wsgi规范实现的一个简单wsgi server。它的代码也不复杂。\n\n![这里写图片描述](https://www.biaodianfu.com/wp-content/uploads/2014/08/wsgi-gateway.png)\n\n- 服务器创建socket，监听端口，等待客户端连接。\n- 当有请求来时，服务器解析客户端信息放到环境变量environ中，并调用绑定的handler来处理请求。\n- handler解析这个http请求，将请求信息例如method，path等放到environ中。\n- wsgi handler再将一些服务器端信息也放到environ中，最后服务器信息，客户端信息，本次请求信息全部都保存到了环境变量environ中。\n- wsgi handler 调用注册的wsgi app，并将environ和回调函数传给wsgi app\n- wsgi app 将reponse header/status/body 回传给wsgi handler\n- 最终handler还是通过socket将response信息塞回给客户端。\n\n***WSGI Application***\n\nwsgi application就是一个普通的callable对象，当有请求到来时，wsgi server会调用这个wsgi app。这个对象接收两个参数，通常为environ,start_response。environ就像前面介绍的，可以理解为环境变量，跟一次请求相关的所有信息都保存在了这个环境变量中，包括服务器信息，客户端信息，请求信息。start_response是一个callback函数，wsgi application通过调用start_response，将response headers/status 返回给wsgi server。此外这个wsgi app会return 一个iterator对象 ，这个iterator就是response body。这么空讲感觉很虚，对着下面这个简单的例子看就明白很多了。\n\n***WSGI MiddleWare***\n\n有些功能可能介于服务器程序和应用程序之间，例如，服务器拿到了客户端请求的URL, 不同的URL需要交由不同的函数处理，这个功能叫做 URL Routing，这个功能就可以放在二者中间实现，这个中间层就是 middleware。middleware对服务器程序和应用是透明的，也就是说，服务器程序以为它就是应用程序，而应用程序以为它就是服务器。这就告诉我们，middleware需要把自己伪装成一个服务器，接受应用程序，调用它，同时middleware还需要把自己伪装成一个应用程序，传给服务器程序。\n其实无论是服务器程序，middleware 还是应用程序，都在服务端，为客户端提供服务，之所以把他们抽象成不同层，就是为了控制复杂度，使得每一次都不太复杂，各司其职\n\n***CGI***\n关于CGI的解释，知乎上有位hellocode兄弟在\nhttps://www.zhihu.com/question/19998865/answer/29395327 讲的比较清楚，我摘抄如下：\n\nCGI是比较原始的开发动态网站的方式。你可以想象一下，一个网站的动态内容肯定是程序生成的，光是静态的html页面无法达到这个效果。那么，这个程序就需要接受客户端的请求，然后进行相应处理，再返回给客户端，客户端和服务端的通信当然是通过HTTP协议。\n\n然后我们会发现，这个程序在处理客户端请求的时候，大部分时候会进行很多重复的工作，比如说HTTP请求的解析。也就是说，你的程序需要解析HTTP请求，我的程序也需要解析。\n\n于是为了DRY原则，Web服务器诞生了。（以下所说的都是CGI的工作模式）于是Web服务器可以解析这个HTTP请求，然后把这个请求的各种参数写进进程的环境变量，比如REQUEST_METHOD，PATH_INFO之类的。之后呢，服务器会调用相应的程序来处理这个请求，这个程序也就是我们所要写的CGI程序了。它会负责生成动态内容，然后返回给服务器，再由服务器转交给客户端。服务器和CGI程序之间通信，一般是通过进程的环境变量和管道。\n\n这样做虽然很清晰，但缺点就是每次有请求，服务器都会fork and exec，每次都会有一个新的进程产生，开销还是比较大的。原因在与CGI程序是一个独立的程序，它是可以独立运行的（在提供HTTP请求的情况下），它可以用几乎所有语言来写，包括perl，c，lua，python等等。所以对于一个程序，服务器只能以fork and exec的方式来调用它了。\n\n###Nova API 服务启动流程\n***OpenStack api-paste.ini 详解***\n这里先摘抄 Nova模块的api-paste.ini文件如下：\n\n```\n############\n# Metadata #\n############\n[composite:metadata]\nuse = egg:Paste#urlmap\n/: meta\n\n[pipeline:meta]\npipeline = cors metaapp\n\n[app:metaapp]\npaste.app_factory = nova.api.metadata.handler:MetadataRequestHandler.factory\n\n#############\n# OpenStack #\n#############\n\n[composite:osapi_compute]\nuse = call:nova.api.openstack.urlmap:urlmap_factory\n/: oscomputeversions\n# v21 is an exactly feature match for v2, except it has more stringent\n# input validation on the wsgi surface (prevents fuzzing early on the\n# API). It also provides new features via API microversions which are\n# opt into for clients. Unaware clients will receive the same frozen\n# v2 API feature set, but with some relaxed validation\n/v2: openstack_compute_api_v21_legacy_v2_compatible\n/v2.1: openstack_compute_api_v21\n\n[composite:openstack_compute_api_v21]\nuse = call:nova.api.auth:pipeline_factory_v21\nnoauth2 = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler noauth2 osapi_compute_app_v21\nkeystone = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext osapi_compute_app_v21\n\n[composite:openstack_compute_api_v21_legacy_v2_compatible]\nuse = call:nova.api.auth:pipeline_factory_v21\nnoauth2 = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler noauth2 legacy_v2_compatible osapi_compute_app_v21\nkeystone = cors http_proxy_to_wsgi compute_req_id faultwrap sizelimit osprofiler authtoken keystonecontext legacy_v2_compatible osapi_compute_app_v21\n\n[filter:request_id]\npaste.filter_factory = oslo_middleware:RequestId.factory\n\n[filter:compute_req_id]\npaste.filter_factory = nova.api.compute_req_id:ComputeReqIdMiddleware.factory\n\n[filter:faultwrap]\npaste.filter_factory = nova.api.openstack:FaultWrapper.factory\n\n[filter:noauth2]\npaste.filter_factory = nova.api.openstack.auth:NoAuthMiddleware.factory\n\n[filter:osprofiler]\npaste.filter_factory = nova.profiler:WsgiMiddleware.factory\n\n[filter:sizelimit]\npaste.filter_factory = oslo_middleware:RequestBodySizeLimiter.factory\n\n[filter:http_proxy_to_wsgi]\npaste.filter_factory = oslo_middleware.http_proxy_to_wsgi:HTTPProxyToWSGI.factory\n\n[filter:legacy_v2_compatible]\npaste.filter_factory = nova.api.openstack:LegacyV2CompatibleWrapper.factory\n\n[app:osapi_compute_app_v21]\npaste.app_factory = nova.api.openstack.compute:APIRouterV21.factory\n\n[pipeline:oscomputeversions]\npipeline = cors faultwrap http_proxy_to_wsgi oscomputeversionapp\n\n[app:oscomputeversionapp]\npaste.app_factory = nova.api.openstack.compute.versions:Versions.factory\n\n##########\n# Shared #\n##########\n\n[filter:cors]\npaste.filter_factory = oslo_middleware.cors:filter_factory\noslo_config_project = nova\n\n[filter:keystonecontext]\npaste.filter_factory = nova.api.auth:NovaKeystoneContext.factory\n\n[filter:authtoken]\npaste.filter_factory = keystonemiddleware.auth_token:filter_factory\n\n```\n这里面涉及到几个术语，分别解释一下：\n\n-  composite section：Request 进来后第一个通过的 Section，表示需要将一个 HTTP URL Request 调度到一个或者多种 Application 上。\n-  use：是一个关键字，指定处理请求的代码，这里表示我们使用 Paste egg包中 urlmap 来实现 composite 请求分发方式。 ==\u003e 决定请求的分发方式为 urlmap(urlmap 算是一个通用的请求分发程序)。\n- pipeline section : 指定的 section 有如下要求：\n\t- 1.最后一个名字对应的 section 一定要是一个 app 类型。\n\t- 2.非最后一个名字对应的 section 一定要是一个 filter 类型。\n- filter section: 是一个实现了过滤器功能的中间件(将 Application 进行进一步的封装)，用于过滤 Request 和 Response。\n- App: 一个 app 就是一个实现主要功能的具体的 application 。所以 app 必须是 Callable Object 类型，接受的参数(environ,start_response)，这是WSGI Server交给Application的符合WSGI规范的参数。\n\nEXAMPLE: Keystone Request URL 为 http://homename:35357/v3/auth/tokens\n\nStep1. （hostname:35357）： 这一部分由 Web Server 来获取并处理的(EG.虚拟机功能)。\n\nStep2. （/v3/auth/tokens）: 根据 paste.ini 中的配置来对剩下的 URL（/v3/auth/tokens）部分进行处理。首先请求的 Port =35357 决定了会经过 [composite:admin] section 。\n\nStep3. （/v3）: composite section 会根据 /v3 这个 URL 前缀来决定将 Request 路由到哪一个 pipeline secion，这里就把请求转发给 [pipeline:api_v3] 处理，转发之前，会把 /v3 这个部分的 URL 去掉。\n\nStep4. （/auth/tokens） : [pipeline:api_v3] 收到请求，URL_Path是 （/auth/tokens），然后开始调用各个 filter(中间件) 来处理请求。最后会把请求交给 [app:service_v3] 进行处理。\n\nStep5. （/auth/tokens）: [app:service_v3] 收到请求，URL_Path是 (/auth/tokens)，最后交由的 WSGI Application:keystone.service:v3_app_factory 去处理。\n\n###服务如何部署？\n目前Python有两种方式来开发和部署一个Web应用：用WSGI和不用WSGI。OpenStack的API服务都是使用WSGI的方式来部署的。在生产环境中部署WSGI，一般会考虑使用Web服务器 + 应用服务器 + 应用(框架)的方案。OpenStack官方推荐的是使用Apache + mod_wsgi的方案，不过这个要换成其他方案也很容易，你也可以选nginx + uWSGI。对于开发调试的目的，有些项目也会提供使用eventlet的单进程部署方案，比如Keystone项目的keystone-all命令。采用eventlet这种异步架构来进行应用开发也是一个比较大的话题，本文不覆盖这方面的内容。\n\n当然，也可以不用WSGI。在Python中，如果不使用WSGI的化，一般开发者会选择一些专门的服务器和框架，比如Tornado，或者最新最潮的aiohttp。不过在OpenStack的项目中我还没见过不使用WSGI的。\n\n参考文献：\nhttps://www.biaodianfu.com/cgi-fastcgi-wsgi.html\nhttp://blog.csdn.net/Jmilk/article/details/52081748\nhttps://segmentfault.com/a/1190000003718598","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-23] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":75948544,"title":"【OpenStack源码分析之十】虚机启动流程中Nova Compute与周边组件的交互","create_at":"\/Date(1500816579000)\/","create":"2017-07-23 09:29:39","view_count":120,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前文也讲述过 【OpenStack源码分析之三】Nova-Compute启动流程分析Nova Compute组件在整个Nova里面是一个核心角色，控制节点上的Nova-api，Nova-Conductor, Nova-Scheduler在虚机启动流程中主要只做了一个事情，就是选出了启动虚机的Host，剩下的网络资源的搭建，Image的下载，卷的申请等工作都是通过Nova-compute来做，所以说它","url":"http://blog.csdn.net/BLACKMOON88/article/details/75948544","categories":"云计算,OpenStack","tags":"openstack,nova,网络","content":"\u003cp\u003e前文也讲述过 \u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75267742\" target=\"_blank\"\u003e【OpenStack源码分析之三】Nova-Compute启动流程分析\u003c/a\u003eNova Compute组件在整个Nova里面是一个核心角色，控制节点上的Nova-api，Nova-Conductor, Nova-Scheduler在虚机启动流程中主要只做了一个事情，就是选出了启动虚机的Host，剩下的网络资源的搭建，Image的下载，卷的申请等工作都是通过Nova-compute来做，所以说它真正管理着虚机的生命周期。而关于虚拟机启动的整个流程也已经在\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75701576\" target=\"_blank\"\u003e【OpenStack源码分析之六】从虚拟机启动流程看安全认证\u003c/a\u003e 的图中详细介绍，建议读者看这篇文章时同时对照那张图来看\u003c/p\u003e\n\n\n\n\u003ch3 id=\"libvirt背景介绍\"\u003eLibvirt背景介绍\u003c/h3\u003e\n\n\n\n\u003ch4 id=\"什么是libvirt\"\u003e什么是libvirt\u003c/h4\u003e\n\n\u003cp\u003e虚拟云实现的三部曲：虚拟化技术实现–&gt;虚拟机管理–&gt;集群资源管理(云管理)。各种不同的虚拟化技术都提供了基本的管理工具。比如，启动，停用，配置，连接控制台等。这样在构建云管理的时候就造成了多厂家适配问题，通常为了做多厂家适配，都是增加一个中间层，使Hypervisor和云管理相互透明。libvirt就是扮演的这个角色。libvirt提供各种API，供上层来管理不同的虚拟机。\u003c/p\u003e\n\n\u003cp\u003eLibvirt是管理虚拟机和其他虚拟化功能，比如存储管理，网络管理的软件集合。它包括一个API库，一个守护程序（libvirtd）和一个命令行工具（virsh）；libvirt本身构建于一种抽象的概念之上。它为受支持的虚拟机监控程序实现的常用功能提供通用的API。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"libvirt主要支持的功能\"\u003eLibvirt主要支持的功能\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e虚拟机管理：包括不同的领域生命周期操作，比如：启动、停止、暂停、保存、恢复和迁移。支持多种设备类型的热插拔操作，包括：磁盘、网卡、内存和CPU。\u003c/li\u003e\n\u003cli\u003e远程机器支持：只要机器上运行了libvirt daemon，包括远程机器，所有的libvirt功能就都可以访问和使用。支持多种网络远程传输，使用最简单的SSH，不需要额外配置工作。\u003c/li\u003e\n\u003cli\u003e存储管理：任何运行了libvirt daemon的主机都可以用来管理不同类型的存储：创建不同格式的文件镜像（qcow2、vmdk、raw等）、挂接NFS共享、列出现有的LVM卷组、创建新的LVM卷组和逻辑卷、对未处理过的磁盘设备分区、挂接iSCSI共享，等等等等。因为libvirt可以远程工作，所有这些都可以通过远程主机使用。\u003c/li\u003e\n\u003cli\u003e网络接口管理：任何运行了libvirt daemon的主机都可以用来管理物理和逻辑的网络接口。\u003c/li\u003e\n\u003cli\u003e虚拟NAT和基于路由的网络：任何运行了libvirt daemon的主机都可以用来管理和创建虚拟网络。\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch4 id=\"libvirt支持的虚拟机\"\u003eLibvirt支持的虚拟机\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20130731232408656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FveGluZ25lbmdqaXN1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"libvirt-api\"\u003eLibvirt API\u003c/h4\u003e\n\n\u003cp\u003elibvirt API 大致可划分为如下8个大的部分：\u003c/p\u003e\n\n\u003cp\u003e（1）连接 Hypervisor 相关的API：以virConnect 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003e只有与 Hypervisor 建立了连接之后，才能进行虚拟机管理操作，所以连接 Hypervisor 的API是其他所有API使用的前提条件。与 Hypervisor 建立的连接是为其他API的执行提供了路径，是其他虚拟化管理功能的基础。通过调用 virConnectOpen 函数可以建立一个连接，其返回值是一个virConnectPtr 对象，该对象就代表到 Hypervisor 的一个连接；如果连接出错，则返回空值（NULL）。而 virConnectOpenReadOnly 函数会建立一个只读的连接，在该连接上可以使用一些查询的功能，而不使用创建、修改等功能。 virConnectOpenAuth 函数提供了更具认证建立的连接。 virConnectGetCapabilities 函数是返回对 Hypervisor 和驱动的功能的描述的 XML 格式的字符串。virConnectListDomains函数返回一列域标识符，它们代表该 Hypervisor 上的活动域。\u003c/p\u003e\n\n\u003cp\u003e（2）域管理的 API：以virDomain 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003e虚拟机的管理，最基本的职能就是对各个节点上的域的管理，故 libvirt API 中实现了很多针对域管理的函数。要管理域，首先就要获取virDomainPtr 这个域对象，然后才能对域进行操作。有很多种方式来获取域对象，如 virDomainPtr virDomainLookupByID (virConnectPtr conn, int id) 函数是根据域的 id 值到 conn 这个连接上去查找相应的域。类似地，virDomainLookupByName、virDomainLookupByUUID 等函数分别是根据域的名称和 UUID 去查找相应的域。在得到了某个域的对象后，就可以进行很多的操作，可以是查询域的信息（如：virDomainGetHostname、virDomainGetInfo、virDomainGetVcpus、virDomainGetVcpusFlags、virDomainGetCPUStats，等等），也可以是控制域的生命周期（如：virDomainCreate 、virDomainSuspend 、virDomainResume 、virDomainDestroy 、virDomainMigrate，等等）。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20130731235248250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FveGluZ25lbmdqaXN1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n（3）节点管理的 API：以virNode 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003e域是运行在物理节点之上，libvirt也提供了对节点的信息查询和控制的功能。节点管理的多数函数都需要使用一个连接 Hypervisor 的对象作为其中的一个传入参数，以便可以查询或修改到该连接上的节点的信息。virNodeGetInfo函数是获取节点的物理硬件信息，virNodeGetCPUStats 函数可以获取节点上各个 CPU 的使用统计信息，virNodeGetMemoryStats 函数可以获取节点上的内存的使用统计信息，virNodeGetFreeMemory 函数可以获取节点上可用的空闲内存大小。也有一些设置或者控制节点的函数，如virNodeSetMemoryParameters 函数可以设置节点上的内存调度的参数，virNodeSuspendForDuration 函数可以让节点（宿主机）暂停运行一段时间。\u003c/p\u003e\n\n\u003cp\u003e（4）网络管理的 API：以 virNetwork 开头的一系列函数和部分以 virInterface 开头的函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 对虚拟化环境中的网络管理也提供了丰富的API。libvirt 首先需要创建virNetworkPtr 对象，然后才能查询或控制虚拟网络。一些查询网络相关信息的函数，如：virNetworkGetName 函数可以获取网络的名称，virNetworkGetBridgeName 函数可以获取该网络中网桥的名称，virNetworkGetUUID 函数可以获取网络的 UUID 标识，virNetworkGetXMLDesc 函数可以获取网络的以 XML 格式的描述信息，virNetworkIsActive 函数可以查询网络是否正在使用中。一些控制或更改网络设置的函数，有：virNetworkCreateXML 函数可以根据提供的 XML 格式的字符串创建一个网络（返回 virNetworkPtr 对象），virNetworkDestroy 函数可以销毁一个网络（同时也会关闭使用该网络的域），virNetworkFree 函数可以回收一个网络（但不会关闭正在运行的域），virNetworkUpdate 函数可根据提供的 XML 格式的网络配置来更新一个已存在的网络。另外，virInterfaceCreate、virInterfaceFree、virInterfaceDestroy、virInterfaceGetName、virInterfaceIsActive 等函数可以用于创建、释放和销毁网络接口，以及查询网络接口的名称和激活状态。\u003c/p\u003e\n\n\u003cp\u003e（5）存储卷管理的 API：以 virStorageVol 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 对存储卷（volume）的管理，主要是对域的镜像文件的管理，这些镜像文件可能是 raw、qcow2、vmdk、qed等各种格式。libvirt 对存储卷的管理，首先需要创建virStorageVolPtr 这个存储卷的对象，然后才能对其进行查询或控制操作。libvirt 提供了3个函数来分别通过不同的方式来获取存储卷对象，如：virStorageVolLookupByKey 函数可以根据全局唯一的键值来获得一个存储卷对象，virStorageVolLookupByName 函数可以根据名称在一个存储资源池（storage pool）中获取一个存储卷对象，virStorageVolLookupByPath 函数可以根据它在节点上路径来获取一个存储卷对象。有一些函数用于查询存储卷的信息，如：virStorageVolGetInfo 函数可以查询某个存储卷的使用情况，virStorageVolGetName 函数可以获取存储卷的名称，virStorageVolGetPath 函数可以获取存储卷的路径，virStorageVolGetConnect 函数可以查询存储卷的连接。一些函数用于创建和修改存储卷，如：virStorageVolCreateXML 函数可以根据提供的 XML 描述来创建一个存储卷，virStorageVolFree 函数可以释放存储卷的句柄（但是存储卷依然存在），virStorageVolDelete 函数可以删除一个存储卷，virStorageVolResize 函数可以调整存储卷的大小。\u003c/p\u003e\n\n\u003cp\u003e（6）存储池管理的 API：以virStoragePool 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 对存储池（pool）的管理，包括对本地的基本文件系统、普通网络共享文件系统、iSCSI共享文件系统、LVM分区等的管理。libvirt 需要基于 virStoragePoolPtr 这个存储池对象才能进行查询和控制操作。一些函数可以通过查询获取一个存储池对象，如：virStoragePoolLookupByName 函数可以根据存储池的名称来获取一个存储池对象，virStoragePoolLookupByVolume 可以根据一个存储卷返回其对应的存储池对象。virStoragePoolCreateXML 函数可以根据 XML 描述来创建一个存储池（默认已激活），virStoragePoolDefineXML 函数可以根据 XML 描述信息静态地定义个存储池（尚未激活），virStoragePoolCreate 函数可以激活一个存储池。virStoragePoolGetInfo、virStoragePoolGetName、virStoragePoolGetUUID等函数可以分别获取存储池的信息、名称和 UUID 标识。virStoragePoolIsActive函数可以查询存储池是否处于使用中状态。virStoragePoolFree 函数可以释放存储池相关的内存（但是不改变其在宿主机中的状态），virStoragePoolDestroy 函数可以用于销毁一个存储池（但并没有释放virStoragePoolPtr 对象，之后还可以用virStoragePoolCreate 函数重新激活它），virStoragePoolDelete 函数可以物理删除一个存储池资源（该操作不可恢复）。\u003c/p\u003e\n\n\u003cp\u003e（7）事件管理的API：以virEvent 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 支持事件机制，使用该机制注册之后，可以在发生特定的事件（如：域的启动、暂停、恢复、停止等）之时，得到自己定义的一些通知。\u003c/p\u003e\n\n\u003cp\u003e（8）数据流管理的API：以virStream 开头的一系列函数。\u003c/p\u003e\n\n\u003cp\u003elibvirt 还提供了一系列函数用于数据流的传输。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"nova-compute与周边的交互\"\u003eNova Compute与周边的交互\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNeutron\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nNova Compute首先会与Neutron交互：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e调用Neutron API配置Network，虚拟机处于Networking的状态\u003c/li\u003e\n\u003cli\u003eNeutron 生成 MAC Address\u003c/li\u003e\n\u003cli\u003e获取Neutron DHCP Server的配置\u003c/li\u003e\n\u003cli\u003e获取Neutron Network的信息\u003c/li\u003e\n\u003cli\u003e获取Neutron Security Group的信息\u003c/li\u003e\n\u003cli\u003eNeutron 创建Port对象，是一个Tap device，当然真正的设备还没有创建\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eCinder\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nNova Compute在与Neutron交互的过程中，也会与Cinder交互，申请块存储资源:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCinder API请求创建一个Volume\u003c/li\u003e\n\u003cli\u003eCinder Scheduler在多个Cinder Volume里面选择一个，也是先Filter再weighting的过程，可以根据总空间的大小，也可以根据分配的情况\u003c/li\u003e\n\u003cli\u003eCinder Volume创建一个iscsi target\u003c/li\u003e\n\u003cli\u003eCinder Volume创建一个LVM volume，加入iscsi target\u003c/li\u003e\n\u003cli\u003ecompute节点连接iscsi target，从而volume出现在compute节点上\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eLibvert Driver\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n在与上述两个组件交互完毕之后，已经获取了网络资源和块存储，Nova Compute就会调用Libvirt Driver创建虚拟机。\u003c/p\u003e\n\n\u003cp\u003eLibvert Driver首先会和Glance交互申请镜像下载：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e从Glance下载Image，作为base\u003c/li\u003e\n\u003cli\u003e基于base image，创建qcow2的image\u003c/li\u003e\n\u003cli\u003eresize image的大小，和filesystem的大小无关\u003c/li\u003e\n\u003cli\u003e配置configuration drive\u003c/li\u003e\n\u003cli\u003e配置文件注入\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e就这样，所有的信息都已经齐全，生成了虚拟机的libvert配置xml文件，可以调用Libvert来创建虚拟机。\u003c/p\u003e\n\n\u003cp\u003e在创建虚拟机的过程中，有非常重要的两步，Libvert会把虚机Plug到bridge上生成一个Tap口，同时也会挂载从Cinder申请的块存储。此后虚拟机会通过网络DHCP服务，Metadata服务等获取配置。\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://smilejay.com/2013/03/libvirt-api-introduction/\"\u003ehttp://smilejay.com/2013/03/libvirt-api-introduction/\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/gaoxingnengjisuan/article/details/9674315\"\u003ehttp://blog.csdn.net/gaoxingnengjisuan/article/details/9674315\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://smilejay.com/2013/03/libvirt-configuration-and-usage/\"\u003e(KVM连载) 6.1.3 libvirt、libvirtd的配置和使用\u003c/a\u003e\u003c/p\u003e","markdowncontent":"前文也讲述过 [【OpenStack源码分析之三】Nova-Compute启动流程分析](http://blog.csdn.net/ohenry88/article/details/75267742)Nova Compute组件在整个Nova里面是一个核心角色，控制节点上的Nova-api，Nova-Conductor, Nova-Scheduler在虚机启动流程中主要只做了一个事情，就是选出了启动虚机的Host，剩下的网络资源的搭建，Image的下载，卷的申请等工作都是通过Nova-compute来做，所以说它真正管理着虚机的生命周期。而关于虚拟机启动的整个流程也已经在[【OpenStack源码分析之六】从虚拟机启动流程看安全认证](http://blog.csdn.net/ohenry88/article/details/75701576) 的图中详细介绍，建议读者看这篇文章时同时对照那张图来看\n###Libvirt背景介绍\n####什么是libvirt\n虚拟云实现的三部曲：虚拟化技术实现--\u003e虚拟机管理--\u003e集群资源管理(云管理)。各种不同的虚拟化技术都提供了基本的管理工具。比如，启动，停用，配置，连接控制台等。这样在构建云管理的时候就造成了多厂家适配问题，通常为了做多厂家适配，都是增加一个中间层，使Hypervisor和云管理相互透明。libvirt就是扮演的这个角色。libvirt提供各种API，供上层来管理不同的虚拟机。\n\nLibvirt是管理虚拟机和其他虚拟化功能，比如存储管理，网络管理的软件集合。它包括一个API库，一个守护程序（libvirtd）和一个命令行工具（virsh）；libvirt本身构建于一种抽象的概念之上。它为受支持的虚拟机监控程序实现的常用功能提供通用的API。\n\n####Libvirt主要支持的功能\n\n- 虚拟机管理：包括不同的领域生命周期操作，比如：启动、停止、暂停、保存、恢复和迁移。支持多种设备类型的热插拔操作，包括：磁盘、网卡、内存和CPU。\n- 远程机器支持：只要机器上运行了libvirt daemon，包括远程机器，所有的libvirt功能就都可以访问和使用。支持多种网络远程传输，使用最简单的SSH，不需要额外配置工作。\n- 存储管理：任何运行了libvirt daemon的主机都可以用来管理不同类型的存储：创建不同格式的文件镜像（qcow2、vmdk、raw等）、挂接NFS共享、列出现有的LVM卷组、创建新的LVM卷组和逻辑卷、对未处理过的磁盘设备分区、挂接iSCSI共享，等等等等。因为libvirt可以远程工作，所有这些都可以通过远程主机使用。\n- 网络接口管理：任何运行了libvirt daemon的主机都可以用来管理物理和逻辑的网络接口。\n- 虚拟NAT和基于路由的网络：任何运行了libvirt daemon的主机都可以用来管理和创建虚拟网络。\n\n####Libvirt支持的虚拟机\n![这里写图片描述](http://img.blog.csdn.net/20130731232408656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FveGluZ25lbmdqaXN1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n####Libvirt API\nlibvirt API 大致可划分为如下8个大的部分：\n\n（1）连接 Hypervisor 相关的API：以virConnect 开头的一系列函数。\n\n只有与 Hypervisor 建立了连接之后，才能进行虚拟机管理操作，所以连接 Hypervisor 的API是其他所有API使用的前提条件。与 Hypervisor 建立的连接是为其他API的执行提供了路径，是其他虚拟化管理功能的基础。通过调用 virConnectOpen 函数可以建立一个连接，其返回值是一个virConnectPtr 对象，该对象就代表到 Hypervisor 的一个连接；如果连接出错，则返回空值（NULL）。而 virConnectOpenReadOnly 函数会建立一个只读的连接，在该连接上可以使用一些查询的功能，而不使用创建、修改等功能。 virConnectOpenAuth 函数提供了更具认证建立的连接。 virConnectGetCapabilities 函数是返回对 Hypervisor 和驱动的功能的描述的 XML 格式的字符串。virConnectListDomains函数返回一列域标识符，它们代表该 Hypervisor 上的活动域。\n\n（2）域管理的 API：以virDomain 开头的一系列函数。\n\n虚拟机的管理，最基本的职能就是对各个节点上的域的管理，故 libvirt API 中实现了很多针对域管理的函数。要管理域，首先就要获取virDomainPtr 这个域对象，然后才能对域进行操作。有很多种方式来获取域对象，如 virDomainPtr virDomainLookupByID (virConnectPtr conn, int id) 函数是根据域的 id 值到 conn 这个连接上去查找相应的域。类似地，virDomainLookupByName、virDomainLookupByUUID 等函数分别是根据域的名称和 UUID 去查找相应的域。在得到了某个域的对象后，就可以进行很多的操作，可以是查询域的信息（如：virDomainGetHostname、virDomainGetInfo、virDomainGetVcpus、virDomainGetVcpusFlags、virDomainGetCPUStats，等等），也可以是控制域的生命周期（如：virDomainCreate 、virDomainSuspend 、virDomainResume 、virDomainDestroy 、virDomainMigrate，等等）。\n\n![这里写图片描述](http://img.blog.csdn.net/20130731235248250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FveGluZ25lbmdqaXN1YW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n（3）节点管理的 API：以virNode 开头的一系列函数。\n\n域是运行在物理节点之上，libvirt也提供了对节点的信息查询和控制的功能。节点管理的多数函数都需要使用一个连接 Hypervisor 的对象作为其中的一个传入参数，以便可以查询或修改到该连接上的节点的信息。virNodeGetInfo函数是获取节点的物理硬件信息，virNodeGetCPUStats 函数可以获取节点上各个 CPU 的使用统计信息，virNodeGetMemoryStats 函数可以获取节点上的内存的使用统计信息，virNodeGetFreeMemory 函数可以获取节点上可用的空闲内存大小。也有一些设置或者控制节点的函数，如virNodeSetMemoryParameters 函数可以设置节点上的内存调度的参数，virNodeSuspendForDuration 函数可以让节点（宿主机）暂停运行一段时间。\n\n（4）网络管理的 API：以 virNetwork 开头的一系列函数和部分以 virInterface 开头的函数。\n\nlibvirt 对虚拟化环境中的网络管理也提供了丰富的API。libvirt 首先需要创建virNetworkPtr 对象，然后才能查询或控制虚拟网络。一些查询网络相关信息的函数，如：virNetworkGetName 函数可以获取网络的名称，virNetworkGetBridgeName 函数可以获取该网络中网桥的名称，virNetworkGetUUID 函数可以获取网络的 UUID 标识，virNetworkGetXMLDesc 函数可以获取网络的以 XML 格式的描述信息，virNetworkIsActive 函数可以查询网络是否正在使用中。一些控制或更改网络设置的函数，有：virNetworkCreateXML 函数可以根据提供的 XML 格式的字符串创建一个网络（返回 virNetworkPtr 对象），virNetworkDestroy 函数可以销毁一个网络（同时也会关闭使用该网络的域），virNetworkFree 函数可以回收一个网络（但不会关闭正在运行的域），virNetworkUpdate 函数可根据提供的 XML 格式的网络配置来更新一个已存在的网络。另外，virInterfaceCreate、virInterfaceFree、virInterfaceDestroy、virInterfaceGetName、virInterfaceIsActive 等函数可以用于创建、释放和销毁网络接口，以及查询网络接口的名称和激活状态。\n\n（5）存储卷管理的 API：以 virStorageVol 开头的一系列函数。\n\nlibvirt 对存储卷（volume）的管理，主要是对域的镜像文件的管理，这些镜像文件可能是 raw、qcow2、vmdk、qed等各种格式。libvirt 对存储卷的管理，首先需要创建virStorageVolPtr 这个存储卷的对象，然后才能对其进行查询或控制操作。libvirt 提供了3个函数来分别通过不同的方式来获取存储卷对象，如：virStorageVolLookupByKey 函数可以根据全局唯一的键值来获得一个存储卷对象，virStorageVolLookupByName 函数可以根据名称在一个存储资源池（storage pool）中获取一个存储卷对象，virStorageVolLookupByPath 函数可以根据它在节点上路径来获取一个存储卷对象。有一些函数用于查询存储卷的信息，如：virStorageVolGetInfo 函数可以查询某个存储卷的使用情况，virStorageVolGetName 函数可以获取存储卷的名称，virStorageVolGetPath 函数可以获取存储卷的路径，virStorageVolGetConnect 函数可以查询存储卷的连接。一些函数用于创建和修改存储卷，如：virStorageVolCreateXML 函数可以根据提供的 XML 描述来创建一个存储卷，virStorageVolFree 函数可以释放存储卷的句柄（但是存储卷依然存在），virStorageVolDelete 函数可以删除一个存储卷，virStorageVolResize 函数可以调整存储卷的大小。\n\n（6）存储池管理的 API：以virStoragePool 开头的一系列函数。\n\nlibvirt 对存储池（pool）的管理，包括对本地的基本文件系统、普通网络共享文件系统、iSCSI共享文件系统、LVM分区等的管理。libvirt 需要基于 virStoragePoolPtr 这个存储池对象才能进行查询和控制操作。一些函数可以通过查询获取一个存储池对象，如：virStoragePoolLookupByName 函数可以根据存储池的名称来获取一个存储池对象，virStoragePoolLookupByVolume 可以根据一个存储卷返回其对应的存储池对象。virStoragePoolCreateXML 函数可以根据 XML 描述来创建一个存储池（默认已激活），virStoragePoolDefineXML 函数可以根据 XML 描述信息静态地定义个存储池（尚未激活），virStoragePoolCreate 函数可以激活一个存储池。virStoragePoolGetInfo、virStoragePoolGetName、virStoragePoolGetUUID等函数可以分别获取存储池的信息、名称和 UUID 标识。virStoragePoolIsActive函数可以查询存储池是否处于使用中状态。virStoragePoolFree 函数可以释放存储池相关的内存（但是不改变其在宿主机中的状态），virStoragePoolDestroy 函数可以用于销毁一个存储池（但并没有释放virStoragePoolPtr 对象，之后还可以用virStoragePoolCreate 函数重新激活它），virStoragePoolDelete 函数可以物理删除一个存储池资源（该操作不可恢复）。\n\n（7）事件管理的API：以virEvent 开头的一系列函数。\n\nlibvirt 支持事件机制，使用该机制注册之后，可以在发生特定的事件（如：域的启动、暂停、恢复、停止等）之时，得到自己定义的一些通知。\n\n（8）数据流管理的API：以virStream 开头的一系列函数。\n\nlibvirt 还提供了一系列函数用于数据流的传输。\n\n###Nova Compute与周边的交互\n\n***Neutron***\nNova Compute首先会与Neutron交互：\n\n- 调用Neutron API配置Network，虚拟机处于Networking的状态\n- Neutron 生成 MAC Address\n- 获取Neutron DHCP Server的配置\n- 获取Neutron Network的信息\n- 获取Neutron Security Group的信息\n- Neutron 创建Port对象，是一个Tap device，当然真正的设备还没有创建\n\n***Cinder***\nNova Compute在与Neutron交互的过程中，也会与Cinder交互，申请块存储资源:\n\n- Cinder API请求创建一个Volume\n- Cinder Scheduler在多个Cinder Volume里面选择一个，也是先Filter再weighting的过程，可以根据总空间的大小，也可以根据分配的情况\n- Cinder Volume创建一个iscsi target\n- Cinder Volume创建一个LVM volume，加入iscsi target\n- compute节点连接iscsi target，从而volume出现在compute节点上\n\n***Libvert Driver***\n在与上述两个组件交互完毕之后，已经获取了网络资源和块存储，Nova Compute就会调用Libvirt Driver创建虚拟机。\n\nLibvert Driver首先会和Glance交互申请镜像下载：\n\n- 从Glance下载Image，作为base\n- 基于base image，创建qcow2的image\n- resize image的大小，和filesystem的大小无关\n- 配置configuration drive\n- 配置文件注入\n\n就这样，所有的信息都已经齐全，生成了虚拟机的libvert配置xml文件，可以调用Libvert来创建虚拟机。\n\n在创建虚拟机的过程中，有非常重要的两步，Libvert会把虚机Plug到bridge上生成一个Tap口，同时也会挂载从Cinder申请的块存储。此后虚拟机会通过网络DHCP服务，Metadata服务等获取配置。\n\n\n\n参考文献：\nhttp://smilejay.com/2013/03/libvirt-api-introduction/\nhttp://blog.csdn.net/gaoxingnengjisuan/article/details/9674315\n[(KVM连载) 6.1.3 libvirt、libvirtd的配置和使用](http://smilejay.com/2013/03/libvirt-configuration-and-usage/)","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-20] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-23-【OpenStack源码分析之十】虚机启动流程中Nova Compute与周边组件的交互.markdown [pool-2-thread-20] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之十】虚机启动流程中Nova Compute与周边组件的交互》成功 [pool-2-thread-20] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75208757 [pool-2-thread-15] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":75208757,"title":"【OpenStack源码分析之二】RabbitMQ分析","create_at":"\/Date(1500200868000)\/","create":"2017-07-16 06:27:48","view_count":140,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前言正在捋Nova的代码，从服务启动的入口这块就用到了第三方的Oslo_messaging库，可能也是因为消息中间件确实是整个软件的瓶颈，Oslo_messaging试图隔离出消息中间件和应用之间的接口，使得不仅仅可以使用RabbitMQ,也可以使用Kafka等其他中间件。RabbitMQ介绍这里十分感谢anzhsoft的技术专栏http://blog.csdn.net/column/details","url":"http://blog.csdn.net/BLACKMOON88/article/details/75208757","categories":"云计算,Python相关,OpenStack","tags":"openstack,源码,消息中间件,中间件,技术","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e正在捋Nova的代码，从服务启动的入口这块就用到了第三方的Oslo_messaging库，可能也是因为消息中间件确实是整个软件的瓶颈，Oslo_messaging试图隔离出消息中间件和应用之间的接口，使得不仅仅可以使用RabbitMQ,也可以使用Kafka等其他中间件。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"rabbitmq介绍\"\u003eRabbitMQ介绍\u003c/h3\u003e\n\n\u003cp\u003e这里十分感谢anzhsoft的技术专栏\u003ca href=\"http://blog.csdn.net/column/details/rabbitmq.html\" target=\"_blank\"\u003ehttp://blog.csdn.net/column/details/rabbitmq.html\u003c/a\u003e；把RobbitMQ这款中间件工具从使用者的视角写得很全面，我也不想深究里面的细节，在anzhsoft的基础之上我再提取一些用户关心的信息。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"历史\"\u003e\u003cstrong\u003e历史\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003eRabbitMQ是一个由erlang开发的AMQP（Advanced Message Queue ）的开源实现。AMQP 的出现其实也是应了广大人民群众的需求，虽然在同步消息通讯的世界里有很多公开标准（如 COBAR的 IIOP ，或者是 SOAP 等），但是在异步消息处理中却不是这样，只有大企业有一些商业实现（如微软的 MSMQ ，IBM 的 Websphere MQ 等），因此，在 2006 年的 6 月，Cisco 、Redhat、iMatix 等联合制定了 AMQP 的公开标准。 \u003cbr\u003e\n\u003cimg src=\"http://images2015.cnblogs.com/blog/434101/201601/434101-20160124205249375-897662551.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nRabbitMQ是由RabbitMQ Technologies Ltd开发并且提供商业支持的。该公司在2010年4月被SpringSource（VMWare的一个部门）收购。在2013年5月被并入Pivotal。其实VMWare，Pivotal和EMC本质上是一家的。不同的是VMWare是独立上市子公司，而Pivotal是整合了EMC的某些资源，现在并没有上市。\u003c/p\u003e\n\n\u003cp\u003eRabbitMQ的官网是\u003ca href=\"http://www.rabbitmq.com\" target=\"_blank\"\u003ehttp://www.rabbitmq.com\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch4 id=\"架构术语\"\u003e\u003cstrong\u003e架构术语\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"http://images2015.cnblogs.com/blog/434101/201601/434101-20160124204752953-1513084258.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n1.Server(broker): 接受客户端连接，实现AMQP消息队列和路由功能的进程。\u003c/p\u003e\n\n\u003cp\u003e2.Virtual Host:其实是一个虚拟概念，类似于权限控制组，一个Virtual Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual Host\u003c/p\u003e\n\n\u003cp\u003e3.Exchange:接受生产者发送的消息，并根据Binding规则将消息路由给服务器中的队列。ExchangeType决定了Exchange路由消息的行为，例如，在RabbitMQ中，ExchangeType有direct、Fanout和Topic三种，不同类型的Exchange路由的行为是不一样的。\u003c/p\u003e\n\n\u003cp\u003e4.Message Queue：消息队列，用于存储还未被消费者消费的消息。\u003c/p\u003e\n\n\u003cp\u003e5.Message: 由Header和Body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。\u003c/p\u003e\n\n\u003cp\u003e6.Binding:Binding联系了Exchange与Message Queue。Exchange在与多个Message Queue发生Binding后会生成一张路由表，路由表中存储着Message Queue所需消息的限制条件即Binding Key。当Exchange收到Message时会解析其Header得到Routing Key，Exchange根据Routing Key与Exchange Type将Message路由到Message Queue。Binding Key由Consumer在Binding Exchange与Message Queue时指定，而Routing Key由Producer发送Message时指定，两者的匹配方式由Exchange Type决定。 \u003c/p\u003e\n\n\u003cp\u003e7.Connection:连接，对于RabbitMQ而言，其实就是一个位于客户端和Broker之间的TCP连接。\u003c/p\u003e\n\n\u003cp\u003e8.Channel:信道，仅仅创建了客户端到Broker之间的连接后，客户端还是不能发送消息的。需要为每一个Connection创建Channel，AMQP协议规定只有通过Channel才能执行AMQP的命令。一个Connection可以包含多个Channel。之所以需要Channel，是因为TCP连接的建立和释放都是十分昂贵的，如果一个客户端每一个线程都需要与Broker交互，如果每一个线程都建立一个TCP连接，暂且不考虑TCP连接是否浪费，就算操作系统也无法承受每秒建立如此多的TCP连接。RabbitMQ建议客户端线程之间不要共用Channel，至少要保证共用Channel的线程发送消息必须是串行的，但是建议尽量共用Connection。\u003c/p\u003e\n\n\u003cp\u003e9.Command:AMQP的命令，客户端通过Command完成与AMQP服务器的交互来实现自身的逻辑。例如在RabbitMQ中，客户端可以通过publish命令发送消息，txSelect开启一个事务，txCommit提交一个事务。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"应用场景\"\u003e\u003cstrong\u003e应用场景\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景1：单发送单接收\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n这个场景比较简单，只是个Helllo word，并没有太大的实际用途。不过要注意的是Queue和Binding的CURD权限，生产者和消费者是有的，但是vHost和Exchange的权限他们并没有，因为前者和特定用户相关，后者则是多个用户共享使用的。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-one-overall.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nsend.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027hello\u0027\u003c/span\u003e)  \n\nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                      routing_key=\u003cspan class=\"hljs-string\"\u003e\u0027hello\u0027\u003c/span\u003e,  \n                      body=\u003cspan class=\"hljs-string\"\u003e\u0027Hello World!\u0027\u003c/span\u003e)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent \u0027Hello World!\u0027\"\u003c/span\u003e  \nconnection.close() \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ereceive.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027hello\u0027\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for messages. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Received %r\"\u003c/span\u003e % (body,)  \n\nchannel.basic_consume(callback,  \n                      queue=\u003cspan class=\"hljs-string\"\u003e\u0027hello\u0027\u003c/span\u003e,  \n                      no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nchannel.start_consuming()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景2：任务分发\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-two.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n这种场景是有实际用途的，比如Job的调度，所以Rabbit在这个场景上做了HA的保障工作以及调度的优化：\u003c/p\u003e\n\n\u003cp\u003e为了防止消息丢失做了持久化；防止消息不被处理又增加了消息确认机制。这里面要注意，Consumer端在完成任务处理之后要回复ACK，否则后果很严重。当Consumer退出时，Message会重新分发。然后RabbitMQ会占用越来越多的内存，由于RabbitMQ会长时间运行，可能导致“内存泄漏”。\u003c/p\u003e\n\n\u003cp\u003e在Job的调度这块支持多种算法，除了round robin机制还有Fair dispatch 公平分发机制，通过 basic.qos 方法设置prefetch_count=1 。这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理一个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。\u003c/p\u003e\n\n\u003cp\u003enew_task.py script:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027task_queue\u0027\u003c/span\u003e, durable=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nmessage = \u003cspan class=\"hljs-string\"\u003e\u0027 \u0027\u003c/span\u003e.join(sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:]) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e  \nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                      routing_key=\u003cspan class=\"hljs-string\"\u003e\u0027task_queue\u0027\u003c/span\u003e,  \n                      body=message,  \n                      properties=pika.BasicProperties(  \n                         delivery_mode = \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e, \u003cspan class=\"hljs-comment\"\u003e# make message persistent  \u003c/span\u003e\n                      ))  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent %r\"\u003c/span\u003e % (message,)  \nconnection.close()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eworker.py script:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e time  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027task_queue\u0027\u003c/span\u003e, durable=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for messages. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Received %r\"\u003c/span\u003e % (body,)  \n    time.sleep( body.count(\u003cspan class=\"hljs-string\"\u003e\u0027.\u0027\u003c/span\u003e) )  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Done\"\u003c/span\u003e  \n    ch.basic_ack(delivery_tag = method.delivery_tag)  \n\nchannel.basic_qos(prefetch_count=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)  \nchannel.basic_consume(callback,  \n                      queue=\u003cspan class=\"hljs-string\"\u003e\u0027task_queue\u0027\u003c/span\u003e)  \n\nchannel.start_consuming() \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景3：Pub-Sub\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n使用场景：发布、订阅模式，发送端发送广播消息，多个接收端接收。这个场景应用空间很广阔，尤其是在大型软件内部的子系统之间的消息传递。不过和前两者在使用上不同的是这里需要用到Exchange，类似于一个Router把消息转发到消费者Binding的消息队列上。 \u003cbr\u003e\n\u003cimg src=\"http://images.cnitblog.com/i/434101/201408/171657207955618.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nemit_log.py script:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\nimport pika  \nimport sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027fanout\u0027\u003c/span\u003e)  \n\nmessage = \u003cspan class=\"hljs-string\"\u003e\u0027 \u0027\u003c/span\u003e.\u003cspan class=\"hljs-keyword\"\u003ejoin\u003c/span\u003e(sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:]) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"info: Hello World!\"\u003c/span\u003e  \nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027logs\u0027\u003c/span\u003e,  \n                      routing_key=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                      body=message)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent \u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e\"\u003c/span\u003e % (message,)  \nconnection.\u003cspan class=\"hljs-keyword\"\u003eclose\u003c/span\u003e()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e还有一点要注意的是我们声明了exchange。publish到一个不存在的exchange是被禁止的。如果没有queue bindings exchange的话，log是被丢弃的。 \u003cbr\u003e\nConsumer：receive_logs.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027fanout\u0027\u003c/span\u003e)  \n\nresult = channel.queue_declare(exclusive=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \nqueue_name = result.method.queue  \n\nchannel.queue_bind(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027logs\u0027\u003c/span\u003e,  \n                   queue=queue_name)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for logs. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] %r\"\u003c/span\u003e % (body,)  \n\nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nchannel.start_consuming()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景4：Routing 消息路由\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n上篇文章中，我们构建了一个简单的日志系统。接下来，我们将丰富它：能够使用不同的severity来监听不同等级的log。比如我们希望只有error的log才保存到磁盘上。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eDirect exchange \u003cbr\u003e\nDirect exchange的路由算法非常简单：通过binding key的完全匹配，可以通过下图来说明。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/direct-exchange.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nexchange X和两个queue绑定在一起。Q1的binding key是orange。Q2的binding key是black和green。 \u003cbr\u003e\n当P publish key是orange时，exchange会把它放到Q1。如果是black或者green那么就会到Q2。其余的Message都会被丢弃。\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMultiple bindings \u003cbr\u003e\n多个queue绑定同一个key是可以的。对于下图的例子，Q1和Q2都绑定了black。也就是说，对于routing key是black的Message，会被deliver到Q1和Q2。其余的Message都会被丢弃。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/direct-exchange-multiple.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e最终代码： \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-four.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nThe code for emit_log_direct.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs perl\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\nimport pika  \nimport sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027direct_logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027direct\u0027\u003c/span\u003e)  \n\nseverity = sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e len(sys.argv) &gt; \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027info\u0027\u003c/span\u003e  \nmessage = \u003cspan class=\"hljs-string\"\u003e\u0027 \u0027\u003c/span\u003e.\u003cspan class=\"hljs-keyword\"\u003ejoin\u003c/span\u003e(sys.argv[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e:]) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027Hello World!\u0027\u003c/span\u003e  \nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027direct_logs\u0027\u003c/span\u003e,  \n                      routing_key=severity,  \n                      body=message)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent \u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e:\u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e\"\u003c/span\u003e % (severity, message)  \nconnection.\u003cspan class=\"hljs-keyword\"\u003eclose\u003c/span\u003e() \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe code for receive_logs_direct.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027direct_logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027direct\u0027\u003c/span\u003e)  \n\nresult = channel.queue_declare(exclusive=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \nqueue_name = result.method.queue  \n\nseverities = sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:]  \n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e severities:  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e &gt;&gt; sys.stderr, \u003cspan class=\"hljs-string\"\u003e\"Usage: %s [info] [warning] [error]\"\u003c/span\u003e % \\  \n                         (sys.argv[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e],)  \n    sys.exit(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e severity \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e severities:  \n    channel.queue_bind(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027direct_logs\u0027\u003c/span\u003e,  \n                       queue=queue_name,  \n                       routing_key=severity)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for logs. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] %r:%r\"\u003c/span\u003e % (method.routing_key, body,)  \n\nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nchannel.start_consuming()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景5：使用主题Topic进行消息分发\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n在上文中，我们实现了一个简单的日志系统。Consumer可以监听不同severity的log。但是，这也是它之所以叫做简单日志系统的原因，因为是仅仅能够通过severity设定。不支持更多的标准。\u003c/p\u003e\n\n\u003cp\u003e比如syslog unix的日志工具，它可以通过severity (info/warn/crit…) 和模块(auth/cron/kern…)。这可能更是我们想要的：我们可以仅仅需要cron模块的log。\u003c/p\u003e\n\n\u003cp\u003e为了实现类似的功能，我们需要用到topic exchange。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-five.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n现在我们要refine我们上篇的日志系统。routing keys 有两个部分: “.”。\u003c/p\u003e\n\n\u003cp\u003eThe code for emit_log_topic.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs perl\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\nimport pika  \nimport sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027topic_logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027topic\u0027\u003c/span\u003e)  \n\nrouting_key = sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e] \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e len(sys.argv) &gt; \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027anonymous.info\u0027\u003c/span\u003e  \nmessage = \u003cspan class=\"hljs-string\"\u003e\u0027 \u0027\u003c/span\u003e.\u003cspan class=\"hljs-keyword\"\u003ejoin\u003c/span\u003e(sys.argv[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e:]) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027Hello World!\u0027\u003c/span\u003e  \nchannel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027topic_logs\u0027\u003c/span\u003e,  \n                      routing_key=routing_key,  \n                      body=message)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Sent \u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e:\u003cspan class=\"hljs-variable\"\u003e%r\u003c/span\u003e\"\u003c/span\u003e % (routing_key, message)  \nconnection.\u003cspan class=\"hljs-keyword\"\u003eclose\u003c/span\u003e()  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe code for receive_logs_topic.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e sys  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \nchannel = connection.channel()  \n\nchannel.exchange_declare(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027topic_logs\u0027\u003c/span\u003e,  \n                         type=\u003cspan class=\"hljs-string\"\u003e\u0027topic\u0027\u003c/span\u003e)  \n\nresult = channel.queue_declare(exclusive=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \nqueue_name = result.method.queue  \n\nbinding_keys = sys.argv[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:]  \n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e binding_keys:  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e &gt;&gt; sys.stderr, \u003cspan class=\"hljs-string\"\u003e\"Usage: %s [binding_key]...\"\u003c/span\u003e % (sys.argv[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e],)  \n    sys.exit(\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e binding_key \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e binding_keys:  \n    channel.queue_bind(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027topic_logs\u0027\u003c/span\u003e,  \n                       queue=queue_name,  \n                       routing_key=binding_key)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\u0027 [*] Waiting for logs. To exit press CTRL+C\u0027\u003c/span\u003e  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, properties, body)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] %r:%r\"\u003c/span\u003e % (method.routing_key, body,)  \n\nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n\nchannel.start_consuming() \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景6：适用于云计算集群的远程调用(RPC)\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n在云计算环境中，很多时候需要用它其他机器的计算资源，我们有可能会在接收到Message进行处理时，会把一部分计算任务分配到其他节点来完成。那么，RabbitMQ如何使用RPC呢？在本篇文章中，我们将会通过其它节点求来斐波纳契完成示例，同前几种使用场景不同，在这个场景下需要返回调用结果。 \u003cbr\u003e\n\u003cimg src=\"http://www.rabbitmq.com/img/tutorials/python-six.png\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\nclient发送请求的Message然后server返回响应结果。为了收到响应client在publish message时需要提供一个”callback“（回调）的queue地址。这又有其他问题了：收到响应后它无法确定是否是它的，因为所有的响应都写到同一个queue了。上一小节的correlation_id在这种情况下就派上用场了：对于每个request，都设置唯一的一个值，在收到响应后，通过这个值就可以判断是否是自己的响应。如果不是自己的响应，就不去处理。\u003c/p\u003e\n\n\u003cp\u003eAMQP 预定义了14个属性。它们中的绝大多很少会用到。以下几个是平时用的比较多的：\u003c/p\u003e\n\n\u003cp\u003edelivery_mode: 持久化一个Message（通过设定值为2）。其他任意值都是非持久化。请移步RabbitMQ消息队列（三）：任务分发机制 \u003cbr\u003e\ncontent_type: 描述mime-type 的encoding。比如设置为JSON编码：设置该property为application/json。 \u003cbr\u003e\nreply_to: 一般用来指明用于回调的queue（Commonly used to name a callback queue）。 \u003cbr\u003e\ncorrelation_id: 在请求中关联处理RPC响应（correlate RPC responses with requests）。 \u003cbr\u003e\n 工作流程：\u003c/p\u003e\n\n\u003cp\u003e当客户端启动时，它创建了匿名的exclusive callback queue. \u003cbr\u003e\n- 客户端的RPC请求时将同时设置两个properties： reply_to设置为callback queue；correlation_id设置为每个request一个独一无二的值. \u003cbr\u003e\n- 请求将被发送到an rpc_queue queue. \u003cbr\u003e\n- RPC端或者说server一直在等待那个queue的请求。当请求到达时，它将通过在reply_to指定的queue回复一个message给client。 \u003cbr\u003e\n- client一直等待callback queue的数据。当message到达时，它将检查correlation_id的值，如果值和它request发送时的一致那么就将返回响应。\u003c/p\u003e\n\n\u003cp\u003eThe code for rpc_client.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e uuid  \n\n\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFibonacciRpcClient\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(object)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003e__init__\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(self)\u003c/span\u003e:\u003c/span\u003e  \n        self.connection = pika.BlockingConnection(pika.ConnectionParameters(  \n                host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \n\n        self.channel = self.connection.channel()  \n\n        result = self.channel.queue_declare(exclusive=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)  \n        self.callback_queue = result.method.queue  \n\n        self.channel.basic_consume(self.on_response, no_ack=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e,  \n                                   queue=self.callback_queue)  \n\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eon_response\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(self, ch, method, props, body)\u003c/span\u003e:\u003c/span\u003e  \n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e self.corr_id == props.correlation_id:  \n            self.response = body  \n\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecall\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(self, n)\u003c/span\u003e:\u003c/span\u003e  \n        self.response = \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e  \n        self.corr_id = str(uuid.uuid4())  \n        self.channel.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                                   routing_key=\u003cspan class=\"hljs-string\"\u003e\u0027rpc_queue\u0027\u003c/span\u003e,  \n                                   properties=pika.BasicProperties(  \n                                         reply_to = self.callback_queue,  \n                                         correlation_id = self.corr_id,  \n                                         ),  \n                                   body=str(n))  \n        \u003cspan class=\"hljs-keyword\"\u003ewhile\u003c/span\u003e self.response \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eNone\u003c/span\u003e:  \n            self.connection.process_data_events()  \n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e int(self.response)  \n\nfibonacci_rpc = FibonacciRpcClient()  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Requesting fib(30)\"\u003c/span\u003e  \nresponse = fibonacci_rpc.call(\u003cspan class=\"hljs-number\"\u003e30\u003c/span\u003e)  \n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [.] Got %r\"\u003c/span\u003e % (response,) \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe code for rpc_server.py:\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-comment\"\u003e#!/usr/bin/env python  \u003c/span\u003e\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u003cspan class=\"hljs-string\"\u003e\u0027localhost\u0027\u003c/span\u003e))  \n\nchannel = connection.channel()  \n\nchannel.queue_declare(queue=\u003cspan class=\"hljs-string\"\u003e\u0027rpc_queue\u0027\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efib\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(n)\u003c/span\u003e:\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e n == \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e:  \n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eelif\u003c/span\u003e n == \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e:  \n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e  \n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e:  \n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e fib(n-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e) + fib(n-\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eon_request\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ch, method, props, body)\u003c/span\u003e:\u003c/span\u003e  \n    n = int(body)  \n\n    \u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [.] fib(%s)\"\u003c/span\u003e  % (n,)  \n    response = fib(n)  \n\n    ch.basic_publish(exchange=\u003cspan class=\"hljs-string\"\u003e\u0027\u0027\u003c/span\u003e,  \n                     routing_key=props.reply_to,  \n                     properties=pika.BasicProperties(correlation_id = \\  \n                                                     props.correlation_id),  \n                     body=str(response))  \n    ch.basic_ack(delivery_tag = method.delivery_tag)  \n\nchannel.basic_qos(prefetch_count=\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e)  \nchannel.basic_consume(on_request, queue=\u003cspan class=\"hljs-string\"\u003e\u0027rpc_queue\u0027\u003c/span\u003e)  \n\n\u003cspan class=\"hljs-keyword\"\u003eprint\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\" [x] Awaiting RPC requests\"\u003c/span\u003e  \nchannel.start_consuming()  \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e场景7：消息队列的小伙伴: ProtoBuf（Google Protocol Buffer）\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nProtoBuf是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 C++、Java、Python 三种语言的 API。\u003c/p\u003e\n\n\u003cp\u003eRabbitMQ支持使用不同的序列化工具来进行编码，ProtoBuf和XML, Json相较而言是目前市面上性能最好的。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20140224152341640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYW56aHNvZnQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"publisher的消息确认机制\"\u003ePublisher的消息确认机制\u003c/h3\u003e\n\n\u003cp\u003e在前面的文章中提到了queue和consumer之间的消息确认机制：通过设置ack。那么Publisher能不到知道他post的Message有没有到达queue，甚至更近一步，是否被某个Consumer处理呢？毕竟对于一些非常重要的数据，可能Publisher需要确认某个消息已经被正确处理。\u003c/p\u003e\n\n\u003cp\u003e在我们的系统中，我们没有是实现这种确认，也就是说，不管Message是否被Consume了，Publisher不会去care。他只是将自己的状态publish给上层，由上层的逻辑去处理。如果Message没有被正确处理，可能会导致某些状态丢失。但是由于提供了其他强制刷新全部状态的机制，因此这种异常情况的影响也就可以忽略不计了。\u003c/p\u003e\n\n\u003cp\u003e对于某些异步操作，比如客户端需要创建一个FileSystem，这个可能需要比较长的时间，甚至要数秒钟。这时候通过RPC可以解决这个问题。因此也就不存在Publisher端的确认机制了。\u003c/p\u003e\n\n\u003cp\u003e那么，有没有一种机制能保证Publisher能够感知它的Message有没有被处理的？答案肯定的。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e事务机制 VS Publisher Confirm\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n 如果采用标准的 AMQP 协议，则唯一能够保证消息不会丢失的方式是利用事务机制 – 令 channel 处于 transactional 模式、向其 publish 消息、执行 commit 动作。在这种方式下，事务机制会带来大量的多余开销，并会导致吞吐量下降 250% 。为了补救事务带来的问题，引入了 confirmation 机制（即 Publisher Confirm）。\u003c/p\u003e\n\n\u003cp\u003e为了使能 confirm 机制，client 首先要发送 confirm.select 方法帧。取决于是否设置了 no-wait 属性，broker 会相应的判定是否以 confirm.select-ok 进行应答。一旦在 channel 上使用 confirm.select方法，channel 就将处于 confirm 模式。处于 transactional 模式的 channel 不能再被设置成 confirm 模式，反之亦然。\u003c/p\u003e\n\n\u003cp\u003e一旦 channel 处于 confirm 模式，broker 和 client 都将启动消息计数（以 confirm.select 为基础从 1 开始计数）。broker 会在处理完消息后，在当前 channel 上通过发送 basic.ack 的方式对其进行 confirm 。delivery-tag 域的值标识了被 confirm 消息的序列号。broker 也可以通过设置 basic.ack 中的 multiple 域来表明到指定序列号为止的所有消息都已被 broker 正确的处理了。\u003c/p\u003e\n\n\u003cp\u003e在异常情况中，broker 将无法成功处理相应的消息，此时 broker 将发送 basic.nack 来代替 basic.ack 。在这个情形下，basic.nack 中各域值的含义与 basic.ack 中相应各域含义是相同的，同时 requeue 域的值应该被忽略。通过 nack 一或多条消息，broker 表明自身无法对相应消息完成处理，并拒绝为这些消息的处理负责。在这种情况下，client 可以选择将消息 re-publish 。\u003c/p\u003e\n\n\u003cp\u003e在 channel 被设置成 confirm 模式之后，所有被 publish 的后续消息都将被 confirm（即 ack） 或者被 nack 一次。但是没有对消息被 confirm 的快慢做任何保证，并且同一条消息不会既被 confirm 又被 nack 。\u003c/p\u003e\n\n\u003cp\u003e参考资料： \u003cbr\u003e\n\u003ca href=\"http://blog.csdn.net/column/details/rabbitmq.html\"\u003ehttp://blog.csdn.net/column/details/rabbitmq.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://www.cnblogs.com/luxiaoxun/p/3918054.html\"\u003ehttp://www.cnblogs.com/luxiaoxun/p/3918054.html\u003c/a\u003e\u003c/p\u003e","markdowncontent":"###前言\n正在捋Nova的代码，从服务启动的入口这块就用到了第三方的Oslo_messaging库，可能也是因为消息中间件确实是整个软件的瓶颈，Oslo_messaging试图隔离出消息中间件和应用之间的接口，使得不仅仅可以使用RabbitMQ,也可以使用Kafka等其他中间件。\n###RabbitMQ介绍\n这里十分感谢anzhsoft的技术专栏http://blog.csdn.net/column/details/rabbitmq.html；把RobbitMQ这款中间件工具从使用者的视角写得很全面，我也不想深究里面的细节，在anzhsoft的基础之上我再提取一些用户关心的信息。\n####**历史**\nRabbitMQ是一个由erlang开发的AMQP（Advanced Message Queue ）的开源实现。AMQP 的出现其实也是应了广大人民群众的需求，虽然在同步消息通讯的世界里有很多公开标准（如 COBAR的 IIOP ，或者是 SOAP 等），但是在异步消息处理中却不是这样，只有大企业有一些商业实现（如微软的 MSMQ ，IBM 的 Websphere MQ 等），因此，在 2006 年的 6 月，Cisco 、Redhat、iMatix 等联合制定了 AMQP 的公开标准。\n![这里写图片描述](http://images2015.cnblogs.com/blog/434101/201601/434101-20160124205249375-897662551.png)\nRabbitMQ是由RabbitMQ Technologies Ltd开发并且提供商业支持的。该公司在2010年4月被SpringSource（VMWare的一个部门）收购。在2013年5月被并入Pivotal。其实VMWare，Pivotal和EMC本质上是一家的。不同的是VMWare是独立上市子公司，而Pivotal是整合了EMC的某些资源，现在并没有上市。\n\nRabbitMQ的官网是http://www.rabbitmq.com\n####**架构术语**\n![这里写图片描述](http://images2015.cnblogs.com/blog/434101/201601/434101-20160124204752953-1513084258.png)\n1.Server(broker): 接受客户端连接，实现AMQP消息队列和路由功能的进程。\n\n2.Virtual Host:其实是一个虚拟概念，类似于权限控制组，一个Virtual Host里面可以有若干个Exchange和Queue，但是权限控制的最小粒度是Virtual Host\n\n3.Exchange:接受生产者发送的消息，并根据Binding规则将消息路由给服务器中的队列。ExchangeType决定了Exchange路由消息的行为，例如，在RabbitMQ中，ExchangeType有direct、Fanout和Topic三种，不同类型的Exchange路由的行为是不一样的。\n\n4.Message Queue：消息队列，用于存储还未被消费者消费的消息。\n\n5.Message: 由Header和Body组成，Header是由生产者添加的各种属性的集合，包括Message是否被持久化、由哪个Message Queue接受、优先级是多少等。而Body是真正需要传输的APP数据。\n\n6.Binding:Binding联系了Exchange与Message Queue。Exchange在与多个Message Queue发生Binding后会生成一张路由表，路由表中存储着Message Queue所需消息的限制条件即Binding Key。当Exchange收到Message时会解析其Header得到Routing Key，Exchange根据Routing Key与Exchange Type将Message路由到Message Queue。Binding Key由Consumer在Binding Exchange与Message Queue时指定，而Routing Key由Producer发送Message时指定，两者的匹配方式由Exchange Type决定。 \n\n7.Connection:连接，对于RabbitMQ而言，其实就是一个位于客户端和Broker之间的TCP连接。\n\n8.Channel:信道，仅仅创建了客户端到Broker之间的连接后，客户端还是不能发送消息的。需要为每一个Connection创建Channel，AMQP协议规定只有通过Channel才能执行AMQP的命令。一个Connection可以包含多个Channel。之所以需要Channel，是因为TCP连接的建立和释放都是十分昂贵的，如果一个客户端每一个线程都需要与Broker交互，如果每一个线程都建立一个TCP连接，暂且不考虑TCP连接是否浪费，就算操作系统也无法承受每秒建立如此多的TCP连接。RabbitMQ建议客户端线程之间不要共用Channel，至少要保证共用Channel的线程发送消息必须是串行的，但是建议尽量共用Connection。\n\n9.Command:AMQP的命令，客户端通过Command完成与AMQP服务器的交互来实现自身的逻辑。例如在RabbitMQ中，客户端可以通过publish命令发送消息，txSelect开启一个事务，txCommit提交一个事务。\n\n####**应用场景**\n***场景1：单发送单接收***\n这个场景比较简单，只是个Helllo word，并没有太大的实际用途。不过要注意的是Queue和Binding的CURD权限，生产者和消费者是有的，但是vHost和Exchange的权限他们并没有，因为前者和特定用户相关，后者则是多个用户共享使用的。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-one-overall.png)\nsend.py:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027hello\u0027)  \n  \nchannel.basic_publish(exchange=\u0027\u0027,  \n                      routing_key=\u0027hello\u0027,  \n                      body=\u0027Hello World!\u0027)  \nprint \" [x] Sent \u0027Hello World!\u0027\"  \nconnection.close() \n```\nreceive.py:\n``` Python\n#!/usr/bin/env python  \nimport pika  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027hello\u0027)  \n  \nprint \u0027 [*] Waiting for messages. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] Received %r\" % (body,)  \n  \nchannel.basic_consume(callback,  \n                      queue=\u0027hello\u0027,  \n                      no_ack=True)  \n  \nchannel.start_consuming()  \n```\n***场景2：任务分发***\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-two.png)\n这种场景是有实际用途的，比如Job的调度，所以Rabbit在这个场景上做了HA的保障工作以及调度的优化：\n\n为了防止消息丢失做了持久化；防止消息不被处理又增加了消息确认机制。这里面要注意，Consumer端在完成任务处理之后要回复ACK，否则后果很严重。当Consumer退出时，Message会重新分发。然后RabbitMQ会占用越来越多的内存，由于RabbitMQ会长时间运行，可能导致“内存泄漏”。\n\n在Job的调度这块支持多种算法，除了round robin机制还有Fair dispatch 公平分发机制，通过 basic.qos 方法设置prefetch_count=1 。这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理一个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。\n\nnew_task.py script:\n```Python\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027task_queue\u0027, durable=True)  \n  \nmessage = \u0027 \u0027.join(sys.argv[1:]) or \"Hello World!\"  \nchannel.basic_publish(exchange=\u0027\u0027,  \n                      routing_key=\u0027task_queue\u0027,  \n                      body=message,  \n                      properties=pika.BasicProperties(  \n                         delivery_mode = 2, # make message persistent  \n                      ))  \nprint \" [x] Sent %r\" % (message,)  \nconnection.close()  \n```\nworker.py script:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \nimport time  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027task_queue\u0027, durable=True)  \nprint \u0027 [*] Waiting for messages. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] Received %r\" % (body,)  \n    time.sleep( body.count(\u0027.\u0027) )  \n    print \" [x] Done\"  \n    ch.basic_ack(delivery_tag = method.delivery_tag)  \n  \nchannel.basic_qos(prefetch_count=1)  \nchannel.basic_consume(callback,  \n                      queue=\u0027task_queue\u0027)  \n  \nchannel.start_consuming() \n```\n***场景3：Pub-Sub***\n使用场景：发布、订阅模式，发送端发送广播消息，多个接收端接收。这个场景应用空间很广阔，尤其是在大型软件内部的子系统之间的消息传递。不过和前两者在使用上不同的是这里需要用到Exchange，类似于一个Router把消息转发到消费者Binding的消息队列上。\n![这里写图片描述](http://images.cnitblog.com/i/434101/201408/171657207955618.png)\nemit_log.py script:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027logs\u0027,  \n                         type=\u0027fanout\u0027)  \n  \nmessage = \u0027 \u0027.join(sys.argv[1:]) or \"info: Hello World!\"  \nchannel.basic_publish(exchange=\u0027logs\u0027,  \n                      routing_key=\u0027\u0027,  \n                      body=message)  \nprint \" [x] Sent %r\" % (message,)  \nconnection.close()  \n```\n还有一点要注意的是我们声明了exchange。publish到一个不存在的exchange是被禁止的。如果没有queue bindings exchange的话，log是被丢弃的。\nConsumer：receive_logs.py:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027logs\u0027,  \n                         type=\u0027fanout\u0027)  \n  \nresult = channel.queue_declare(exclusive=True)  \nqueue_name = result.method.queue  \n  \nchannel.queue_bind(exchange=\u0027logs\u0027,  \n                   queue=queue_name)  \n  \nprint \u0027 [*] Waiting for logs. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] %r\" % (body,)  \n  \nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=True)  \n  \nchannel.start_consuming()  \n```\n***场景4：Routing 消息路由***\n上篇文章中，我们构建了一个简单的日志系统。接下来，我们将丰富它：能够使用不同的severity来监听不同等级的log。比如我们希望只有error的log才保存到磁盘上。\n\n1. Direct exchange\nDirect exchange的路由算法非常简单：通过binding key的完全匹配，可以通过下图来说明。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/direct-exchange.png)\nexchange X和两个queue绑定在一起。Q1的binding key是orange。Q2的binding key是black和green。\n当P publish key是orange时，exchange会把它放到Q1。如果是black或者green那么就会到Q2。其余的Message都会被丢弃。\n\n2. Multiple bindings\n多个queue绑定同一个key是可以的。对于下图的例子，Q1和Q2都绑定了black。也就是说，对于routing key是black的Message，会被deliver到Q1和Q2。其余的Message都会被丢弃。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/direct-exchange-multiple.png)\n\n最终代码：\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-four.png)\nThe code for emit_log_direct.py:\n``` Python\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027direct_logs\u0027,  \n                         type=\u0027direct\u0027)  \n  \nseverity = sys.argv[1] if len(sys.argv) \u003e 1 else \u0027info\u0027  \nmessage = \u0027 \u0027.join(sys.argv[2:]) or \u0027Hello World!\u0027  \nchannel.basic_publish(exchange=\u0027direct_logs\u0027,  \n                      routing_key=severity,  \n                      body=message)  \nprint \" [x] Sent %r:%r\" % (severity, message)  \nconnection.close() \n```\nThe code for receive_logs_direct.py:\n\n```Python\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027direct_logs\u0027,  \n                         type=\u0027direct\u0027)  \n  \nresult = channel.queue_declare(exclusive=True)  \nqueue_name = result.method.queue  \n  \nseverities = sys.argv[1:]  \nif not severities:  \n    print \u003e\u003e sys.stderr, \"Usage: %s [info] [warning] [error]\" % \\  \n                         (sys.argv[0],)  \n    sys.exit(1)  \n  \nfor severity in severities:  \n    channel.queue_bind(exchange=\u0027direct_logs\u0027,  \n                       queue=queue_name,  \n                       routing_key=severity)  \n  \nprint \u0027 [*] Waiting for logs. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] %r:%r\" % (method.routing_key, body,)  \n  \nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=True)  \n  \nchannel.start_consuming()  \n```\n***场景5：使用主题Topic进行消息分发***\n在上文中，我们实现了一个简单的日志系统。Consumer可以监听不同severity的log。但是，这也是它之所以叫做简单日志系统的原因，因为是仅仅能够通过severity设定。不支持更多的标准。\n\n比如syslog unix的日志工具，它可以通过severity (info/warn/crit...) 和模块(auth/cron/kern...)。这可能更是我们想要的：我们可以仅仅需要cron模块的log。\n\n为了实现类似的功能，我们需要用到topic exchange。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-five.png)\n现在我们要refine我们上篇的日志系统。routing keys 有两个部分: \"\u003cfacility\u003e.\u003cseverity\u003e\"。\n\nThe code for emit_log_topic.py:\n```\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027topic_logs\u0027,  \n                         type=\u0027topic\u0027)  \n  \nrouting_key = sys.argv[1] if len(sys.argv) \u003e 1 else \u0027anonymous.info\u0027  \nmessage = \u0027 \u0027.join(sys.argv[2:]) or \u0027Hello World!\u0027  \nchannel.basic_publish(exchange=\u0027topic_logs\u0027,  \n                      routing_key=routing_key,  \n                      body=message)  \nprint \" [x] Sent %r:%r\" % (routing_key, message)  \nconnection.close()  \n```\nThe code for receive_logs_topic.py:\n\n```\n#!/usr/bin/env python  \nimport pika  \nimport sys  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \nchannel = connection.channel()  \n  \nchannel.exchange_declare(exchange=\u0027topic_logs\u0027,  \n                         type=\u0027topic\u0027)  \n  \nresult = channel.queue_declare(exclusive=True)  \nqueue_name = result.method.queue  \n  \nbinding_keys = sys.argv[1:]  \nif not binding_keys:  \n    print \u003e\u003e sys.stderr, \"Usage: %s [binding_key]...\" % (sys.argv[0],)  \n    sys.exit(1)  \n  \nfor binding_key in binding_keys:  \n    channel.queue_bind(exchange=\u0027topic_logs\u0027,  \n                       queue=queue_name,  \n                       routing_key=binding_key)  \n  \nprint \u0027 [*] Waiting for logs. To exit press CTRL+C\u0027  \n  \ndef callback(ch, method, properties, body):  \n    print \" [x] %r:%r\" % (method.routing_key, body,)  \n  \nchannel.basic_consume(callback,  \n                      queue=queue_name,  \n                      no_ack=True)  \n  \nchannel.start_consuming() \n```\n***场景6：适用于云计算集群的远程调用(RPC)***\n在云计算环境中，很多时候需要用它其他机器的计算资源，我们有可能会在接收到Message进行处理时，会把一部分计算任务分配到其他节点来完成。那么，RabbitMQ如何使用RPC呢？在本篇文章中，我们将会通过其它节点求来斐波纳契完成示例，同前几种使用场景不同，在这个场景下需要返回调用结果。\n![这里写图片描述](http://www.rabbitmq.com/img/tutorials/python-six.png)\nclient发送请求的Message然后server返回响应结果。为了收到响应client在publish message时需要提供一个”callback“（回调）的queue地址。这又有其他问题了：收到响应后它无法确定是否是它的，因为所有的响应都写到同一个queue了。上一小节的correlation_id在这种情况下就派上用场了：对于每个request，都设置唯一的一个值，在收到响应后，通过这个值就可以判断是否是自己的响应。如果不是自己的响应，就不去处理。\n\nAMQP 预定义了14个属性。它们中的绝大多很少会用到。以下几个是平时用的比较多的：\n\ndelivery_mode: 持久化一个Message（通过设定值为2）。其他任意值都是非持久化。请移步RabbitMQ消息队列（三）：任务分发机制\ncontent_type: 描述mime-type 的encoding。比如设置为JSON编码：设置该property为application/json。\nreply_to: 一般用来指明用于回调的queue（Commonly used to name a callback queue）。\ncorrelation_id: 在请求中关联处理RPC响应（correlate RPC responses with requests）。\n 工作流程：\n\n当客户端启动时，它创建了匿名的exclusive callback queue.\n- 客户端的RPC请求时将同时设置两个properties： reply_to设置为callback queue；correlation_id设置为每个request一个独一无二的值.\n- 请求将被发送到an rpc_queue queue.\n- RPC端或者说server一直在等待那个queue的请求。当请求到达时，它将通过在reply_to指定的queue回复一个message给client。\n- client一直等待callback queue的数据。当message到达时，它将检查correlation_id的值，如果值和它request发送时的一致那么就将返回响应。\n\nThe code for rpc_client.py:\n``` Python\n#!/usr/bin/env python  \nimport pika  \nimport uuid  \n  \nclass FibonacciRpcClient(object):  \n    def __init__(self):  \n        self.connection = pika.BlockingConnection(pika.ConnectionParameters(  \n                host=\u0027localhost\u0027))  \n  \n        self.channel = self.connection.channel()  \n  \n        result = self.channel.queue_declare(exclusive=True)  \n        self.callback_queue = result.method.queue  \n  \n        self.channel.basic_consume(self.on_response, no_ack=True,  \n                                   queue=self.callback_queue)  \n  \n    def on_response(self, ch, method, props, body):  \n        if self.corr_id == props.correlation_id:  \n            self.response = body  \n  \n    def call(self, n):  \n        self.response = None  \n        self.corr_id = str(uuid.uuid4())  \n        self.channel.basic_publish(exchange=\u0027\u0027,  \n                                   routing_key=\u0027rpc_queue\u0027,  \n                                   properties=pika.BasicProperties(  \n                                         reply_to = self.callback_queue,  \n                                         correlation_id = self.corr_id,  \n                                         ),  \n                                   body=str(n))  \n        while self.response is None:  \n            self.connection.process_data_events()  \n        return int(self.response)  \n  \nfibonacci_rpc = FibonacciRpcClient()  \n  \nprint \" [x] Requesting fib(30)\"  \nresponse = fibonacci_rpc.call(30)  \nprint \" [.] Got %r\" % (response,) \n```\nThe code for rpc_server.py:\n\n``` Python\n#!/usr/bin/env python  \nimport pika  \n  \nconnection = pika.BlockingConnection(pika.ConnectionParameters(  \n        host=\u0027localhost\u0027))  \n  \nchannel = connection.channel()  \n  \nchannel.queue_declare(queue=\u0027rpc_queue\u0027)  \n  \ndef fib(n):  \n    if n == 0:  \n        return 0  \n    elif n == 1:  \n        return 1  \n    else:  \n        return fib(n-1) + fib(n-2)  \n  \ndef on_request(ch, method, props, body):  \n    n = int(body)  \n  \n    print \" [.] fib(%s)\"  % (n,)  \n    response = fib(n)  \n  \n    ch.basic_publish(exchange=\u0027\u0027,  \n                     routing_key=props.reply_to,  \n                     properties=pika.BasicProperties(correlation_id = \\  \n                                                     props.correlation_id),  \n                     body=str(response))  \n    ch.basic_ack(delivery_tag = method.delivery_tag)  \n  \nchannel.basic_qos(prefetch_count=1)  \nchannel.basic_consume(on_request, queue=\u0027rpc_queue\u0027)  \n  \nprint \" [x] Awaiting RPC requests\"  \nchannel.start_consuming()  \n\n```\n***场景7：消息队列的小伙伴: ProtoBuf（Google Protocol Buffer）***\nProtoBuf是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 C++、Java、Python 三种语言的 API。\n\nRabbitMQ支持使用不同的序列化工具来进行编码，ProtoBuf和XML, Json相较而言是目前市面上性能最好的。\n![这里写图片描述](http://img.blog.csdn.net/20140224152341640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYW56aHNvZnQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n###Publisher的消息确认机制\n在前面的文章中提到了queue和consumer之间的消息确认机制：通过设置ack。那么Publisher能不到知道他post的Message有没有到达queue，甚至更近一步，是否被某个Consumer处理呢？毕竟对于一些非常重要的数据，可能Publisher需要确认某个消息已经被正确处理。\n\n在我们的系统中，我们没有是实现这种确认，也就是说，不管Message是否被Consume了，Publisher不会去care。他只是将自己的状态publish给上层，由上层的逻辑去处理。如果Message没有被正确处理，可能会导致某些状态丢失。但是由于提供了其他强制刷新全部状态的机制，因此这种异常情况的影响也就可以忽略不计了。\n\n对于某些异步操作，比如客户端需要创建一个FileSystem，这个可能需要比较长的时间，甚至要数秒钟。这时候通过RPC可以解决这个问题。因此也就不存在Publisher端的确认机制了。\n\n 那么，有没有一种机制能保证Publisher能够感知它的Message有没有被处理的？答案肯定的。\n\n***事务机制 VS Publisher Confirm***\n 如果采用标准的 AMQP 协议，则唯一能够保证消息不会丢失的方式是利用事务机制 -- 令 channel 处于 transactional 模式、向其 publish 消息、执行 commit 动作。在这种方式下，事务机制会带来大量的多余开销，并会导致吞吐量下降 250% 。为了补救事务带来的问题，引入了 confirmation 机制（即 Publisher Confirm）。\n\n为了使能 confirm 机制，client 首先要发送 confirm.select 方法帧。取决于是否设置了 no-wait 属性，broker 会相应的判定是否以 confirm.select-ok 进行应答。一旦在 channel 上使用 confirm.select方法，channel 就将处于 confirm 模式。处于 transactional 模式的 channel 不能再被设置成 confirm 模式，反之亦然。\n\n一旦 channel 处于 confirm 模式，broker 和 client 都将启动消息计数（以 confirm.select 为基础从 1 开始计数）。broker 会在处理完消息后，在当前 channel 上通过发送 basic.ack 的方式对其进行 confirm 。delivery-tag 域的值标识了被 confirm 消息的序列号。broker 也可以通过设置 basic.ack 中的 multiple 域来表明到指定序列号为止的所有消息都已被 broker 正确的处理了。\n\n在异常情况中，broker 将无法成功处理相应的消息，此时 broker 将发送 basic.nack 来代替 basic.ack 。在这个情形下，basic.nack 中各域值的含义与 basic.ack 中相应各域含义是相同的，同时 requeue 域的值应该被忽略。通过 nack 一或多条消息，broker 表明自身无法对相应消息完成处理，并拒绝为这些消息的处理负责。在这种情况下，client 可以选择将消息 re-publish 。\n\n在 channel 被设置成 confirm 模式之后，所有被 publish 的后续消息都将被 confirm（即 ack） 或者被 nack 一次。但是没有对消息被 confirm 的快慢做任何保证，并且同一条消息不会既被 confirm 又被 nack 。\n\n参考资料：\nhttp://blog.csdn.net/column/details/rabbitmq.html\nhttp://www.cnblogs.com/luxiaoxun/p/3918054.html","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-15] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-18-【OpenStack源码分析之四】WSGI与Nova API服务启动.markdown [pool-2-thread-23] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《对Python协程的理解》成功 [pool-2-thread-25] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之九】看 nova-scheduler 如何选择计算节点》成功 [pool-2-thread-24] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-04\2014-04-07-内存文件操作系统.markdown [pool-2-thread-3] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-16-【OpenStack源码分析之二】RabbitMQ分析.markdown [pool-2-thread-15] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之四】WSGI与Nova API服务启动》成功 [pool-2-thread-23] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《内存文件操作系统》成功 [pool-2-thread-3] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之二】RabbitMQ分析》成功 [pool-2-thread-15] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=38855273 [pool-2-thread-6] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75701576 [pool-2-thread-8] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75267742 [pool-2-thread-21] [chx]
[INFO] 2017-07-28 12:46:38 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=75790969 [pool-2-thread-4] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":75790969,"title":"【OpenStack源码分析之八】openstack中虚拟机在线迁移","create_at":"\/Date(1500717157000)\/","create":"2017-07-22 05:52:37","view_count":116,"comment_count":0,"comment_allowed":"true","type":"repost","channel":2,"digg":0,"bury":0,"description":"转自：https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/本文尝试回答与 Live migration 相关的几个问题：Live migration 是什么？为什么要做 Live migration？如何做 Live migration？如果你读完本文，基本了解了这三个问题的答案，","url":"http://blog.csdn.net/BLACKMOON88/article/details/75790969","categories":"云计算,OpenStack","tags":"openstack,源码,虚拟机,迁移","content":"\u003cp\u003e转自：\u003ca href=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/\" target=\"_blank\"\u003ehttps://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e本文尝试回答与 Live migration 相关的几个问题：Live migration 是什么？为什么要做 Live migration？如何做 Live migration？如果你读完本文，基本了解了这三个问题的答案， 这篇文章的主要目的也就达到了。由于本文介绍的是 OpenStack 平台上动态迁移的实现，所以读者必须对 OpenStack 有一定的了解。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"虚拟机迁移简介\"\u003e虚拟机迁移简介\u003c/h3\u003e\n\n\u003cp\u003e动态迁移包括两方面的意思，一是迁移(Migration)，迁移就是把用户的虚拟机从一台物理主机移到另外一台物理主机。二是动态，动态的意思就是在迁移的过程中，(1):虚拟机还开着机；(2):虚拟机的网路也不受影响；(3):而且上面的运行的用户程序依旧运行。整个过程对用户来说是透明的，对用户可以正常使用迁移途中的虚拟机。 \u003cbr\u003e\nOpenStack 支持两种类型的虚拟机迁移：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e冷迁移(Cold migration)- 冷迁移也叫静态迁移。在迁移过程中虚拟机必须关机，用户也不能访问虚拟机。因为要关机，所以他适用于用户对系统可用性要求不是很高的时候。\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e热迁移(Hot or live migration)- 热迁移也叫动态迁移。在迁移的过程中虚拟机仍旧工作，用户可以继续使用虚拟机。本文就介绍的就是这种类型的迁移。热迁移又分为下面二种类型：\u003c/p\u003e\n\n\u003cul\u003e\u003cli\u003e(1):虚拟机的数据存在共享磁盘上(Shared storage-based live migration),如图 1 所 示。\u003c/li\u003e\n\u003cli\u003e(2):虚拟机的数据存在本地磁盘(block migration)，如图 2 所示，需要对镜像文件和内存数据同时迁移。OpenStack 通过块迁移实现这这类迁移。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index880.png\" alt=\"图1\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index970.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"虚拟机迁移的作用\"\u003e虚拟机迁移的作用\u003c/h3\u003e\n\n\u003cp\u003e每个读者都可能会问这样一个问题，虚拟机用的好好的，为啥要迁移呀？也就是迁移的价值和目的在哪里。在数据中心的日常运维中，常常要处理下面几种场景和需求，了解了这些需求，这个问题也就有了答案。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e需求 1：物理机器硬件系统的维护，故障修复和升级(upgrade)，但运行在这台物理机器上的虚拟机不能关机，因为用户重要的服务跑在上面。\u003c/li\u003e\n\u003cli\u003e需求 2：物理机器软件系统升级，打补丁(patch)，为了不影响上面跑的虚拟机，在升级和打补丁之前，需要把虚拟机迁移到别的物理机器上。\u003c/li\u003e\n\u003cli\u003e需求 3：一个物理机器上的负载太重，需要减少一些虚拟机来释放资源。\u003c/li\u003e\n\u003cli\u003e需求 4：在一个 cluster 里，有的物理机上的虚拟机太多，有的物理机上虚拟机太少，需要做一下资源平衡。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e除了上面四个主要的需求，从服务的角度来看，Live migration 有下面两个好处：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e好处 1：软件和硬件系统的维护升级，不会影响用户的关键服务，提高了服务的高可用性和 用户的满意度。\u003c/li\u003e\n\u003cli\u003e好处 2：系统管理员不用加班加点，在大半夜进行系统升级了，在正常的工作时间就可以完成这项工作，减少了公司的维护费用。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e有这四个需求和两个好处，所以动态迁移值得一作。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"动态迁移方法和实现\"\u003e动态迁移方法和实现\u003c/h3\u003e\n\n\u003cp\u003e本章详细介绍在 OpenStack 里如何实现动态迁移。在第一节里，提到了有两种类型的动态迁移，本文只介绍图 2 所示的虚拟机的数据存在本地磁盘(block migration)的动态迁移。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"动态迁移的条件\"\u003e动态迁移的条件\u003c/h4\u003e\n\n\u003cp\u003e动态迁移是把虚拟机从一个物理主机迁移到另外一个物理主机，所以至少需要有两个物理主机作为计算节点。下面是一个最小的 OpenStack 配置。 三个物理主机，一个用来做 OpenStack 的控制节点，两个用来做计算节点。如图 3 所示。 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index1746.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e控制节点接受并处理动态迁移的请求，管理员可以从 Horizon、命令行、API 发起动态迁移。 动态迁移就是把客户的 VM 从计算节点 1 迁移到计算节点 2，或者从计算节点 2 迁移到计算节点 1，如图 4 所示。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index1888.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e计算节点上的 Hypervisor 是 KVM，操作系统是 redhat6.5，OpenStack 是 Juno。计算节点 1 和 2 上的虚拟机分别存储在本地文件系统，如图 2 所示。 \u003cbr\u003e\n上面提到的 Hypervisor 和 KVM 相关概念，以及 OpenStack 各个模块的详细介绍，您可以阅读参考资料里文档，这里不在做介绍。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"动态迁移的实现\"\u003e动态迁移的实现\u003c/h4\u003e\n\n\u003cp\u003e本节分别从基本概念、传输协议和迁移的步骤三个方面介绍动态迁移是如何实现的。 \u003cbr\u003e\n\u003cstrong\u003e\u003cem\u003e基本概念\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n在了解动态迁移之前，必须了解镜像文件的格式 QCOW2。Qcow2 是 QEMU 目前推荐的镜像格式，它支持稀疏文件以节省存储空间，支持加密以提高镜像文件的安全性，支持基于 zlib 的压缩。Qcow2 镜像可以用来保存另一个镜像文件的变化，它并不去修改原始镜像文件，原始镜像文件也叫后端镜像(backing_file)。只记录与原始镜像文件的不同部分的镜像文件，这种镜像文件就叫做 copy-on-write 镜像，它虽然是一个单独的镜像文件，但它的大部分数据都来自原始镜像，只有基于原始镜像文件的增量部分才会被记录下来。本文提及的虚拟机都是 OpenStack 用 Qcow2 格式的镜像文件建立的，如图 5 所示，包含两部分。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e后端镜像(libvirt base)\u003c/li\u003e\n\u003cli\u003e虚拟机单独的增量镜像文件(libvirt instance disks)，copy-on-write 镜像 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2511.png\" alt=\"图5\" title=\"\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e在物理机的磁盘上，当我们建了一个虚拟机后，就会生成如图 6 列的这些文件。其中_base 下面的文件，就是后端镜像(libvirt base)，目录 6e783272-31b5-4fdc-8828-2b8892daab39 下面是虚拟机单独的增量镜像文件(libvirt instance disks)，它只记录和 base 文件不同的内容。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2710.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e用 qemu-img 查看虚拟机单独的增量镜像文件的信息，我们可以看到他的 backing file 是_base 目录下的镜像文件，如图 7 所示。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2801.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e费了这么多篇幅介绍 QCOW2，您会奇怪，目的何在？其实上面介绍的后端镜像(libvirt Base)，虚拟机单独的增量镜像文件(libvirt instance disks)，它们就是要被迁移的数据。动态迁移的最终目标就是把它们完整地从源物理主机迁移到目标物理主机。除了他们两个之外，还有一个需要迁移的对象就是内存里运行的虚拟机的数据。 \u003cbr\u003e\n总结一下：虚拟机的迁移，其实就是数据的转移，因为计算节点之间没有共享存储，所以要转移的数据包括两部分：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e静态数据：存储在本地的虚拟机的镜像文件，包括后端镜像(libvirt Base)和虚拟机单独的增量镜像文件(libvirt instance disks)。\u003c/li\u003e\n\u003cli\u003e动态数据：内存里虚拟机的运行时数据，内存里的数据是动态变化的数据，虚拟机里运行的负载的大小直接影响迁移的时间长短。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移通道和传输协议\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nOpenStack 调用底层的 libvirt 来完成动态迁移。虚拟机的迁移，其实就是数据的转移。libvirt 提供了隧道化的数据传输（libvirt tunnelled transport）方式来完成数据转移。如图 8 所示。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3326.png\" alt=\"图8\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e数据的转移就涉及数据的传输，数据的传输需要通过网络，本文介绍使用 TCP 网路协议完实现动态迁移。Libvirt 默认情况下不支持 TCP 协议，需要对 libvirt 的配置做修改，使 libvirt 能够支持 TCP 协议，后面的章节会详细的介绍如何配置。 在迁移的过程中，运行在目的物理主机（Dest Host）中的 libvirtd 进程要根据 address 和 port 创建一个 URI，URI 是目的物理主机用来接收数据和发回数据到源物理主机（Source Host）的 libvirtd 进程的，如图 9。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3611.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e在目的物理主机和源物理主机，只要下面的命令能够执行，就说明能够传输数据了。 \u003cbr\u003e\n在 compute01 上执行：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs ruby\"\u003e[root\u003cspan class=\"hljs-variable\"\u003e@compute01\u003c/span\u003e]\u003cspan class=\"hljs-comment\"\u003e# virsh -c qemu+tcp://nova\u003cspan class=\"hljs-yardoctag\"\u003e@compute\u003c/span\u003e02/system\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在 compute02 上执行：\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs ruby\"\u003e[root\u003cspan class=\"hljs-variable\"\u003e@compute01\u003c/span\u003e]\u003cspan class=\"hljs-comment\"\u003e# virsh -c qemu+tcp://nova\u003cspan class=\"hljs-yardoctag\"\u003e@compute\u003c/span\u003e02/system\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e如下例所示在 compute01 上执行 virsh 命令，如果有图 10 所示的输出，就说明传输通道正常。 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3892.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移的步骤\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n迁移的基本概念弄清楚了，下面我们继续介绍迁移的步骤。OpenStack 做动态迁移一个正常的流程主要包括四部分：迁移前的条件检查、迁移前的预处理、迁移、迁移后的处理。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移前的条件检查\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e动态迁移要成功执行，一些条件必须满足，所以在执行迁移前必须做一些条件检查。 \u003c/li\u003e\n\u003cli\u003e权限检查，执行迁移的用户是否有足够的权限执行动态迁移。\u003c/li\u003e\n\u003cli\u003e参数检查，传递给 API 的参数是否足够和正确，如是否指定了 block-migrate 参数。 \u003c/li\u003e\n\u003cli\u003e检查目标物理主机是否存在。\u003c/li\u003e\n\u003cli\u003e检查被迁移的虚拟机是否是 running 状态。\u003c/li\u003e\n\u003cli\u003e检查源和目的物理主机上的 nova-compute service 是否正常运行。\u003c/li\u003e\n\u003cli\u003e检查目的物理主机和源物理主机是否是同一台机器。 \u003c/li\u003e\n\u003cli\u003e检查目的物理主机是否有足够的内存(memory)。\u003c/li\u003e\n\u003cli\u003e检查目的和源物理主机器\u003c/li\u003e\n\u003cli\u003ehypervisor 和 hypervisor 的版本是否相同。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移前的预处理\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n 在真正执行迁移前，必须做一下热身，做一些准备工作。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e在目的物理主机上获得和准备虚拟机挂载的块设备(volume)。\u003c/li\u003e\n\u003cli\u003e在目的物理主机上设置虚拟机的网络(networks)。\u003c/li\u003e\n\u003cli\u003e目的物理主机上设置虚拟机的防火墙(fireware)。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n条件满足并且做完了预处理工作后，就可以执行动态迁移了。主要步骤如下：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e调用 libvirt python 接口 migrateToURI，来把源主机迁移到目的主机。\u003c/p\u003e\n\n\u003cul\u003e\u003cli\u003edom.migrateToURI(CONF.live_migration_uri % dest,logical_sum,None,CONF.live_migration_bandwidth)\u003c/li\u003e\n\u003cli\u003elive_migration_uri：这个 URI 就是在 3.2.2 里介绍的 libvirtd 进程定义的。\u003c/li\u003e\n\u003cli\u003elive_migration_bandwidth：这个参数定义了迁移过程中所使用的最大的带宽。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e以一定的时间间隔（0.5）循环调用 wait_for_live_migration 方法，来检测虚拟机迁移 的状态，一直到虚拟机成功迁移为止。\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e迁移后的处理\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n当虚拟机迁移完成后，要做一些善后工作。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e在源物理主机上 detach volume。 \u003c/li\u003e\n\u003cli\u003e在源物理主机上释放 security group ingress rule。\u003c/li\u003e\n\u003cli\u003e在目的物理主机上更新数据库里虚拟机的状态。\u003c/li\u003e\n\u003cli\u003e在源物理主机上删除虚拟机。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e上面四步正常完成后，虚拟机就成功的从源物理主机成功地迁移到了目的物理主机了。系统管理员就可以执行第二章所列的哪些管理任务了。\u003c/p\u003e\n\n\u003ch3 id=\"动态迁移的配置\"\u003e动态迁移的配置\u003c/h3\u003e\n\n\u003cp\u003e本节列出了支持动态迁移的配置，必须确保所有物理主机上配置真确，动态迁移才能成功完成。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"libvirt\"\u003eLibvirt\u003c/h4\u003e\n\n\u003cp\u003elibvirt 默认情况下支持远程连接的 TLS 协议，不支持 TCP 协议，因此将 listen_tls=0 listen_tcp=1 使 libvirt 能够支持 TCP 协议。 \u003cbr\u003e\n1. 修改/etc/sysconfig/libvirtd 文件。 \u003cbr\u003e\n\u003ccode\u003eLIBVIRTD_ARGS=\"--listen\"\u003c/code\u003e \u003cbr\u003e\n2. 在/etc/libvirt/libvirtd.conf 文件中做如下配置。 \u003cbr\u003e\n \u003ccode\u003elisten_tls=0 \u003cbr\u003e\nlisten_tcp=1 \u003cbr\u003e\nauth_tcp=\"none\"\u003c/code\u003e \u003cbr\u003e\n3. 重启 libvirtd 服务\u003c/p\u003e\n\n\n\n\u003ch4 id=\"物理主机上-dns\"\u003e物理主机上 DNS\u003c/h4\u003e\n\n\u003cp\u003e配置每个物理主机上的/etc/host，加入每个物理主机的 hostname 和 IP，如下例：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e\u003cspan class=\"hljs-number\"\u003e192.168\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.0\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.1\u003c/span\u003e     compute-\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e  compute-\u003cspan class=\"hljs-number\"\u003e1.\u003c/span\u003eibm\u003cspan class=\"hljs-preprocessor\"\u003e.com\u003c/span\u003e\n\u003cspan class=\"hljs-number\"\u003e192.168\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.0\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.2\u003c/span\u003e     compute-\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e  compute-\u003cspan class=\"hljs-number\"\u003e2.\u003c/span\u003eibm\u003cspan class=\"hljs-preprocessor\"\u003e.com\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch4 id=\"防火墙\"\u003e防火墙\u003c/h4\u003e\n\n\u003cp\u003e配置/etc/sysconfig/iptables，打开 TCP 端口 16509。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e\u003cspan class=\"hljs-attribute\"\u003e-A\u003c/span\u003e INPUT \u003cspan class=\"hljs-attribute\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"hljs-attribute\"\u003e-m\u003c/span\u003e multiport \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eports \u003cspan class=\"hljs-number\"\u003e16509\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003ecomment \u003cspan class=\"hljs-string\"\u003e\"libvirt\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003e-j\u003c/span\u003e ACCEPT\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch4 id=\"openstack-nova\"\u003eOpenStack Nova\u003c/h4\u003e\n\n\u003cp\u003e在/etc/nova/nova.conf 文件里配置 live_migration 标记。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs fix\"\u003e\u003cspan class=\"hljs-attribute\"\u003elive_migration_flag\u003c/span\u003e=\u003cspan class=\"hljs-string\"\u003eVIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_LIVE\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch3 id=\"动态迁移的实例\"\u003e动态迁移的实例\u003c/h3\u003e\n\n\u003cp\u003e本节通过下面的例子来演示如何做动态迁移。这个例子的目标就是把虚拟机从 tor01kvm001ccz048 迁移到 tor01kvm002ccz048。如图 11 所示。 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index5914.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e在 tor01kvm001ccz048 上建一个虚拟机 lm001，如图 12 所示。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e\u003cspan class=\"hljs-variable\"\u003e#nova\u003c/span\u003e boot lm001 \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eimage \u003cspan class=\"hljs-string\"\u003e\"Red Hat Enterprise Linux 6.5 x86_64\"\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eflavor Standard_1_2 \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eavailability\u003cspan class=\"hljs-attribute\"\u003e-zone\u003c/span\u003e nova:tor01kvm001ccz048 \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003enic net\u003cspan class=\"hljs-attribute\"\u003e-id\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e88\u003c/span\u003ece4c1a\u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e8120\u003c/span\u003e\u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e4\u003c/span\u003ea97\u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e861\u003c/span\u003ed\u003cspan class=\"hljs-attribute\"\u003e-ba4b3dbaa6a3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6151.png\" alt=\"图12\" title=\"\"\u003e \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e检查虚拟机 lm001 建在了 tor01kvm001ccz048 上，如图 13 所示。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6210.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e执行动态迁移\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e\u003cspan class=\"hljs-variable\"\u003e#nova\u003c/span\u003e live\u003cspan class=\"hljs-attribute\"\u003e-migration\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e--\u003c/span\u003eblock\u003cspan class=\"hljs-attribute\"\u003e-migrate\u003c/span\u003e lm001 tor01kvm002ccz048\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e我们可以看到虚拟机的 Task State 变成了 migrating 状态，如图 14 所示。 \u003cbr\u003e\n\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6359.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e检查迁移的结果 \u003cbr\u003e\n通过 nova show 命令，可以看到 lm001 已经成功迁移到了 tor01kvm002ccz048，如图 15 所示。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6453.png\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"总结\"\u003e总结\u003c/h3\u003e\n\n\u003cp\u003e从前面的介绍我们可以看出，即使没有共享存储，我们也可以对虚拟机实现无中断的动态迁移，不过所有的计算节点之间需要快的网路支持。另外还需要注意两点：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e本文使用的是没有没有加密的 TCP/IP socket，所以在生产环境不推荐使用，除非是在一个安全可信的网路里执行动态迁移。\u003c/li\u003e\n\u003cli\u003e在迁移的过程中，虚拟机会有 downtime。详细的信息，可以阅读参考资料里的块迁移的性能报告。\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003ch3 id=\"相关主题\"\u003e相关主题\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://docs.openstack.org/admin-guide-cloud/content/section_configuring-compute-migrations.html\"\u003eOpenStack 官方文档\u003c/a\u003e，了解 OpenStack 关于块迁移的详细的配置和方法步骤。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://libvirt.org/migration.html\"\u003eLibvirt 官方文档\u003c/a\u003e，了解 Libvirt 里关于块迁移的实现原理，详细的配置步骤。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://blog.zhaw.ch/icclab/an-analysis-of-the-performance-of-block-live-mig\"\u003e块迁移的性能报告\u003c/a\u003e，了解块迁移的性能测试报告和方法。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://docs.openstack.org/image-guide/content/ch_introduction.html\"\u003eOpenStack 支持的 Image\u003c/a\u003e，了解 OpenStack 支持的 Image 的格式和类型。\u003c/li\u003e\n\u003c/ul\u003e","markdowncontent":"转自：https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/\n\n本文尝试回答与 Live migration 相关的几个问题：Live migration 是什么？为什么要做 Live migration？如何做 Live migration？如果你读完本文，基本了解了这三个问题的答案， 这篇文章的主要目的也就达到了。由于本文介绍的是 OpenStack 平台上动态迁移的实现，所以读者必须对 OpenStack 有一定的了解。\n\n###虚拟机迁移简介\n\n动态迁移包括两方面的意思，一是迁移(Migration)，迁移就是把用户的虚拟机从一台物理主机移到另外一台物理主机。二是动态，动态的意思就是在迁移的过程中，(1):虚拟机还开着机；(2):虚拟机的网路也不受影响；(3):而且上面的运行的用户程序依旧运行。整个过程对用户来说是透明的，对用户可以正常使用迁移途中的虚拟机。\nOpenStack 支持两种类型的虚拟机迁移：\n\n - 冷迁移(Cold migration)- 冷迁移也叫静态迁移。在迁移过程中虚拟机必须关机，用户也不能访问虚拟机。因为要关机，所以他适用于用户对系统可用性要求不是很高的时候。\n\n - 热迁移(Hot or live migration)- 热迁移也叫动态迁移。在迁移的过程中虚拟机仍旧工作，用户可以继续使用虚拟机。本文就介绍的就是这种类型的迁移。热迁移又分为下面二种类型：\n \n\t - (1):虚拟机的数据存在共享磁盘上(Shared storage-based live migration),如图 1 所 示。\n\t - (2):虚拟机的数据存在本地磁盘(block migration)，如图 2 所示，需要对镜像文件和内存数据同时迁移。OpenStack 通过块迁移实现这这类迁移。\n\n![图1](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index880.png)\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index970.png)\n\n###虚拟机迁移的作用\n\n每个读者都可能会问这样一个问题，虚拟机用的好好的，为啥要迁移呀？也就是迁移的价值和目的在哪里。在数据中心的日常运维中，常常要处理下面几种场景和需求，了解了这些需求，这个问题也就有了答案。\n\n- 需求 1：物理机器硬件系统的维护，故障修复和升级(upgrade)，但运行在这台物理机器上的虚拟机不能关机，因为用户重要的服务跑在上面。\n- 需求 2：物理机器软件系统升级，打补丁(patch)，为了不影响上面跑的虚拟机，在升级和打补丁之前，需要把虚拟机迁移到别的物理机器上。\n- 需求 3：一个物理机器上的负载太重，需要减少一些虚拟机来释放资源。\n- 需求 4：在一个 cluster 里，有的物理机上的虚拟机太多，有的物理机上虚拟机太少，需要做一下资源平衡。\n\n除了上面四个主要的需求，从服务的角度来看，Live migration 有下面两个好处：\n\n- 好处 1：软件和硬件系统的维护升级，不会影响用户的关键服务，提高了服务的高可用性和 用户的满意度。\n- 好处 2：系统管理员不用加班加点，在大半夜进行系统升级了，在正常的工作时间就可以完成这项工作，减少了公司的维护费用。\n\n有这四个需求和两个好处，所以动态迁移值得一作。\n\n###动态迁移方法和实现\n本章详细介绍在 OpenStack 里如何实现动态迁移。在第一节里，提到了有两种类型的动态迁移，本文只介绍图 2 所示的虚拟机的数据存在本地磁盘(block migration)的动态迁移。\n####动态迁移的条件\n动态迁移是把虚拟机从一个物理主机迁移到另外一个物理主机，所以至少需要有两个物理主机作为计算节点。下面是一个最小的 OpenStack 配置。 三个物理主机，一个用来做 OpenStack 的控制节点，两个用来做计算节点。如图 3 所示。\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index1746.png)\n\n控制节点接受并处理动态迁移的请求，管理员可以从 Horizon、命令行、API 发起动态迁移。 动态迁移就是把客户的 VM 从计算节点 1 迁移到计算节点 2，或者从计算节点 2 迁移到计算节点 1，如图 4 所示。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index1888.png)\n\n计算节点上的 Hypervisor 是 KVM，操作系统是 redhat6.5，OpenStack 是 Juno。计算节点 1 和 2 上的虚拟机分别存储在本地文件系统，如图 2 所示。\n上面提到的 Hypervisor 和 KVM 相关概念，以及 OpenStack 各个模块的详细介绍，您可以阅读参考资料里文档，这里不在做介绍。\n\n####动态迁移的实现\n本节分别从基本概念、传输协议和迁移的步骤三个方面介绍动态迁移是如何实现的。\n***基本概念***\n在了解动态迁移之前，必须了解镜像文件的格式 QCOW2。Qcow2 是 QEMU 目前推荐的镜像格式，它支持稀疏文件以节省存储空间，支持加密以提高镜像文件的安全性，支持基于 zlib 的压缩。Qcow2 镜像可以用来保存另一个镜像文件的变化，它并不去修改原始镜像文件，原始镜像文件也叫后端镜像(backing_file)。只记录与原始镜像文件的不同部分的镜像文件，这种镜像文件就叫做 copy-on-write 镜像，它虽然是一个单独的镜像文件，但它的大部分数据都来自原始镜像，只有基于原始镜像文件的增量部分才会被记录下来。本文提及的虚拟机都是 OpenStack 用 Qcow2 格式的镜像文件建立的，如图 5 所示，包含两部分。\n\n- 后端镜像(libvirt base)\n- 虚拟机单独的增量镜像文件(libvirt instance disks)，copy-on-write 镜像\n![图5](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2511.png)\n\n在物理机的磁盘上，当我们建了一个虚拟机后，就会生成如图 6 列的这些文件。其中_base 下面的文件，就是后端镜像(libvirt base)，目录 6e783272-31b5-4fdc-8828-2b8892daab39 下面是虚拟机单独的增量镜像文件(libvirt instance disks)，它只记录和 base 文件不同的内容。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2710.png)\n\n用 qemu-img 查看虚拟机单独的增量镜像文件的信息，我们可以看到他的 backing file 是_base 目录下的镜像文件，如图 7 所示。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index2801.png)\n\n费了这么多篇幅介绍 QCOW2，您会奇怪，目的何在？其实上面介绍的后端镜像(libvirt Base)，虚拟机单独的增量镜像文件(libvirt instance disks)，它们就是要被迁移的数据。动态迁移的最终目标就是把它们完整地从源物理主机迁移到目标物理主机。除了他们两个之外，还有一个需要迁移的对象就是内存里运行的虚拟机的数据。\n总结一下：虚拟机的迁移，其实就是数据的转移，因为计算节点之间没有共享存储，所以要转移的数据包括两部分：\n\n- 静态数据：存储在本地的虚拟机的镜像文件，包括后端镜像(libvirt Base)和虚拟机单独的增量镜像文件(libvirt instance disks)。\n- 动态数据：内存里虚拟机的运行时数据，内存里的数据是动态变化的数据，虚拟机里运行的负载的大小直接影响迁移的时间长短。\n\n***迁移通道和传输协议***\nOpenStack 调用底层的 libvirt 来完成动态迁移。虚拟机的迁移，其实就是数据的转移。libvirt 提供了隧道化的数据传输（libvirt tunnelled transport）方式来完成数据转移。如图 8 所示。\n\n![图8](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3326.png)\n\n数据的转移就涉及数据的传输，数据的传输需要通过网络，本文介绍使用 TCP 网路协议完实现动态迁移。Libvirt 默认情况下不支持 TCP 协议，需要对 libvirt 的配置做修改，使 libvirt 能够支持 TCP 协议，后面的章节会详细的介绍如何配置。 在迁移的过程中，运行在目的物理主机（Dest Host）中的 libvirtd 进程要根据 address 和 port 创建一个 URI，URI 是目的物理主机用来接收数据和发回数据到源物理主机（Source Host）的 libvirtd 进程的，如图 9。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3611.png)\n\n在目的物理主机和源物理主机，只要下面的命令能够执行，就说明能够传输数据了。\n在 compute01 上执行：\n\n```\n[root@compute01]# virsh -c qemu+tcp://nova@compute02/system\n```\n在 compute02 上执行：\n\n```\n[root@compute01]# virsh -c qemu+tcp://nova@compute02/system\n```\n\n如下例所示在 compute01 上执行 virsh 命令，如果有图 10 所示的输出，就说明传输通道正常。\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index3892.png)\n\n***迁移的步骤***\n迁移的基本概念弄清楚了，下面我们继续介绍迁移的步骤。OpenStack 做动态迁移一个正常的流程主要包括四部分：迁移前的条件检查、迁移前的预处理、迁移、迁移后的处理。\n\n***迁移前的条件检查***\n\n 1. 动态迁移要成功执行，一些条件必须满足，所以在执行迁移前必须做一些条件检查。 \n 2. 权限检查，执行迁移的用户是否有足够的权限执行动态迁移。\n 3. 参数检查，传递给 API 的参数是否足够和正确，如是否指定了 block-migrate 参数。 \n 4. 检查目标物理主机是否存在。\n 5. 检查被迁移的虚拟机是否是 running 状态。\n 6. 检查源和目的物理主机上的 nova-compute service 是否正常运行。\n 7. 检查目的物理主机和源物理主机是否是同一台机器。 \n 8. 检查目的物理主机是否有足够的内存(memory)。\n 9. 检查目的和源物理主机器\n 10. hypervisor 和 hypervisor 的版本是否相同。\n\n***迁移前的预处理***\n 在真正执行迁移前，必须做一下热身，做一些准备工作。\n\n 1. 在目的物理主机上获得和准备虚拟机挂载的块设备(volume)。\n 2. 在目的物理主机上设置虚拟机的网络(networks)。\n 3. 目的物理主机上设置虚拟机的防火墙(fireware)。\n \n***迁移***\n条件满足并且做完了预处理工作后，就可以执行动态迁移了。主要步骤如下：\n\n- 调用 libvirt python 接口 migrateToURI，来把源主机迁移到目的主机。\n \n - dom.migrateToURI(CONF.live_migration_uri % dest,logical_sum,None,CONF.live_migration_bandwidth)\n - live_migration_uri：这个 URI 就是在 3.2.2 里介绍的 libvirtd 进程定义的。\n - live_migration_bandwidth：这个参数定义了迁移过程中所使用的最大的带宽。\n\n- 以一定的时间间隔（0.5）循环调用 wait_for_live_migration 方法，来检测虚拟机迁移 的状态，一直到虚拟机成功迁移为止。\n\n***迁移后的处理***\n当虚拟机迁移完成后，要做一些善后工作。\n\n 1. 在源物理主机上 detach volume。 \n 2. 在源物理主机上释放 security group ingress rule。\n 3. 在目的物理主机上更新数据库里虚拟机的状态。\n 4. 在源物理主机上删除虚拟机。\n\n上面四步正常完成后，虚拟机就成功的从源物理主机成功地迁移到了目的物理主机了。系统管理员就可以执行第二章所列的哪些管理任务了。\n\n###动态迁移的配置\n本节列出了支持动态迁移的配置，必须确保所有物理主机上配置真确，动态迁移才能成功完成。\n####Libvirt\nlibvirt 默认情况下支持远程连接的 TLS 协议，不支持 TCP 协议，因此将 listen_tls=0 listen_tcp=1 使 libvirt 能够支持 TCP 协议。\n1. 修改/etc/sysconfig/libvirtd 文件。\n`LIBVIRTD_ARGS=\"--listen\"`\n2. 在/etc/libvirt/libvirtd.conf 文件中做如下配置。\n `listen_tls=0\nlisten_tcp=1\nauth_tcp=\"none\"`\n3. 重启 libvirtd 服务\n####物理主机上 DNS\n配置每个物理主机上的/etc/host，加入每个物理主机的 hostname 和 IP，如下例：\n\n```\n192.168.0.1     compute-1  compute-1.ibm.com\n192.168.0.2     compute-2  compute-2.ibm.com\n```\n\n####防火墙\n配置/etc/sysconfig/iptables，打开 TCP 端口 16509。\n\n```\n-A INPUT -p tcp -m multiport --ports 16509 -m comment --comment \"libvirt\" -j ACCEPT\n```\n\n####OpenStack Nova\n在/etc/nova/nova.conf 文件里配置 live_migration 标记。\n\n```\nlive_migration_flag=VIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_LIVE\n```\n###动态迁移的实例\n本节通过下面的例子来演示如何做动态迁移。这个例子的目标就是把虚拟机从 tor01kvm001ccz048 迁移到 tor01kvm002ccz048。如图 11 所示。\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index5914.png)\n\n- 在 tor01kvm001ccz048 上建一个虚拟机 lm001，如图 12 所示。\n\n```\n#nova boot lm001 --image \"Red Hat Enterprise Linux 6.5 x86_64\" --flavor Standard_1_2 --availability-zone nova:tor01kvm001ccz048 --nic net-id=88ce4c1a-8120-4a97-861d-ba4b3dbaa6a3\n\n```\n![图12](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6151.png) \n\n- 检查虚拟机 lm001 建在了 tor01kvm001ccz048 上，如图 13 所示。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6210.png)\n\n- 执行动态迁移\n\n```\n#nova live-migration --block-migrate lm001 tor01kvm002ccz048\n```\n我们可以看到虚拟机的 Task State 变成了 migrating 状态，如图 14 所示。\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6359.png)\n\n- 检查迁移的结果\n通过 nova show 命令，可以看到 lm001 已经成功迁移到了 tor01kvm002ccz048，如图 15 所示。\n\n![这里写图片描述](https://www.ibm.com/developerworks/cn/cloud/library/1508_wangyx_openstacklivemigrate/index6453.png)\n\n###总结\n从前面的介绍我们可以看出，即使没有共享存储，我们也可以对虚拟机实现无中断的动态迁移，不过所有的计算节点之间需要快的网路支持。另外还需要注意两点：\n\n 1. 本文使用的是没有没有加密的 TCP/IP socket，所以在生产环境不推荐使用，除非是在一个安全可信的网路里执行动态迁移。\n 2. 在迁移的过程中，虚拟机会有 downtime。详细的信息，可以阅读参考资料里的块迁移的性能报告。\n \n###相关主题\n- [OpenStack 官方文档](http://docs.openstack.org/admin-guide-cloud/content/section_configuring-compute-migrations.html)，了解 OpenStack 关于块迁移的详细的配置和方法步骤。\n- [Libvirt 官方文档](http://libvirt.org/migration.html)，了解 Libvirt 里关于块迁移的实现原理，详细的配置步骤。\n- [块迁移的性能报告](http://blog.zhaw.ch/icclab/an-analysis-of-the-performance-of-block-live-mig)，了解块迁移的性能测试报告和方法。\n- [OpenStack 支持的 Image](http://docs.openstack.org/image-guide/content/ch_introduction.html)，了解 OpenStack 支持的 Image 的格式和类型。\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-4] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":75267742,"title":"【OpenStack源码分析之三】Nova-Compute启动流程分析","create_at":"\/Date(1500294668000)\/","create":"2017-07-17 08:31:08","view_count":99,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"Nova架构概览Nova是OpenStack社区最核心的项目，也是社区诞生之时就一直存在的项目，它主要提供计算资源的服务，这个计算资源包含了虚机以及配套的存储，网络等资源。我比较喜欢把OpenStack和Linux做类比，我们知道进程（Task）是处于执行期的程序以及相关资源的总称，如果把虚机类比为进程，Nova就类似于Linux中的进程管理和调度模块。所以Nova会和很多其他的组件交互，不仅包括O","url":"http://blog.csdn.net/BLACKMOON88/article/details/75267742","categories":"云计算,Python相关,OpenStack","tags":"openstack,源码,社区,架构","content":"\u003ch2 id=\"nova架构概览\"\u003eNova架构概览\u003c/h2\u003e\n\n\u003cp\u003eNova是OpenStack社区最核心的项目，也是社区诞生之时就一直存在的项目，它主要提供计算资源的服务，这个计算资源包含了虚机以及配套的存储，网络等资源。我比较喜欢把OpenStack和Linux做类比，我们知道进程（Task）是处于执行期的程序以及相关资源的总称，如果把虚机类比为进程，Nova就类似于Linux中的进程管理和调度模块。所以Nova会和很多其他的组件交互，不仅包括OpenStack自身的Neutron，Glance， Cinder等组件，还有不同的Hypervisor 包括KVM， Xen等。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170717203037905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"nova的组件构成\"\u003eNova的组件构成\u003c/h3\u003e\n\n\u003cp\u003eNova组件有以下六部分组成： \u003cbr\u003e\n1)  API服务器 API Server（Nova-api） \u003cbr\u003e\n2)  计算工作者Compute Workers（Nova-compute） \u003cbr\u003e\n3)  网络控制器Network Controller（Nova-network） \u003cbr\u003e\n4)  卷工作者Volume Worker（Nova-volume） \u003cbr\u003e\n5)  调度器Schedule（Nova-schedule） \u003cbr\u003e\n6)  消息队列Message Queue（rabbitmq server）\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20140619223804453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2FueGluZ2hlbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e上图是Nova的软件架构图，Nova中的各个组件（除了消息队列组件以外）都是有Python代码编写的守护进程，由上图可以看出每个进程之间通过队列（Queue）和数据库（Nova database）来交换信息。\u003c/p\u003e\n\n\u003cp\u003e下面对Nova的组件进行介绍。 \u003cbr\u003e\n1)  API服务器 API Server（Nova-api）\u003c/p\u003e\n\n\u003cp\u003eNova-API对外提供一个与云基础设施交互的接口，也是外部可用于管理基础设施的唯一组件。它负责发起相应的类似运行新虚拟机实例这样的资源调度活动。 \u003cbr\u003e\n在实现层面上，nova-api是python实现的WSGI应用。（WSGI即Web服务器网关接口是Python应用程序或框架和Web服务器之间的一种接口，已经被广泛接受，它已基本达成可移植性方面的目标）\u003c/p\u003e\n\n\u003cp\u003e2)  计算工作者Compute Workers（Nova-compute）\u003c/p\u003e\n\n\u003cp\u003eNova-compute处理管理实例生命周期，负责对虚拟机实例进行创建、终止、迁移、Resize的操作。 \u003cbr\u003e\n工作原理：队列中接收请求→执行→更新数据库状态\u003c/p\u003e\n\n\u003cp\u003e3)  网络控制器Network Controller（Nova-network）\u003c/p\u003e\n\n\u003cp\u003eNova-network负责处理主机的网络配置，其中包括：IP地址分配，配置vlan，实现安全组，配置计算节点网络等任务。 \u003cbr\u003e\n工作原理：队列中接收网络任务→控制虚拟机的网络（创建桥接网络、改变iptables规则）\u003c/p\u003e\n\n\u003cp\u003e4)  卷工作者Volume Worker（Nova-volume）\u003c/p\u003e\n\n\u003cp\u003eNova-volume提供卷管理，为虚拟机实例提供额外的volume访问 \u003cbr\u003e\n用来管理基于逻辑卷管理的实例卷。一个实例的重要数据总是要写在卷上，这样确保能在以后访问。 \u003cbr\u003e\n5)  调度器Schedule（Nova-schedule）\u003c/p\u003e\n\n\u003cp\u003eNova-Scheduler负责为虚拟机实例指定运行的物理服务器，主要负责调度资源，有多种调度方法供选择 \u003cbr\u003e\n通过适当的调度算法从可用资源池获得一个计算服务。\u003c/p\u003e\n\n\u003cp\u003e6)  消息队列Message Queue（rabbitmq server）\u003c/p\u003e\n\n\u003cp\u003eOpenstack节点之间通过消息队列使用AMQP（高级消息队列协议）完成通信（异步通信）。 \u003cbr\u003e\nRabbitmq是对这个协议的一个实现，默认使用kombu消息框架，该部分本文不进行详细展开，将在另外一篇文章中进行讲述。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170717203101331?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\n\n\u003ch2 id=\"nova-compute-service启动流程\"\u003eNova Compute Service启动流程\u003c/h2\u003e\n\n\u003cp\u003eNova的服务类型分为两种，WsgiService和RpcService，每一种服务类型都会根据nova.conf的配置启动一个或多个进程。这其中WsgiService主要是用于组件之间的Restful接口交互，而组件内部的不同模块采取RpcService交互模式。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"nova-compute-启动流程分析\"\u003eNova Compute 启动流程分析\u003c/h3\u003e\n\n\u003cp\u003e这里先以Nova Compute进程的启动过程为例，在/nava/bin目录下为所有的启动脚本入口，对源代码进行走读分析。\u003c/p\u003e\n\n\n\n\u003ch4 id=\"openstack软件包管理\"\u003e\u003cstrong\u003e\u003cem\u003eOpenStack软件包管理\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003e软件包管理是每个OpenStack项目的基础，其目的是用来将项目代码打包成源码包或者二进制包进行分发。一个项目的代码可能会被打包放到PyPI上，这样你可以通过 pip 命令安装这个包；也可能会被打包放到项目的软件仓库里，这样你可以通过 apt-get install 或者 yum install 来安装这个软件包。\u003c/p\u003e\n\n\u003cp\u003eOpenStack也是使用setuptools工具来进行打包，不过为了满足OpenStack项目的需求，引入了一个辅助工具 pbr (Python Build Reasonableness)来配合setuptools完成打包工作。pbr是一个setuptools的扩展工具，被开发出来的主要目的是为了方便使用setuptools，其项目文档地址也在OpenStack官网内： \u003ca href=\"http://docs.openstack.org/developer/pbr/\" target=\"_blank\"\u003ehttp://docs.openstack.org/developer/pbr/\u003c/a\u003e 。\u003c/p\u003e\n\n\u003cp\u003e先说一下pbr如何使用：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs python\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e setuptools\nsetuptools.setup(setup_requires=[\u003cspan class=\"hljs-string\"\u003e\u0027pbr\u0027\u003c/span\u003e], pbr=\u003cspan class=\"hljs-keyword\"\u003eTrue\u003c/span\u003e)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e按照上面的方式就可以配置setuptools工具使用pbr来协助完成打包工作。这里的 setup_requires 参数意思是setup函数在执行之前需要依赖的包的列表。这里的依赖的包的功能可以理解为生成setup的实际参数。你可以看到，当使用pbr的时候，setup函数只有两个参数，然而实际上 setuptools.setup 函数实际上是 disutils.core.setup 函数，会接收任何参数，这些参数可以通过在调用时指定，也可以通过所依赖的扩展来生成（比如pbr）\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003esetup.cfg\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n由于OpenStack项目都使用了setuptools和pbr来执行打包工作，因此项目的元数据都放在 setup.cfg 文件中。我们以 Compute项目的setup.cfg文件为例来说明这个文件里一般会包含什么内容：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003e[metadata]\nname = nova\nsummary = Cloud computing fabric controller\ndescription-file = \n    README\u003cspan class=\"hljs-preprocessor\"\u003e.rst\u003c/span\u003e\nauthor = OpenStack\nauthor-email = openstack-dev@lists\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.org\u003c/span\u003e\nhome-page = http://docs\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.org\u003c/span\u003e/developer/nova/\nclassifier = \n    Environment :: OpenStack\n    Intended Audience :: Information Technology\n    Intended Audience :: System Administrators\n    License :: OSI Approved :: Apache Software License\n    Operating System :: POSIX :: Linux\n    Programming Language :: Python\n    Programming Language :: Python :: \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e\n    Programming Language :: Python :: \u003cspan class=\"hljs-number\"\u003e2.7\u003c/span\u003e\n\n[global]\u003cspan class=\"hljs-preprocessor\"\u003e# 全局段\u003c/span\u003e\nsetup-hooks = \n    pbr\u003cspan class=\"hljs-preprocessor\"\u003e.hooks\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.setup\u003c/span\u003e_hook\n\n[files] \u003cspan class=\"hljs-preprocessor\"\u003e# 文件段\u003c/span\u003e\npackages = \n    nova\n\n[entry_points] \u003cspan class=\"hljs-preprocessor\"\u003e# 指定入口点\u003c/span\u003e\noslo\u003cspan class=\"hljs-preprocessor\"\u003e.config\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.opts\u003c/span\u003e = \n    nova\u003cspan class=\"hljs-preprocessor\"\u003e.conf\u003c/span\u003e = nova\u003cspan class=\"hljs-preprocessor\"\u003e.conf\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.opts\u003c/span\u003e:list_opts\noslo\u003cspan class=\"hljs-preprocessor\"\u003e.config\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.opts\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.defaults\u003c/span\u003e = \n    nova\u003cspan class=\"hljs-preprocessor\"\u003e.conf\u003c/span\u003e = nova\u003cspan class=\"hljs-preprocessor\"\u003e.common\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.config\u003c/span\u003e:set_middleware_defaults\noslo\u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.enforcer\u003c/span\u003e = \n    nova = nova\u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e:get_enforcer\noslo\u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.policies\u003c/span\u003e = \n    \u003cspan class=\"hljs-preprocessor\"\u003e# The sample policies will be ordered by entry point and then by list\u003c/span\u003e\n    \u003cspan class=\"hljs-preprocessor\"\u003e# returned from that entry point. If more control is desired split out each\u003c/span\u003e\n    \u003cspan class=\"hljs-preprocessor\"\u003e# list_rules method into a separate entry point rather than using the\u003c/span\u003e\n    \u003cspan class=\"hljs-preprocessor\"\u003e# aggregate method.\u003c/span\u003e\n    nova = nova\u003cspan class=\"hljs-preprocessor\"\u003e.policies\u003c/span\u003e:list_rules\nnova\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.monitors\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.cpu\u003c/span\u003e = \n    virt_driver = nova\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.monitors\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.cpu\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.virt\u003c/span\u003e_driver:Monitor\nnova\u003cspan class=\"hljs-preprocessor\"\u003e.image\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.download\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.modules\u003c/span\u003e = \n    file = nova\u003cspan class=\"hljs-preprocessor\"\u003e.image\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.download\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.file\u003c/span\u003e\n\nconsole_scripts =  \u003cspan class=\"hljs-preprocessor\"\u003e# 指定要生成的可执行文件\u003c/span\u003e\n    nova-compute = nova\u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.compute\u003c/span\u003e:main\n\nwsgi_scripts = \n    nova-placement-api = nova\u003cspan class=\"hljs-preprocessor\"\u003e.api\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.openstack\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.placement\u003c/span\u003e\u003cspan class=\"hljs-preprocessor\"\u003e.wsgi\u003c/span\u003e:init_application\n[build_sphinx] \u003cspan class=\"hljs-preprocessor\"\u003e# 文档build相关信息\u003c/span\u003e\nall_files = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\nbuild-dir = doc/build\nsource-dir = doc/source\n\n[build_apiguide] \u003cspan class=\"hljs-preprocessor\"\u003e# 文档build相关信息\u003c/span\u003e\nall_files = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\nbuild-dir = api-guide/build\nsource-dir = api-guide/source\n\n[egg_info] \u003cspan class=\"hljs-preprocessor\"\u003e# 指定egg信息\u003c/span\u003e\ntag_build = \ntag_date = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\ntag_svn_revision = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e\n\n[compile_catalog]\ndirectory = nova/locale\ndomain = nova nova-log-critical nova-log-error nova-log-info nova-log-warning\n\n[update_catalog]\ndomain = nova\noutput_dir = nova/locale\ninput_file = nova/locale/nova\u003cspan class=\"hljs-preprocessor\"\u003e.pot\u003c/span\u003e\n\n[extract_messages]\nkeywords = _ gettext ngettext l_ lazy_gettext\nmapping_file = babel\u003cspan class=\"hljs-preprocessor\"\u003e.cfg\u003c/span\u003e\noutput_file = nova/locale/nova\u003cspan class=\"hljs-preprocessor\"\u003e.pot\u003c/span\u003e\n\n[wheel]\nuniversal = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e\n\n[extras]\nosprofiler = \n    osprofiler&gt;=\u003cspan class=\"hljs-number\"\u003e1.4\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e.0\u003c/span\u003e \u003cspan class=\"hljs-preprocessor\"\u003e# Apache-2.0\u003c/span\u003e\n\n[pbr]\nwarnerrors = true\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e(上面有些未注释的部分我目前还不太清楚，后续补充，可以先参考 \u003ca href=\"https://www.python.org/dev/peps/pep-0301/\" target=\"_blank\"\u003ePEP301\u003c/a\u003e ) \u003cbr\u003e\n这里说说一下 classifier 这个参数。这个参数是用来指定一个软件包的分类、许可证、允许运行的操作系统、允许运行的Python的版本的信息。 \u003cbr\u003e\nentry_points是一个字典，从entry point组名映射到一个表示entry point的字符串或字符串列表。Entry points是用来支持动态发现服务和插件的，也用来支持自动生成脚本。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003erequirements.txt\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n这个文件指定了一个项目依赖的包有哪些，并且支出了依赖的包的版本需求\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e软件包归档格式\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\nPython的软件包一开始是没有官方的标准分发格式的。比如Java有jar包或者war包作为分发格式，Python则什么都没有。后来不同的工具都开始引入一些比较通用的归档格式。比如，setuptools引入了Egg格式。但是，这些都不是官方支持的，存在元数据和包结构彼此不兼容的问题。因此，为了解决这个问题， PEP 427 定义了新的分发包标准，名为 Wheel 。目前pip和setuptools工具都支持Wheel格式。这里我们简单总结一下常用的分发格式：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003etar.gz 格式：这个就是标准压缩格式，里面包含了项目元数据和代码，可以使用 python setup.py sdist 命令生成。\u003c/li\u003e\n\u003cli\u003e.egg 格式：这个本质上也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据以及源代码。这个格式由setuptools项目引入。可以通过命令 python setup.py bdist_egg 命令生成。\u003c/li\u003e\n\u003cli\u003e.whl 格式：这个是Wheel包，也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据和代码，还支持免安装直接运行。whl分发包内的元数据和egg包是有些不同的。这个格式是由PEP 427引入的。可以通过命令 python setup.py bdist_wheel 生成。\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch4 id=\"nova-compute启动入口\"\u003e\u003cstrong\u003e\u003cem\u003eNova Compute启动入口\u003c/em\u003e\u003c/strong\u003e\u003c/h4\u003e\n\n\u003cp\u003e了解了OPS的打包规则可以知道Nova Compute的程序入口就是在nova/cmd/compute.py，先列举源码：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs python\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\"\"Starter script for Nova Compute.\"\"\"\u003c/span\u003e\n\nCONF = nova.conf.CONF\nLOG = logging.getLogger(\u003cspan class=\"hljs-string\"\u003e\u0027nova.compute\u0027\u003c/span\u003e)\n\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003emain\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e:\u003c/span\u003e\n    config.parse_args(sys.argv)\n    logging.setup(CONF, \u003cspan class=\"hljs-string\"\u003e\u0027nova\u0027\u003c/span\u003e)\n    priv_context.init(root_helper=shlex.split(utils.get_root_helper()))\n    utils.monkey_patch()\n    objects.register_all()\n    \u003cspan class=\"hljs-comment\"\u003e# Ensure os-vif objects are registered and plugins loaded\u003c/span\u003e\n    os_vif.initialize()\n\n    gmr.TextGuruMeditation.setup_autorun(version)\n\n    cmd_common.block_db_access(\u003cspan class=\"hljs-string\"\u003e\u0027nova-compute\u0027\u003c/span\u003e)\n    objects_base.NovaObject.indirection_api = conductor_rpcapi.ConductorAPI()\n\n    server = service.Service.create(binary=\u003cspan class=\"hljs-string\"\u003e\u0027nova-compute\u0027\u003c/span\u003e,\n                                    topic=CONF.compute_topic)\n    service.serve(server)\n    service.wait()\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在这里首先会调用config.parse_args(sys.argv)函数来做一些初始化的工作，包括RpcServer的传输层Driver的指定等工作。\u003c/p\u003e\n\n\u003cp\u003e接下来调用Create()函数创建RPC Service，并且设置Topic为CONF.compute_topic，在\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/75208757\" target=\"_blank\"\u003e【OpenStack源码分析之二】RabbitMQ分析\u003c/a\u003e中有详细讲述RPC的使用。Create()函数调用的实例化对象会设置一个ComputeManager来负责处理所有的Rpc请求，具体接口请阅读源码Nova/compute/manager/ComputeManager类。\u003c/p\u003e\n\n\u003cp\u003e后面就是Serve函数，它会分配一个协程（关于协程的介绍请见对\u003ca href=\"http://blog.csdn.net/ohenry88/article/details/73196798\" target=\"_blank\"\u003ePython协程的理解\u003c/a\u003e）来调用Service的Start()函数，接下来我们分析一下RpcService的Start()函数，源码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-Python hljs php\"\u003e def start(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e):\n        verstr = version.version_string_with_package()\n        LOG.info(_LI(\u003cspan class=\"hljs-string\"\u003e\u0027Starting %(topic)s node (version %(version)s)\u0027\u003c/span\u003e),\n                  {\u003cspan class=\"hljs-string\"\u003e\u0027topic\u0027\u003c/span\u003e: \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic, \u003cspan class=\"hljs-string\"\u003e\u0027version\u0027\u003c/span\u003e: verstr})\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.basic_config_check()\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.init_host()\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.model_disconnected = \u003cspan class=\"hljs-keyword\"\u003eFalse\u003c/span\u003e\n        ctxt = context.get_admin_context()\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref = objects.Service.get_by_host_and_binary(\n            ctxt, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.host, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.binary)\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref:\n            _update_service_ref(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref)\n\n        \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e:\n            \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e:\n                \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref = _create_service_ref(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e, ctxt)\n            except (\u003cspan class=\"hljs-keyword\"\u003eexception\u003c/span\u003e.ServiceTopicExists,\n                    \u003cspan class=\"hljs-keyword\"\u003eexception\u003c/span\u003e.ServiceBinaryExists):\n                \u003cspan class=\"hljs-comment\"\u003e# NOTE(danms): If we race to create a record with a sibling\u003c/span\u003e\n                \u003cspan class=\"hljs-comment\"\u003e# worker, don\u0027t fail here.\u003c/span\u003e\n                \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.service_ref = objects.Service.get_by_host_and_binary(\n                    ctxt, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.host, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.binary)\n\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.pre_start_hook()\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.backdoor_port is not None:\n            \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.backdoor_port = \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.backdoor_port\n\n        LOG.debug(\u003cspan class=\"hljs-string\"\u003e\"Creating RPC server for service %s\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic)\n\n        target = messaging.Target(topic=\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic, server=\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.host)\n\n        endpoints = [\n            \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager,\n            baserpc.BaseRPCAPI(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.service_name, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.backdoor_port)\n        ]\n        endpoints.extend(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.additional_endpoints)\n\n        serializer = objects_base.NovaObjectSerializer()\n\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.rpcserver = rpc.get_server(target, endpoints, serializer)\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.rpcserver.start()\n\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.manager.post_start_hook()\n\n        LOG.debug(\u003cspan class=\"hljs-string\"\u003e\"Join ServiceGroup membership for this service %s\"\u003c/span\u003e,\n                  \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic)\n        \u003cspan class=\"hljs-comment\"\u003e# Add service to the ServiceGroup membership group.\u003c/span\u003e\n        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.servicegroup_api.join(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.host, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.topic, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e)\n\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_enable:\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_fuzzy_delay:\n                initial_delay = random.randint(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_fuzzy_delay)\n            \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e:\n                initial_delay = None\n\n            \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.tg.add_dynamic_timer(\u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_tasks,\n                                     initial_delay=initial_delay,\n                                     periodic_interval_max=\n                                        \u003cspan class=\"hljs-keyword\"\u003eself\u003c/span\u003e.periodic_interval_max)\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这段代码涉及到了Oslo_messaging库，oslo.messaging的产生就不多说了，因为RPC的调用在各个项目中都有，以前各个项目分别维护一坨类似的代码，为了简化工作、方便打包等，社区就把RPC相关的功能作为OpenStack的一个依赖库。另一方面，也为后续支持非AMQP协议的消息中间件（ZeroMQ）的引入打下基础。\u003c/p\u003e\n\n\u003cp\u003e其实oslo.messaging库就是把rabbitmq的python库做了封装，考虑到了编程友好、性能、可靠性、异常的捕获等诸多因素。让各个项目的开发者聚焦于业务代码的编写，而不用考虑消息如何发送和接收。这对于各个项目开发者来说当然是好事，但对于一套OpenStack系统的运维人员来说，封装就意味着很多细节被隐藏，为了能够解决消息转发过程中出现的问题，需要再花费时间和精力去理解oslo.messaging的业务逻辑，对于本来就错综复杂的OpenStack核心业务来说，无疑是雪上加霜。\u003c/p\u003e\n\n\u003cp\u003e这里有几个概念： \u003cbr\u003e\n- target：作为消息发送者，需要在target中指定消息要发送到的exchange, binding-key, consumer等信息（这些概念可能与target对象属性不一样） \u003cbr\u003e\n- serializer：负责消息的序列化处理。就是负责把Nova中的对象转换成可以在网络中传送的格式。 \u003cbr\u003e\n- TRANSPORT：处理消息发送的抽象层。根据rpc_backend的配置确定真正处理消息发送的driver。一般我们会用到这个：rabbit = oslo_messaging._drivers.impl_rabbit:RabbitDriver。对于RabbitDriver，其相关配置项都在/oslo_messaging/_drivers/impl_rabbit.py中，它内部会维护一个connection pool，管理Connection对象。 \u003cbr\u003e\n- Endpoint：Transport Driver接收到消息之后会进行分发处理，这里会有个Dispatcher分发给相应的Endpoint处理，Endpoint就是设置成前文提到的ComputeManager。\u003c/p\u003e\n\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eNova和外部模块的交互通过Restful接口调用，内部接口间采用异步RPC调用，而且正因为是异步，所以Eventlet库可以配套使用；\u003c/li\u003e\n\u003cli\u003e在RPC模式下，多个Nova-compute节点通过组合键(topic=self.topic, server=self.host)形成Routing Key来进行Binding\u003c/li\u003e\n\u003cli\u003eTransport指定了底层的传输层机制，当前支持RabbitMQ和ZeroMQ\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"https://docs.openstack.org/ocata/config-reference/compute.html\" target=\"_blank\"\u003ehttps://docs.openstack.org/ocata/config-reference/compute.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://www.infoq.com/cn/articles/OpenStack-demo-packagemanagement\" target=\"_blank\"\u003ehttp://www.infoq.com/cn/articles/OpenStack-demo-packagemanagement\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://www.openstack.cn/?p=3514\" target=\"_blank\"\u003ehttp://www.openstack.cn/?p=3514\u003c/a\u003e\u003c/p\u003e","markdowncontent":"## Nova架构概览\nNova是OpenStack社区最核心的项目，也是社区诞生之时就一直存在的项目，它主要提供计算资源的服务，这个计算资源包含了虚机以及配套的存储，网络等资源。我比较喜欢把OpenStack和Linux做类比，我们知道进程（Task）是处于执行期的程序以及相关资源的总称，如果把虚机类比为进程，Nova就类似于Linux中的进程管理和调度模块。所以Nova会和很多其他的组件交互，不仅包括OpenStack自身的Neutron，Glance， Cinder等组件，还有不同的Hypervisor 包括KVM， Xen等。\n![这里写图片描述](http://img.blog.csdn.net/20170717203037905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### Nova的组件构成\nNova组件有以下六部分组成：\n1)  API服务器 API Server（Nova-api）\n2)  计算工作者Compute Workers（Nova-compute）\n3)  网络控制器Network Controller（Nova-network）\n4)  卷工作者Volume Worker（Nova-volume）\n5)  调度器Schedule（Nova-schedule）\n6)  消息队列Message Queue（rabbitmq server）\n\n![这里写图片描述](http://img.blog.csdn.net/20140619223804453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2FueGluZ2hlbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n上图是Nova的软件架构图，Nova中的各个组件（除了消息队列组件以外）都是有Python代码编写的守护进程，由上图可以看出每个进程之间通过队列（Queue）和数据库（Nova database）来交换信息。\n \n下面对Nova的组件进行介绍。\n1)  API服务器 API Server（Nova-api）\n\nNova-API对外提供一个与云基础设施交互的接口，也是外部可用于管理基础设施的唯一组件。它负责发起相应的类似运行新虚拟机实例这样的资源调度活动。\n在实现层面上，nova-api是python实现的WSGI应用。（WSGI即Web服务器网关接口是Python应用程序或框架和Web服务器之间的一种接口，已经被广泛接受，它已基本达成可移植性方面的目标）\n \n2)  计算工作者Compute Workers（Nova-compute）\n\nNova-compute处理管理实例生命周期，负责对虚拟机实例进行创建、终止、迁移、Resize的操作。\n工作原理：队列中接收请求→执行→更新数据库状态\n \n3)  网络控制器Network Controller（Nova-network）\n\nNova-network负责处理主机的网络配置，其中包括：IP地址分配，配置vlan，实现安全组，配置计算节点网络等任务。\n工作原理：队列中接收网络任务→控制虚拟机的网络（创建桥接网络、改变iptables规则）\n \n4)  卷工作者Volume Worker（Nova-volume）\n\nNova-volume提供卷管理，为虚拟机实例提供额外的volume访问\n用来管理基于逻辑卷管理的实例卷。一个实例的重要数据总是要写在卷上，这样确保能在以后访问。\n5)  调度器Schedule（Nova-schedule）\n\nNova-Scheduler负责为虚拟机实例指定运行的物理服务器，主要负责调度资源，有多种调度方法供选择\n通过适当的调度算法从可用资源池获得一个计算服务。\n \n6)  消息队列Message Queue（rabbitmq server）\n\nOpenstack节点之间通过消息队列使用AMQP（高级消息队列协议）完成通信（异步通信）。\nRabbitmq是对这个协议的一个实现，默认使用kombu消息框架，该部分本文不进行详细展开，将在另外一篇文章中进行讲述。\n![这里写图片描述](http://img.blog.csdn.net/20170717203101331?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## Nova Compute Service启动流程\nNova的服务类型分为两种，WsgiService和RpcService，每一种服务类型都会根据nova.conf的配置启动一个或多个进程。这其中WsgiService主要是用于组件之间的Restful接口交互，而组件内部的不同模块采取RpcService交互模式。\n\n### Nova Compute 启动流程分析\n这里先以Nova Compute进程的启动过程为例，在/nava/bin目录下为所有的启动脚本入口，对源代码进行走读分析。\n####***OpenStack软件包管理***\n软件包管理是每个OpenStack项目的基础，其目的是用来将项目代码打包成源码包或者二进制包进行分发。一个项目的代码可能会被打包放到PyPI上，这样你可以通过 pip 命令安装这个包；也可能会被打包放到项目的软件仓库里，这样你可以通过 apt-get install 或者 yum install 来安装这个软件包。\n\nOpenStack也是使用setuptools工具来进行打包，不过为了满足OpenStack项目的需求，引入了一个辅助工具 pbr (Python Build Reasonableness)来配合setuptools完成打包工作。pbr是一个setuptools的扩展工具，被开发出来的主要目的是为了方便使用setuptools，其项目文档地址也在OpenStack官网内： http://docs.openstack.org/developer/pbr/ 。\n\n先说一下pbr如何使用：\n```Python\nimport setuptools\nsetuptools.setup(setup_requires=[\u0027pbr\u0027], pbr=True)\n```\n按照上面的方式就可以配置setuptools工具使用pbr来协助完成打包工作。这里的 setup_requires 参数意思是setup函数在执行之前需要依赖的包的列表。这里的依赖的包的功能可以理解为生成setup的实际参数。你可以看到，当使用pbr的时候，setup函数只有两个参数，然而实际上 setuptools.setup 函数实际上是 disutils.core.setup 函数，会接收任何参数，这些参数可以通过在调用时指定，也可以通过所依赖的扩展来生成（比如pbr）\n\n***setup.cfg***\n由于OpenStack项目都使用了setuptools和pbr来执行打包工作，因此项目的元数据都放在 setup.cfg 文件中。我们以 Compute项目的setup.cfg文件为例来说明这个文件里一般会包含什么内容：\n```\n[metadata]\nname = nova\nsummary = Cloud computing fabric controller\ndescription-file = \n\tREADME.rst\nauthor = OpenStack\nauthor-email = openstack-dev@lists.openstack.org\nhome-page = http://docs.openstack.org/developer/nova/\nclassifier = \n\tEnvironment :: OpenStack\n\tIntended Audience :: Information Technology\n\tIntended Audience :: System Administrators\n\tLicense :: OSI Approved :: Apache Software License\n\tOperating System :: POSIX :: Linux\n\tProgramming Language :: Python\n\tProgramming Language :: Python :: 2\n\tProgramming Language :: Python :: 2.7\n\n[global]# 全局段\nsetup-hooks = \n\tpbr.hooks.setup_hook\n\n[files] # 文件段\npackages = \n\tnova\n\n[entry_points] # 指定入口点\noslo.config.opts = \n\tnova.conf = nova.conf.opts:list_opts\noslo.config.opts.defaults = \n\tnova.conf = nova.common.config:set_middleware_defaults\noslo.policy.enforcer = \n\tnova = nova.policy:get_enforcer\noslo.policy.policies = \n\t# The sample policies will be ordered by entry point and then by list\n\t# returned from that entry point. If more control is desired split out each\n\t# list_rules method into a separate entry point rather than using the\n\t# aggregate method.\n\tnova = nova.policies:list_rules\nnova.compute.monitors.cpu = \n\tvirt_driver = nova.compute.monitors.cpu.virt_driver:Monitor\nnova.image.download.modules = \n\tfile = nova.image.download.file\n\nconsole_scripts =  # 指定要生成的可执行文件\n\tnova-compute = nova.cmd.compute:main\n\nwsgi_scripts = \n\tnova-placement-api = nova.api.openstack.placement.wsgi:init_application\n[build_sphinx] # 文档build相关信息\nall_files = 1\nbuild-dir = doc/build\nsource-dir = doc/source\n\n[build_apiguide] # 文档build相关信息\nall_files = 1\nbuild-dir = api-guide/build\nsource-dir = api-guide/source\n\n[egg_info] # 指定egg信息\ntag_build = \ntag_date = 0\ntag_svn_revision = 0\n\n[compile_catalog]\ndirectory = nova/locale\ndomain = nova nova-log-critical nova-log-error nova-log-info nova-log-warning\n\n[update_catalog]\ndomain = nova\noutput_dir = nova/locale\ninput_file = nova/locale/nova.pot\n\n[extract_messages]\nkeywords = _ gettext ngettext l_ lazy_gettext\nmapping_file = babel.cfg\noutput_file = nova/locale/nova.pot\n\n[wheel]\nuniversal = 1\n\n[extras]\nosprofiler = \n\tosprofiler\u003e=1.4.0 # Apache-2.0\n\n[pbr]\nwarnerrors = true\n```\n(上面有些未注释的部分我目前还不太清楚，后续补充，可以先参考 [PEP301](https://www.python.org/dev/peps/pep-0301/) )\n这里说说一下 classifier 这个参数。这个参数是用来指定一个软件包的分类、许可证、允许运行的操作系统、允许运行的Python的版本的信息。\nentry_points是一个字典，从entry point组名映射到一个表示entry point的字符串或字符串列表。Entry points是用来支持动态发现服务和插件的，也用来支持自动生成脚本。\n\n***requirements.txt***\n这个文件指定了一个项目依赖的包有哪些，并且支出了依赖的包的版本需求\n\n***软件包归档格式***\nPython的软件包一开始是没有官方的标准分发格式的。比如Java有jar包或者war包作为分发格式，Python则什么都没有。后来不同的工具都开始引入一些比较通用的归档格式。比如，setuptools引入了Egg格式。但是，这些都不是官方支持的，存在元数据和包结构彼此不兼容的问题。因此，为了解决这个问题， PEP 427 定义了新的分发包标准，名为 Wheel 。目前pip和setuptools工具都支持Wheel格式。这里我们简单总结一下常用的分发格式：\n\n- tar.gz 格式：这个就是标准压缩格式，里面包含了项目元数据和代码，可以使用 python setup.py sdist 命令生成。\n- .egg 格式：这个本质上也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据以及源代码。这个格式由setuptools项目引入。可以通过命令 python setup.py bdist_egg 命令生成。\n- .whl 格式：这个是Wheel包，也是一个压缩文件，只是扩展名换了，里面也包含了项目元数据和代码，还支持免安装直接运行。whl分发包内的元数据和egg包是有些不同的。这个格式是由PEP 427引入的。可以通过命令 python setup.py bdist_wheel 生成。\n\n####***Nova Compute启动入口***\n了解了OPS的打包规则可以知道Nova Compute的程序入口就是在nova/cmd/compute.py，先列举源码：\n\n```\n\"\"\"Starter script for Nova Compute.\"\"\"\n\nCONF = nova.conf.CONF\nLOG = logging.getLogger(\u0027nova.compute\u0027)\n\ndef main():\n    config.parse_args(sys.argv)\n    logging.setup(CONF, \u0027nova\u0027)\n    priv_context.init(root_helper=shlex.split(utils.get_root_helper()))\n    utils.monkey_patch()\n    objects.register_all()\n    # Ensure os-vif objects are registered and plugins loaded\n    os_vif.initialize()\n\n    gmr.TextGuruMeditation.setup_autorun(version)\n\n    cmd_common.block_db_access(\u0027nova-compute\u0027)\n    objects_base.NovaObject.indirection_api = conductor_rpcapi.ConductorAPI()\n\n    server = service.Service.create(binary=\u0027nova-compute\u0027,\n                                    topic=CONF.compute_topic)\n    service.serve(server)\n    service.wait()\n```\n在这里首先会调用config.parse_args(sys.argv)函数来做一些初始化的工作，包括RpcServer的传输层Driver的指定等工作。\n\n接下来调用Create()函数创建RPC Service，并且设置Topic为CONF.compute_topic，在[【OpenStack源码分析之二】RabbitMQ分析](http://blog.csdn.net/ohenry88/article/details/75208757)中有详细讲述RPC的使用。Create()函数调用的实例化对象会设置一个ComputeManager来负责处理所有的Rpc请求，具体接口请阅读源码Nova/compute/manager/ComputeManager类。\n\n后面就是Serve函数，它会分配一个协程（关于协程的介绍请见对[Python协程的理解](http://blog.csdn.net/ohenry88/article/details/73196798)）来调用Service的Start()函数，接下来我们分析一下RpcService的Start()函数，源码如下：\n\n```Python\n def start(self):\n        verstr = version.version_string_with_package()\n        LOG.info(_LI(\u0027Starting %(topic)s node (version %(version)s)\u0027),\n                  {\u0027topic\u0027: self.topic, \u0027version\u0027: verstr})\n        self.basic_config_check()\n        self.manager.init_host()\n        self.model_disconnected = False\n        ctxt = context.get_admin_context()\n        self.service_ref = objects.Service.get_by_host_and_binary(\n            ctxt, self.host, self.binary)\n        if self.service_ref:\n            _update_service_ref(self.service_ref)\n\n        else:\n            try:\n                self.service_ref = _create_service_ref(self, ctxt)\n            except (exception.ServiceTopicExists,\n                    exception.ServiceBinaryExists):\n                # NOTE(danms): If we race to create a record with a sibling\n                # worker, don\u0027t fail here.\n                self.service_ref = objects.Service.get_by_host_and_binary(\n                    ctxt, self.host, self.binary)\n\n        self.manager.pre_start_hook()\n\n        if self.backdoor_port is not None:\n            self.manager.backdoor_port = self.backdoor_port\n\n        LOG.debug(\"Creating RPC server for service %s\", self.topic)\n\n        target = messaging.Target(topic=self.topic, server=self.host)\n\n        endpoints = [\n            self.manager,\n            baserpc.BaseRPCAPI(self.manager.service_name, self.backdoor_port)\n        ]\n        endpoints.extend(self.manager.additional_endpoints)\n\n        serializer = objects_base.NovaObjectSerializer()\n\n        self.rpcserver = rpc.get_server(target, endpoints, serializer)\n        self.rpcserver.start()\n\n        self.manager.post_start_hook()\n\n        LOG.debug(\"Join ServiceGroup membership for this service %s\",\n                  self.topic)\n        # Add service to the ServiceGroup membership group.\n        self.servicegroup_api.join(self.host, self.topic, self)\n\n        if self.periodic_enable:\n            if self.periodic_fuzzy_delay:\n                initial_delay = random.randint(0, self.periodic_fuzzy_delay)\n            else:\n                initial_delay = None\n\n            self.tg.add_dynamic_timer(self.periodic_tasks,\n                                     initial_delay=initial_delay,\n                                     periodic_interval_max=\n                                        self.periodic_interval_max)\n```\n这段代码涉及到了Oslo_messaging库，oslo.messaging的产生就不多说了，因为RPC的调用在各个项目中都有，以前各个项目分别维护一坨类似的代码，为了简化工作、方便打包等，社区就把RPC相关的功能作为OpenStack的一个依赖库。另一方面，也为后续支持非AMQP协议的消息中间件（ZeroMQ）的引入打下基础。\n\n其实oslo.messaging库就是把rabbitmq的python库做了封装，考虑到了编程友好、性能、可靠性、异常的捕获等诸多因素。让各个项目的开发者聚焦于业务代码的编写，而不用考虑消息如何发送和接收。这对于各个项目开发者来说当然是好事，但对于一套OpenStack系统的运维人员来说，封装就意味着很多细节被隐藏，为了能够解决消息转发过程中出现的问题，需要再花费时间和精力去理解oslo.messaging的业务逻辑，对于本来就错综复杂的OpenStack核心业务来说，无疑是雪上加霜。\n\n这里有几个概念：\n- target：作为消息发送者，需要在target中指定消息要发送到的exchange, binding-key, consumer等信息（这些概念可能与target对象属性不一样）\n- serializer：负责消息的序列化处理。就是负责把Nova中的对象转换成可以在网络中传送的格式。\n- TRANSPORT：处理消息发送的抽象层。根据rpc_backend的配置确定真正处理消息发送的driver。一般我们会用到这个：rabbit = oslo_messaging._drivers.impl_rabbit:RabbitDriver。对于RabbitDriver，其相关配置项都在/oslo_messaging/_drivers/impl_rabbit.py中，它内部会维护一个connection pool，管理Connection对象。\n- Endpoint：Transport Driver接收到消息之后会进行分发处理，这里会有个Dispatcher分发给相应的Endpoint处理，Endpoint就是设置成前文提到的ComputeManager。\n\n## 总结\n- Nova和外部模块的交互通过Restful接口调用，内部接口间采用异步RPC调用，而且正因为是异步，所以Eventlet库可以配套使用；\n- 在RPC模式下，多个Nova-compute节点通过组合键(topic=self.topic, server=self.host)形成Routing Key来进行Binding\n- Transport指定了底层的传输层机制，当前支持RabbitMQ和ZeroMQ\n\n参考文献：\nhttps://docs.openstack.org/ocata/config-reference/compute.html\nhttp://www.infoq.com/cn/articles/OpenStack-demo-packagemanagement\nhttp://www.openstack.cn/?p=3514\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-21] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-22-【OpenStack源码分析之八】openstack中虚拟机在线迁移.markdown [pool-2-thread-4] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":75701576,"title":"【OpenStack源码分析之六】从虚拟机启动流程看安全认证","create_at":"\/Date(1500690388000)\/","create":"2017-07-22 10:26:28","view_count":250,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"前言从7.8号开始分析OpenStack已经有两周了，原本计划一个月分析完Neutron和Nova的，但是捋了下Nova的虚拟机启动流程，尤其是看到popsuper1982仁兄写得虚拟机启动的100个知识点，大概流程是清楚了，但是我没办法再去逐一深究，所以想把这里面再提取几个我关注的知识点研究一下。先借用一下网上的两张图： \n虚拟机启动的100个知识点虚拟机启动的整体流程 \n这里面我比较关注的几个问","url":"http://blog.csdn.net/BLACKMOON88/article/details/75701576","categories":"云计算,Python相关,OpenStack","tags":"openstack,安全,nova,源码","content":"\u003ch3 id=\"前言\"\u003e前言\u003c/h3\u003e\n\n\u003cp\u003e从7.8号开始分析OpenStack已经有两周了，原本计划一个月分析完Neutron和Nova的，但是捋了下Nova的虚拟机启动流程，尤其是看到popsuper1982仁兄写得\u003ca href=\"http://www.cnblogs.com/popsuper1982/p/3927390.html\" target=\"_blank\"\u003e虚拟机启动的100个知识点\u003c/a\u003e，大概流程是清楚了，但是我没办法再去逐一深究，所以想把这里面再提取几个我关注的知识点研究一下。先借用一下网上的两张图： \u003cbr\u003e\n\u003cstrong\u003e\u003cem\u003e虚拟机启动的100个知识点\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://images.cnitblog.com/blog/635909/201408/211556070651203.png\" alt=\"100个知识点\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003e虚拟机启动的整体流程\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170722071514030?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"启动流程\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e这里面我比较关注的几个问题： \u003cbr\u003e\n- 安全认证机制，如何确保客户端的访问时可信的。（我并不做安全，只是纯属兴趣，毕竟互联网金融时代我也想了解下我的财富是否安全^_^） \u003cbr\u003e\n- 虚拟机调度算法（类似于进程调度，这个任务是操作系统的核心） \u003cbr\u003e\n- 虚拟机在整个流程中的状态迁移 \u003cbr\u003e\n- HA机制涉及的技术，包括事务，分布式技术等 \u003cbr\u003e\n- Hypervisor层的接口与调用 \u003cbr\u003e\n- 虚拟机热迁移如何实现 \u003cbr\u003e\n- OAM：OpenStack后台运行的周期性任务\u003c/p\u003e\n\n\u003cp\u003e一口气列了七个问题，我想到下周能彻底写完就算比错，因为Neutron的部分我有些底子。再用一周应该可以分析完成。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"安全认证\"\u003e安全认证\u003c/h3\u003e\n\n\u003cp\u003e我不是搞安全的，在我看来，安全认证的范围在于如何证明你妈是你妈，也就是当一个Restcall到来的时候，如何保障消息来源的可靠性以及消息的完整性，消息来源的可靠性的意思是Restcall的来源是经过认证的注册用户，而不是第三方黑客；消息的完整性是指消息在传递的过程中没有被修改。注意，这里面没有涉及消息的加密技术，这是另一个范畴，加密是保障消息在传递过程中第三方无读取权限（比如网上交易里涉及的密码等等）。 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170722082307803?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Nova API网络\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eToken是什么\u003c/em\u003e\u003c/strong\u003e \u003cbr\u003e\n一般来说，Token是通过提供有效的用户名/密码组合提供给用户的一段数据。另外，与Token密切相关的是它的有效期（通常是几小时甚至几分钟）。Client可以缓存Token并将其注入到OpenStack API请求中。OpenStack API端点将令牌从用户请求中取出，并通过KeyStone后端进行验证，从而确认调用的合法性。 \u003cbr\u003e\n我们现在把注意力放在两种Token生成方式：通用唯一标识符（UUID）和公共密钥基础设施（PKI）的标识\u003c/p\u003e\n\n\n\n\u003ch3 id=\"uuid\"\u003eUUID\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.mirantis.com/wp-content/uploads/2013/07/UUID-token-validation-flow-3.png?_=3800235\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e基于提供的用户名/密码对： \u003cbr\u003e\n- KeyStone将做以下工作： \u003cbr\u003e\n- 生成一个UUID令牌。 \u003cbr\u003e\n- 将UUID令牌存储在后端。 \u003cbr\u003e\n- 发送一份拷贝的UUID令牌返回给客户端。 \u003cbr\u003e\n- 客户机将缓存令牌。 \u003cbr\u003e\n- 然后客户端会把UUID附在每个API调用上。 \u003cbr\u003e\n- 在每一个用户的请求，API端点会送这个UUID回到Keystone验证。 \u003cbr\u003e\n- Keystone将UUID和它的认证后端匹配（检查UUID字符串、日期）。 \u003cbr\u003e\n- KeyStone将返回“成功”或“失败”消息到API端点。 \u003cbr\u003e\n从上面的图表中可以看到，对于每个用户调用，API端点都需要使用KeyStone服务进行联机验证。想象成千上万的Client执行VM List、网络创建等等操作。这种设计导致了大量流量被导向了KeyStone造成单点故障。事实上，在生产中，Keystone被证明是负载最重的OpenStack服务之一，但Grizzly版本之后就采取了PKI方式来解决这个问题。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"背景知识非对称加密\"\u003e背景知识：非对称加密\u003c/h3\u003e\n\n\u003cp\u003e采用非对称加密算法，公钥获取的可靠性就非常重要，获取到正确的公钥，后续的工作就成功了一半。另一半是保障数据的完整性，这个是通过数据签名实现的，怎么样才能保障获取到正确的公钥呢？ \u003cbr\u003e\n我们第一反应可能会想到以下的两个方法： \u003cbr\u003e\n    - a)把公钥放到互联网的某个地方的一个下载地址，事先给“客户”去下载。 \u003cbr\u003e\n    - b)每次和“客户”开始通信时，“服务器”把公钥发给“客户”。 \u003cbr\u003e\n但是这个两个方法都有一定的问题， \u003cbr\u003e\n对于a)方法，“客户”无法确定这个下载地址是不是“服务器”发布的，你凭什么就相信这个地址下载的东西就是“服务器”发布的而不是别人伪造的呢，万一下载到一个假的怎么办？另外要所有的“客户”都在通信前事先去下载公钥也很不现实。 \u003cbr\u003e\n对于b)方法，也有问题，因为任何人都可以自己生成一对公钥和私钥，他只要向“客户”发送他自己的私钥就可以冒充“服务器”了。示意如下：\u003c/p\u003e\n\n\u003cp\u003e“客户”-&gt;“黑客”：你好           //黑客截获“客户”发给“服务器”的消息 \u003cbr\u003e\n“黑客”-&gt;“客户”：你好，我是服务器，这个是我的公钥    //黑客自己生成一对公钥和私钥，把公钥发给“客户”，自己保留私钥 \u003cbr\u003e\n“客户”-&gt;“黑客”：向我证明你就是服务器 \u003cbr\u003e\n“黑客”-&gt;“客户”：你好，我是服务器 {你好，我是服务器}[黑客自己的私钥|RSA]      //客户收到“黑客”用私钥加密的信息后，是可以用“黑客”发给自己的公钥解密的，从而会误认为“黑客”是“服务器”\u003c/p\u003e\n\n\u003cp\u003e因此“黑客”只需要自己生成一对公钥和私钥，然后把公钥发送给“客户”，自己保留私钥，这样由于“客户”可以用黑客的公钥解密黑客的私钥加密的内容，“客户”就会相信“黑客”是“服务器”，从而导致了安全问题。这里问题的根源就在于，大家都可以生成公钥、私钥对，无法确认公钥对到底是谁的。 \u003cstrong\u003e如果能够确定公钥到底是谁的，就不会有这个问题了。\u003c/strong\u003e例如，如果收到“黑客”冒充“服务器”发过来的公钥，经过某种检查，如果能够发现这个公钥不是“服务器”的就好了。\u003c/p\u003e\n\n\u003cp\u003e解决这个问题其实就不是技术问题了，需要一个权威机构来授权数字证书，它可以解决我们上面的问题。先大概看下什么是数字证书，一个证书包含下面的具体内容（证书相当于协议的控制面，会定义后续交互的算法和公钥等）：\u003c/p\u003e\n\n\u003cp\u003e◆CA (证书的发布机构)\u003c/p\u003e\n\n\u003cp\u003e指出是什么机构发布的这个证书，也就是指明这个证书是哪个公司创建的(只是创建证书，不是指证书的使用者)。对于上面的这个证书来说，就是指”SecureTrust CA”这个机构。\u003c/p\u003e\n\n\u003cp\u003e◆Valid from , Valid to (证书的有效期)\u003c/p\u003e\n\n\u003cp\u003e也就是证书的有效时间，或者说证书的使用期限。 过了有效期限，证书就会作废，不能使用了。\u003c/p\u003e\n\n\u003cp\u003e◆Public key (公钥)\u003c/p\u003e\n\n\u003cp\u003e这个我们在前面介绍公钥密码体制时介绍过，公钥是用来对消息进行加密和解密的。\u003c/p\u003e\n\n\u003cp\u003e◆Subject (主题)\u003c/p\u003e\n\n\u003cp\u003e这个证书是发布给谁的，或者说证书的所有者，一般是某个人或者某个公司名称、机构的名称、公司网站的网址等。 对于这里的证书来说，证书的所有者是Trustwave这个公司。\u003c/p\u003e\n\n\u003cp\u003e◆Signature algorithm (签名所使用的算法)\u003c/p\u003e\n\n\u003cp\u003e就是指的这个数字证书的数字签名所使用的加密算法，这样就可以使用证书发布机构的证书里面的公钥，根据这个算法对指纹进行解密。指纹的加密结果就是数字签名。\u003c/p\u003e\n\n\u003cp\u003e◆Thumbprint, Thumbprint algorithm (指纹以及指纹算法)\u003c/p\u003e\n\n\u003cp\u003e这个是用来保证证书的完整性的，也就是说确保证书没有被修改过，其原理就是在发布证书时，发布者根据指纹算法(一个hash算法)计算整个证书的hash值(指纹)并和证书放在一起，使用者在打开证书时，自己也根据指纹算法计算一下证书的hash值(指纹)，如果和刚开始的值对得上，就说明证书没有被修改过，因为证书的内容被修改后，根据证书的内容计算的出的hash值(指纹)是会变化的。 注意，这个指纹是数据的指纹，并不是代表客户端或服务器端的指纹。\u003c/p\u003e\n\n\u003cp\u003e注意，为了保证安全，在证书的发布机构发布证书时，证书的指纹和指纹算法，都会加密后再和证书放到一起发布，以防有人修改指纹后伪造相应的数字证书。这里问题又来了，证书的指纹和指纹算法用什么加密呢？他们是用证书发布机构的私钥进行加密的。可以用证书发布机构的公钥对指纹和指纹算法解密，也就是说证书发布机构除了给别人发布证书外，他自己本身也有自己的证书。证书发布机构的证书是哪里来的呢？？？这个证书发布机构的数字证书(一般由他自己生成)在我们的操作系统刚安装好时(例如windows xp等操作系统)，这些证书发布机构的数字证书就已经被微软(或者其它操作系统的开发机构)安装在操作系统中了，微软等公司会根据一些权威安全机构的评估选取一些信誉很好并且通过一定的安全认证的证书发布机构，把这些证书发布机构的证书默认就安装在操作系统里面了，并且设置为操作系统信任的数字证书。这些证书发布机构自己持有与他自己的数字证书对应的私钥，他会用这个私钥加密所有他发布的证书的指纹作为数字签名。\u003c/p\u003e\n\n\u003cp\u003e说白了，要想具备CA资质，又需要到更权威的机构去认证，而这些更权威的机构是已经默认在操作系统中安装了其公钥证书。所以在初始阶段，Client会拿着Server端的证书去权威机构鉴定是否是对方，而Server端会拿着Client的证书去自己的CA机构Keystone验证可靠性。 \u003cbr\u003e\n\u003cimg src=\"http://www.codeproject.com/KB/IP/326574/mutualssl_small.png?_=3927390\" alt=\"这里写图片描述\" title=\"\"\u003e\u003c/p\u003e\n\n\u003ch3 id=\"证书的发布机构\"\u003e证书的发布机构\u003c/h3\u003e\n\n\u003cp\u003e前面已经初步介绍了一下证书发布机构，这里再深入讨论一下。\u003c/p\u003e\n\n\u003cp\u003e其实所有的公司都可以发布证书，我们自己也可以去注册一家公司来专门给别人发布证书。但是很明显，我们自己的专门发布证书的公司是不会被那些国际上的权威机构认可的，人家怎么知道你是不是个狗屁皮包公司？因此微软在它的操作系统中，并不会信任我们这个证书发布机构，当应用程序在检查证书的合法信的时候，一看证书的发布机构并不是操作系统所信任的发布机构，就会抛出错误信息。也就是说windows操作系统中不会预先安装好我们这个证书发布机构的证书，不信任我们这个发布机构。\u003c/p\u003e\n\n\u003cp\u003e不受信任的证书发布机构的危害\u003c/p\u003e\n\n\u003cp\u003e为什么一个证书发布机构受不受信任这么重要？我们举个例子。假设我们开了一个狗屁公司来为别人发布证书，并且我和微软有一腿，微软在他们的操作系统中把我设置为了受信任的证书发布机构。现在如果有个小公司叫Wicrosoft 花了10块钱让我为他们公司申请了一个证书，并且公司慢慢壮大，证书的应用范围也越来越广。然后有个奸商的公司JS Company想冒充Wicrosoft，于是给了我￥10000，让我为他们颁布一个证书，但是证书的名字(Subject)要写Wicrosoft，假如我为了这￥10000，真的把证书给了他们，那么他们以后就可以使用这个证书来冒充Wicrosoft了。\u003c/p\u003e\n\n\u003cp\u003e如果是一个优秀的证书发布机构，比如你要向他申请一个名字叫Wicrosoft的证书，它会让你提供很多资料证明你确实可以代表Wicrosoft这个公司，也就是说他回去核实你的身份。证书发布机构是要为他发布出的证书负法律责任的。\u003c/p\u003e\n\n\u003cp\u003e到这里，你可能会想，TMD，那我们自己就不能发布证书吗？就一定要花钱去申请？当然不是，我们自己也可以成立证书发布机构，但是需要通过一些安全认证等等，只是有点麻烦。另外，如果数字证书只是要在公司内部使用，公司可以自己给自己生成一个证书，在公司的所有机器上把这个证书设置为操作系统信任的证书发布机构的证书(这句话仔细看清楚，有点绕口)，这样以后公司发布的证书在公司内部的所有机器上就可以通过验证了(在发布证书时，把这些证书的Issuer(发布机构)设置为我们自己的证书发布机构的证书的Subject(主题)就可以了)。但是这只限于内部应用，因为只有我们公司自己的机器上设置了信任我们自己这个所谓的证书发布机构，而其它机器上并没有事先信任我们这个证书发布机构，所以在其它机器上，我们发布的证书就无法通过安全验证。\u003c/p\u003e\n\n\u003ch3 id=\"pki方式\"\u003ePKI方式\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"http://www.mirantis.com/wp-content/uploads/2013/07/PKI-token-validation-flow-1.png?_=3800235\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n在PKI方式下，KeyStone已经成为一个CA（认证授权）机构，PKI 的本质就是基于数字签名，Keystone 用私钥对 token 进行数字签名，各个 API server 用公钥在本地验证该 token。也就是说通过这种方式来实现单点登录（用户只需要登录一次就可以访问所有相互信任的应用系统）。当然这里如何确保安全（比如黑客截获这个Token冒充客户端发送请求，当然这里会有一个Token过期时间），我也不太清楚，只是当前已经在使用这种方式，是否安全具体做安全的人可以告知一下。这里的Token是通过Service catalog，User roles，Metadata等消息来生成的\u003c/p\u003e\n\n\u003cp\u003e总结一下： \u003cbr\u003e\n如何确保消息源的可靠性？  通过第三方权威机构认证的CA机构才有授予证书的权利，而这些第三方权威机构在操作系统默认已经安装，在初始阶段，Client会拿着Server端的证书去权威机构鉴定是否是对方，而Server端会拿着Client的证书去自己的CA机构Keystone验证可靠性。\u003c/p\u003e\n\n\u003cp\u003e如何确保数据的完整性？ 通过数据签名算法，首先对数据进行Hash算法生成指纹，然后用公钥或者私钥加密生成数字签名，接收方拿到数据后使用私钥解密数字签名，同时使用相同的Hash算法对数据生成指纹进行比对。\u003c/p\u003e\n\n\u003cp\u003e如何确保数据是保密的，第三方无查看权限？ 交互双方在互相认定证书之后会使用公私钥加密约定消息体的对称加密算法和公钥，这个过程是客户端来发起的，服务器端不允许这个操作。\u003c/p\u003e\n\n\u003cp\u003e总而言之，证书类似一个协议控制面，用来做消息源可靠性的认定以及数据完整性的算法约定，后续的交互就会用上证书约定的公钥和指纹算法。消息体的保密性是无法确保的。需要靠另外的数据加密算法。\u003c/p\u003e\n\n\u003cp\u003e参考文献： \u003cbr\u003e\n\u003ca href=\"http://www.cnblogs.com/popsuper1982/p/3800235.html\" target=\"_blank\"\u003ehttp://www.cnblogs.com/popsuper1982/p/3800235.html\u003c/a\u003e \u003cbr\u003e\n\u003ca href=\"http://blog.sina.com.cn/s/blog_44ee37cd01016r1h.html\" target=\"_blank\"\u003ehttp://blog.sina.com.cn/s/blog_44ee37cd01016r1h.html\u003c/a\u003e\u003c/p\u003e","markdowncontent":"### 前言\n从7.8号开始分析OpenStack已经有两周了，原本计划一个月分析完Neutron和Nova的，但是捋了下Nova的虚拟机启动流程，尤其是看到popsuper1982仁兄写得[虚拟机启动的100个知识点](http://www.cnblogs.com/popsuper1982/p/3927390.html)，大概流程是清楚了，但是我没办法再去逐一深究，所以想把这里面再提取几个我关注的知识点研究一下。先借用一下网上的两张图：\n***虚拟机启动的100个知识点***\n\n![100个知识点](http://images.cnitblog.com/blog/635909/201408/211556070651203.png)\n\n***虚拟机启动的整体流程***\n![启动流程](http://img.blog.csdn.net/20170722071514030?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这里面我比较关注的几个问题：\n- 安全认证机制，如何确保客户端的访问时可信的。（我并不做安全，只是纯属兴趣，毕竟互联网金融时代我也想了解下我的财富是否安全^_^）\n- 虚拟机调度算法（类似于进程调度，这个任务是操作系统的核心）\n- 虚拟机在整个流程中的状态迁移\n- HA机制涉及的技术，包括事务，分布式技术等\n- Hypervisor层的接口与调用\n- 虚拟机热迁移如何实现\n- OAM：OpenStack后台运行的周期性任务\n\n一口气列了七个问题，我想到下周能彻底写完就算比错，因为Neutron的部分我有些底子。再用一周应该可以分析完成。\n\n### 安全认证\n我不是搞安全的，在我看来，安全认证的范围在于如何证明你妈是你妈，也就是当一个Restcall到来的时候，如何保障消息来源的可靠性以及消息的完整性，消息来源的可靠性的意思是Restcall的来源是经过认证的注册用户，而不是第三方黑客；消息的完整性是指消息在传递的过程中没有被修改。注意，这里面没有涉及消息的加密技术，这是另一个范畴，加密是保障消息在传递过程中第三方无读取权限（比如网上交易里涉及的密码等等）。\n![Nova API网络](http://img.blog.csdn.net/20170722082307803?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n***Token是什么***\n一般来说，Token是通过提供有效的用户名/密码组合提供给用户的一段数据。另外，与Token密切相关的是它的有效期（通常是几小时甚至几分钟）。Client可以缓存Token并将其注入到OpenStack API请求中。OpenStack API端点将令牌从用户请求中取出，并通过KeyStone后端进行验证，从而确认调用的合法性。\n我们现在把注意力放在两种Token生成方式：通用唯一标识符（UUID）和公共密钥基础设施（PKI）的标识\n###UUID\n![这里写图片描述](http://www.mirantis.com/wp-content/uploads/2013/07/UUID-token-validation-flow-3.png?_=3800235)\n\n基于提供的用户名/密码对：\n- KeyStone将做以下工作：\n- 生成一个UUID令牌。\n- 将UUID令牌存储在后端。\n- 发送一份拷贝的UUID令牌返回给客户端。\n- 客户机将缓存令牌。\n- 然后客户端会把UUID附在每个API调用上。\n- 在每一个用户的请求，API端点会送这个UUID回到Keystone验证。\n- Keystone将UUID和它的认证后端匹配（检查UUID字符串、日期）。\n- KeyStone将返回“成功”或“失败”消息到API端点。\n从上面的图表中可以看到，对于每个用户调用，API端点都需要使用KeyStone服务进行联机验证。想象成千上万的Client执行VM List、网络创建等等操作。这种设计导致了大量流量被导向了KeyStone造成单点故障。事实上，在生产中，Keystone被证明是负载最重的OpenStack服务之一，但Grizzly版本之后就采取了PKI方式来解决这个问题。\n\n###背景知识：非对称加密\n\n采用非对称加密算法，公钥获取的可靠性就非常重要，获取到正确的公钥，后续的工作就成功了一半。另一半是保障数据的完整性，这个是通过数据签名实现的，怎么样才能保障获取到正确的公钥呢？\n我们第一反应可能会想到以下的两个方法：\n\t- a)把公钥放到互联网的某个地方的一个下载地址，事先给“客户”去下载。\n\t- b)每次和“客户”开始通信时，“服务器”把公钥发给“客户”。\n但是这个两个方法都有一定的问题，\n对于a)方法，“客户”无法确定这个下载地址是不是“服务器”发布的，你凭什么就相信这个地址下载的东西就是“服务器”发布的而不是别人伪造的呢，万一下载到一个假的怎么办？另外要所有的“客户”都在通信前事先去下载公钥也很不现实。\n对于b)方法，也有问题，因为任何人都可以自己生成一对公钥和私钥，他只要向“客户”发送他自己的私钥就可以冒充“服务器”了。示意如下：\n\n“客户”-\u003e“黑客”：你好           //黑客截获“客户”发给“服务器”的消息\n“黑客”-\u003e“客户”：你好，我是服务器，这个是我的公钥    //黑客自己生成一对公钥和私钥，把公钥发给“客户”，自己保留私钥\n“客户”-\u003e“黑客”：向我证明你就是服务器\n“黑客”-\u003e“客户”：你好，我是服务器 {你好，我是服务器}[黑客自己的私钥|RSA]      //客户收到“黑客”用私钥加密的信息后，是可以用“黑客”发给自己的公钥解密的，从而会误认为“黑客”是“服务器”\n\n因此“黑客”只需要自己生成一对公钥和私钥，然后把公钥发送给“客户”，自己保留私钥，这样由于“客户”可以用黑客的公钥解密黑客的私钥加密的内容，“客户”就会相信“黑客”是“服务器”，从而导致了安全问题。这里问题的根源就在于，大家都可以生成公钥、私钥对，无法确认公钥对到底是谁的。 **如果能够确定公钥到底是谁的，就不会有这个问题了。**例如，如果收到“黑客”冒充“服务器”发过来的公钥，经过某种检查，如果能够发现这个公钥不是“服务器”的就好了。\n\n解决这个问题其实就不是技术问题了，需要一个权威机构来授权数字证书，它可以解决我们上面的问题。先大概看下什么是数字证书，一个证书包含下面的具体内容（证书相当于协议的控制面，会定义后续交互的算法和公钥等）：\n\n◆CA (证书的发布机构)\n\n指出是什么机构发布的这个证书，也就是指明这个证书是哪个公司创建的(只是创建证书，不是指证书的使用者)。对于上面的这个证书来说，就是指\"SecureTrust CA\"这个机构。\n\n◆Valid from , Valid to (证书的有效期)\n\n也就是证书的有效时间，或者说证书的使用期限。 过了有效期限，证书就会作废，不能使用了。\n\n◆Public key (公钥)\n\n这个我们在前面介绍公钥密码体制时介绍过，公钥是用来对消息进行加密和解密的。\n\n◆Subject (主题)\n\n这个证书是发布给谁的，或者说证书的所有者，一般是某个人或者某个公司名称、机构的名称、公司网站的网址等。 对于这里的证书来说，证书的所有者是Trustwave这个公司。\n\n◆Signature algorithm (签名所使用的算法)\n\n就是指的这个数字证书的数字签名所使用的加密算法，这样就可以使用证书发布机构的证书里面的公钥，根据这个算法对指纹进行解密。指纹的加密结果就是数字签名。\n\n ◆Thumbprint, Thumbprint algorithm (指纹以及指纹算法)\n\n这个是用来保证证书的完整性的，也就是说确保证书没有被修改过，其原理就是在发布证书时，发布者根据指纹算法(一个hash算法)计算整个证书的hash值(指纹)并和证书放在一起，使用者在打开证书时，自己也根据指纹算法计算一下证书的hash值(指纹)，如果和刚开始的值对得上，就说明证书没有被修改过，因为证书的内容被修改后，根据证书的内容计算的出的hash值(指纹)是会变化的。 注意，这个指纹是数据的指纹，并不是代表客户端或服务器端的指纹。\n\n注意，为了保证安全，在证书的发布机构发布证书时，证书的指纹和指纹算法，都会加密后再和证书放到一起发布，以防有人修改指纹后伪造相应的数字证书。这里问题又来了，证书的指纹和指纹算法用什么加密呢？他们是用证书发布机构的私钥进行加密的。可以用证书发布机构的公钥对指纹和指纹算法解密，也就是说证书发布机构除了给别人发布证书外，他自己本身也有自己的证书。证书发布机构的证书是哪里来的呢？？？这个证书发布机构的数字证书(一般由他自己生成)在我们的操作系统刚安装好时(例如windows xp等操作系统)，这些证书发布机构的数字证书就已经被微软(或者其它操作系统的开发机构)安装在操作系统中了，微软等公司会根据一些权威安全机构的评估选取一些信誉很好并且通过一定的安全认证的证书发布机构，把这些证书发布机构的证书默认就安装在操作系统里面了，并且设置为操作系统信任的数字证书。这些证书发布机构自己持有与他自己的数字证书对应的私钥，他会用这个私钥加密所有他发布的证书的指纹作为数字签名。\n\n说白了，要想具备CA资质，又需要到更权威的机构去认证，而这些更权威的机构是已经默认在操作系统中安装了其公钥证书。所以在初始阶段，Client会拿着Server端的证书去权威机构鉴定是否是对方，而Server端会拿着Client的证书去自己的CA机构Keystone验证可靠性。\n![这里写图片描述](http://www.codeproject.com/KB/IP/326574/mutualssl_small.png?_=3927390)\n\n###证书的发布机构\n前面已经初步介绍了一下证书发布机构，这里再深入讨论一下。\n\n其实所有的公司都可以发布证书，我们自己也可以去注册一家公司来专门给别人发布证书。但是很明显，我们自己的专门发布证书的公司是不会被那些国际上的权威机构认可的，人家怎么知道你是不是个狗屁皮包公司？因此微软在它的操作系统中，并不会信任我们这个证书发布机构，当应用程序在检查证书的合法信的时候，一看证书的发布机构并不是操作系统所信任的发布机构，就会抛出错误信息。也就是说windows操作系统中不会预先安装好我们这个证书发布机构的证书，不信任我们这个发布机构。\n\n  \n\n不受信任的证书发布机构的危害\n\n为什么一个证书发布机构受不受信任这么重要？我们举个例子。假设我们开了一个狗屁公司来为别人发布证书，并且我和微软有一腿，微软在他们的操作系统中把我设置为了受信任的证书发布机构。现在如果有个小公司叫Wicrosoft 花了10块钱让我为他们公司申请了一个证书，并且公司慢慢壮大，证书的应用范围也越来越广。然后有个奸商的公司JS Company想冒充Wicrosoft，于是给了我￥10000，让我为他们颁布一个证书，但是证书的名字(Subject)要写Wicrosoft，假如我为了这￥10000，真的把证书给了他们，那么他们以后就可以使用这个证书来冒充Wicrosoft了。\n\n如果是一个优秀的证书发布机构，比如你要向他申请一个名字叫Wicrosoft的证书，它会让你提供很多资料证明你确实可以代表Wicrosoft这个公司，也就是说他回去核实你的身份。证书发布机构是要为他发布出的证书负法律责任的。\n\n  \n\n到这里，你可能会想，TMD，那我们自己就不能发布证书吗？就一定要花钱去申请？当然不是，我们自己也可以成立证书发布机构，但是需要通过一些安全认证等等，只是有点麻烦。另外，如果数字证书只是要在公司内部使用，公司可以自己给自己生成一个证书，在公司的所有机器上把这个证书设置为操作系统信任的证书发布机构的证书(这句话仔细看清楚，有点绕口)，这样以后公司发布的证书在公司内部的所有机器上就可以通过验证了(在发布证书时，把这些证书的Issuer(发布机构)设置为我们自己的证书发布机构的证书的Subject(主题)就可以了)。但是这只限于内部应用，因为只有我们公司自己的机器上设置了信任我们自己这个所谓的证书发布机构，而其它机器上并没有事先信任我们这个证书发布机构，所以在其它机器上，我们发布的证书就无法通过安全验证。\n\n###PKI方式\n![这里写图片描述](http://www.mirantis.com/wp-content/uploads/2013/07/PKI-token-validation-flow-1.png?_=3800235)\n在PKI方式下，KeyStone已经成为一个CA（认证授权）机构，PKI 的本质就是基于数字签名，Keystone 用私钥对 token 进行数字签名，各个 API server 用公钥在本地验证该 token。也就是说通过这种方式来实现单点登录（用户只需要登录一次就可以访问所有相互信任的应用系统）。当然这里如何确保安全（比如黑客截获这个Token冒充客户端发送请求，当然这里会有一个Token过期时间），我也不太清楚，只是当前已经在使用这种方式，是否安全具体做安全的人可以告知一下。这里的Token是通过Service catalog，User roles，Metadata等消息来生成的\n\n总结一下：\n如何确保消息源的可靠性？  通过第三方权威机构认证的CA机构才有授予证书的权利，而这些第三方权威机构在操作系统默认已经安装，在初始阶段，Client会拿着Server端的证书去权威机构鉴定是否是对方，而Server端会拿着Client的证书去自己的CA机构Keystone验证可靠性。\n\n如何确保数据的完整性？ 通过数据签名算法，首先对数据进行Hash算法生成指纹，然后用公钥或者私钥加密生成数字签名，接收方拿到数据后使用私钥解密数字签名，同时使用相同的Hash算法对数据生成指纹进行比对。\n\n如何确保数据是保密的，第三方无查看权限？ 交互双方在互相认定证书之后会使用公私钥加密约定消息体的对称加密算法和公钥，这个过程是客户端来发起的，服务器端不允许这个操作。\n\n总而言之，证书类似一个协议控制面，用来做消息源可靠性的认定以及数据完整性的算法约定，后续的交互就会用上证书约定的公钥和指纹算法。消息体的保密性是无法确保的。需要靠另外的数据加密算法。\n\n参考文献：\nhttp://www.cnblogs.com/popsuper1982/p/3800235.html\nhttp://blog.sina.com.cn/s/blog_44ee37cd01016r1h.html\n\n","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-8] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":38855273,"title":"关于有限状态机","create_at":"\/Date(1409062712000)\/","create":"2014-08-26 10:18:32","view_count":939,"comment_count":0,"comment_allowed":"true","type":"original","channel":16,"digg":0,"bury":0,"description":"一 有限状态机的实现方式\r\n\r\n\r\n有限状态机（Finite State Machine或者Finite State Automata)是软件领域中一种重要的工具，很多东西的模型实际上就是有限状态机。\r\nFSM的实现方式：\r\n1） switch/case或者if/else\r\n这无意是最直观的方式，使用一堆条件判断，会编程的人都可以做到，对简单小巧的状态机来说最合适，但是毫无疑问，这样的方式比较原始","url":"http://blog.csdn.net/BLACKMOON88/article/details/38855273","categories":"","tags":"c,编程,计算机,结构,设计","content":"\r\n\u003cdiv style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cp align=\"left\"\u003e\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e\u003cstrong\u003e一 有限状态机的实现方式\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp align=\"left\" style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e有限状态机（Finite State Machine或者Finite State Automata)是软件领域中一种重要的工具，很多东西的模型实际上就是有限状态机。\u003cbr\u003e\r\nFSM的实现方式：\u003cbr\u003e\r\n1） switch/case或者if/else\u003cbr\u003e\r\n这无意是最直观的方式，使用一堆条件判断，会编程的人都可以做到，对简单小巧的状态机来说最合适，但是毫无疑问，这样的方式比较原始，对庞大的状态机难以维护。\u003cbr\u003e\r\n2） 状态表\u003cbr\u003e\r\n维护一个二维状态表，横坐标表示当前状态，纵坐标表示输入，表中一个元素存储下一个状态和对应的操作。这一招易于维护，但是运行时间和存储空间的代价较大。\u003cbr\u003e\r\n3） 使用State Pattern\u003cbr\u003e\r\n使用State Pattern使得代码的维护比switch/case方式稍好，性能上也不会有很多的影响，但是也不是100％完美。不过Robert C. Martin做了两个自动产生FSM代码的工具，for java和for C&#43;&#43;各一个，在http://www.objectmentor.com/resources/index上有免费下载，这个工具的输入是纯文本的状态机描述，自动产生符合State Pattern的代码，这样developer的工作只需要维护状态机的文本描述，每必要冒引入bug的风险去维护code。\u003cbr\u003e\r\n4） 使用宏定义描述状态机\u003cbr\u003e\r\n一般来说，C&#43;&#43;编程中应该避免使用#define，但是这主要是因为如果用宏来定义函数的话，很容易产生这样那样的问题，但是巧妙的使用,还是能够产生奇妙的效果。MFC就是使用宏定义来实现大的架构的。\u003cbr\u003e\r\n在实现FSM的时候，可以把一些繁琐无比的if/else还有花括号的组合放在宏中，这样，在代码中可以3）中状态机描述文本一样写，通过编译器的预编译处理产生1）一样的效果，我见过产生C代码的宏，如果要产生C&#43;&#43;代码，己软MFC可以，那么理论上也是可行的。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e\u003cstrong\u003e二 状态机的两种写法&#43;实例\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 有限状态机FSM思想广泛应用于硬件控制电路设计，也是软件上常用的一种处理方法(软件上称为FMM--有限消息机)。它把复杂的控制逻辑分解成有限个稳定状态，在每个状态上判断事件，变连续处理为离散数字处理，符合计算机的工作特点。同时，因为有限状态机具有有限个状态，所以可以在实际的工程上实现。但这并不意味着其只能进行有限次的处理，相反，有限状态机是闭环系统，有限无穷，可以用有限的状态，处理无穷的事务。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 有限状态机的工作原理如图1所示，发生事件(event)后，根据当前状态(cur_state)，决定执行的动作(action)，并设置下一个状态号(nxt_state)。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |--------&gt;执行动作action\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp; 发生事件event -----&gt;| cur_state |\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |--------&gt;设置下一状态号nxt_state\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当前状态\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 图1 有限状态机工作原理\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e0/a0\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ---&gt;--\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; |\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------&gt;----------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e0/a0 |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; S0&nbsp;&nbsp; |-----\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; -&lt;------------&nbsp;&nbsp;&nbsp; | e1/a1\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp; | e2/a2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----------&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; S2&nbsp;&nbsp; |-----&lt;-----|&nbsp;&nbsp; S1&nbsp;&nbsp; |\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----------&nbsp;&nbsp; e2/a2&nbsp;&nbsp; ----------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 图2 一个有限状态机实例\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当前状态&nbsp;&nbsp; s0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s2&nbsp;&nbsp;&nbsp;&nbsp; | 事件\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a0/s0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a0/s0&nbsp;&nbsp; |&nbsp; e0\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a1/s1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; e1\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a2/s2&nbsp;&nbsp;&nbsp;&nbsp; a2/s2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; e2\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------------------------------------\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 表1 图2状态机实例的二维表&#26684;表示(动作/下一状态)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 图2为一个状态机实例的状态转移图，它的含义是：\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在s0状态，如果发生e0事件，那么就执行a0动作，并保持状态不变；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果发生e1事件，那么就执行a1动作，并将状态转移到s1态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在s1状态，如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在s2状态，如果发生e0事件，那么就执行a0动作，并将状态转移到s0态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 有限状态机不仅能够用状态转移图表示，还可以用二维的表&#26684;代表。一般将当前状态号写在横行上，将事件写在纵列上，如表1所示。其中“--”表示空(不执行动作，也不进行状态转移)，“an/sn”表示执行动作an,同时将下一状态设置为sn。表1和图2表示的含义是完全相同的。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 观察表1可知，状态机可以用两种方法实现：竖着写(在状态中判断事件)和横着写(在事件中判断状态)。这两种实现在本质上是完全等效的，但在实际操作中，效果却截然不同。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e==================================\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e竖着写(在状态中判断事件)C代码片段\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003ecur_state = nxt_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003eswitch(cur_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //在当前状态中判断事件\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s0:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //在s0状态\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(e0_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{ //如果发生e0事件，那么就执行a0动作，并保持状态不变；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a0动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//nxt_state = s0; //因为状态号是自身，所以可以删除此句，以提高运行速度。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if(e1_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{//如果发生e1事件，那么就执行a1动作，并将状态转移到s1态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a1动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nxt_state = s1;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if(e2_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{ //如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a2动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nxt_state = s2;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s1:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //在s1状态\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e2_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{&nbsp;&nbsp;&nbsp; //如果发生e2事件，那么就执行a2动作，并将状态转移到s2态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a2动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nxt_state = s2;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //在s2状态\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e0_event)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{ //如果发生e0事件，那么就执行a0动作，并将状态转移到s0态；\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a0动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nxt_state = s0;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e==================================\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e横着写(在事件中判断状态)C代码片段\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e==================================\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e//e0事件发生时，执行的函数\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003evoid e0_event_function(int * nxt_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; int cur_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; cur_state = *nxt_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003eswitch(cur_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s0:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//观察表1，在e0事件发生时，s1处为空\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s2:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a0动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *nxt_state = s0;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e}\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e//e1事件发生时，执行的函数\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003evoid e1_event_function(int * nxt_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; int cur_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; cur_state = *nxt_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003eswitch(cur_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s0:&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//观察表1，在e1事件发生时，s1和s2处为空\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a1动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *nxt_state = s1;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e}\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e//e2事件发生时，执行的函数\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003evoid e2_event_function(int * nxt_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; int cur_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; cur_state = *nxt_state;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003eswitch(cur_state)\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e{\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s0:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //观察表1，在e2事件发生时，s2处为空\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case s1:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 执行a2动作;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *nxt_state = s2;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; }\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e}\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 上面横竖两种写法的代码片段，实现的功能完全相同，但是，横着写的效果明显好于竖着写的效果。理由如下：\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 1、竖着写隐含了优先级排序(其实各个事件是同优先级的)，排在前面的事件判断将毫无疑问地优先于排在后面的事件判断。这种if/else if写法上的限制将破坏事件间原有的关系。而横着写不存在此问题。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 2、由于处在每个状态时的事件数目不一致，而且事件发生的时间是随机的，无法预先确定，导致竖着写沦落为顺序查询方式，结构上的缺陷使得大量时间被浪费。对于横着写，在某个时间点，状态是唯一确定的，在事件里查找状态只要使用switch语句，就能一步定位到相应的状态，延迟时间可以预先准确估算。而且在事件发生时，调用事件函数，在函数里查找唯一确定的状态，并根据其执行动作和状态转移的思路清晰简洁，效率高，富有美感。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; font-family:Arial; color:rgb(51,51,51); font-size:14px\"\u003e\r\n\u003cspan style=\"font-family:\u0027Microsoft YaHei\u0027; font-size:16px\"\u003e&nbsp;&nbsp;&nbsp; 总之，我个人认为，在软件里写状态机，使用横着写的方法比较妥帖。\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; color:rgb(51,51,51)\"\u003e\u003cspan style=\"font-family:Microsoft YaHei; font-size:14px\"\u003e下面给出一个计算输入密码的两种状态机的实现：\u003cbr\u003e\r\n1.使用switch/case的状态机实现\u003c/span\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; color:rgb(51,51,51)\"\u003e\u003cspan style=\"font-family:Microsoft YaHei; font-size:14px\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre class=\"cpp\" name=\"code\"\u003e//使用switch/case或者if/else实现的基于状态机(FSM)的密码锁\r\n//只有正确输入密码 2479 才能解锁 \r\n#include &lt;stdio.h&gt;  \r\n#include &lt;stdlib.h&gt;  \r\n#include &lt;string.h&gt;   \r\n\r\ntypedef enum{   \r\n\tSTATE0 = 0,   \r\n\tSTATE1,   \r\n\tSTATE2,  \r\n\tSTATE3,   \r\n\tSTATE4,  \r\n}STATE;\r\n  \r\n\r\nint main()   \r\n\r\n{   \r\n\tchar ch; \r\n\tSTATE current_state = STATE0;    \r\n\twhile(1){   \r\n\t\tprintf(&quot;In put password:&quot;);   \r\n\t\twhile((ch = getchar()) != &#39;\\n&#39;)\r\n\t\t{   \r\n\t\t\tif((ch &lt; &#39;0&#39;) || (ch &gt; &#39;9&#39;))\r\n\t\t\t{   \r\n\t\t\t\tprintf(&quot;Input num,ok?/n&quot;);   \r\n\t\t\t\tbreak;   \r\n\t\t\t}   \r\n\t\t\tswitch(current_state){   \r\n\t\t\tcase STATE0:   \r\n\t\t\t\tif(ch == &#39;2&#39;)   current_state = STATE1;   \r\n\t\t\t\tbreak;   \r\n\t\t\tcase STATE1:   \r\n\t\t\t\tif(ch == &#39;4&#39;)   current_state = STATE2;   \r\n\t\t\t\tbreak;   \r\n\t\t\tcase STATE2:   \r\n\t\t\t\tif(ch == &#39;7&#39;)   current_state = STATE3;   \r\n\t\t\t\tbreak;   \r\n\t\t\tcase STATE3:   \r\n\t\t\t\tif(ch == &#39;9&#39;)   current_state = STATE4;   \r\n\t\t\t\tbreak;   \r\n\t\t\tdefault:   \r\n\t\t\t\tcurrent_state = STATE0;   \r\n\t\t\t\tbreak;   \r\n\t\t\t}   \r\n\t\t}   //end inner while \r\n\r\n\t\tif(current_state == STATE4){   \r\n\t\t\tprintf(&quot;Correct, lock is open!\\n&quot;);   \r\n\t\t\tcurrent_state =   STATE0;\r\n\t\t\t\r\n\t\t}else\r\n\t\t{\r\n\t\t\tprintf(&quot;Wrong, locked!\\n&quot;);   \r\n\t\t\tcurrent_state =   STATE0;\r\n\t\t\t\r\n\t\t}\r\n\t\tbreak;\r\n\t}   \r\n\treturn 0;   \r\n} \r\n\u003c/pre\u003e2.使用竖排方式写的状态机\r\n\u003cp\u003e\u003cpre class=\"cpp\" name=\"code\"\u003e&lt;p&gt;//使用函数指针实现的基于状态机(FSM)的密码锁\r\n//只有正确输入密码 2479 才能解锁 \r\n#include &lt;stdio.h&gt;&#160; \r\n//这个秘密锁的密码是xxxx2479,就是说最后4位是2479,前面若干为为0~9里的数字,也可没有 \r\n#include &lt;stdlib.h&gt;&#160; \r\n#include &lt;string.h&gt;&#160;&#160; &lt;/p&gt;&lt;p&gt;//定义锁事件处理函数的函数指针类型\r\ntypedef void (*lock_func)(char c);&lt;/p&gt;&lt;p&gt;typedef enum{&#160;&#160; \r\n&#160;\r\n&#160;STATE1 = 0, \r\n&#160;STATE2,&#160;&#160; \r\n&#160;STATE3, \r\n&#160;STATE4, \r\n&#160;STATE5,//password pass&#160; \r\n&#160;//...ADD here&#160;&#160; \r\n&#160;}STATE;&#160; \r\nSTATE state;\r\n//状态1 \r\nvoid fp_Press2(char ch)\r\n{\r\n&#160;if (state==STATE1)\r\n&#160;{\r\n&#160;&#160;//do sth here \r\n&#160;&#160;state=STATE2;\r\n&#160;&#160;printf(&quot;Correct, current state is STATE2!&quot;); \r\n&#160;} \r\n&#160;else \r\n&#160;{\r\n&#160;&#160;printf(&quot;Wrong, current state is not STATTE2!&quot;); \r\n&#160;}\r\n}&lt;/p&gt;&lt;p&gt;//状态2 \r\nvoid fp_Press4(char ch)\r\n{\r\n&#160;if (state==STATE2)\r\n&#160;{\r\n&#160;&#160;printf(&quot;Correct, current state is STATE3!&quot;); \r\n&#160;&#160;state=STATE3;&#160;&#160;\r\n&#160;} \r\n&#160;else \r\n&#160;{\r\n&#160;}&#160;\r\n}&lt;/p&gt;&lt;p&gt;//状态3 \r\nvoid fp_Press7(char ch)\r\n{\r\n&#160;if (state==STATE3)\r\n&#160;{\r\n&#160;&#160;printf(&quot;Correct, current state is STATE4!&quot;); \r\n&#160;&#160;state=STATE4;&#160;&#160;\r\n&#160;} \r\n&#160;else \r\n&#160;{\r\n&#160;}\r\n}&lt;/p&gt;&lt;p&gt;//状态4 \r\nvoid&#160; fp_Press9(char ch)\r\n{\r\n&#160;if (state==STATE4)\r\n&#160;{\r\n&#160;&#160;printf(&quot;Correct, lock is open!&quot;); \r\n&#160;&#160;state=STATE5;&#160;&#160;\r\n&#160;} \r\n&#160;else \r\n&#160;{\r\n&#160;}\r\n}&lt;/p&gt;&lt;p&gt;\r\nlock_func g_MatrixArr[5][1] = \r\n{\r\n&#160;&#160;&#160; /*输入2*/\r\n&#160;&#160;&#160; {fp_Press2},&lt;/p&gt;&lt;p&gt;&#160;&#160;&#160; /*输入4*/\r\n&#160;&#160;&#160; {fp_Press4},&lt;/p&gt;&lt;p&gt;&#160;&#160;&#160; /*输入7*/\r\n&#160;&#160;&#160; {fp_Press7},\r\n&#160;&#160;&#160; \r\n&#160;&#160;&#160; /*输入9*/\r\n&#160;{fp_Press9},&lt;/p&gt;&lt;p&gt;&#160;/*输入其他*/\r\n&#160;{fp_Press2}\r\n};\r\n//结束状态是NULL\r\n//就是通过 return NULL;表达的结束状态. \r\n&#160;\r\n//状态转换在这里 \r\nvoid lock_handle (void)\r\n{\r\n&#160;char ch;\r\n&#160;while(state!=STATE5)\r\n&#160;{\r\n&#160;&#160;ch = getchar();\r\n&#160;&#160;switch(ch)\r\n&#160;&#160;{\r\n&#160;&#160;&#160;case &#39;2&#39;:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[0][0](ch);\r\n&#160;&#160;&#160;&#160;break;\r\n&#160;&#160;&#160;case &#39;4&#39;:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[1][0](ch);\r\n&#160;&#160;&#160;&#160;break;\r\n&#160;&#160;&#160;case &#39;7&#39;:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[2][0](ch);\r\n&#160;&#160;&#160;&#160;break;\r\n&#160;&#160;&#160;case &#39;9&#39;:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[3][0](ch);\r\n&#160;&#160;&#160;&#160;break;\r\n&#160;&#160;&#160;default:\r\n&#160;&#160;&#160;&#160;g_MatrixArr[4][0](ch);\r\n&#160;&#160;&#160;&#160;break;&#160;&#160;\r\n&#160;&#160;}\r\n&#160;}\r\n} &lt;/p&gt;&lt;p&gt;&#160;\r\nint main()&#160;&#160; \r\n{&#160;&#160;&#160;&#160; &#160;\r\n&#160;lock_handle();\r\n} \r\n&lt;/p&gt;\r\n\u003c/pre\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003c/p\u003e\r\n\u003cp style=\"line-height:26px; color:rgb(51,51,51)\"\u003e\u003cspan style=\"font-family:Microsoft YaHei; font-size:14px\"\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003c/span\u003e\u003c/p\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-2-thread-6] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之八】openstack中虚拟机在线迁移》成功 [pool-2-thread-4] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-22-【OpenStack源码分析之六】从虚拟机启动流程看安全认证.markdown [pool-2-thread-8] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2014-08\2014-08-26-关于有限状态机.markdown [pool-2-thread-6] [chx]
[INFO] 2017-07-28 12:46:38 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-17-【OpenStack源码分析之三】Nova-Compute启动流程分析.markdown [pool-2-thread-21] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《关于有限状态机》成功 [pool-2-thread-6] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之三】Nova-Compute启动流程分析》成功 [pool-2-thread-21] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenStack源码分析之六】从虚拟机启动流程看安全认证》成功 [pool-2-thread-8] [chx]
[INFO] 2017-07-28 12:46:39 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74619521 [pool-2-thread-11] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":74619521,"title":"【OpenVswitch源码分析之五】用户空间转发面数据结构与流程","create_at":"\/Date(1499355858000)\/","create":"2017-07-06 11:44:18","view_count":113,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":1,"bury":0,"description":"传统交换机是基于MAC表进行转发的，所以OVS也支持MAC学习特性，但是由于OVS也支持Openflow协议作为控制面，其功能就不仅仅是一个二层交换机了。先简单谈谈Openflow由于现在的网络暴露出了越来越多的弊病以及人们对网络性能需求的提高，于是研究人员不得不把很多复杂功能加入到路由器的体系结构当中，例如OSPF，BGP，组播，区分服务，流量工程，NAT，防火墙，MPLS等等。这就使得路由器等交","url":"http://blog.csdn.net/BLACKMOON88/article/details/74619521","categories":"云计算,C语言算法,OpenVswitch","tags":"数据结构,源码,交换机","content":"\u003cp\u003e传统交换机是基于MAC表进行转发的，所以OVS也支持MAC学习特性，但是由于OVS也支持Openflow协议作为控制面，其功能就不仅仅是一个二层交换机了。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"先简单谈谈openflow\"\u003e先简单谈谈Openflow\u003c/h3\u003e\n\n\u003cp\u003e由于现在的网络暴露出了越来越多的弊病以及人们对网络性能需求的提高，于是研究人员不得不把很多复杂功能加入到路由器的体系结构当中，例如OSPF，BGP，组播，区分服务，流量工程，NAT，防火墙，MPLS等等。这就使得路由器等交换设备越来越臃肿而且性能提升的空间越来越小。\u003c/p\u003e\n\n\u003cp\u003e然而与网络领域的困境截然不同的是，计算机领域实现了日新月异的发展。仔细回顾计算机领域的发展，不难发现其关键在于计算机领域找到了一个简单可用的硬件底层(x86指令集)。由于有了这样一个公用的硬件底层，所以在软件方面，不论是应用程序还是操作系统都取得了飞速的发展。很多主张重新设计计算机网络体系结构的人士认为：网络可以复制计算机领域的成功经验来解决现在网络所遇到的所有问题。在这种思想的指导下，将来的网络必将是这样的：底层的数据通路（交换机、路由器）是“哑的、简单的、最小的”，并定义一个对外开放的关于流表的公用的API，同时采用控制器来控制整个网络。未来的研究人员就可以在控制器上自由的调用底层的API来编程，从而实现网络的创新。\u003c/p\u003e\n\n\u003cp\u003eOpenFlow正是这种网络创新思想的强有力的推动者。OpenFlow交换机将原来完全由交换机/路由器控制的报文转发过程转化为由OpenFlow交换机（OpenFlow Switch）和控制服务器（Controller）来共同完成，从而实现了数据转发和路由控制的分离。控制器可以通过事先规定好的接口操作来控制OpenFlow交换机中的流表，从而达到控制数据转发的目的。\u003c/p\u003e\n\n\u003cp\u003e在Openflow的设计中，其匹配项除了二层的\u003cem\u003eeth_src, eth_dst,\u003c/em\u003e  \u003cem\u003eeth_type, vlan\u003c/em\u003e 等的匹配外，还有三层的源目的IP，IP协议类型，的匹配，甚至于还有四层的端口号的匹配等，所以在Openflow和控制器的支持下，OVS已经不仅仅是一个二层交换机。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"openflow相关接口一览\"\u003eOpenflow相关接口一览\u003c/h3\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\"language-C hljs mel\"\u003estatic enum ofperr\nofproto_flow_mod_start(struct ofproto \u003cspan class=\"hljs-variable\"\u003e*ofproto\u003c/span\u003e, struct ofproto_flow_mod \u003cspan class=\"hljs-variable\"\u003e*ofm\u003c/span\u003e)\n    OVS_REQUIRES(ofproto_mutex)\n{\n    enum ofperr \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e;\n\n    rule_collection_init(&amp;ofm-&gt;old_rules);\n    rule_collection_init(&amp;ofm-&gt;new_rules);\n\n    \u003cspan class=\"hljs-keyword\"\u003eswitch\u003c/span\u003e (ofm-&gt;command) {\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_ADD:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = add_flow_start(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_MODIFY:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = modify_flows_start_loose(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_MODIFY_STRICT:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = modify_flow_start_strict(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_DELETE:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = delete_flows_start_loose(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e OFPFC_DELETE_STRICT:\n        \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = delete_flow_start_strict(ofproto, ofm);\n        \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\n        OVS_NOT_REACHED();\n    }\n    \u003cspan class=\"hljs-comment\"\u003e/* Release resources not needed after start. */\u003c/span\u003e\n    ofproto_flow_mod_uninit(ofm);\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e) {\n        rule_collection_destroy(&amp;ofm-&gt;old_rules);\n        rule_collection_destroy(&amp;ofm-&gt;new_rules);\n    }\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOfproto模块会收到flow_mod消息，无论是控制器发出还是命令行客户端添加流表，都会调用这个函数，OVS对收到的流表会保存在用户空间的oftable数据结构中，接下来就是整个OpenVswitch的核心，在用户空间对内核态上送的报文寻找匹配的Flow Entry。\u003c/p\u003e\n\n\n\n\u003ch3 id=\"相关数据结构和优化一览\"\u003e相关数据结构和优化一览\u003c/h3\u003e\n\n\u003cp\u003e数据结构和算法的设计上有几个难点： \u003cbr\u003e\n    - Openflow过于灵活的匹配规则对Pipe的实现提出了挑战，其rule包括metadata,L2,L3,L4的匹配项，可能都分布在一张表中，另外还有优先级的考虑 \u003cbr\u003e\n    - 在并发的情况下，如何保障表项的修改，增加和删除对最终结果没有影响 \u003cbr\u003e\n    - 如何保障高性能  \u003cbr\u003e\n最终OpenVswitch设计了一个复杂的数据结构和保障机制来达到上述要求 \u003cbr\u003e\n\u003cimg src=\"http://img.blog.csdn.net/20170712212114070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"\u003e \u003cbr\u003e\n上图是用户空间各个核心数据结构的关系，其核心数据结构式Classifier，Pipeline里的每个Table对应一个Classifier，Classifier把整张表里的各个rule进行了分类分成了不同的subtable，每个subtable有自己的掩码，这个掩码表示这个subtable里的rule要匹配的掩码。很显然，这种分类并不能提高匹配效率，这个数据结构还做了不少优化策略：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003esubtable之间还做了优先级排序，需要优先级向量来标识。这样的话从高优先级的subtable先开始，一旦匹配就可以跳过不少低优先级的subtable。\u003c/li\u003e\n\u003cli\u003e分阶段匹配，对于一个subtable还可以再继续拆分多个hashtable，因为如果某个subtabl同时要匹配的项比较多，包含了metadata，L2, L3，L4的匹配项，那么就按这四个子类来分，第一阶段先匹配metadata；然后再匹配metadata,L2；继续metadata,L2，L3；最后才是metadata,L2，L3，L4。对于能匹配的rule其实并不能增加效率，但是对于不匹配的情况却是可以增加很大效率。\u003c/li\u003e\n\u003cli\u003e前缀追踪，前缀跟踪允许分类器跳过比必要的前缀更长的rule，从而为数据流更好的通配符。当流表包含具有不同前缀长度的IP地址字段匹配项时，前缀跟踪可能是有益的。例如，当一个流表中包含一个完整的IP地址匹配和一个地址前缀匹配，完整的地址匹配通常会导致此表的该字段非通配符全0（取决于rule优先级）。在这种情况下，每个有不同的地址的数据包只能被交给用户空间处理并生成自己的数据流。在前缀跟踪启用后用户空间会为问题Packet生成更短的前缀地址匹配，而把无关的地址位置成通配，可以使用一个rule来处理所有的问题包。在这种情况下，可以避免许多的用户上调，这样整体性能可以更好。当然这仅仅是性能优化，因为不管是否有前缀跟踪数据包将得到相同的处理。另外前缀跟踪是可以和分阶段匹配配套使用，Trie树会追踪整个Classifier中所有Rule的地址前缀的数量。更神奇的是通过维护一个在Trie树遍历中遇到的最长前缀的列表或者维护通过不同Metadata分开的规则子集独立的Trie树可以实现表跳跃。前缀追踪是通过OVSDB“Flow_Table”表”fieldspec” 列来配置的，”fieldspec” 列是用string map这里前缀的key值告诉哪些字段可以被用来做前缀追踪。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"并发的支持\"\u003e并发的支持\u003c/h3\u003e\n\n\u003cp\u003e很显然，出于对性能的考虑，对Pipeline的并发的支持是必须的，而且在转发的场景下，相对而言会是一个reader多writer少的一个场景，针对这种场景，OVS采用了类似于悲观锁的版本控制机制和Linux RCU机制的保护，下面分别对两者进行介绍：\u003c/p\u003e\n\n\n\n\u003ch4 id=\"基于版本的并发的支持\"\u003e基于版本的并发的支持\u003c/h4\u003e\n\n\u003cp\u003eClassifier检索总是在一个特定的版本上进行的，这个版本号是一个自然数。当一个新的Rule被添加到Classifier之后，它会被设置为在一个特定的版本号上可见。如果这个插入时的版本号比当前检索的时候的版本号要大，那么它暂时是不可见的。这意味着检索不会发现这个rule，但是rule会在Classifier迭代之后马上可见。 \u003cbr\u003e\n类似的，一条rule可以被在将来的某个版本删除。在当前的检索没有完成之前，rule是不允许被删除的，首先第一步应该把rule设置为不可见，之后当用来检索的Classifier的版本号已经大于删除版本号时再实际上把这个rule删除掉 \u003cbr\u003e\nClassifier 支持版本的两个原因：\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e支持基于版本的修改使得对Classifier的修改具备原子特征，不同版本间的中间状态是对外不可见的。同时，当一个rule被添加到未来的版本里，这些修改可以回退掉且不会对当前的检索产生任何影响\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e性能：添加或删除一个rule集合，其性能的影响和Classifier已有的rule数量成正比。当多个rule一口气添加上之后，只要整批的rule修改还没有完成之前不可见，那么这种影响其实是可以避免。\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003ch4 id=\"linux-rcu机制\"\u003eLinux RCU机制\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.my.csdn.net/uploads/201212/01/1354347444_2149.png\" alt=\"RCU机制\" title=\"\"\u003e \u003cbr\u003e\nRCU(Read-Copy Update)，顾名思义就是读-拷贝修改，它是基于其原理命名的。对于被RCU保护的共享数据结构，读者不需要获得任何锁就可以访问它，但写者在访问它时首先拷贝一个副本，然后对副本进行修改，最后使用一个回调（callback）机制在适当的时机把指向原来数据的指针重新指向新的被修改的数据。这个时机就是所有引用该数据的CPU都退出对共享数据的操作。 \u003cbr\u003e\n长图以删除为例，在做删除操作后起始并没有把数据销毁掉，而是等待已经读取该数据的线程出读临界区之后再做销毁工作，这段时间叫宽限期，而在这段时间内新来的线程则可以读取最新修改的值。 \u003cbr\u003e\n但是注意到RCU机制和版本控制机制是同时使用的，由于Classifier rule是RCU保护的，Rule的销毁在执行remove操作之后必须是RCU推迟的。同时，当版本特性也在使用时，remove操作自身也必须是RCU推迟的（此时的删除必须等待到指定的版本之后）。在这种情形下rule的删除就经理了两次RCU推迟。 比如，第二次调用ovsrcu_postpone() 来销毁Rule就是在第一次RCU回调执行remove操作的时候调用的\u003c/p\u003e\n\n\u003cp\u003e用户态转发的核心都在Classifier里，这里也会附加Classifier的详细解释，读者可以自行体会。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs applescript\"\u003e/* Flow classifier.\n *\n *\n * What?\n * =====\n *\n * A flow classifier holds any \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"rules\"\u003c/span\u003e, each \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e which specifies\n * values \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e match \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esome\u003c/span\u003e fields \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e subfields \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e a priority.  Each OpenFlow\n * table \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e implemented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a flow classifier.\n *\n * The classifier has two primary design goals.  The \u003cspan class=\"hljs-keyword\"\u003efirst\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e obvious: \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e a\n * \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packet headers, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e quickly \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e possible find \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e highest-priority rule\n * \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e matches those headers.  The following section describes \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esecond\u003c/span\u003e\n * goal.\n *\n *\n * \u003cspan class=\"hljs-string\"\u003e\"Un-wildcarding\"\u003c/span\u003e\n * ================\n *\n * A primary goal \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e flow classifier \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e produce, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a side effect \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e a\n * packet lookup, a wildcard mask \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e indicates which bits \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e packet\n * headers were essential \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classification \u003cspan class=\"hljs-constant\"\u003eresult\u003c/span\u003e.  Ideally, a \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e-bit \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n * any position \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e this mask means \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e corresponding bit \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e packet\n * header were flipped, \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classification \u003cspan class=\"hljs-constant\"\u003eresult\u003c/span\u003e might change.  A \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bit\n * means \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e changing \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e packet header bit would have no effect.  Thus, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * wildcarded bits are \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e ones \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e played no role \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classification\n * decision.\n *\n * Such a wildcard mask \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e useful \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e datapaths \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e support installing flows\n * \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e wildcard fields \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e subfields.  If an OpenFlow lookup \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a TCP flow\n * \u003cspan class=\"hljs-keyword\"\u003edoes\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e actually look \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e TCP source \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e destination ports, \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e example,\n * \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e switch may install \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e datapath a flow \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e wildcards \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e port\n * numbers, which \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e turn allows \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e datapath \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e handle packets \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e arrive \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n * other TCP source \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e destination ports \u003cspan class=\"hljs-keyword\"\u003ewithout\u003c/span\u003e additional help \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e\n * ovs-vswitchd.  This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e useful \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e Open vSwitch software \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e,\n * potentially, \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e ASIC-based switches \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e well.\n *\n * Some properties \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e wildcard mask:\n *\n *     - \u003cspan class=\"hljs-string\"\u003e\"False 1-bits\"\u003c/span\u003e are acceptable, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, setting a bit \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e wildcard\n *       mask \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e will never cause a packet \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be forwarded \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e wrong way.\n *       As a corollary, a wildcard mask composed \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e all \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e-bits will always\n *       yield correct (\u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e often needlessly inefficient) behavior.\n *\n *     - \u003cspan class=\"hljs-string\"\u003e\"False 0-bits\"\u003c/span\u003e can cause problems, so they must be avoided.  In \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n *       extreme case, a mask \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e all \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e only correct \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier\n *       \u003cspan class=\"hljs-keyword\"\u003econtains\u003c/span\u003e only a single flow \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e matches all packets.\n *\n *     - \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits are desirable because they allow \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e datapath \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e act more\n *       autonomously, relying less \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e ovs-vswitchd \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e process flow setups,\n *       thereby improving performance.\n *\n *     - We don\u0027t know a good way \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e generate wildcard masks \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e maximum\n *       (correct) \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits.  We use various approximations, described\n *       \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e later sections.\n *\n *     - Wildcard masks \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e lookups \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e classifier yield a\n *       non-overlapping \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules.  More specifically:\n *\n *       Consider an classifier C1 filled \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e an arbitrary collection \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules\n *       \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e an empty classifier C2.  Now take a \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packet headers H \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n *       look \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e up \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e C1, yielding a highest-priority matching rule R1 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n *       wildcard mask M.  Form a new classifier rule R2 \u003cspan class=\"hljs-keyword\"\u003eout of\u003c/span\u003e packet headers\n *       H \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e mask M, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e add R2 \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e C2 \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e a fixed priority.  If one were \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e\n *       do this \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eevery\u003c/span\u003e possible \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packet headers H, \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e this\n *       process would \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e attempt \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e add any overlapping rules \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e C2, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e,\n *       any packet lookup using \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rules generated \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e this process matches \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e\n *       most one rule \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e C2.\n *\n * During \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e lookup process, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier starts out \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e a wildcard mask\n * \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e all \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, fully wildcarded.  As lookup proceeds, each\n * step tends \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e add constraints \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e wildcard mask, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, change\n * wildcarded \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e-bits \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e exact-match \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e-bits.  We call this \u003cspan class=\"hljs-string\"\u003e\"un-wildcarding\"\u003c/span\u003e.\n * A lookup step \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e examines a particular field must un-wildcard \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e field.\n * In general, un-wildcarding \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e necessary \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e correctness \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e undesirable \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n * performance.\n *\n *\n * Basic Classifier Design\n * =======================\n *\n * Suppose \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e all \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rules \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a classifier had \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e same form.  For example,\n * suppose \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e they all matched \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e source \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e destination Ethernet address\n * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e wildcarded all \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e other fields.  Then \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e obvious way \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e implement a\n * classifier would be a hash table \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e source \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e destination Ethernet\n * addresses.  If new classification rules came along \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e a different form,\n * you could add a \u003cspan class=\"hljs-keyword\"\u003esecond\u003c/span\u003e hash table \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e hashed \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e fields matched \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e those\n * rules.  With two hash tables, you look up a \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e flow \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e each hash table.\n * If there are no matches, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier didn\u0027t \u003cspan class=\"hljs-keyword\"\u003econtain\u003c/span\u003e a match; \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e you find\n * a match \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e one \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e them, \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e\u0027s \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-constant\"\u003eresult\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e you find a match \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e both \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n * them, \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-constant\"\u003eresult\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e higher priority.\n *\n * This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e how \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier works.  In a \u003cspan class=\"hljs-string\"\u003e\"struct classifier\"\u003c/span\u003e, each form \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n * \u003cspan class=\"hljs-string\"\u003e\"struct cls_rule\"\u003c/span\u003e present (based \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eits\u003c/span\u003e -&gt;match.mask) goes \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e a separate\n * \u003cspan class=\"hljs-string\"\u003e\"struct cls_subtable\"\u003c/span\u003e.  A lookup \u003cspan class=\"hljs-keyword\"\u003edoes\u003c/span\u003e a hash lookup \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eevery\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"struct\n * cls_subtable\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e tracks \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e highest-priority match \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e finds.  The subtables are kept \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a descending priority order according\n * \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e highest priority rule \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e each subtable, which allows lookup \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e skip\n * \u003cspan class=\"hljs-keyword\"\u003eover\u003c/span\u003e subtables \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e can\u0027t possibly have a higher-priority match than already\n * found.  Eliminating lookups \u003cspan class=\"hljs-keyword\"\u003ethrough\u003c/span\u003e priority ordering aids both classifier\n * primary design goals: skipping lookups saves \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e avoids un-wildcarding\n * fields \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e those lookups would have examined.\n *\n * One detail: a classifier can \u003cspan class=\"hljs-keyword\"\u003econtain\u003c/span\u003e multiple rules \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e are identical other\n * than their priority.  When this happens, only \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e highest priority rule out\n * \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e a group \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e otherwise identical rules \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e stored directly \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"struct\n * cls_subtable\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e other almost-identical rules chained off a linked\n * \u003cspan class=\"hljs-type\"\u003elist\u003c/span\u003e inside \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e highest-priority rule.\n *\n * The following sub-sections describe various optimizations \u003cspan class=\"hljs-keyword\"\u003eover\u003c/span\u003e this simple\n * approach.\n *\n *\n * Staged Lookup (Wildcard Optimization)\n * \u003cspan class=\"hljs-comment\"\u003e-------------------------------------\u003c/span\u003e\n *\n * Subtable lookup \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e performed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e ranges defined \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e struct flow, starting\n * \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e metadata (registers, in_port, etc.), \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e L2 header, L3, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e finally\n * L4 ports.  Whenever \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e found \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e there are no matches \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e current\n * subtable, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-property\"\u003erest\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e subtable can be skipped.\n *\n * Staged lookup \u003cspan class=\"hljs-keyword\"\u003edoes\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e reduce lookup \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e may increase \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e, because\n * \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e changes a single hash table lookup \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e multiple hash table lookups.\n * It reduces un-wildcarding significantly \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e important use cases.\n *\n *\n * Prefix Tracking (Wildcard Optimization)\n * \u003cspan class=\"hljs-comment\"\u003e---------------------------------------\u003c/span\u003e\n *\n * Classifier uses prefix trees (\u003cspan class=\"hljs-string\"\u003e\"tries\"\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e tracking \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e used\n * address \u003cspan class=\"hljs-constant\"\u003espace\u003c/span\u003e, enabling skipping classifier tables containing\n * longer masks than necessary \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e address.  This reduces\n * un-wildcarding \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e datapath flows \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e parts \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e address \u003cspan class=\"hljs-constant\"\u003espace\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003ewithout\u003c/span\u003e host routes, \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e consulting extra data structures (\u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * tries) may slightly increase lookup \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e.\n *\n * Trie lookup \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e interwoven \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e staged lookup, so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e a trie \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * searched only when \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e configured trie field becomes relevant \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e lookup.  The trie lookup results are retained so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e each trie\n * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e checked \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e most once \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e each classifier lookup.\n *\n * This implementation tracks \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e each address\n * prefix \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e whole classifier.  More aggressive table skipping\n * would be possible \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e maintaining lists \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e tables \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e have prefixes\n * \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e lengths encountered \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e tree traversal, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e maintaining\n * separate tries \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e subsets \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules separated \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e metadata fields.\n *\n * Prefix tracking \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e configured via OVSDB \u003cspan class=\"hljs-string\"\u003e\"Flow_Table\"\u003c/span\u003e table,\n * \u003cspan class=\"hljs-string\"\u003e\"fieldspec\"\u003c/span\u003e column.  \u003cspan class=\"hljs-string\"\u003e\"fieldspec\"\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a \u003cspan class=\"hljs-type\"\u003estring\u003c/span\u003e map \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e a \u003cspan class=\"hljs-string\"\u003e\"prefix\"\u003c/span\u003e\n * key tells which fields should be used \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e prefix tracking.  The\n * value \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-string\"\u003e\"prefix\"\u003c/span\u003e key \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a comma separated \u003cspan class=\"hljs-type\"\u003elist\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e field names.\n *\n * There \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a maximum \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e fields \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e can be enabled \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e any one\n * flow table.  Currently this limit \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e3.\u003c/span\u003e\n *\n *\n * Partitioning (Lookup Time \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e Wildcard Optimization)\n * \u003cspan class=\"hljs-comment\"\u003e----------------------------------------------------\u003c/span\u003e\n *\n * Suppose \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e a \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e classifier \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e being used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e handle multiple stages \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a\n * pipeline using \u003cspan class=\"hljs-string\"\u003e\"resubmit\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e metadata (\u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e OpenFlow \u003cspan class=\"hljs-number\"\u003e1.1\u003c/span\u003e+ field\n * named \u003cspan class=\"hljs-string\"\u003e\"metadata\"\u003c/span\u003e) distinguishing \u003cspan class=\"hljs-keyword\"\u003ebetween\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e different stages.  For example,\n * metadata value \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e might identify ingress rules, metadata value \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e might\n * identify ACLs, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e metadata value \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e might identify egress rules.  Such a\n * classifier \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e essentially partitioned \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e multiple sub-classifiers \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * basis \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e metadata value.\n *\n * The classifier has a special optimization \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e speed up matching \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e this\n * scenario:\n *\n *     - Each cls_subtable \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e matches \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e metadata gets a tag derived \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n *       subtable\u0027s mask, so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e likely \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e each subtable has a unique\n *       tag.  (Duplicate tags have a performance cost \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e affect\n *       correctness.)\n *\n *     - For each metadata value matched \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e any cls_rule, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier\n *       constructs a \u003cspan class=\"hljs-string\"\u003e\"struct cls_partition\"\u003c/span\u003e indexed \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e metadata value.\n *       The cls_partition has a \u0027tags\u0027 member \u003cspan class=\"hljs-keyword\"\u003ewhose\u003c/span\u003e value \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e bitwise-OR \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n *       \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e tags \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e each cls_subtable \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econtains\u003c/span\u003e any rule \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e matches \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e\n *       \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e cls_partition\u0027s metadata value.  In other \u003cspan class=\"hljs-property\"\u003ewords\u003c/span\u003e, struct\n *       cls_partition associates metadata values \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e subtables \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e\n *       be checked \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e flows \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e specific metadata value.\n *\n * Thus, a flow lookup can start \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e looking up \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e partition associated \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e flow\u0027s metadata, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e skip \u003cspan class=\"hljs-keyword\"\u003eover\u003c/span\u003e any cls_subtable \u003cspan class=\"hljs-keyword\"\u003ewhose\u003c/span\u003e \u0027tag\u0027 \u003cspan class=\"hljs-keyword\"\u003edoes\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e intersect \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e partition\u0027s \u0027tags\u0027.  (The flow must also be looked up \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n * any cls_subtable \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e doesn\u0027t match \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e metadata.  We handle \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e giving\n * any such cls_subtable TAG_ALL \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eits\u003c/span\u003e \u0027tags\u0027 so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e matches any tag.)\n *\n * Partitioning saves lookup \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e reducing \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e subtable lookups.\n * Each eliminated subtable lookup also reduces \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e amount \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e un-wildcarding.\n *\n *\n * Classifier Versioning\n * =====================\n *\n * Classifier lookups are always done \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a specific classifier \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e\n * a \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e defined \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be a natural \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e.\n *\n * When a new rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e added \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e a classifier, \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e become visible \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a\n * specific \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e.  If \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e used \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e insert \u003cspan class=\"hljs-property\"\u003etime\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e larger than\n * any \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e currently used \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e lookups, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e said \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be\n * invisible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e lookups.  This means \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e lookups won\u0027t find \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule, \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e immediately available \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e classifier iterations.\n *\n * Similarly, a rule can be marked \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be deleted \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a future \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e.  To\n * delete a rule \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a way \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e remove \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule \u003cspan class=\"hljs-keyword\"\u003ebefore\u003c/span\u003e all ongoing lookups are\n * finished, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule should be made invisible \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a specific \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e.\n * Then, when all \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e lookups use a later \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule can be\n * actually removed \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier.\n *\n * Classifiers can hold duplicate rules (rules \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e same match criteria \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n * priority) when \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e most one \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e these duplicates \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e visible \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e any \u003cspan class=\"hljs-keyword\"\u003egiven\u003c/span\u003e\n * lookup \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e.  The caller responsible \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e classifier modifications must\n * maintain this invariant.\n *\n * The classifier supports versioning \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e two reasons:\n *\n *     \u003cspan class=\"hljs-number\"\u003e1.\u003c/span\u003e Support \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e versioned modifications makes \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e possible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e perform an\n *        arbitraty series \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e classifier changes \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e one atomic \u003cspan class=\"hljs-keyword\"\u003etransaction\u003c/span\u003e,\n *        \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e intermediate versions \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier are \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e visible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e any\n *        lookups.  Also, when a rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e added \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a future \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e marked\n *        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e removal \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e current \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e, such modifications can be\n *        reverted \u003cspan class=\"hljs-keyword\"\u003ewithout\u003c/span\u003e any visible effects \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e any \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e current lookups.\n *\n *     \u003cspan class=\"hljs-number\"\u003e2.\u003c/span\u003e Performance: Adding (\u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e deleting) a large \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules can, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n *        pathological cases, have a cost proportional \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules\n *        already \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier.  When multiple rules are being added (\u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e\n *        deleted) \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e one go, though, this pathological case cost can be\n *        typically avoided, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e long \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eit\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e OK \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e any new rules \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be\n *        invisible \u003cspan class=\"hljs-keyword\"\u003euntil\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e batch change \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e complete.\n *\n * Note \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier_replace() function replaces a rule immediately, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e therefore \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e safe \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e use \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e versioning.  It \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e still available \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * users \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e use versioning.\n *\n *\n * Deferred Publication\n * ====================\n *\n * Removing large \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e rules \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e classifier can be costly, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * supporting data structures are teared down, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e many cases just \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be\n * re-instantiated right \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e.  In \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e worst case, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e when each rule has a\n * different match pattern (mask), \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e maintenance \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e match patterns can\n * have cost O(N^\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e), \u003cspan class=\"hljs-keyword\"\u003ewhere\u003c/span\u003e N \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e different match patterns.  To\n * alleviate this, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier supports a \u003cspan class=\"hljs-string\"\u003e\"deferred mode\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e which changes\n * \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e internal data structures needed \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e future \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e lookups may \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e be\n * fully computed yet.  The computation \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e finalized when \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e deferred mode \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * turned off.\n *\n * This feature can be used \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e versioning such \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e all changes \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e future\n * versions are made \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e deferred mode.  Then, right \u003cspan class=\"hljs-keyword\"\u003ebefore\u003c/span\u003e making \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new\n * \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e visible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e lookups, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e deferred mode \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e turned off so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e all \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n *  data structures are ready \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e lookups \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e.\n *\n * To use deferred publication, \u003cspan class=\"hljs-keyword\"\u003efirst\u003c/span\u003e call classifier_defer().  Then, modify\n * \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier via additions (classifier_insert() \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e a specific, future\n * \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e) \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e deletions (use cls_rule_make_removable_after_version()).\n * Then call classifier_publish(), \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e, announce \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new \u003cspan class=\"hljs-property\"\u003eversion\u003c/span\u003e\n * \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be used \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e lookups.\n *\n *\n * Thread-safety\n * =============\n *\n * The classifier may safely be accessed \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e many reader threads concurrently\n * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e a single writer, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e multiple writers when they guarantee mutually\n * exlucive access \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e classifier modifications.\n *\n * Since \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier rules are RCU protected, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule destruction \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e\n * removal \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e classifier must be RCU postponed.  Also, when versioning \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * used, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule removal itself needs \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be typically RCU postponed.  In this\n * case \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule destruction \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e doubly RCU postponed, i.e., \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esecond\u003c/span\u003e\n * ovsrcu_postpone() call \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e destruct \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e called \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efirst\u003c/span\u003e RCU\n * callback \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e removes \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule.\n *\n * Rules \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e have never been visible \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e lookups are an exeption \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eabove\u003c/span\u003e\n * rule.  Such rules can be removed immediately, \u003cspan class=\"hljs-keyword\"\u003ebut\u003c/span\u003e their destruction must\n * still be RCU postponed, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule\u0027s visibility attribute may be examined\n * parallel \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e rule\u0027s removal. */\u003c/code\u003e\u003c/pre\u003e","markdowncontent":"传统交换机是基于MAC表进行转发的，所以OVS也支持MAC学习特性，但是由于OVS也支持Openflow协议作为控制面，其功能就不仅仅是一个二层交换机了。\n###先简单谈谈Openflow\n由于现在的网络暴露出了越来越多的弊病以及人们对网络性能需求的提高，于是研究人员不得不把很多复杂功能加入到路由器的体系结构当中，例如OSPF，BGP，组播，区分服务，流量工程，NAT，防火墙，MPLS等等。这就使得路由器等交换设备越来越臃肿而且性能提升的空间越来越小。\n\n然而与网络领域的困境截然不同的是，计算机领域实现了日新月异的发展。仔细回顾计算机领域的发展，不难发现其关键在于计算机领域找到了一个简单可用的硬件底层(x86指令集)。由于有了这样一个公用的硬件底层，所以在软件方面，不论是应用程序还是操作系统都取得了飞速的发展。很多主张重新设计计算机网络体系结构的人士认为：网络可以复制计算机领域的成功经验来解决现在网络所遇到的所有问题。在这种思想的指导下，将来的网络必将是这样的：底层的数据通路（交换机、路由器）是“哑的、简单的、最小的”，并定义一个对外开放的关于流表的公用的API，同时采用控制器来控制整个网络。未来的研究人员就可以在控制器上自由的调用底层的API来编程，从而实现网络的创新。\n\nOpenFlow正是这种网络创新思想的强有力的推动者。OpenFlow交换机将原来完全由交换机/路由器控制的报文转发过程转化为由OpenFlow交换机（OpenFlow Switch）和控制服务器（Controller）来共同完成，从而实现了数据转发和路由控制的分离。控制器可以通过事先规定好的接口操作来控制OpenFlow交换机中的流表，从而达到控制数据转发的目的。\n\n在Openflow的设计中，其匹配项除了二层的*eth_src, eth_dst,*  *eth_type, vlan* 等的匹配外，还有三层的源目的IP，IP协议类型，的匹配，甚至于还有四层的端口号的匹配等，所以在Openflow和控制器的支持下，OVS已经不仅仅是一个二层交换机。\n\n###Openflow相关接口一览\n```\tC\t\nstatic enum ofperr\nofproto_flow_mod_start(struct ofproto *ofproto, struct ofproto_flow_mod *ofm)\n    OVS_REQUIRES(ofproto_mutex)\n{\n    enum ofperr error;\n\n    rule_collection_init(&ofm-\u003eold_rules);\n    rule_collection_init(&ofm-\u003enew_rules);\n\n    switch (ofm-\u003ecommand) {\n    case OFPFC_ADD:\n        error = add_flow_start(ofproto, ofm);\n        break;\n    case OFPFC_MODIFY:\n        error = modify_flows_start_loose(ofproto, ofm);\n        break;\n    case OFPFC_MODIFY_STRICT:\n        error = modify_flow_start_strict(ofproto, ofm);\n        break;\n    case OFPFC_DELETE:\n        error = delete_flows_start_loose(ofproto, ofm);\n        break;\n    case OFPFC_DELETE_STRICT:\n        error = delete_flow_start_strict(ofproto, ofm);\n        break;\n    default:\n        OVS_NOT_REACHED();\n    }\n    /* Release resources not needed after start. */\n    ofproto_flow_mod_uninit(ofm);\n\n    if (error) {\n        rule_collection_destroy(&ofm-\u003eold_rules);\n        rule_collection_destroy(&ofm-\u003enew_rules);\n    }\n    return error;\n}\n```\nOfproto模块会收到flow_mod消息，无论是控制器发出还是命令行客户端添加流表，都会调用这个函数，OVS对收到的流表会保存在用户空间的oftable数据结构中，接下来就是整个OpenVswitch的核心，在用户空间对内核态上送的报文寻找匹配的Flow Entry。\n###相关数据结构和优化一览\n数据结构和算法的设计上有几个难点：\n\t- Openflow过于灵活的匹配规则对Pipe的实现提出了挑战，其rule包括metadata,L2,L3,L4的匹配项，可能都分布在一张表中，另外还有优先级的考虑\n\t- 在并发的情况下，如何保障表项的修改，增加和删除对最终结果没有影响\n\t- 如何保障高性能 \n最终OpenVswitch设计了一个复杂的数据结构和保障机制来达到上述要求\n![这里写图片描述](http://img.blog.csdn.net/20170712212114070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上图是用户空间各个核心数据结构的关系，其核心数据结构式Classifier，Pipeline里的每个Table对应一个Classifier，Classifier把整张表里的各个rule进行了分类分成了不同的subtable，每个subtable有自己的掩码，这个掩码表示这个subtable里的rule要匹配的掩码。很显然，这种分类并不能提高匹配效率，这个数据结构还做了不少优化策略：\n\n - subtable之间还做了优先级排序，需要优先级向量来标识。这样的话从高优先级的subtable先开始，一旦匹配就可以跳过不少低优先级的subtable。\n - 分阶段匹配，对于一个subtable还可以再继续拆分多个hashtable，因为如果某个subtabl同时要匹配的项比较多，包含了metadata，L2, L3，L4的匹配项，那么就按这四个子类来分，第一阶段先匹配metadata；然后再匹配metadata,L2；继续metadata,L2，L3；最后才是metadata,L2，L3，L4。对于能匹配的rule其实并不能增加效率，但是对于不匹配的情况却是可以增加很大效率。\n - 前缀追踪，前缀跟踪允许分类器跳过比必要的前缀更长的rule，从而为数据流更好的通配符。当流表包含具有不同前缀长度的IP地址字段匹配项时，前缀跟踪可能是有益的。例如，当一个流表中包含一个完整的IP地址匹配和一个地址前缀匹配，完整的地址匹配通常会导致此表的该字段非通配符全0（取决于rule优先级）。在这种情况下，每个有不同的地址的数据包只能被交给用户空间处理并生成自己的数据流。在前缀跟踪启用后用户空间会为问题Packet生成更短的前缀地址匹配，而把无关的地址位置成通配，可以使用一个rule来处理所有的问题包。在这种情况下，可以避免许多的用户上调，这样整体性能可以更好。当然这仅仅是性能优化，因为不管是否有前缀跟踪数据包将得到相同的处理。另外前缀跟踪是可以和分阶段匹配配套使用，Trie树会追踪整个Classifier中所有Rule的地址前缀的数量。更神奇的是通过维护一个在Trie树遍历中遇到的最长前缀的列表或者维护通过不同Metadata分开的规则子集独立的Trie树可以实现表跳跃。前缀追踪是通过OVSDB“Flow_Table”表\"fieldspec\" 列来配置的，\"fieldspec\" 列是用string map这里前缀的key值告诉哪些字段可以被用来做前缀追踪。\n###并发的支持\n很显然，出于对性能的考虑，对Pipeline的并发的支持是必须的，而且在转发的场景下，相对而言会是一个reader多writer少的一个场景，针对这种场景，OVS采用了类似于悲观锁的版本控制机制和Linux RCU机制的保护，下面分别对两者进行介绍：\n#### 基于版本的并发的支持\nClassifier检索总是在一个特定的版本上进行的，这个版本号是一个自然数。当一个新的Rule被添加到Classifier之后，它会被设置为在一个特定的版本号上可见。如果这个插入时的版本号比当前检索的时候的版本号要大，那么它暂时是不可见的。这意味着检索不会发现这个rule，但是rule会在Classifier迭代之后马上可见。\n类似的，一条rule可以被在将来的某个版本删除。在当前的检索没有完成之前，rule是不允许被删除的，首先第一步应该把rule设置为不可见，之后当用来检索的Classifier的版本号已经大于删除版本号时再实际上把这个rule删除掉\nClassifier 支持版本的两个原因：\n\n1. 支持基于版本的修改使得对Classifier的修改具备原子特征，不同版本间的中间状态是对外不可见的。同时，当一个rule被添加到未来的版本里，这些修改可以回退掉且不会对当前的检索产生任何影响\n\n2. 性能：添加或删除一个rule集合，其性能的影响和Classifier已有的rule数量成正比。当多个rule一口气添加上之后，只要整批的rule修改还没有完成之前不可见，那么这种影响其实是可以避免。\n\n#### Linux RCU机制\n![RCU机制](http://img.my.csdn.net/uploads/201212/01/1354347444_2149.png)\nRCU(Read-Copy Update)，顾名思义就是读-拷贝修改，它是基于其原理命名的。对于被RCU保护的共享数据结构，读者不需要获得任何锁就可以访问它，但写者在访问它时首先拷贝一个副本，然后对副本进行修改，最后使用一个回调（callback）机制在适当的时机把指向原来数据的指针重新指向新的被修改的数据。这个时机就是所有引用该数据的CPU都退出对共享数据的操作。\n长图以删除为例，在做删除操作后起始并没有把数据销毁掉，而是等待已经读取该数据的线程出读临界区之后再做销毁工作，这段时间叫宽限期，而在这段时间内新来的线程则可以读取最新修改的值。\n但是注意到RCU机制和版本控制机制是同时使用的，由于Classifier rule是RCU保护的，Rule的销毁在执行remove操作之后必须是RCU推迟的。同时，当版本特性也在使用时，remove操作自身也必须是RCU推迟的（此时的删除必须等待到指定的版本之后）。在这种情形下rule的删除就经理了两次RCU推迟。 比如，第二次调用ovsrcu_postpone() 来销毁Rule就是在第一次RCU回调执行remove操作的时候调用的\n\n用户态转发的核心都在Classifier里，这里也会附加Classifier的详细解释，读者可以自行体会。\n\n```\n/* Flow classifier.\n *\n *\n * What?\n * =====\n *\n * A flow classifier holds any number of \"rules\", each of which specifies\n * values to match for some fields or subfields and a priority.  Each OpenFlow\n * table is implemented as a flow classifier.\n *\n * The classifier has two primary design goals.  The first is obvious: given a\n * set of packet headers, as quickly as possible find the highest-priority rule\n * that matches those headers.  The following section describes the second\n * goal.\n *\n *\n * \"Un-wildcarding\"\n * ================\n *\n * A primary goal of the flow classifier is to produce, as a side effect of a\n * packet lookup, a wildcard mask that indicates which bits of the packet\n * headers were essential to the classification result.  Ideally, a 1-bit in\n * any position of this mask means that, if the corresponding bit in the packet\n * header were flipped, then the classification result might change.  A 0-bit\n * means that changing the packet header bit would have no effect.  Thus, the\n * wildcarded bits are the ones that played no role in the classification\n * decision.\n *\n * Such a wildcard mask is useful with datapaths that support installing flows\n * that wildcard fields or subfields.  If an OpenFlow lookup for a TCP flow\n * does not actually look at the TCP source or destination ports, for example,\n * then the switch may install into the datapath a flow that wildcards the port\n * numbers, which in turn allows the datapath to handle packets that arrive for\n * other TCP source or destination ports without additional help from\n * ovs-vswitchd.  This is useful for the Open vSwitch software and,\n * potentially, for ASIC-based switches as well.\n *\n * Some properties of the wildcard mask:\n *\n *     - \"False 1-bits\" are acceptable, that is, setting a bit in the wildcard\n *       mask to 1 will never cause a packet to be forwarded the wrong way.\n *       As a corollary, a wildcard mask composed of all 1-bits will always\n *       yield correct (but often needlessly inefficient) behavior.\n *\n *     - \"False 0-bits\" can cause problems, so they must be avoided.  In the\n *       extreme case, a mask of all 0-bits is only correct if the classifier\n *       contains only a single flow that matches all packets.\n *\n *     - 0-bits are desirable because they allow the datapath to act more\n *       autonomously, relying less on ovs-vswitchd to process flow setups,\n *       thereby improving performance.\n *\n *     - We don\u0027t know a good way to generate wildcard masks with the maximum\n *       (correct) number of 0-bits.  We use various approximations, described\n *       in later sections.\n *\n *     - Wildcard masks for lookups in a given classifier yield a\n *       non-overlapping set of rules.  More specifically:\n *\n *       Consider an classifier C1 filled with an arbitrary collection of rules\n *       and an empty classifier C2.  Now take a set of packet headers H and\n *       look it up in C1, yielding a highest-priority matching rule R1 and\n *       wildcard mask M.  Form a new classifier rule R2 out of packet headers\n *       H and mask M, and add R2 to C2 with a fixed priority.  If one were to\n *       do this for every possible set of packet headers H, then this\n *       process would not attempt to add any overlapping rules to C2, that is,\n *       any packet lookup using the rules generated by this process matches at\n *       most one rule in C2.\n *\n * During the lookup process, the classifier starts out with a wildcard mask\n * that is all 0-bits, that is, fully wildcarded.  As lookup proceeds, each\n * step tends to add constraints to the wildcard mask, that is, change\n * wildcarded 0-bits into exact-match 1-bits.  We call this \"un-wildcarding\".\n * A lookup step that examines a particular field must un-wildcard that field.\n * In general, un-wildcarding is necessary for correctness but undesirable for\n * performance.\n *\n *\n * Basic Classifier Design\n * =======================\n *\n * Suppose that all the rules in a classifier had the same form.  For example,\n * suppose that they all matched on the source and destination Ethernet address\n * and wildcarded all the other fields.  Then the obvious way to implement a\n * classifier would be a hash table on the source and destination Ethernet\n * addresses.  If new classification rules came along with a different form,\n * you could add a second hash table that hashed on the fields matched in those\n * rules.  With two hash tables, you look up a given flow in each hash table.\n * If there are no matches, the classifier didn\u0027t contain a match; if you find\n * a match in one of them, that\u0027s the result; if you find a match in both of\n * them, then the result is the rule with the higher priority.\n *\n * This is how the classifier works.  In a \"struct classifier\", each form of\n * \"struct cls_rule\" present (based on its -\u003ematch.mask) goes into a separate\n * \"struct cls_subtable\".  A lookup does a hash lookup in every \"struct\n * cls_subtable\" in the classifier and tracks the highest-priority match that\n * it finds.  The subtables are kept in a descending priority order according\n * to the highest priority rule in each subtable, which allows lookup to skip\n * over subtables that can\u0027t possibly have a higher-priority match than already\n * found.  Eliminating lookups through priority ordering aids both classifier\n * primary design goals: skipping lookups saves time and avoids un-wildcarding\n * fields that those lookups would have examined.\n *\n * One detail: a classifier can contain multiple rules that are identical other\n * than their priority.  When this happens, only the highest priority rule out\n * of a group of otherwise identical rules is stored directly in the \"struct\n * cls_subtable\", with the other almost-identical rules chained off a linked\n * list inside that highest-priority rule.\n *\n * The following sub-sections describe various optimizations over this simple\n * approach.\n *\n *\n * Staged Lookup (Wildcard Optimization)\n * -------------------------------------\n *\n * Subtable lookup is performed in ranges defined for struct flow, starting\n * from metadata (registers, in_port, etc.), then L2 header, L3, and finally\n * L4 ports.  Whenever it is found that there are no matches in the current\n * subtable, the rest of the subtable can be skipped.\n *\n * Staged lookup does not reduce lookup time, and it may increase it, because\n * it changes a single hash table lookup into multiple hash table lookups.\n * It reduces un-wildcarding significantly in important use cases.\n *\n *\n * Prefix Tracking (Wildcard Optimization)\n * ---------------------------------------\n *\n * Classifier uses prefix trees (\"tries\") for tracking the used\n * address space, enabling skipping classifier tables containing\n * longer masks than necessary for the given address.  This reduces\n * un-wildcarding for datapath flows in parts of the address space\n * without host routes, but consulting extra data structures (the\n * tries) may slightly increase lookup time.\n *\n * Trie lookup is interwoven with staged lookup, so that a trie is\n * searched only when the configured trie field becomes relevant for\n * the lookup.  The trie lookup results are retained so that each trie\n * is checked at most once for each classifier lookup.\n *\n * This implementation tracks the number of rules at each address\n * prefix for the whole classifier.  More aggressive table skipping\n * would be possible by maintaining lists of tables that have prefixes\n * at the lengths encountered on tree traversal, or by maintaining\n * separate tries for subsets of rules separated by metadata fields.\n *\n * Prefix tracking is configured via OVSDB \"Flow_Table\" table,\n * \"fieldspec\" column.  \"fieldspec\" is a string map where a \"prefix\"\n * key tells which fields should be used for prefix tracking.  The\n * value of the \"prefix\" key is a comma separated list of field names.\n *\n * There is a maximum number of fields that can be enabled for any one\n * flow table.  Currently this limit is 3.\n *\n *\n * Partitioning (Lookup Time and Wildcard Optimization)\n * ----------------------------------------------------\n *\n * Suppose that a given classifier is being used to handle multiple stages in a\n * pipeline using \"resubmit\", with metadata (that is, the OpenFlow 1.1+ field\n * named \"metadata\") distinguishing between the different stages.  For example,\n * metadata value 1 might identify ingress rules, metadata value 2 might\n * identify ACLs, and metadata value 3 might identify egress rules.  Such a\n * classifier is essentially partitioned into multiple sub-classifiers on the\n * basis of the metadata value.\n *\n * The classifier has a special optimization to speed up matching in this\n * scenario:\n *\n *     - Each cls_subtable that matches on metadata gets a tag derived from the\n *       subtable\u0027s mask, so that it is likely that each subtable has a unique\n *       tag.  (Duplicate tags have a performance cost but do not affect\n *       correctness.)\n *\n *     - For each metadata value matched by any cls_rule, the classifier\n *       constructs a \"struct cls_partition\" indexed by the metadata value.\n *       The cls_partition has a \u0027tags\u0027 member whose value is the bitwise-OR of\n *       the tags of each cls_subtable that contains any rule that matches on\n *       the cls_partition\u0027s metadata value.  In other words, struct\n *       cls_partition associates metadata values with subtables that need to\n *       be checked with flows with that specific metadata value.\n *\n * Thus, a flow lookup can start by looking up the partition associated with\n * the flow\u0027s metadata, and then skip over any cls_subtable whose \u0027tag\u0027 does\n * not intersect the partition\u0027s \u0027tags\u0027.  (The flow must also be looked up in\n * any cls_subtable that doesn\u0027t match on metadata.  We handle that by giving\n * any such cls_subtable TAG_ALL as its \u0027tags\u0027 so that it matches any tag.)\n *\n * Partitioning saves lookup time by reducing the number of subtable lookups.\n * Each eliminated subtable lookup also reduces the amount of un-wildcarding.\n *\n *\n * Classifier Versioning\n * =====================\n *\n * Classifier lookups are always done in a specific classifier version, where\n * a version is defined to be a natural number.\n *\n * When a new rule is added to a classifier, it is set to become visible in a\n * specific version.  If the version number used at insert time is larger than\n * any version number currently used in lookups, the new rule is said to be\n * invisible to lookups.  This means that lookups won\u0027t find the rule, but the\n * rule is immediately available to classifier iterations.\n *\n * Similarly, a rule can be marked as to be deleted in a future version.  To\n * delete a rule in a way to not remove the rule before all ongoing lookups are\n * finished, the rule should be made invisible in a specific version number.\n * Then, when all the lookups use a later version number, the rule can be\n * actually removed from the classifier.\n *\n * Classifiers can hold duplicate rules (rules with the same match criteria and\n * priority) when at most one of these duplicates is visible in any given\n * lookup version.  The caller responsible for classifier modifications must\n * maintain this invariant.\n *\n * The classifier supports versioning for two reasons:\n *\n *     1. Support for versioned modifications makes it possible to perform an\n *        arbitraty series of classifier changes as one atomic transaction,\n *        where intermediate versions of the classifier are not visible to any\n *        lookups.  Also, when a rule is added for a future version, or marked\n *        for removal after the current version, such modifications can be\n *        reverted without any visible effects to any of the current lookups.\n *\n *     2. Performance: Adding (or deleting) a large set of rules can, in\n *        pathological cases, have a cost proportional to the number of rules\n *        already in the classifier.  When multiple rules are being added (or\n *        deleted) in one go, though, this pathological case cost can be\n *        typically avoided, as long as it is OK for any new rules to be\n *        invisible until the batch change is complete.\n *\n * Note that the classifier_replace() function replaces a rule immediately, and\n * is therefore not safe to use with versioning.  It is still available for the\n * users that do not use versioning.\n *\n *\n * Deferred Publication\n * ====================\n *\n * Removing large number of rules from classifier can be costly, as the\n * supporting data structures are teared down, in many cases just to be\n * re-instantiated right after.  In the worst case, as when each rule has a\n * different match pattern (mask), the maintenance of the match patterns can\n * have cost O(N^2), where N is the number of different match patterns.  To\n * alleviate this, the classifier supports a \"deferred mode\", in which changes\n * in internal data structures needed for future version lookups may not be\n * fully computed yet.  The computation is finalized when the deferred mode is\n * turned off.\n *\n * This feature can be used with versioning such that all changes to future\n * versions are made in the deferred mode.  Then, right before making the new\n * version visible to lookups, the deferred mode is turned off so that all the\n *  data structures are ready for lookups with the new version number.\n *\n * To use deferred publication, first call classifier_defer().  Then, modify\n * the classifier via additions (classifier_insert() with a specific, future\n * version number) and deletions (use cls_rule_make_removable_after_version()).\n * Then call classifier_publish(), and after that, announce the new version\n * number to be used in lookups.\n *\n *\n * Thread-safety\n * =============\n *\n * The classifier may safely be accessed by many reader threads concurrently\n * and by a single writer, or by multiple writers when they guarantee mutually\n * exlucive access to classifier modifications.\n *\n * Since the classifier rules are RCU protected, the rule destruction after\n * removal from the classifier must be RCU postponed.  Also, when versioning is\n * used, the rule removal itself needs to be typically RCU postponed.  In this\n * case the rule destruction is doubly RCU postponed, i.e., the second\n * ovsrcu_postpone() call to destruct the rule is called from the first RCU\n * callback that removes the rule.\n *\n * Rules that have never been visible to lookups are an exeption to the above\n * rule.  Such rules can be removed immediately, but their destruction must\n * still be RCU postponed, as the rule\u0027s visibility attribute may be examined\n * parallel to the rule\u0027s removal. */\n```","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-11] [chx]
[INFO] 2017-07-28 12:46:39 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74156876 [pool-2-thread-12] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":74156876,"title":"【OpenVswitch源码分析之四】控制面关键接口与调用流程","create_at":"\/Date(1499001345000)\/","create":"2017-07-02 09:15:45","view_count":844,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":1,"bury":0,"description":"受限于篇幅，前文只讲述了控制面板关键接口的前两个部分，本篇继续讲述基本二层协议的配置，Openflow的控制又是一个很大的命题，会放到下一篇文章做阐述。 \n1. 虚拟设备的生命周期接口  \n2. 虚拟设备的业务配置接口  \n3. 二层基础协议的运行启动  \n4. Openflow协议的运行开启与流表下发  \n本节以BFD的配置为例做讲解，无论是STP，BFD的配置，初始的配置接口都是在vsctl中，","url":"http://blog.csdn.net/BLACKMOON88/article/details/74156876","categories":"云计算,OpenVswitch,C语言算法","tags":"源码,open flow","content":"\u003cp\u003e受限于篇幅，前文只讲述了控制面板关键接口的前两个部分，本篇继续讲述基本二层协议的配置，Openflow的控制又是一个很大的命题，会放到下一篇文章做阐述。 \u003cbr\u003e\n1. 虚拟设备的生命周期接口  \u003cbr\u003e\n2. 虚拟设备的业务配置接口  \u003cbr\u003e\n\u003cstrong\u003e\u003cem\u003e3. 二层基础协议的运行启动\u003c/em\u003e \u003c/strong\u003e \u003cbr\u003e\n4. Openflow协议的运行开启与流表下发  \u003cbr\u003e\n本节以BFD的配置为例做讲解，无论是STP，BFD的配置，初始的配置接口都是在vsctl中，vsctl客户端是针对OVSDB配置的交互式客户端，除了对OVSDB的表项做直接的配置，也可以二层协议做使能工作，当然默认初始化时这些功能并没有使能。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs sql\"\u003estatic void\nusage(void)\n{\n    printf(\"\\\n%s: ovs-vswitchd management utility\\n\\\nusage: %s [OPTIONS] COMMAND [ARG...]\\n\\\n\\n\\\nOpen vSwitch commands:\\n\\\n  init                        initialize database, if not yet initialized\\n\\\n  \u003cspan class=\"hljs-operator\"\u003e\u003cspan class=\"hljs-keyword\"\u003eshow\u003c/span\u003e                        print overview \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edatabase\u003c/span\u003e contents\\n\\\n  emer-reset                  reset configuration \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e clean state\\n\\\n\\n\\\nBridge commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-br BRIDGE               \u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e a new bridge named BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-br BRIDGE PARENT VLAN   \u003cspan class=\"hljs-keyword\"\u003ecreate\u003c/span\u003e new fake BRIDGE \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e PARENT \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e VLAN\\n\\\n  del-br BRIDGE               \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e BRIDGE \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e its ports\\n\\\n  list-br                     print the \u003cspan class=\"hljs-keyword\"\u003enames\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e the bridges\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eexists\u003c/span\u003e BRIDGE            exit \u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e BRIDGE does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e exist\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-vlan BRIDGE           print the VLAN which BRIDGE \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-parent BRIDGE         print the parent \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e BRIDGE\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003eexternal\u003c/span\u003e-id BRIDGE \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eVALUE\u003c/span\u003e  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eVALUE\u003c/span\u003e\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003eexternal\u003c/span\u003e-id BRIDGE \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e  unset \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003eexternal\u003c/span\u003e-id BRIDGE \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e  print \u003cspan class=\"hljs-keyword\"\u003evalue\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n  br-\u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003eexternal\u003c/span\u003e-id BRIDGE  list \u003cspan class=\"hljs-keyword\"\u003ekey\u003c/span\u003e-\u003cspan class=\"hljs-keyword\"\u003evalue\u003c/span\u003e pairs \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n\\n\\\nPort commands (a bond \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e considered \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be a single port):\\n\\\n  list-ports BRIDGE           print the \u003cspan class=\"hljs-keyword\"\u003enames\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e the ports \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-port BRIDGE PORT        \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e network device PORT \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-bond BRIDGE PORT IFACE...  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e bonded port PORT \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e BRIDGE \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e IFACES\\n\\\n  del-port [BRIDGE] PORT      \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e PORT (which may be bonded) \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e BRIDGE\\n\\\n  port-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-br PORT             print name \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e bridge that contains PORT\\n\\\n\\n\\\nInterface commands (a bond consists \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e multiple interfaces):\\n\\\n  list-ifaces BRIDGE          print the \u003cspan class=\"hljs-keyword\"\u003enames\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eall\u003c/span\u003e interfaces \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e BRIDGE\\n\\\n  iface-\u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e-br IFACE           print name \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e bridge that contains IFACE\\n\\\n\\n\\\nController commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-controller BRIDGE      print the controllers \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  del-controller BRIDGE      \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e the controllers \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-controller BRIDGE TARGET...  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the controllers \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-fail-mode BRIDGE       print the fail-mode \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  del-fail-mode BRIDGE       \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e the fail-mode \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-fail-mode BRIDGE MODE  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the fail-mode \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e BRIDGE \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e MODE\\n\\\n\\n\\\nManager commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-manager                print the managers\\n\\\n  del-manager                \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e the managers\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-manager TARGET...      \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the list \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e managers \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e TARGET...\\n\\\n\\n\\\nSSL commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-ssl                     print the SSL configuration\\n\\\n  del-ssl                     \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e the SSL configuration\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e-ssl PRIV-\u003cspan class=\"hljs-keyword\"\u003eKEY\u003c/span\u003e CERT CA-CERT  \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the SSL configuration\\n\\\n\\n\\\nAuto Attach commands:\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e-aa-mapping BRIDGE I-SID VLAN   \u003cspan class=\"hljs-keyword\"\u003eadd\u003c/span\u003e Auto Attach mapping \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e BRIDGE\\n\\\n  del-aa-mapping BRIDGE I-SID VLAN   \u003cspan class=\"hljs-keyword\"\u003edelete\u003c/span\u003e Auto Attach mapping VLAN \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e BRIDGE\\n\\\n  \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e-aa-mapping BRIDGE              \u003cspan class=\"hljs-keyword\"\u003eget\u003c/span\u003e Auto Attach mappings \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e BRIDGE\\n\\\n\\n\\\nSwitch commands:\\n\\\n  emer-reset                  reset switch \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e known good state\\n\\\n\\n\\\n%s\\\n\\n\\\nOptions:\\n\\\n  --db=\u003cspan class=\"hljs-keyword\"\u003eDATABASE\u003c/span\u003e               \u003cspan class=\"hljs-keyword\"\u003econnect\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eDATABASE\u003c/span\u003e\\n\\\n                              (\u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e: %s)\\n\\\n  --\u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e-wait                   \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e wait \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e ovs-vswitchd \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e reconfigure\\n\\\n  --retry                     keep trying \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003econnect\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e server forever\\n\\\n  -t, --timeout=SECS          wait \u003cspan class=\"hljs-keyword\"\u003eat\u003c/span\u003e most SECS seconds \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e ovs-vswitchd\\n\\\n  --dry-run                   \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ecommit\u003c/span\u003e changes \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edatabase\u003c/span\u003e\\n\\\n  --oneline                   print exactly one line \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eoutput\u003c/span\u003e per command\\n\u003cspan class=\"hljs-string\"\u003e\",\n           program_name, program_name, ctl_get_db_cmd_usage(), ctl_default_db());\n    vlog_usage();\n    printf(\"\u003c/span\u003e\\\n  --\u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e-syslog             equivalent \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e --verbose=vsctl:syslog:warn\\n\u003cspan class=\"hljs-string\"\u003e\");\n    stream_usage(\"\u003c/span\u003e\u003cspan class=\"hljs-keyword\"\u003edatabase\u003c/span\u003e\u003cspan class=\"hljs-string\"\u003e\", true, true, false);\n    printf(\"\u003c/span\u003e\\n\\\nOther options:\\n\\\n  -h, --help                  display this help message\\n\\\n  -V, --version               display version information\\n\u003cspan class=\"hljs-string\"\u003e\");\n    exit(EXIT_SUCCESS);\n}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e上部分代码表述命令行的用途，而bfd以及stp的配置都是Bridge数据接口中的配置使能位，只要配置使能了，相关的二层协议就会开始运行。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs perl\"\u003e/* Configures BFD on \u003cspan class=\"hljs-string\"\u003e\u0027ofp_port\u0027\u003c/span\u003e in \u003cspan class=\"hljs-string\"\u003e\u0027ofproto\u0027\u003c/span\u003e.  This function has \u003cspan class=\"hljs-keyword\"\u003eno\u003c/span\u003e effect \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e\n - \u003cspan class=\"hljs-string\"\u003e\u0027ofproto\u0027\u003c/span\u003e does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have a port \u003cspan class=\"hljs-string\"\u003e\u0027ofp_port\u0027\u003c/span\u003e. \u003cspan class=\"hljs-variable\"\u003e*/\u003c/span\u003e\nvoid\nofproto_port_set_bfd(struct ofproto \u003cspan class=\"hljs-variable\"\u003e*ofproto\u003c/span\u003e, ofp_port_t ofp_port,\n                     const struct smap \u003cspan class=\"hljs-variable\"\u003e*cfg\u003c/span\u003e)\n{\n    struct ofport \u003cspan class=\"hljs-variable\"\u003e*ofport\u003c/span\u003e;\n    \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e error;\n\n    ofport = ofproto_get_port(ofproto, ofp_port);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!ofport) {\n        VLOG_WARN(\u003cspan class=\"hljs-string\"\u003e\"\u003cspan class=\"hljs-variable\"\u003e%s\u003c/span\u003e: cannot configure bfd on nonexistent port \u003cspan class=\"hljs-variable\"\u003e%\"\u003c/span\u003ePRIu32,\n                  ofproto-&gt;name, ofp_port);\n        return;\n    }\n\n    error = (ofproto-&gt;ofproto_class-&gt;set_bfd\n             ? ofproto-&gt;ofproto_class-&gt;set_bfd(ofport, cfg)\n             : EOPNOTSUPP);\n    if (error) {\n        VLOG_WARN(\"\u003c/span\u003e\u003cspan class=\"hljs-variable\"\u003e%s\u003c/span\u003e: bfd configuration on port \u003cspan class=\"hljs-variable\"\u003e%\"\u003c/span\u003ePRIu32\u003cspan class=\"hljs-string\"\u003e\" (\u003cspan class=\"hljs-variable\"\u003e%s\u003c/span\u003e) failed (\u003cspan class=\"hljs-variable\"\u003e%s\u003c/span\u003e)\"\u003c/span\u003e,\n                  ofproto-&gt;name, ofp_port, netdev_get_name(ofport-&gt;netdev),\n                  ovs_strerror(error));\n    }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch3 id=\"先简单介绍下bfd\"\u003e先简单介绍下BFD\u003c/h3\u003e\n\n\u003cp\u003e为了保护关键应用，网络中会设计有一定的冗余备份链路，网络发生故障时就要求网络设备能够快速检测出故障并将流量切换至备份链路以加快网络收敛速度。目前有些链路（如POS）通过硬件检测机制来实现快速故障检测。但是某些链路（如以太网链路）不具备这样的检测机制。此时，应用就要依靠上层协议自身的机制来进行故障检测，上层协议的检测时间都在1秒以上，这样的故障检测时间对某些应用来说是不能容忍的。某些路由协议如OSPF、IS-IS虽然有Fast Hello功能来加快检测速度，但是检测时间也只能达到1秒的精度，而且Fast Hello功能只是针对本协议的，无法为其它协议提供快速故障检测。\u003c/p\u003e\n\n\u003cp\u003eBFD：(Bidirectional Forwarding Detection，双向转发检测)协议提供一种轻负载、快速检测两台邻接路由器/交换机之间转发路径连通状态的方法，它是一个简单的“Hello”协议，在很多方面，它与那些著名的路由协议的邻居检测部分相似。一对系统在它们之间的所建立会话的通道上周期性的发送检测报文，如果某个系统在足够长的时间内没有收到对端的检测报文，则认为在这条到相邻系统的双向通道的某个部分发生了故障协议邻居通过该方式可以快速检测到转发路径的连通故障，加快启用备份转发路径，提升现有网络性能。\u003c/p\u003e\n\n\u003cp\u003eBFD 提供的检测机制与所应用的接口介质类型、封装格式、以及关联的上层协议如 OSPF、BGP、RIP 等无关。BFD 在两台路由器之间建立会话，通过快速发送检测故障消息给正在运行的路由协议，以触发路由协议重新计算路由表，大大减少整个网络的收敛时间。BFD 本身没有发现邻居的能力，需要上层协议通知与哪个邻居建立会话。\u003c/p\u003e\n\n\u003cp\u003eBFD报文格式 \u003cbr\u003e\nBFD发送的检测报文是UDP报文，定义两种类型的报文 \u003cbr\u003e\n建立BFD会话时缺省采用版本1，如果收到对端系统发送的是版本0的报文，将自动切换到版本0。可以通过show bfd neighbors命令查看采用的版本。\u003c/p\u003e\n\n\u003cp\u003e1）控制报文 \u003cbr\u003e\n其格式如下： \u003cbr\u003e\n\u003cimg src=\"http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/2013111622828395.png\" alt=\"BFD报文格式\" title=\"\"\u003e \u003cbr\u003e\n- Vers：BFD协议版本号，目前为1 \u003cbr\u003e\n- Diag：诊断字，标明本地BFD系统最近一次会话状态发生变化的原因 \u003cbr\u003e\n- Sta：BFD本地状态 \u003cbr\u003e\n- P：参数发生改变时，发送方在BFD报文中置该标志，接收方必须立即响应该报文 \u003cbr\u003e\n- F：响应P标志置位的回应报文中必须将F标志置位 \u003cbr\u003e\n- C：转发/控制分离标志，一旦置位，控制平面的变化不影响BFD检测，如：控制平面为ISIS，当ISIS重- 启/GR时，BFD可以继续监测链路状态 \u003cbr\u003e\n- A：认证标识，置位代表会话需要进行验证 \u003cbr\u003e\n- D：查询请求，置位代表发送方期望采用查询模式对链路进行监测 \u003cbr\u003e\n- R：预留位 \u003cbr\u003e\n- Detect Mult：检测超时倍数，用于检测方计算检测超时时间 \u003cbr\u003e\n- Length：报文长度 \u003cbr\u003e\n- My Discreaminator：BFD会话连接本地标识符 \u003cbr\u003e\n- Your Discreaminator：BFD会话连接远端标识符 \u003cbr\u003e\n- Desired Min Tx Interval：本地支持的最小BFD报文发送间隔 \u003cbr\u003e\n- Required Min RX Interval：本地支持的最小BFD接收间隔 \u003cbr\u003e\n- Required Min Echo RX Interval：本地支持的最小Echo报文接收间隔（如果本地不支持Echo功能，则设置0） \u003cbr\u003e\n- Auth Type：认证类型，目前协议提供有\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSimple Password    \u003c/li\u003e\n\u003cli\u003eKeyed MD5   \u003c/li\u003e\n\u003cli\u003eMeticulous Keyed MD5   \u003c/li\u003e\n\u003cli\u003eKeyed SHA1     \u003c/li\u003e\n\u003cli\u003eMeticulous Keyed SHA1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e-Auth Length：认证数据长度 Authentication Data：认证数据区 \u003cbr\u003e\n其中认证部分为可选部分，可以在报文中选择使用，其中认证方式可以有：Simple Password、Keyed MD5、Meticulous Keyed MD5、Keyed SHA1、Meticulous Keyed SHA1。协议定义了控制报文所使用的UDP目的端口号为3784。\u003c/p\u003e\n\n\u003cp\u003e2）回声报文（ECHO） \u003cbr\u003e\nBFD协议并未定义回声报文的格式，但是对于回声报文，其格式只是与本地相关，远端只需把此报文在反向通道上返回，回声报文的源目的IP相同。 \u003cbr\u003e\n会话建立 \u003cbr\u003e\nBFD在检测前，需要在通道两端建立对等会话，会话建立以后以协商后的速率各自向对端发送BFD的控制报文来实现故障检测。其会话检测的路径可以是标记交换路径，也可以是其它类型的隧道或是可交换以太网。 \u003cbr\u003e\n1)会话初始化过程 \u003cbr\u003e\n对于BFD会话建立过程中的初始化阶段，两端是主动角色还是被动角色是由应用来决定的，但是至少有一端为主动角色。 \u003cbr\u003e\n2)会话建立过程 \u003cbr\u003e\n会话建立过程是一个三次握手的过程，经过此过程后两端的会话变为Up状态，在此过程中同时协商好相应的参数，以后的状态变化就是根据缺陷的检测结果来进行，并做相应的处理。其状态机迁移如下： \u003cbr\u003e\n\u003cimg src=\"http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/201311162321833.png\" alt=\"BFD状态机\" title=\"\"\u003e \u003cbr\u003e\n以BFD会话连接建立过程为例，简要介绍状态机迁移过程： \u003cbr\u003e\n\u003cimg src=\"http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/201311162346188.png\" alt=\"BFD状态机迁移过程\" title=\"\"\u003e \u003cbr\u003e\n - A、B两站启动BFD，各自初始状态为“down”，发送BFD报文携带状态为“down” \u003cbr\u003e\n - B站收到状态为“down”的BFD报文，本地状态切换至“init”，发送BFD报文携带状态为“init” \u003cbr\u003e\n - B站本地BFD状态为“init”后，再接收到状态为“down”的报文不做处理 \u003cbr\u003e\n - A站BFD状态变化过程同上 \u003cbr\u003e\n - B站收到状态为“init”的BFD报文，本地状态切换至“up” \u003cbr\u003e\n - A站BFD状态变化过程同上 \u003cbr\u003e\n - A、B两站在发生“down =&gt; init”变化后，会启动一个超时定时器，该定时器的作用是防止本地状态阻塞在“init”（有可能AB连接此时断连，会话不能正常建立），如果在规定的时间内仍未收到状态为“init/up”的BFD报文，则状态自动切换回“down” \u003cbr\u003e\n - 本地状态UP标志会话建立成功\u003c/p\u003e\n\n\n\n\u003ch3 id=\"bfd实现简介\"\u003eBFD实现简介\u003c/h3\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs lasso\"\u003e\u003cspan class=\"hljs-comment\"\u003e/* Initializes, destroys, or reconfigures the BFD session \u0027bfd\u0027 (named \u0027name\u0027),\n * according to the database configuration contained in \u0027cfg\u0027.  Takes ownership\n * of \u0027bfd\u0027, which may be NULL.  Returns a BFD object which may be used as a\n * handle for the session, or NULL if BFD is not enabled according to \u0027cfg\u0027.\n * Also returns NULL if cfg is NULL. */\u003c/span\u003e\nstruct bfd \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003e\nbfd_configure(struct bfd \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003ebfd, const char \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003ename, const struct smap \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003ecfg,\n              struct netdev \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003enetdev) OVS_EXCLUDED(mutex)\n{\n    static atomic_count udp_src \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e ATOMIC_COUNT_INIT(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n\n    int decay_min_rx;\n    long long int min_tx, min_rx;\n    bool need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n    bool cfg_min_rx_changed \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n    bool cpath_down, forwarding_if_rx;\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003ecfg \u003cspan class=\"hljs-subst\"\u003e||\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003esmap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"enable\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e)) {\n        bfd_unref(bfd);\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eNULL\u003c/span\u003e;\n    }\n\n    ovs_mutex_lock(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003emutex);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003ebfd) {\n        bfd \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e xzalloc(sizeof \u003cspan class=\"hljs-subst\"\u003e*\u003c/span\u003ebfd);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ename \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e xstrdup(name);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_override \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e-\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edisc \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e generate_discriminator();\n        hmap_insert(all_bfds, \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003enode, bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edisc);\n\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ediag \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e DIAG_NONE;\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e;\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emult \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e;\n        ovs_refcount_init(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eref_cnt);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003enetdev \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e netdev_ref(netdev);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003erx_packets \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e bfd_rx_packets(bfd);\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ein_decay \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eflap_count \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n\n        \u003cspan class=\"hljs-comment\"\u003e/* RFC 5881 section 4\n         * The source port MUST be in the range 49152 through 65535.  The same\n         * UDP source port number MUST be used for all BFD Control packets\n         * associated with a particular session.  The source port number SHOULD\n         * be unique among all BFD sessions on the system. */\u003c/span\u003e\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eudp_src \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e (atomic_count_inc(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003eudp_src) \u003cspan class=\"hljs-subst\"\u003e%\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e16384\u003c/span\u003e) \u003cspan class=\"hljs-subst\"\u003e+\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e49152\u003c/span\u003e;\n\n        bfd_set_state(bfd, STATE_DOWN, DIAG_NONE);\n\n        bfd_status_changed(bfd);\n    }\n\n    bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eoam \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"oam\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n\n    atomic_store_relaxed(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003echeck_tnl_key,\n                         smap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"check_tnl_key\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e));\n    min_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_int(cfg, \u003cspan class=\"hljs-string\"\u003e\"min_tx\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e);\n    min_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eMAX\u003c/span\u003e(min_tx, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_tx \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e min_tx) {\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e min_tx;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003estate \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e STATE_UP\n            \u003cspan class=\"hljs-subst\"\u003e||\u003c/span\u003e (\u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003ebfd_in_poll(bfd) \u003cspan class=\"hljs-subst\"\u003e&amp;&amp;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_tx \u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_tx)) {\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_tx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_tx;\n        }\n        need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    }\n\n    min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_int(cfg, \u003cspan class=\"hljs-string\"\u003e\"min_rx\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e1000\u003c/span\u003e);\n    min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eMAX\u003c/span\u003e(min_rx, \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e min_rx) {\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e min_rx;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003estate \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e STATE_UP\n            \u003cspan class=\"hljs-subst\"\u003e||\u003c/span\u003e (\u003cspan class=\"hljs-subst\"\u003e!\u003c/span\u003ebfd_in_poll(bfd) \u003cspan class=\"hljs-subst\"\u003e&amp;&amp;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx \u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_rx)) {\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003emin_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx;\n        }\n        cfg_min_rx_changed \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n        need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    }\n\n    decay_min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_int(cfg, \u003cspan class=\"hljs-string\"\u003e\"decay_min_rx\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edecay_min_rx \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e decay_min_rx \u003cspan class=\"hljs-subst\"\u003e||\u003c/span\u003e cfg_min_rx_changed) {\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (decay_min_rx \u003cspan class=\"hljs-subst\"\u003e&gt;\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u003cspan class=\"hljs-subst\"\u003e&amp;&amp;\u003c/span\u003e decay_min_rx \u003cspan class=\"hljs-subst\"\u003e&lt;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx) {\n            VLOG_WARN(\u003cspan class=\"hljs-string\"\u003e\"%s: decay_min_rx cannot be less than %lld ms\"\u003c/span\u003e,\n                      bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ename, bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecfg_min_rx);\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edecay_min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003edecay_min_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e decay_min_rx;\n        }\n        \u003cspan class=\"hljs-comment\"\u003e/* Resets decay. */\u003c/span\u003e\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ein_decay \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e;\n        bfd_decay_update(bfd);\n        need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    }\n\n    cpath_down \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"cpath_down\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecpath_down \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e cpath_down) {\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ecpath_down \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e cpath_down;\n        bfd_set_state(bfd, bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003estate, DIAG_NONE);\n        need_poll \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e;\n    }\n\n    eth_addr_from_string(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_local_src_mac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                         \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003elocal_eth_src);\n    eth_addr_from_string(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_local_dst_mac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                         \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003elocal_eth_dst);\n    eth_addr_from_string(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_remote_dst_mac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                         \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003ermt_eth_dst);\n\n    bfd_lookup_ip(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_src_ip\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                  htonl(\u003cspan class=\"hljs-number\"\u003e0xA9FE0101\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e/* 169.254.1.1 */\u003c/span\u003e, \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eip_src);\n    bfd_lookup_ip(smap_get_def(cfg, \u003cspan class=\"hljs-string\"\u003e\"bfd_dst_ip\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e),\n                  htonl(\u003cspan class=\"hljs-number\"\u003e0xA9FE0100\u003c/span\u003e) \u003cspan class=\"hljs-comment\"\u003e/* 169.254.1.0 */\u003c/span\u003e, \u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003ebfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eip_dst);\n\n    forwarding_if_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e smap_get_bool(cfg, \u003cspan class=\"hljs-string\"\u003e\"forwarding_if_rx\"\u003c/span\u003e, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_if_rx \u003cspan class=\"hljs-subst\"\u003e!=\u003c/span\u003e forwarding_if_rx) {\n        bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_if_rx \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e forwarding_if_rx;\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003estate \u003cspan class=\"hljs-subst\"\u003e==\u003c/span\u003e STATE_UP \u003cspan class=\"hljs-subst\"\u003e&amp;&amp;\u003c/span\u003e bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_if_rx) {\n            bfd_forwarding_if_rx_update(bfd);\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n            bfd\u003cspan class=\"hljs-subst\"\u003e-&gt;\u003c/span\u003eforwarding_if_rx_detect_time \u003cspan class=\"hljs-subst\"\u003e=\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n        }\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (need_poll) {\n        bfd_poll(bfd);\n    }\n    ovs_mutex_unlock(\u003cspan class=\"hljs-subst\"\u003e&amp;\u003c/span\u003emutex);\n    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e bfd;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e可以看到上述代码对BFD的控制报文的相关设置基本覆盖，接下来就是如何把BFD报文编码交给内核进行进一步处理\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs haskell\"\u003e/* \u003cspan class=\"hljs-type\"\u003eExecutes\u003c/span\u003e, against \u0027dpif\u0027, up to the first \u0027n_ops\u0027 operations \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027ops\u0027.\n * \u003cspan class=\"hljs-type\"\u003eReturns\u003c/span\u003e the number actually executed (at least \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u0027n_ops\u0027 is\n * positive). */\n\u003cspan class=\"hljs-title\"\u003estatic\u003c/span\u003e size_t\n\u003cspan class=\"hljs-title\"\u003edpif_netlink_operate__\u003c/span\u003e(struct dpif_netlink *dpif,\n                       struct dpif_op **ops, size_t n_ops)\n{\n    enum { \u003cspan class=\"hljs-type\"\u003eMAX_OPS\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e50\u003c/span\u003e };\n\n    struct op_auxdata {\n        struct nl_transaction txn;\n\n        struct ofpbuf request;\n        uint64_t request_stub[\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e];\n\n        struct ofpbuf reply;\n        uint64_t reply_stub[\u003cspan class=\"hljs-number\"\u003e1024\u003c/span\u003e / \u003cspan class=\"hljs-number\"\u003e8\u003c/span\u003e];\n    } auxes[\u003cspan class=\"hljs-type\"\u003eMAX_OPS\u003c/span\u003e];\n\n    struct nl_transaction *txnsp[\u003cspan class=\"hljs-type\"\u003eMAX_OPS\u003c/span\u003e];\n    size_t i;\n\n    n_ops = \u003cspan class=\"hljs-type\"\u003eMIN\u003c/span\u003e(n_ops, \u003cspan class=\"hljs-type\"\u003eMAX_OPS\u003c/span\u003e);\n    for (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; n_ops; i++) {\n        struct op_auxdata *aux = &amp;auxes[i];\n        struct dpif_op *op = ops[i];\n        struct dpif_flow_put *put;\n        struct dpif_flow_del *del;\n        struct dpif_flow_get *get;\n        struct dpif_netlink_flow flow;\n\n        ofpbuf_use_stub(&amp;aux-&gt;request,\n                        aux-&gt;request_stub, sizeof aux-&gt;request_stub);\n        aux-&gt;txn.request = &amp;aux-&gt;request;\n\n        ofpbuf_use_stub(&amp;aux-&gt;reply, aux-&gt;reply_stub, sizeof aux-&gt;reply_stub);\n        aux-&gt;txn.reply = \u003cspan class=\"hljs-type\"\u003eNULL\u003c/span\u003e;\n\n        switch (op-&gt;\u003cspan class=\"hljs-typedef\"\u003e\u003cspan class=\"hljs-keyword\"\u003etype\u003c/span\u003e) \u003cspan class=\"hljs-container\"\u003e{\n        \u003cspan class=\"hljs-title\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_PUT\u003c/span\u003e:\n            \u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e = &amp;\u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eu\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eflow_put\u003c/span\u003e;\n            \u003cspan class=\"hljs-title\"\u003edpif_netlink_init_flow_put\u003c/span\u003e(\u003cspan class=\"hljs-title\"\u003edpif\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e, &amp;\u003cspan class=\"hljs-title\"\u003eflow\u003c/span\u003e);\n            \u003cspan class=\"hljs-title\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003estats\u003c/span\u003e) {\n                \u003cspan class=\"hljs-title\"\u003eflow\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003enlmsg_flags\u003c/span\u003e |= \u003cspan class=\"hljs-type\"\u003eNLM_F_ECHO\u003c/span\u003e;\n                \u003cspan class=\"hljs-title\"\u003eaux\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003etxn\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e = &amp;\u003cspan class=\"hljs-title\"\u003eaux\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e;\n            }\u003c/span\u003e\u003c/span\u003e\n            dpif_netlink_flow_to_ofpbuf(&amp;flow, &amp;aux-&gt;request);\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_DEL\u003c/span\u003e:\n            del = &amp;op-&gt;u.flow_del;\n            dpif_netlink_init_flow_del(dpif, del, &amp;flow);\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (del-&gt;stats) {\n                flow.nlmsg_flags |= \u003cspan class=\"hljs-type\"\u003eNLM_F_ECHO\u003c/span\u003e;\n                aux-&gt;txn.reply = &amp;aux-&gt;reply;\n            }\n            dpif_netlink_flow_to_ofpbuf(&amp;flow, &amp;aux-&gt;request);\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_EXECUTE\u003c/span\u003e:\n            /* \u003cspan class=\"hljs-type\"\u003eCan\u0027t\u003c/span\u003e execute a packet that won\u0027t fit \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a \u003cspan class=\"hljs-type\"\u003eNetlink\u003c/span\u003e attribute. */\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-type\"\u003eOVS_UNLIKELY\u003c/span\u003e(nl_attr_oversized(\n                                 dp_packet_size(op-&gt;u.execute.packet)))) {\n                /* \u003cspan class=\"hljs-type\"\u003eReport\u003c/span\u003e an error immediately \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e this is the first operation.\n                 * \u003cspan class=\"hljs-type\"\u003eOtherwise\u003c/span\u003e the easiest thing to \u003cspan class=\"hljs-keyword\"\u003edo\u003c/span\u003e is to postpone to the next\n                 * call (when this will be the first operation). */\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (i == \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e) {\n                    \u003cspan class=\"hljs-type\"\u003eVLOG_ERR_RL\u003c/span\u003e(&amp;error_rl,\n                                \u003cspan class=\"hljs-string\"\u003e\"dropping oversized %\"\u003c/span\u003e\u003cspan class=\"hljs-type\"\u003ePRIu32\u003c/span\u003e\u003cspan class=\"hljs-string\"\u003e\"-byte packet\"\u003c/span\u003e,\n                                dp_packet_size(op-&gt;u.execute.packet));\n                    op-&gt;error = \u003cspan class=\"hljs-type\"\u003eENOBUFS\u003c/span\u003e;\n                    return \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n                }\n                n_ops = i;\n            } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n                dpif_netlink_encode_execute(dpif-&gt;dp_ifindex, &amp;op-&gt;u.execute,\n                                            &amp;aux-&gt;request);\n            }\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_GET\u003c/span\u003e:\n            get = &amp;op-&gt;u.flow_get;\n            dpif_netlink_init_flow_get(dpif, get, &amp;flow);\n            aux-&gt;txn.reply = get-&gt;buffer;\n            dpif_netlink_flow_to_ofpbuf(&amp;flow, &amp;aux-&gt;request);\n            break;\n\n        \u003cspan class=\"hljs-default\"\u003e\u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\u003c/span\u003e\n            \u003cspan class=\"hljs-type\"\u003eOVS_NOT_REACHED\u003c/span\u003e();\n        }\n    }\n\n    for (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; n_ops; i++) {\n        txnsp[i] = &amp;auxes[i].txn;\n    }\n    nl_transact_multiple(\u003cspan class=\"hljs-type\"\u003eNETLINK_GENERIC\u003c/span\u003e, txnsp, n_ops);\n\n    for (i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i &lt; n_ops; i++) {\n        struct op_auxdata *aux = &amp;auxes[i];\n        struct nl_transaction *txn = &amp;auxes[i].txn;\n        struct dpif_op *op = ops[i];\n        struct dpif_flow_put *put;\n        struct dpif_flow_del *del;\n        struct dpif_flow_get *get;\n\n        op-&gt;error = txn-&gt;error;\n\n        switch (op-&gt;\u003cspan class=\"hljs-typedef\"\u003e\u003cspan class=\"hljs-keyword\"\u003etype\u003c/span\u003e) \u003cspan class=\"hljs-container\"\u003e{\n        \u003cspan class=\"hljs-title\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_PUT\u003c/span\u003e:\n            \u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e = &amp;\u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eu\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eflow_put\u003c/span\u003e;\n            \u003cspan class=\"hljs-title\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003estats\u003c/span\u003e) {\n                \u003cspan class=\"hljs-title\"\u003eif\u003c/span\u003e (!\u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eerror\u003c/span\u003e) {\n                    \u003cspan class=\"hljs-title\"\u003estruct\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003edpif_netlink_flow\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e;\n\n                    \u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eerror\u003c/span\u003e = \u003cspan class=\"hljs-title\"\u003edpif_netlink_flow_from_ofpbuf\u003c/span\u003e(&amp;\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e,\n                                                              \u003cspan class=\"hljs-title\"\u003etxn\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e);\n                    \u003cspan class=\"hljs-title\"\u003eif\u003c/span\u003e (!\u003cspan class=\"hljs-title\"\u003eop\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003eerror\u003c/span\u003e) {\n                        \u003cspan class=\"hljs-title\"\u003edpif_netlink_flow_get_stats\u003c/span\u003e(&amp;\u003cspan class=\"hljs-title\"\u003ereply\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eput\u003c/span\u003e-&gt;\u003cspan class=\"hljs-title\"\u003estats\u003c/span\u003e);\n                    }\u003c/span\u003e\u003c/span\u003e\n                }\n            }\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_DEL\u003c/span\u003e:\n            del = &amp;op-&gt;u.flow_del;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (del-&gt;stats) {\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!op-&gt;error) {\n                    struct dpif_netlink_flow reply;\n\n                    op-&gt;error = dpif_netlink_flow_from_ofpbuf(&amp;reply,\n                                                              txn-&gt;reply);\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!op-&gt;error) {\n                        dpif_netlink_flow_get_stats(&amp;reply, del-&gt;stats);\n                    }\n                }\n            }\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_EXECUTE\u003c/span\u003e:\n            break;\n\n        \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"hljs-type\"\u003eDPIF_OP_FLOW_GET\u003c/span\u003e:\n            get = &amp;op-&gt;u.flow_get;\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!op-&gt;error) {\n                struct dpif_netlink_flow reply;\n\n                op-&gt;error = dpif_netlink_flow_from_ofpbuf(&amp;reply, txn-&gt;reply);\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!op-&gt;error) {\n                    dpif_netlink_flow_to_dpif_flow(&amp;dpif-&gt;dpif, get-&gt;flow,\n                                                   &amp;reply);\n                }\n            }\n            break;\n\n        \u003cspan class=\"hljs-default\"\u003e\u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\u003c/span\u003e\n            \u003cspan class=\"hljs-type\"\u003eOVS_NOT_REACHED\u003c/span\u003e();\n        }\n\n        ofpbuf_uninit(&amp;aux-&gt;request);\n        ofpbuf_uninit(&amp;aux-&gt;reply);\n    }\n\n    return n_ops;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这里仍然是调用Netlink的协议族，以OVS_PACKET_CMD_EXECUTE来标识消息类型，当内核收到该类型消息后会相应的调用ovs_packet_cmd_execute方法进行处理\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs vbscript\"\u003estatic \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e ovs_packet_cmd_execute(struct sk_buff *skb, struct genl_info *info)\n{\n    struct ovs_header *ovs_header = info-&gt;userhdr;\n    struct net *net = sock_net(skb-&gt;sk);\n    struct nlattr **a = info-&gt;attrs;\n    struct sw_flow_actions *acts;\n    struct sk_buff *packet;\n    struct sw_flow *flow;\n    struct sw_flow_actions *sf_acts;\n    struct datapath *dp;\n    struct ethhdr *eth;\n    struct vport *input_vport;\n    u16 mru = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e;\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n    bool \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e = !a[OVS_PACKET_ATTR_PROBE];\n\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = -EINVAL;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!a[OVS_PACKET_ATTR_PACKET] || !a[OVS_PACKET_ATTR_KEY] ||\n        !a[OVS_PACKET_ATTR_ACTIONS])\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n\n    \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e = nla_len(a[OVS_PACKET_ATTR_PACKET]);\n    packet = __dev_alloc_skb(NET_IP_ALIGN + \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e, GFP_KERNEL);\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = -ENOMEM;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!packet)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n    skb_reserve(packet, NET_IP_ALIGN);\n\n    nla_memcpy(__skb_put(packet, \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e), a[OVS_PACKET_ATTR_PACKET], \u003cspan class=\"hljs-built_in\"\u003elen\u003c/span\u003e);\n\n    skb_reset_mac_header(packet);\n    eth = eth_hdr(packet);\n\n    /* Normally, setting the skb \u003cspan class=\"hljs-comment\"\u003e\u0027protocol\u0027 field would be handled by a\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003ecall\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e eth_type_trans(), but it assumes there\u003cspan class=\"hljs-comment\"\u003e\u0027s a sending\u003c/span\u003e\n     * device, which we may \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have.\n     */\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (eth_proto_is_802_3(eth-&gt;h_proto))\n        packet-&gt;protocol = eth-&gt;h_proto;\n    \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e\n        packet-&gt;protocol = htons(ETH_P_802_2);\n\n    /* \u003cspan class=\"hljs-keyword\"\u003eSet\u003c/span\u003e packet\u003cspan class=\"hljs-comment\"\u003e\u0027s mru */\u003c/span\u003e\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (a[OVS_PACKET_ATTR_MRU]) {\n        mru = nla_get_u16(a[OVS_PACKET_ATTR_MRU]);\n        packet-&gt;ignore_df = \u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e;\n    }\n    OVS_CB(packet)-&gt;mru = mru;\n\n    /* Build an sw_flow \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e sending this packet. */\n    flow = ovs_flow_alloc();\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = PTR_ERR(flow);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (IS_ERR(flow))\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_kfree_skb;\n\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = ovs_flow_key_extract_userspace(net, a[OVS_PACKET_ATTR_KEY],\n                         packet, &amp;flow-&gt;key, \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_flow_free;\n\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = ovs_nla_copy_actions(net, a[OVS_PACKET_ATTR_ACTIONS],\n                   &amp;flow-&gt;key, &amp;acts, \u003cspan class=\"hljs-built_in\"\u003elog\u003c/span\u003e);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_flow_free;\n\n    rcu_assign_pointer(flow-&gt;sf_acts, acts);\n    packet-&gt;priority = flow-&gt;key.phy.priority;\n    packet-&gt;mark = flow-&gt;key.phy.skb_mark;\n\n    rcu_read_lock();\n    dp = get_dp_rcu(net, ovs_header-&gt;dp_ifindex);\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = -ENODEV;\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!dp)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_unlock;\n\n    input_vport = ovs_vport_rcu(dp, flow-&gt;key.phy.in_port);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!input_vport)\n        input_vport = ovs_vport_rcu(dp, OVSP_LOCAL);\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!input_vport)\n        \u003cspan class=\"hljs-keyword\"\u003egoto\u003c/span\u003e err_unlock;\n\n    packet-&gt;dev = input_vport-&gt;dev;\n    OVS_CB(packet)-&gt;input_vport = input_vport;\n    sf_acts = rcu_dereference(flow-&gt;sf_acts);\n\n    local_bh_disable();\n    \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e = ovs_execute_actions(dp, packet, sf_acts, &amp;flow-&gt;key);\n    local_bh_enable();\n    rcu_read_unlock();\n\n    ovs_flow_free(flow, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\n    return \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n\nerr_unlock:\n    rcu_read_unlock();\nerr_flow_free:\n    ovs_flow_free(flow, \u003cspan class=\"hljs-literal\"\u003efalse\u003c/span\u003e);\nerr_kfree_skb:\n    kfree_skb(packet);\n\u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e:\n    return \u003cspan class=\"hljs-built_in\"\u003eerr\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e这个处理函数会调用到相应的Output方法，将报文从相应的端口发送出去，而对应的，BFD的状态机的维护和对应的处理都在控制面，所以在数据面收到相关的BFD报文时是要上送到控制面进行处理的。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs rust\"\u003e\u003cspan class=\"hljs-keyword\"\u003eenum\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eupcall_type\u003c/span\u003e {\n    BAD_UPCALL,                 \u003cspan class=\"hljs-comment\"\u003e/* Some kind of bug somewhere. */\u003c/span\u003e\n    MISS_UPCALL,                \u003cspan class=\"hljs-comment\"\u003e/* A flow miss.  */\u003c/span\u003e\n    SFLOW_UPCALL,               \u003cspan class=\"hljs-comment\"\u003e/* sFlow sample. */\u003c/span\u003e\n    FLOW_SAMPLE_UPCALL,         \u003cspan class=\"hljs-comment\"\u003e/* Per-flow sampling. */\u003c/span\u003e\n    IPFIX_UPCALL                \u003cspan class=\"hljs-comment\"\u003e/* Per-bridge sampling. */\u003c/span\u003e\n};\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs applescript\"\u003e/* A packet passed up \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e datapath \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e userspace.\n *\n * The \u0027packet\u0027, \u0027key\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027userdata\u0027 may point \u003cspan class=\"hljs-keyword\"\u003einto\u003c/span\u003e data \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e a buffer\n * provided \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e caller, so \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e buffer should be released only \u003cspan class=\"hljs-keyword\"\u003eafter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * upcall processing has been finished.\n *\n * While being processed, \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u0027packet\u0027 may be reallocated, so \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e packet must\n * be separately released \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e ofpbuf_uninit().\n */\nstruct dpif_upcall {\n    /* All types. */\n    struct dp_packet packet;    /* Packet data,\u0027dp_packet\u0027 should be \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efirst\u003c/span\u003e\n                   member \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e avoid a hole. This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e because\n                   \u0027rte_mbuf\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e dp_packet \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e aligned atleast\n                   \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e a \u003cspan class=\"hljs-number\"\u003e64\u003c/span\u003e-byte boundary */\n    enum dpif_upcall_type type;\n    struct nlattr *key;         /* Flow key. */\n    size_t key_len;             /* Length \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027key\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e bytes. */\n    ovs_u128 ufid;              /* Unique flow identifier \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027key\u0027. */\n    struct nlattr *mru;         /* Maximum receive unit. */\n    struct nlattr *cutlen;      /* Number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e bytes shrink \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eend\u003c/span\u003e. */\n\n    /* DPIF_UC_ACTION only. */\n    struct nlattr *userdata;    /* Argument \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e OVS_ACTION_ATTR_USERSPACE. */\n    struct nlattr *out_tun_key;    /* Output tunnel key. */\n    struct nlattr *actions;    /* Argument \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e OVS_ACTION_ATTR_USERSPACE. */\n};\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e从上述代码可以看出Upcall的消息类型，这里面BFD的控制报文会以MISS_UPCALL的消息类型经过Datapath模块调用Upcall上送到控制面进行处理\u003c/p\u003e","markdowncontent":"受限于篇幅，前文只讲述了控制面板关键接口的前两个部分，本篇继续讲述基本二层协议的配置，Openflow的控制又是一个很大的命题，会放到下一篇文章做阐述。\n1. 虚拟设备的生命周期接口 \n2. 虚拟设备的业务配置接口 \n***3. 二层基础协议的运行启动* **\n4. Openflow协议的运行开启与流表下发 \n本节以BFD的配置为例做讲解，无论是STP，BFD的配置，初始的配置接口都是在vsctl中，vsctl客户端是针对OVSDB配置的交互式客户端，除了对OVSDB的表项做直接的配置，也可以二层协议做使能工作，当然默认初始化时这些功能并没有使能。\n\n```\nstatic void\nusage(void)\n{\n    printf(\"\\\n%s: ovs-vswitchd management utility\\n\\\nusage: %s [OPTIONS] COMMAND [ARG...]\\n\\\n\\n\\\nOpen vSwitch commands:\\n\\\n  init                        initialize database, if not yet initialized\\n\\\n  show                        print overview of database contents\\n\\\n  emer-reset                  reset configuration to clean state\\n\\\n\\n\\\nBridge commands:\\n\\\n  add-br BRIDGE               create a new bridge named BRIDGE\\n\\\n  add-br BRIDGE PARENT VLAN   create new fake BRIDGE in PARENT on VLAN\\n\\\n  del-br BRIDGE               delete BRIDGE and all of its ports\\n\\\n  list-br                     print the names of all the bridges\\n\\\n  br-exists BRIDGE            exit 2 if BRIDGE does not exist\\n\\\n  br-to-vlan BRIDGE           print the VLAN which BRIDGE is on\\n\\\n  br-to-parent BRIDGE         print the parent of BRIDGE\\n\\\n  br-set-external-id BRIDGE KEY VALUE  set KEY on BRIDGE to VALUE\\n\\\n  br-set-external-id BRIDGE KEY  unset KEY on BRIDGE\\n\\\n  br-get-external-id BRIDGE KEY  print value of KEY on BRIDGE\\n\\\n  br-get-external-id BRIDGE  list key-value pairs on BRIDGE\\n\\\n\\n\\\nPort commands (a bond is considered to be a single port):\\n\\\n  list-ports BRIDGE           print the names of all the ports on BRIDGE\\n\\\n  add-port BRIDGE PORT        add network device PORT to BRIDGE\\n\\\n  add-bond BRIDGE PORT IFACE...  add bonded port PORT in BRIDGE from IFACES\\n\\\n  del-port [BRIDGE] PORT      delete PORT (which may be bonded) from BRIDGE\\n\\\n  port-to-br PORT             print name of bridge that contains PORT\\n\\\n\\n\\\nInterface commands (a bond consists of multiple interfaces):\\n\\\n  list-ifaces BRIDGE          print the names of all interfaces on BRIDGE\\n\\\n  iface-to-br IFACE           print name of bridge that contains IFACE\\n\\\n\\n\\\nController commands:\\n\\\n  get-controller BRIDGE      print the controllers for BRIDGE\\n\\\n  del-controller BRIDGE      delete the controllers for BRIDGE\\n\\\n  set-controller BRIDGE TARGET...  set the controllers for BRIDGE\\n\\\n  get-fail-mode BRIDGE       print the fail-mode for BRIDGE\\n\\\n  del-fail-mode BRIDGE       delete the fail-mode for BRIDGE\\n\\\n  set-fail-mode BRIDGE MODE  set the fail-mode for BRIDGE to MODE\\n\\\n\\n\\\nManager commands:\\n\\\n  get-manager                print the managers\\n\\\n  del-manager                delete the managers\\n\\\n  set-manager TARGET...      set the list of managers to TARGET...\\n\\\n\\n\\\nSSL commands:\\n\\\n  get-ssl                     print the SSL configuration\\n\\\n  del-ssl                     delete the SSL configuration\\n\\\n  set-ssl PRIV-KEY CERT CA-CERT  set the SSL configuration\\n\\\n\\n\\\nAuto Attach commands:\\n\\\n  add-aa-mapping BRIDGE I-SID VLAN   add Auto Attach mapping to BRIDGE\\n\\\n  del-aa-mapping BRIDGE I-SID VLAN   delete Auto Attach mapping VLAN from BRIDGE\\n\\\n  get-aa-mapping BRIDGE              get Auto Attach mappings from BRIDGE\\n\\\n\\n\\\nSwitch commands:\\n\\\n  emer-reset                  reset switch to known good state\\n\\\n\\n\\\n%s\\\n\\n\\\nOptions:\\n\\\n  --db=DATABASE               connect to DATABASE\\n\\\n                              (default: %s)\\n\\\n  --no-wait                   do not wait for ovs-vswitchd to reconfigure\\n\\\n  --retry                     keep trying to connect to server forever\\n\\\n  -t, --timeout=SECS          wait at most SECS seconds for ovs-vswitchd\\n\\\n  --dry-run                   do not commit changes to database\\n\\\n  --oneline                   print exactly one line of output per command\\n\",\n           program_name, program_name, ctl_get_db_cmd_usage(), ctl_default_db());\n    vlog_usage();\n    printf(\"\\\n  --no-syslog             equivalent to --verbose=vsctl:syslog:warn\\n\");\n    stream_usage(\"database\", true, true, false);\n    printf(\"\\n\\\nOther options:\\n\\\n  -h, --help                  display this help message\\n\\\n  -V, --version               display version information\\n\");\n    exit(EXIT_SUCCESS);\n}\n```\n上部分代码表述命令行的用途，而bfd以及stp的配置都是Bridge数据接口中的配置使能位，只要配置使能了，相关的二层协议就会开始运行。\n```\n/* Configures BFD on \u0027ofp_port\u0027 in \u0027ofproto\u0027.  This function has no effect if\n - \u0027ofproto\u0027 does not have a port \u0027ofp_port\u0027. */\nvoid\nofproto_port_set_bfd(struct ofproto *ofproto, ofp_port_t ofp_port,\n                     const struct smap *cfg)\n{\n    struct ofport *ofport;\n    int error;\n\n    ofport = ofproto_get_port(ofproto, ofp_port);\n    if (!ofport) {\n        VLOG_WARN(\"%s: cannot configure bfd on nonexistent port %\"PRIu32,\n                  ofproto-\u003ename, ofp_port);\n        return;\n    }\n\n    error = (ofproto-\u003eofproto_class-\u003eset_bfd\n             ? ofproto-\u003eofproto_class-\u003eset_bfd(ofport, cfg)\n             : EOPNOTSUPP);\n    if (error) {\n        VLOG_WARN(\"%s: bfd configuration on port %\"PRIu32\" (%s) failed (%s)\",\n                  ofproto-\u003ename, ofp_port, netdev_get_name(ofport-\u003enetdev),\n                  ovs_strerror(error));\n    }\n}\n```\n###先简单介绍下BFD\n为了保护关键应用，网络中会设计有一定的冗余备份链路，网络发生故障时就要求网络设备能够快速检测出故障并将流量切换至备份链路以加快网络收敛速度。目前有些链路（如POS）通过硬件检测机制来实现快速故障检测。但是某些链路（如以太网链路）不具备这样的检测机制。此时，应用就要依靠上层协议自身的机制来进行故障检测，上层协议的检测时间都在1秒以上，这样的故障检测时间对某些应用来说是不能容忍的。某些路由协议如OSPF、IS-IS虽然有Fast Hello功能来加快检测速度，但是检测时间也只能达到1秒的精度，而且Fast Hello功能只是针对本协议的，无法为其它协议提供快速故障检测。\n\nBFD：(Bidirectional Forwarding Detection，双向转发检测)协议提供一种轻负载、快速检测两台邻接路由器/交换机之间转发路径连通状态的方法，它是一个简单的“Hello”协议，在很多方面，它与那些著名的路由协议的邻居检测部分相似。一对系统在它们之间的所建立会话的通道上周期性的发送检测报文，如果某个系统在足够长的时间内没有收到对端的检测报文，则认为在这条到相邻系统的双向通道的某个部分发生了故障协议邻居通过该方式可以快速检测到转发路径的连通故障，加快启用备份转发路径，提升现有网络性能。\n\nBFD 提供的检测机制与所应用的接口介质类型、封装格式、以及关联的上层协议如 OSPF、BGP、RIP 等无关。BFD 在两台路由器之间建立会话，通过快速发送检测故障消息给正在运行的路由协议，以触发路由协议重新计算路由表，大大减少整个网络的收敛时间。BFD 本身没有发现邻居的能力，需要上层协议通知与哪个邻居建立会话。\n   \nBFD报文格式\nBFD发送的检测报文是UDP报文，定义两种类型的报文\n建立BFD会话时缺省采用版本1，如果收到对端系统发送的是版本0的报文，将自动切换到版本0。可以通过show bfd neighbors命令查看采用的版本。\n\n1）控制报文\n其格式如下：\n![BFD报文格式](http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/2013111622828395.png)\n- Vers：BFD协议版本号，目前为1\n- Diag：诊断字，标明本地BFD系统最近一次会话状态发生变化的原因\n- Sta：BFD本地状态\n- P：参数发生改变时，发送方在BFD报文中置该标志，接收方必须立即响应该报文\n- F：响应P标志置位的回应报文中必须将F标志置位\n- C：转发/控制分离标志，一旦置位，控制平面的变化不影响BFD检测，如：控制平面为ISIS，当ISIS重- 启/GR时，BFD可以继续监测链路状态\n- A：认证标识，置位代表会话需要进行验证\n- D：查询请求，置位代表发送方期望采用查询模式对链路进行监测\n- R：预留位\n- Detect Mult：检测超时倍数，用于检测方计算检测超时时间\n- Length：报文长度\n- My Discreaminator：BFD会话连接本地标识符\n- Your Discreaminator：BFD会话连接远端标识符\n- Desired Min Tx Interval：本地支持的最小BFD报文发送间隔\n- Required Min RX Interval：本地支持的最小BFD接收间隔\n- Required Min Echo RX Interval：本地支持的最小Echo报文接收间隔（如果本地不支持Echo功能，则设置0）\n- Auth Type：认证类型，目前协议提供有\n\n - Simple Password    \n - Keyed MD5   \n - Meticulous Keyed MD5   \n - Keyed SHA1     \n - Meticulous Keyed SHA1\n\n-Auth Length：认证数据长度 Authentication Data：认证数据区\n其中认证部分为可选部分，可以在报文中选择使用，其中认证方式可以有：Simple Password、Keyed MD5、Meticulous Keyed MD5、Keyed SHA1、Meticulous Keyed SHA1。协议定义了控制报文所使用的UDP目的端口号为3784。\n\n2）回声报文（ECHO）\nBFD协议并未定义回声报文的格式，但是对于回声报文，其格式只是与本地相关，远端只需把此报文在反向通道上返回，回声报文的源目的IP相同。\n会话建立\nBFD在检测前，需要在通道两端建立对等会话，会话建立以后以协商后的速率各自向对端发送BFD的控制报文来实现故障检测。其会话检测的路径可以是标记交换路径，也可以是其它类型的隧道或是可交换以太网。\n1)会话初始化过程\n对于BFD会话建立过程中的初始化阶段，两端是主动角色还是被动角色是由应用来决定的，但是至少有一端为主动角色。\n2)会话建立过程\n会话建立过程是一个三次握手的过程，经过此过程后两端的会话变为Up状态，在此过程中同时协商好相应的参数，以后的状态变化就是根据缺陷的检测结果来进行，并做相应的处理。其状态机迁移如下：\n![BFD状态机](http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/201311162321833.png)\n以BFD会话连接建立过程为例，简要介绍状态机迁移过程：\n![BFD状态机迁移过程](http://image.ruijie.com.cn//UIA/Support/Document/Images/2013/11-16/201311162346188.png)\n - A、B两站启动BFD，各自初始状态为“down”，发送BFD报文携带状态为“down”\n - B站收到状态为“down”的BFD报文，本地状态切换至“init”，发送BFD报文携带状态为“init”\n - B站本地BFD状态为“init”后，再接收到状态为“down”的报文不做处理\n - A站BFD状态变化过程同上\n - B站收到状态为“init”的BFD报文，本地状态切换至“up”\n - A站BFD状态变化过程同上\n - A、B两站在发生“down =\u003e init”变化后，会启动一个超时定时器，该定时器的作用是防止本地状态阻塞在“init”（有可能AB连接此时断连，会话不能正常建立），如果在规定的时间内仍未收到状态为“init/up”的BFD报文，则状态自动切换回“down”\n - 本地状态UP标志会话建立成功\n \n###BFD实现简介\n \n```\n/* Initializes, destroys, or reconfigures the BFD session \u0027bfd\u0027 (named \u0027name\u0027),\n * according to the database configuration contained in \u0027cfg\u0027.  Takes ownership\n * of \u0027bfd\u0027, which may be NULL.  Returns a BFD object which may be used as a\n * handle for the session, or NULL if BFD is not enabled according to \u0027cfg\u0027.\n * Also returns NULL if cfg is NULL. */\nstruct bfd *\nbfd_configure(struct bfd *bfd, const char *name, const struct smap *cfg,\n              struct netdev *netdev) OVS_EXCLUDED(mutex)\n{\n    static atomic_count udp_src = ATOMIC_COUNT_INIT(0);\n\n    int decay_min_rx;\n    long long int min_tx, min_rx;\n    bool need_poll = false;\n    bool cfg_min_rx_changed = false;\n    bool cpath_down, forwarding_if_rx;\n\n    if (!cfg || !smap_get_bool(cfg, \"enable\", false)) {\n        bfd_unref(bfd);\n        return NULL;\n    }\n\n    ovs_mutex_lock(&mutex);\n    if (!bfd) {\n        bfd = xzalloc(sizeof *bfd);\n        bfd-\u003ename = xstrdup(name);\n        bfd-\u003eforwarding_override = -1;\n        bfd-\u003edisc = generate_discriminator();\n        hmap_insert(all_bfds, &bfd-\u003enode, bfd-\u003edisc);\n\n        bfd-\u003ediag = DIAG_NONE;\n        bfd-\u003emin_tx = 1000;\n        bfd-\u003emult = 3;\n        ovs_refcount_init(&bfd-\u003eref_cnt);\n        bfd-\u003enetdev = netdev_ref(netdev);\n        bfd-\u003erx_packets = bfd_rx_packets(bfd);\n        bfd-\u003ein_decay = false;\n        bfd-\u003eflap_count = 0;\n\n        /* RFC 5881 section 4\n         * The source port MUST be in the range 49152 through 65535.  The same\n         * UDP source port number MUST be used for all BFD Control packets\n         * associated with a particular session.  The source port number SHOULD\n         * be unique among all BFD sessions on the system. */\n        bfd-\u003eudp_src = (atomic_count_inc(&udp_src) % 16384) + 49152;\n\n        bfd_set_state(bfd, STATE_DOWN, DIAG_NONE);\n\n        bfd_status_changed(bfd);\n    }\n\n    bfd-\u003eoam = smap_get_bool(cfg, \"oam\", false);\n\n    atomic_store_relaxed(&bfd-\u003echeck_tnl_key,\n                         smap_get_bool(cfg, \"check_tnl_key\", false));\n    min_tx = smap_get_int(cfg, \"min_tx\", 100);\n    min_tx = MAX(min_tx, 1);\n    if (bfd-\u003ecfg_min_tx != min_tx) {\n        bfd-\u003ecfg_min_tx = min_tx;\n        if (bfd-\u003estate != STATE_UP\n            || (!bfd_in_poll(bfd) && bfd-\u003ecfg_min_tx \u003c bfd-\u003emin_tx)) {\n            bfd-\u003emin_tx = bfd-\u003ecfg_min_tx;\n        }\n        need_poll = true;\n    }\n\n    min_rx = smap_get_int(cfg, \"min_rx\", 1000);\n    min_rx = MAX(min_rx, 1);\n    if (bfd-\u003ecfg_min_rx != min_rx) {\n        bfd-\u003ecfg_min_rx = min_rx;\n        if (bfd-\u003estate != STATE_UP\n            || (!bfd_in_poll(bfd) && bfd-\u003ecfg_min_rx \u003e bfd-\u003emin_rx)) {\n            bfd-\u003emin_rx = bfd-\u003ecfg_min_rx;\n        }\n        cfg_min_rx_changed = true;\n        need_poll = true;\n    }\n\n    decay_min_rx = smap_get_int(cfg, \"decay_min_rx\", 0);\n    if (bfd-\u003edecay_min_rx != decay_min_rx || cfg_min_rx_changed) {\n        if (decay_min_rx \u003e 0 && decay_min_rx \u003c bfd-\u003ecfg_min_rx) {\n            VLOG_WARN(\"%s: decay_min_rx cannot be less than %lld ms\",\n                      bfd-\u003ename, bfd-\u003ecfg_min_rx);\n            bfd-\u003edecay_min_rx = 0;\n        } else {\n            bfd-\u003edecay_min_rx = decay_min_rx;\n        }\n        /* Resets decay. */\n        bfd-\u003ein_decay = false;\n        bfd_decay_update(bfd);\n        need_poll = true;\n    }\n\n    cpath_down = smap_get_bool(cfg, \"cpath_down\", false);\n    if (bfd-\u003ecpath_down != cpath_down) {\n        bfd-\u003ecpath_down = cpath_down;\n        bfd_set_state(bfd, bfd-\u003estate, DIAG_NONE);\n        need_poll = true;\n    }\n\n    eth_addr_from_string(smap_get_def(cfg, \"bfd_local_src_mac\", \"\"),\n                         &bfd-\u003elocal_eth_src);\n    eth_addr_from_string(smap_get_def(cfg, \"bfd_local_dst_mac\", \"\"),\n                         &bfd-\u003elocal_eth_dst);\n    eth_addr_from_string(smap_get_def(cfg, \"bfd_remote_dst_mac\", \"\"),\n                         &bfd-\u003ermt_eth_dst);\n\n    bfd_lookup_ip(smap_get_def(cfg, \"bfd_src_ip\", \"\"),\n                  htonl(0xA9FE0101) /* 169.254.1.1 */, &bfd-\u003eip_src);\n    bfd_lookup_ip(smap_get_def(cfg, \"bfd_dst_ip\", \"\"),\n                  htonl(0xA9FE0100) /* 169.254.1.0 */, &bfd-\u003eip_dst);\n\n    forwarding_if_rx = smap_get_bool(cfg, \"forwarding_if_rx\", false);\n    if (bfd-\u003eforwarding_if_rx != forwarding_if_rx) {\n        bfd-\u003eforwarding_if_rx = forwarding_if_rx;\n        if (bfd-\u003estate == STATE_UP && bfd-\u003eforwarding_if_rx) {\n            bfd_forwarding_if_rx_update(bfd);\n        } else {\n            bfd-\u003eforwarding_if_rx_detect_time = 0;\n        }\n    }\n\n    if (need_poll) {\n        bfd_poll(bfd);\n    }\n    ovs_mutex_unlock(&mutex);\n    return bfd;\n}\n```\n可以看到上述代码对BFD的控制报文的相关设置基本覆盖，接下来就是如何把BFD报文编码交给内核进行进一步处理\n\n```\n/* Executes, against \u0027dpif\u0027, up to the first \u0027n_ops\u0027 operations in \u0027ops\u0027.\n * Returns the number actually executed (at least 1, if \u0027n_ops\u0027 is\n * positive). */\nstatic size_t\ndpif_netlink_operate__(struct dpif_netlink *dpif,\n                       struct dpif_op **ops, size_t n_ops)\n{\n    enum { MAX_OPS = 50 };\n\n    struct op_auxdata {\n        struct nl_transaction txn;\n\n        struct ofpbuf request;\n        uint64_t request_stub[1024 / 8];\n\n        struct ofpbuf reply;\n        uint64_t reply_stub[1024 / 8];\n    } auxes[MAX_OPS];\n\n    struct nl_transaction *txnsp[MAX_OPS];\n    size_t i;\n\n    n_ops = MIN(n_ops, MAX_OPS);\n    for (i = 0; i \u003c n_ops; i++) {\n        struct op_auxdata *aux = &auxes[i];\n        struct dpif_op *op = ops[i];\n        struct dpif_flow_put *put;\n        struct dpif_flow_del *del;\n        struct dpif_flow_get *get;\n        struct dpif_netlink_flow flow;\n\n        ofpbuf_use_stub(&aux-\u003erequest,\n                        aux-\u003erequest_stub, sizeof aux-\u003erequest_stub);\n        aux-\u003etxn.request = &aux-\u003erequest;\n\n        ofpbuf_use_stub(&aux-\u003ereply, aux-\u003ereply_stub, sizeof aux-\u003ereply_stub);\n        aux-\u003etxn.reply = NULL;\n\n        switch (op-\u003etype) {\n        case DPIF_OP_FLOW_PUT:\n            put = &op-\u003eu.flow_put;\n            dpif_netlink_init_flow_put(dpif, put, &flow);\n            if (put-\u003estats) {\n                flow.nlmsg_flags |= NLM_F_ECHO;\n                aux-\u003etxn.reply = &aux-\u003ereply;\n            }\n            dpif_netlink_flow_to_ofpbuf(&flow, &aux-\u003erequest);\n            break;\n\n        case DPIF_OP_FLOW_DEL:\n            del = &op-\u003eu.flow_del;\n            dpif_netlink_init_flow_del(dpif, del, &flow);\n            if (del-\u003estats) {\n                flow.nlmsg_flags |= NLM_F_ECHO;\n                aux-\u003etxn.reply = &aux-\u003ereply;\n            }\n            dpif_netlink_flow_to_ofpbuf(&flow, &aux-\u003erequest);\n            break;\n\n        case DPIF_OP_EXECUTE:\n            /* Can\u0027t execute a packet that won\u0027t fit in a Netlink attribute. */\n            if (OVS_UNLIKELY(nl_attr_oversized(\n                                 dp_packet_size(op-\u003eu.execute.packet)))) {\n                /* Report an error immediately if this is the first operation.\n                 * Otherwise the easiest thing to do is to postpone to the next\n                 * call (when this will be the first operation). */\n                if (i == 0) {\n                    VLOG_ERR_RL(&error_rl,\n                                \"dropping oversized %\"PRIu32\"-byte packet\",\n                                dp_packet_size(op-\u003eu.execute.packet));\n                    op-\u003eerror = ENOBUFS;\n                    return 1;\n                }\n                n_ops = i;\n            } else {\n                dpif_netlink_encode_execute(dpif-\u003edp_ifindex, &op-\u003eu.execute,\n                                            &aux-\u003erequest);\n            }\n            break;\n\n        case DPIF_OP_FLOW_GET:\n            get = &op-\u003eu.flow_get;\n            dpif_netlink_init_flow_get(dpif, get, &flow);\n            aux-\u003etxn.reply = get-\u003ebuffer;\n            dpif_netlink_flow_to_ofpbuf(&flow, &aux-\u003erequest);\n            break;\n\n        default:\n            OVS_NOT_REACHED();\n        }\n    }\n\n    for (i = 0; i \u003c n_ops; i++) {\n        txnsp[i] = &auxes[i].txn;\n    }\n    nl_transact_multiple(NETLINK_GENERIC, txnsp, n_ops);\n\n    for (i = 0; i \u003c n_ops; i++) {\n        struct op_auxdata *aux = &auxes[i];\n        struct nl_transaction *txn = &auxes[i].txn;\n        struct dpif_op *op = ops[i];\n        struct dpif_flow_put *put;\n        struct dpif_flow_del *del;\n        struct dpif_flow_get *get;\n\n        op-\u003eerror = txn-\u003eerror;\n\n        switch (op-\u003etype) {\n        case DPIF_OP_FLOW_PUT:\n            put = &op-\u003eu.flow_put;\n            if (put-\u003estats) {\n                if (!op-\u003eerror) {\n                    struct dpif_netlink_flow reply;\n\n                    op-\u003eerror = dpif_netlink_flow_from_ofpbuf(&reply,\n                                                              txn-\u003ereply);\n                    if (!op-\u003eerror) {\n                        dpif_netlink_flow_get_stats(&reply, put-\u003estats);\n                    }\n                }\n            }\n            break;\n\n        case DPIF_OP_FLOW_DEL:\n            del = &op-\u003eu.flow_del;\n            if (del-\u003estats) {\n                if (!op-\u003eerror) {\n                    struct dpif_netlink_flow reply;\n\n                    op-\u003eerror = dpif_netlink_flow_from_ofpbuf(&reply,\n                                                              txn-\u003ereply);\n                    if (!op-\u003eerror) {\n                        dpif_netlink_flow_get_stats(&reply, del-\u003estats);\n                    }\n                }\n            }\n            break;\n\n        case DPIF_OP_EXECUTE:\n            break;\n\n        case DPIF_OP_FLOW_GET:\n            get = &op-\u003eu.flow_get;\n            if (!op-\u003eerror) {\n                struct dpif_netlink_flow reply;\n\n                op-\u003eerror = dpif_netlink_flow_from_ofpbuf(&reply, txn-\u003ereply);\n                if (!op-\u003eerror) {\n                    dpif_netlink_flow_to_dpif_flow(&dpif-\u003edpif, get-\u003eflow,\n                                                   &reply);\n                }\n            }\n            break;\n\n        default:\n            OVS_NOT_REACHED();\n        }\n\n        ofpbuf_uninit(&aux-\u003erequest);\n        ofpbuf_uninit(&aux-\u003ereply);\n    }\n\n    return n_ops;\n}\n\n```\n\n这里仍然是调用Netlink的协议族，以OVS_PACKET_CMD_EXECUTE来标识消息类型，当内核收到该类型消息后会相应的调用ovs_packet_cmd_execute方法进行处理\n\n```\nstatic int ovs_packet_cmd_execute(struct sk_buff *skb, struct genl_info *info)\n{\n\tstruct ovs_header *ovs_header = info-\u003euserhdr;\n\tstruct net *net = sock_net(skb-\u003esk);\n\tstruct nlattr **a = info-\u003eattrs;\n\tstruct sw_flow_actions *acts;\n\tstruct sk_buff *packet;\n\tstruct sw_flow *flow;\n\tstruct sw_flow_actions *sf_acts;\n\tstruct datapath *dp;\n\tstruct ethhdr *eth;\n\tstruct vport *input_vport;\n\tu16 mru = 0;\n\tint len;\n\tint err;\n\tbool log = !a[OVS_PACKET_ATTR_PROBE];\n\n\terr = -EINVAL;\n\tif (!a[OVS_PACKET_ATTR_PACKET] || !a[OVS_PACKET_ATTR_KEY] ||\n\t    !a[OVS_PACKET_ATTR_ACTIONS])\n\t\tgoto err;\n\n\tlen = nla_len(a[OVS_PACKET_ATTR_PACKET]);\n\tpacket = __dev_alloc_skb(NET_IP_ALIGN + len, GFP_KERNEL);\n\terr = -ENOMEM;\n\tif (!packet)\n\t\tgoto err;\n\tskb_reserve(packet, NET_IP_ALIGN);\n\n\tnla_memcpy(__skb_put(packet, len), a[OVS_PACKET_ATTR_PACKET], len);\n\n\tskb_reset_mac_header(packet);\n\teth = eth_hdr(packet);\n\n\t/* Normally, setting the skb \u0027protocol\u0027 field would be handled by a\n\t * call to eth_type_trans(), but it assumes there\u0027s a sending\n\t * device, which we may not have.\n\t */\n\tif (eth_proto_is_802_3(eth-\u003eh_proto))\n\t\tpacket-\u003eprotocol = eth-\u003eh_proto;\n\telse\n\t\tpacket-\u003eprotocol = htons(ETH_P_802_2);\n\n\t/* Set packet\u0027s mru */\n\tif (a[OVS_PACKET_ATTR_MRU]) {\n\t\tmru = nla_get_u16(a[OVS_PACKET_ATTR_MRU]);\n\t\tpacket-\u003eignore_df = 1;\n\t}\n\tOVS_CB(packet)-\u003emru = mru;\n\n\t/* Build an sw_flow for sending this packet. */\n\tflow = ovs_flow_alloc();\n\terr = PTR_ERR(flow);\n\tif (IS_ERR(flow))\n\t\tgoto err_kfree_skb;\n\n\terr = ovs_flow_key_extract_userspace(net, a[OVS_PACKET_ATTR_KEY],\n\t\t\t\t\t     packet, &flow-\u003ekey, log);\n\tif (err)\n\t\tgoto err_flow_free;\n\n\terr = ovs_nla_copy_actions(net, a[OVS_PACKET_ATTR_ACTIONS],\n\t\t\t\t   &flow-\u003ekey, &acts, log);\n\tif (err)\n\t\tgoto err_flow_free;\n\n\trcu_assign_pointer(flow-\u003esf_acts, acts);\n\tpacket-\u003epriority = flow-\u003ekey.phy.priority;\n\tpacket-\u003emark = flow-\u003ekey.phy.skb_mark;\n\n\trcu_read_lock();\n\tdp = get_dp_rcu(net, ovs_header-\u003edp_ifindex);\n\terr = -ENODEV;\n\tif (!dp)\n\t\tgoto err_unlock;\n\n\tinput_vport = ovs_vport_rcu(dp, flow-\u003ekey.phy.in_port);\n\tif (!input_vport)\n\t\tinput_vport = ovs_vport_rcu(dp, OVSP_LOCAL);\n\n\tif (!input_vport)\n\t\tgoto err_unlock;\n\n\tpacket-\u003edev = input_vport-\u003edev;\n\tOVS_CB(packet)-\u003einput_vport = input_vport;\n\tsf_acts = rcu_dereference(flow-\u003esf_acts);\n\n\tlocal_bh_disable();\n\terr = ovs_execute_actions(dp, packet, sf_acts, &flow-\u003ekey);\n\tlocal_bh_enable();\n\trcu_read_unlock();\n\n\tovs_flow_free(flow, false);\n\treturn err;\n\nerr_unlock:\n\trcu_read_unlock();\nerr_flow_free:\n\tovs_flow_free(flow, false);\nerr_kfree_skb:\n\tkfree_skb(packet);\nerr:\n\treturn err;\n}\n```\n这个处理函数会调用到相应的Output方法，将报文从相应的端口发送出去，而对应的，BFD的状态机的维护和对应的处理都在控制面，所以在数据面收到相关的BFD报文时是要上送到控制面进行处理的。\n\n```\nenum upcall_type {\n    BAD_UPCALL,                 /* Some kind of bug somewhere. */\n    MISS_UPCALL,                /* A flow miss.  */\n    SFLOW_UPCALL,               /* sFlow sample. */\n    FLOW_SAMPLE_UPCALL,         /* Per-flow sampling. */\n    IPFIX_UPCALL                /* Per-bridge sampling. */\n};\n\n```\n\n```\n/* A packet passed up from the datapath to userspace.\n *\n * The \u0027packet\u0027, \u0027key\u0027 and \u0027userdata\u0027 may point into data in a buffer\n * provided by the caller, so the buffer should be released only after the\n * upcall processing has been finished.\n *\n * While being processed, the \u0027packet\u0027 may be reallocated, so the packet must\n * be separately released with ofpbuf_uninit().\n */\nstruct dpif_upcall {\n    /* All types. */\n    struct dp_packet packet;    /* Packet data,\u0027dp_packet\u0027 should be the first\n\t\t\t\t   member to avoid a hole. This is because\n\t\t\t\t   \u0027rte_mbuf\u0027 in dp_packet is aligned atleast\n\t\t\t\t   on a 64-byte boundary */\n    enum dpif_upcall_type type;\n    struct nlattr *key;         /* Flow key. */\n    size_t key_len;             /* Length of \u0027key\u0027 in bytes. */\n    ovs_u128 ufid;              /* Unique flow identifier for \u0027key\u0027. */\n    struct nlattr *mru;         /* Maximum receive unit. */\n    struct nlattr *cutlen;      /* Number of bytes shrink from the end. */\n\n    /* DPIF_UC_ACTION only. */\n    struct nlattr *userdata;    /* Argument to OVS_ACTION_ATTR_USERSPACE. */\n    struct nlattr *out_tun_key;    /* Output tunnel key. */\n    struct nlattr *actions;    /* Argument to OVS_ACTION_ATTR_USERSPACE. */\n};\n```\n从上述代码可以看出Upcall的消息类型，这里面BFD的控制报文会以MISS_UPCALL的消息类型经过Datapath模块调用Upcall上送到控制面进行处理","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-12] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-06-【OpenVswitch源码分析之五】用户空间转发面数据结构与流程.markdown [pool-2-thread-11] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenVswitch源码分析之五】用户空间转发面数据结构与流程》成功 [pool-2-thread-11] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-02-【OpenVswitch源码分析之四】控制面关键接口与调用流程.markdown [pool-2-thread-12] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenVswitch源码分析之四】控制面关键接口与调用流程》成功 [pool-2-thread-12] [chx]
[INFO] 2017-07-28 12:46:39 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=74132477 [pool-2-thread-2] [chx]
[INFO] 2017-07-28 12:46:39 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:32)] -> {"status":true,"error":"","data":{"id":74132477,"title":"【OpenVswitch源码分析之三】控制面关键接口与调用流程","create_at":"\/Date(1498985330000)\/","create":"2017-07-02 04:48:50","view_count":263,"comment_count":0,"comment_allowed":"true","type":"original","channel":2,"digg":0,"bury":0,"description":"控制面总览 \n上图只是描述了控制面的调用流程，控制面的接口包括如下几各方面： \n1. 虚拟设备的生命周期接口 \n2. 虚拟设备的业务配置接口 \n3. 二层基础协议的运行启动 \n4. Openflow协议的运行开启与流表下发 \n下面就这几个层面的分别简述一下虚拟设备的生命周期接口虚拟设备不同于物理设备，除了FCAPS管理之外还需要对其生命周期进行管理，在OVS中，设备类型被分成了很多类（图中只标注了四","url":"http://blog.csdn.net/BLACKMOON88/article/details/74132477","categories":"云计算,C语言算法,OpenVswitch","tags":"源码,open flow","content":"\u003ch2 id=\"控制面总览\"\u003e控制面总览\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"http://img.blog.csdn.net/20170702094534464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"OpenVswitch call stack\" title=\"\"\u003e \u003cbr\u003e\n上图只是描述了控制面的调用流程，控制面的接口包括如下几各方面： \u003cbr\u003e\n1. 虚拟设备的生命周期接口 \u003cbr\u003e\n2. 虚拟设备的业务配置接口 \u003cbr\u003e\n3. 二层基础协议的运行启动 \u003cbr\u003e\n4. Openflow协议的运行开启与流表下发 \u003cbr\u003e\n下面就这几个层面的分别简述一下\u003c/p\u003e\n\n\n\n\u003ch3 id=\"虚拟设备的生命周期接口\"\u003e虚拟设备的生命周期接口\u003c/h3\u003e\n\n\u003cp\u003e虚拟设备不同于物理设备，除了FCAPS管理之外还需要对其生命周期进行管理，在OVS中，设备类型被分成了很多类（图中只标注了四类）：Netdev-linux，Netdev-internal，Netdev-bsd，Netdev-tap等，生命周期类的接口采用的是设备文件描述符+ioctl接口，但是ioctl接口只是一个单工的用户态向内核态通信的接口，而从内核态向用户态传递设备状态的接口仍然是Netlink接口，这里Netlink会订阅NETLINK_ROUTE协议类型的信息。\u003c/p\u003e\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs vbscript\"\u003estruct netdev_class {\n    /* Type of netdevs \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e, e.g. \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"tap\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"gre\"\u003c/span\u003e, etc.\n     *\n     * One of the providers should supply a \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e type, since this \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * the type assumed \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e no type \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e specified when opening a netdev.\n     * The \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e type corresponds \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e an existing network device \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\n     * the system. */\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *type;\n\n    /* \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027true\u0027 then this netdev should be polled by PMD threads. */\u003c/span\u003e\n    bool is_pmd;\n\n/* ## ------------------- ## */\n/* ## Top-Level Functions ## */\n/* ## ------------------- ## */\n\n    /* Called when the netdev provider \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e registered, typically at program\n     * startup.  Returning an \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e from this \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e will prevent any network\n     * device \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e from being opened.\n     *\n     * This \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e may be \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e a network device \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e needs no\n     * initialization at registration \u003cspan class=\"hljs-built_in\"\u003etime\u003c/span\u003e. */\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*init)(void);\n\n    /* Performs periodic work needed by netdevs of this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e.  May be \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e\n     * no periodic work \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e necessary.\n     *\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027netdev_class\u0027 points to the class.  It is useful in case the same\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e implement different classes. */\n    void (*run)(\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct netdev_class *netdev_class);\n\n    /* Arranges \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e poll_block() \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e wake up \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e the \u003cspan class=\"hljs-string\"\u003e\"run\"\u003c/span\u003e member \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e needs\n     * \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be called.  Implementations are additionally required \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e wake\n     * whenever something changes \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e any of its netdevs which would cause their\n     * -&gt;change_seq() \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e change its result.  May be \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enothing\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * needed here.\n     *\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027netdev_class\u0027 points to the class.  It is useful in case the same\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e used \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e implement different classes. */\n    void (*wait)(\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct netdev_class *netdev_class);\n\n/* ## ---------------- ## */\n/* ## netdev Functions ## */\n/* ## ---------------- ## */\n\n    /* Life-cycle functions \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a netdev.  See the large comment above \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\n     * struct netdev_class. */\n    struct netdev *(*alloc)(void);\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*construct)(struct netdev *);\n    void (*destruct)(struct netdev *);\n    void (*dealloc)(struct netdev *);\n};\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e除了Netdev的生命周期管理还有内核Datapath的生命周期管理，不过这部分接口是存在于dpif中的，相关代码如下：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs vbscript\"\u003e    /* Datapath interface \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e structure, \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be defined by \u003cspan class=\"hljs-keyword\"\u003eeach\u003c/span\u003e implementation of\n * a datapath interface.\n *\n * These functions return \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e successful \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e a positive errno value \u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e failure,\n * except where otherwise noted.\n *\n * These functions are expected \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eexecute\u003c/span\u003e synchronously, that \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e block as\n * necessary \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e obtain a result.  Thus, they may \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e return EAGAIN \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e\n * EWOULDBLOCK \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e EINPROGRESS.  We may relax this requirement \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the future \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e\n * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e when we encounter performance problems. */\nstruct dpif_class {\n    /* Type of dpif \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e, e.g. \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"netdev\"\u003c/span\u003e, etc.\n     *\n     * One of the providers should supply a \u003cspan class=\"hljs-string\"\u003e\"system\"\u003c/span\u003e type, since this \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * the type assumed \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e no type \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e specified when opening a dpif. */\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *type;\n\n    /* Called when the dpif provider \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e registered, typically at program\n     * startup.  Returning an \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e from this \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e will prevent any\n     * datapath \u003cspan class=\"hljs-keyword\"\u003ewith\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e from being created.\n     *\n     * This \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e may be \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e a datapath \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e needs no\n     * initialization at registration \u003cspan class=\"hljs-built_in\"\u003etime\u003c/span\u003e. */\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*init)(void);\n\n    /* Enumerates the names of all known created datapaths (of \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027dpif_class\u0027), if possible, into \u0027all_dps\u0027.  The caller has already\u003c/span\u003e\n     * initialized \u003cspan class=\"hljs-comment\"\u003e\u0027all_dps\u0027 and other dpif classes might already have added\u003c/span\u003e\n     * names \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e it.\n     *\n     * This \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e used by the vswitch at startup, so that it can delete any\n     * datapaths that are \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e configured.\n     *\n     * Some kinds of datapaths might \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e be practically enumerable, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e which\n     * \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e this \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e may be a \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e pointer. */\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*enumerate)(struct sset *all_dps, \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct dpif_class *dpif_class);\n\n    /* Returns the type \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e pass \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e netdev_open() when a dpif of \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027dpif_class\u0027 has a port of type \u0027type\u0027, for a few special cases\u003c/span\u003e\n     * when a netdev type differs from a port type.  \u003cspan class=\"hljs-keyword\"\u003eFor\u003c/span\u003e example, when\n     * using the userspace datapath, a port of type \u003cspan class=\"hljs-string\"\u003e\"internal\"\u003c/span\u003e needs \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e\n     * be opened as \u003cspan class=\"hljs-string\"\u003e\"tap\"\u003c/span\u003e.\n     *\n     * Returns either \u003cspan class=\"hljs-comment\"\u003e\u0027type\u0027 itself or a string literal, which must not\u003c/span\u003e\n     * be freed. */\n    \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *(*port_open_type)(\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct dpif_class *dpif_class,\n                                  \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *type);\n\n    /* Attempts \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e open an existing dpif called \u003cspan class=\"hljs-comment\"\u003e\u0027name\u0027, if \u0027create\u0027 is false,\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e open an existing dpif \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e create a \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e one, \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027create\u0027 is true.\u003c/span\u003e\n     *\n     * \u003cspan class=\"hljs-comment\"\u003e\u0027dpif_class\u0027 is the class of dpif to open.\u003c/span\u003e\n     *\n     * \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e successful, stores a pointer \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e the \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e dpif \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027*dpifp\u0027, which must\u003c/span\u003e\n     * have \u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027dpif_class\u0027.  On failure there are no requirements on what\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e stored \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027*dpifp\u0027. */\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*open)(\u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e struct dpif_class *dpif_class,\n                \u003cspan class=\"hljs-keyword\"\u003econst\u003c/span\u003e char *name, bool create, struct dpif **dpifp);\n\n    /* Closes \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027 and frees associated memory. */\u003c/span\u003e\n    void (*close)(struct dpif *dpif);\n\n    /* Attempts \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e destroy the dpif underlying \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027.\u003c/span\u003e\n     *\n     * \u003cspan class=\"hljs-keyword\"\u003eIf\u003c/span\u003e successful, \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027 will not be used again except as an argument for\u003c/span\u003e\n     * the \u003cspan class=\"hljs-comment\"\u003e\u0027close\u0027 member function. */\u003c/span\u003e\n    \u003cspan class=\"hljs-built_in\"\u003eint\u003c/span\u003e (*destroy)(struct dpif *dpif);\n\n    /* Performs periodic work needed by \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027, if any is necessary.\u003c/span\u003e\n     * Returns \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e need \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e revalidate. */\n    bool (*run)(struct dpif *dpif);\n\n    /* Arranges \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e poll_block() \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e wake up \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e the \u003cspan class=\"hljs-string\"\u003e\"run\"\u003c/span\u003e member \u003cspan class=\"hljs-keyword\"\u003efunction\u003c/span\u003e needs\n     * \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e be called \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u003cspan class=\"hljs-comment\"\u003e\u0027dpif\u0027. */\u003c/span\u003e\n    void (*wait)(struct dpif *dpif);\n};\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003ch3 id=\"虚拟设备的业务配置接口\"\u003e虚拟设备的业务配置接口\u003c/h3\u003e\n\n\u003cp\u003e虚拟设备的业务配置接口也同样在上数两个类中，除了设备的直接配置还会有设备的组合配置，比如把Netdev绑定到Datapath中\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs mizar\"\u003e\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_class {\n    /* Fetches the device \u0027netdev\u0027\u0027s configuration, storing it \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027args\u0027.\n     * The caller owns \u0027args\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e pre-initializes it to an empty smap.\n     *\n     * If this netdev class does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have any configuration options, this may\n     * \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e a null pointer. */\n    int (*get_config)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *args);\n\n    /* Changes the device \u0027netdev\u0027\u0027s configuration to \u0027args\u0027.\n     *\n     * If this netdev class does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support configuration, this may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e a null\n     * pointer.\n     *\n     * If the return value \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e zero (meaning \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e an error occurred),\n     * the provider can allocate a string with an error message \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027*errp\u0027.\n     * The caller has to call free on it. */\n    int (*set_config)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *args,\n                      char **errp);\n\n    /* Returns the tunnel configuration \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027netdev\u0027.  If \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e a tunnel, returns null.\n     *\n     * If this function would always return null, it may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e null instead. */\n    const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_tunnel_config *\n        (*get_tunnel_config)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n\n    /* Build Tunnel header.  Ethernet \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e ip header parameters are passed to\n     * tunnel implementation to build entire outer header \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e given flow. */\n    int (*build_header)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e ovs_action_push_tnl *data,\n                        const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_tnl_build_header_params *params);\n\n    /* build_header() can \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e build entire header \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e all packets \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e given\n     * flow.  Push header \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e called \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e packet to build header specific to\n     * a packet on actual transmit.  It uses partial header build \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e\n     * build_header() which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e passed \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e data. */\n    void (*push_header)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet *packet,\n                        const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e ovs_action_push_tnl *data);\n\n    /* Pop tunnel header \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e packet, build tunnel metadata \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e resize packet\n     * \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e further processing.\n     * Returns NULL \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e case \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e error \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e tunnel implementation queued packet \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e further\n     * processing. */\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet * (*pop_header)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet *packet);\n\n    /* Returns the id \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the numa node the \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e on.  If there \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e no\n     * \u003cspan class=\"hljs-keyword\"\u003esuch\u003c/span\u003e info, returns NETDEV_NUMA_UNSPEC. */\n    int (*get_numa_id)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n\n    /* Configures the number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e tx queues \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027netdev\u0027. Returns 0 if successful,\n     * otherwise a positive errno value.\n     *\n     * \u0027n_txq\u0027 specifies the exact number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e transmission queues to create.\n     *\n     * The caller will call netdev_reconfigure() (if necessary) before using\n     * netdev_send() on any \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the newly configured queues, giving the provider\n     * a chance to adjust its settings.\n     *\n     * On error, the tx queue configuration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unchanged. */\n    int (*set_tx_multiq)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, unsigned int n_txq);\n\n    /* Sends buffers on \u0027netdev\u0027.\n     * Returns 0 if successful (\u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e every buffer), otherwise a positive errno\n     * value.  Returns EAGAIN without blocking if one \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e more packets cannot \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * queued immediately. Returns EMSGSIZE if a partial packet was transmitted\n     * \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e if a packet \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e too big \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e too small to transmit on the device.\n     *\n     * If the function returns a non-zero value, some \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the packets might have\n     * been sent anyway.\n     *\n     * If \u0027may_steal\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e false, the caller retains ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e all the\n     * packets.  If \u0027may_steal\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e true, the caller transfers ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e all\n     * the packets to the network device, regardless \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e success.\n     *\n     * If \u0027concurrent_txq\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e true, the caller may perform concurrent calls\n     * to netdev_send() with the same \u0027qid\u0027. The netdev provider \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e responsible\n     * \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e making sure \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e these concurrent calls do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e create a race\n     * condition \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e using locking \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e other synchronization if required.\n     *\n     * The network device \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e expected to maintain one \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e more packet\n     * transmission queues, so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e the caller does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e ordinarily have to\n     * do additional queuing \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packets.  \u0027qid\u0027 specifies the queue to use\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e can \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e ignored if the implementation does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support multiple\n     * queues.\n     *\n     * May return EOPNOTSUPP if a network device does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e implement packet\n     * transmission through this interface.  This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null\n     * if it would always return EOPNOTSUPP anyhow.  (This will prevent the\n     * network device \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ebeing\u003c/span\u003e usefully used \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the netdev-based \"userspace\n     * datapath\".  It will also prevent the OVS implementation \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e bonding \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e\n     * working properly over \u0027netdev\u0027.) */\n    int (*send)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, int qid, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet_batch *batch,\n                bool may_steal, bool concurrent_txq);\n\n    /* Registers with the poll loop to wake up \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e the next call to\n     * poll_block() when the packet transmission queue \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027 has\n     * sufficient room to transmit a packet with netdev_send().\n     *\n     * The network device \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e expected to maintain one \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e more packet\n     * transmission queues, so \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e the caller does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e ordinarily have to\n     * do additional queuing \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packets.  \u0027qid\u0027 specifies the queue to use\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e can \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e ignored if the implementation does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support multiple\n     * queues.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e null if \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e needed, \u003cspan class=\"hljs-keyword\"\u003esuch\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a network device \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e\n     * implement packet transmission through the \u0027send\u0027 member function. */\n    void (*send_wait)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, int qid);\n\n    /* Sets \u0027netdev\u0027\u0027s Ethernet address to \u0027mac\u0027 */\n    int (*set_etheraddr)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e eth_addr mac);\n\n    /* Retrieves \u0027netdev\u0027\u0027s Ethernet address into \u0027mac\u0027.\n     *\n     * This address will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e advertised \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u0027netdev\u0027\u0027s MAC address through the\n     * OpenFlow protocol, among other uses. */\n    int (*get_etheraddr)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e eth_addr *mac);\n\n    /* Retrieves \u0027netdev\u0027\u0027s MTU into \u0027*mtup\u0027.\n     *\n     * The MTU \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e the maximum size \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e transmitted (\u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e received) packets, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * bytes, \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e including the hardware header; \u003cspan class=\"hljs-keyword\"\u003ethus\u003c/span\u003e, this \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e typically 1500\n     * bytes \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e Ethernet devices.\n     *\n     * If \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have an MTU (e.g. \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e some tunnels do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e), \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e\n     * this function should return EOPNOTSUPP.  This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to\n     * null if it would always return EOPNOTSUPP. */\n    int (*get_mtu)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, int *mtup);\n\n    /* Sets \u0027netdev\u0027\u0027s MTU to \u0027mtu\u0027.\n     *\n     * If \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e have an MTU (e.g. \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e some tunnels do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e), \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e\n     * this function should return EOPNOTSUPP.  This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to\n     * null if it would always return EOPNOTSUPP. */\n    int (*set_mtu)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, int mtu);\n\n    /* Returns the ifindex \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027netdev\u0027, if successful, \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a positive number.\n     * On failure, returns a negative errno value.\n     *\n     * The desired semantics \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the ifindex value are a combination \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e those\n     * specified \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e POSIX \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e if_nametoindex() \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e SNMP \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e ifIndex.  An\n     * ifindex value should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e unique within a host \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e remain stable at least\n     * until reboot.  SNMP says an ifindex \"ranges between 1 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e the value \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * ifNumber\" but many systems do \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e follow this rule anyhow.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return -EOPNOTSUPP.\n     */\n    int (*get_ifindex)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n\n    /* Sets \u0027carrier\u0027 to true if carrier \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e active (link light \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e on) on\n     * \u0027netdev\u0027.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e null if device does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e provide carrier status (will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e always\n     * up \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e long \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e device \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e up).\n     */\n    int (*get_carrier)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, bool *carrier);\n\n    /* Returns the number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e times \u0027netdev\u0027\u0027s carrier has changed since \u003cspan class=\"hljs-keyword\"\u003ebeing\u003c/span\u003e\n     * initialized.\n     *\n     * If null, callers will \u003cspan class=\"hljs-keyword\"\u003eassume\u003c/span\u003e the number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e carrier resets \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e zero. */\n    long long int (*get_carrier_resets)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n\n    /* Forces -&gt;get_carrier() to poll \u0027netdev\u0027\u0027s MII registers \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e link status\n     * instead \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e checking \u0027netdev\u0027\u0027s carrier.  \u0027netdev\u0027\u0027s MII registers will\n     * \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e polled once every \u0027interval\u0027 milliseconds.  If \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e\n     * support MII, another method may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e used \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a fallback.  If \u0027interval\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * less than \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e equal to zero, reverts -&gt;get_carrier() to its normal\n     * behavior.\n     *\n     * Most network devices won\u0027t support this feature \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e will \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e this\n     * function pointer to NULL, which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e equivalent to returning EOPNOTSUPP.\n     */\n    int (*set_miimon_interval)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, long long int interval);\n\n    /* Retrieves current device stats \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027 into \u0027stats\u0027.\n     *\n     * A network device \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e supports some statistics but \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e others, it should\n     * \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e the values \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the unsupported statistics to all-1-bits\n     * (UINT64_MAX). */\n    int (*get_stats)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_stats *);\n\n    /* Stores the features supported \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027netdev\u0027 into each \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027*current\u0027,\n     * \u0027*advertised\u0027, \u0027*supported\u0027, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027*peer\u0027.  Each value \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a bitmap \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * NETDEV_F_* bits.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP.\n     */\n    int (*get_features)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                        enum netdev_features *current,\n                        enum netdev_features *advertised,\n                        enum netdev_features *supported,\n                        enum netdev_features *peer);\n\n    /* Set the features advertised \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027netdev\u0027 to \u0027advertise\u0027, which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a\n     * \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e NETDEV_F_* bits.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a network device \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e\n     * support configuring advertisements. */\n    int (*set_advertisements)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                              enum netdev_features advertise);\n\n    /* Attempts to \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e input rate limiting (policing) policy, \u003cspan class=\"hljs-keyword\"\u003esuch\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e up to\n     * \u0027kbits_rate\u0027 kbps \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e traffic \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e accepted, with a maximum accumulative\n     * burst size \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027kbits\u0027 kb.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if policing \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e supported. */\n    int (*set_policing)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, unsigned int kbits_rate,\n                        unsigned int kbits_burst);\n\n    /* Adds to \u0027types\u0027 all \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the forms \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS supported \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027netdev\u0027, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e leaves\n     * it empty if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS.  Any names added to \u0027types\u0027\n     * should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the \"type\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"QoS\" table\n     * \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e ovs-vswitchd.conf.db(8)).\n     *\n     * Every network device must support disabling QoS with a type \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \"\", but\n     * this function must \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e add \"\" to \u0027types\u0027.\n     *\n     * The caller \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e responsible \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e initializing \u0027types\u0027 (e.g. with\n     * sset_init()) before calling this function.  The caller retains ownership\n     * \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027types\u0027.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*get_qos_types)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e sset *types);\n\n    /* Queries \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e its capabilities regarding the specified \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * QoS.  On success, initializes \u0027caps\u0027 with the QoS capabilities.\n     *\n     * Should return EOPNOTSUPP if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support \u0027type\u0027.  May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*get_qos_capabilities)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                                const char *type,\n                                \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_qos_capabilities *caps);\n\n    /* Queries \u0027netdev\u0027 about its currently configured form \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS.  If\n     * successful, stores the name \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the current form \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS into \u0027*typep\u0027\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e any details \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e configuration \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e string key-value pairs \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * \u0027details\u0027.\n     *\n     * A \u0027*typep\u0027 \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \"\" indicates \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e QoS \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e currently disabled on \u0027netdev\u0027.\n     *\n     * The caller initializes \u0027details\u0027 before calling this function.  The\n     * caller takes ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the string key-values pairs added to\n     * \u0027details\u0027.\n     *\n     * The netdev retains ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027*typep\u0027.\n     *\n     * \u0027*typep\u0027 will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e one \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the types returned \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e netdev_get_qos_types() \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n     * \u0027netdev\u0027.  The contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n     * \u0027*typep\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"QoS\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e ovs-vswitchd.conf.db(8)).\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*get_qos)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                   const char **typep, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Attempts to reconfigure QoS on \u0027netdev\u0027, changing the form \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS to\n     * \u0027type\u0027 with details \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e configuration \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027details\u0027.\n     *\n     * On error, the previous QoS configuration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e retained.\n     *\n     * When this function changes the type \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS (\u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e just \u0027details\u0027), this\n     * also resets all queue configuration \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027 to their defaults\n     * (which depend on the specific type \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e QoS).  Otherwise, the queue\n     * configuration \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unchanged.\n     *\n     * \u0027type\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \"\" (to disable QoS) \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e one \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the types returned \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e\n     * netdev_get_qos_types() \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027.  The contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should\n     * \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the given \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column\n     * \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"QoS\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e\n     * ovs-vswitchd.conf.db(8)).\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*set_qos)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                   const char *type, const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Queries \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e information about the queue numbered \u0027queue_id\u0027.\n     * If successful, adds \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e information \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e string key-value pairs to\n     * \u0027details\u0027.  Returns 0 if successful, otherwise a positive errno value.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e greater than \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e equal to the\n     * number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e supported queues (\u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e reported \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \u0027n_queues\u0027 member \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_qos_capabilities \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027get_qos_capabilities\u0027).\n     *\n     * The caller initializes \u0027details\u0027 before calling this function.  The\n     * caller takes ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the string key-values pairs added to\n     * \u0027details\u0027.\n     *\n     * The returned contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the\n     * given \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"Queue\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e ovs-vswitchd.conf.db(8)).\n     */\n    int (*get_queue)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                     unsigned int queue_id, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Configures the queue numbered \u0027queue_id\u0027 on \u0027netdev\u0027 with the key-value\n     * string pairs \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027details\u0027.  The contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the given \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * the \"Queue\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e\n     * ovs-vswitchd.conf.db(8)).  Returns 0 if successful, otherwise a positive\n     * errno value.  On failure, the given queue\u0027s configuration should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * unmodified.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e greater than \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e equal to the\n     * number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e supported queues (\u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e reported \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \u0027n_queues\u0027 member \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_qos_capabilities \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027get_qos_capabilities\u0027), \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e if\n     * \u0027details\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e invalid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the type \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e queue.\n     *\n     * This function does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e modify \u0027details\u0027, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e the caller retains\n     * ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e it.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*set_queue)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                     unsigned int queue_id, const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Attempts to delete the queue numbered \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027netdev\u0027.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e greater than \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e equal to the\n     * number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e supported queues (\u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e reported \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \u0027n_queues\u0027 member \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_qos_capabilities \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e \u0027get_qos_capabilities\u0027).  Should\n     * return EOPNOTSUPP if \u0027queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e valid but may \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e deleted (e.g. if\n     * \u0027netdev\u0027 has a fixed \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e queues with the current QoS \u003cspan class=\"hljs-keyword\"\u003emode\u003c/span\u003e).\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e if all \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e its\n     * QoS modes have fixed sets \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e queues. */\n    int (*delete_queue)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, unsigned int queue_id);\n\n    /* Obtains statistics about \u0027queue_id\u0027 on \u0027netdev\u0027.  Fills \u0027stats\u0027 with the\n     * queue\u0027s statistics.  May \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e individual members \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027stats\u0027 to all-1-bits\n     * if the statistic \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unavailable.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*get_queue_stats)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, unsigned int queue_id,\n                           \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_queue_stats *stats);\n\n    /* Attempts to \u003cspan class=\"hljs-keyword\"\u003ebegin\u003c/span\u003e dumping the queues \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027netdev\u0027.  On success, returns 0\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e initializes \u0027*statep\u0027 with any data needed \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e iteration.  On\n     * failure, returns a positive errno value.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*queue_dump_start)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, void **statep);\n\n    /* Attempts to retrieve another queue \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027state\u0027, which was\n     * initialized \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e a successful call to the \u0027queue_dump_start\u0027 function \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n     * \u0027netdev\u0027.  On success, stores a queue ID into \u0027*queue_id\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e fills\n     * \u0027details\u0027 with the configuration \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the queue with \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e ID.  Returns EOF\n     * if the last queue has been dumped, \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e a positive errno value on error.\n     * This function will \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e called again once it returns nonzero once \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e\n     * a given iteration (but the \u0027queue_dump_done\u0027 function will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e called\n     * afterward).\n     *\n     * The caller initializes \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e clears \u0027details\u0027 before calling this\n     * function.  The caller takes ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the string key-values pairs\n     * added to \u0027details\u0027.\n     *\n     * The returned contents \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027details\u0027 should \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e documented \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e valid \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the\n     * given \u0027type\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"other_config\" column \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the \"Queue\" table \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * vswitchd/vswitch.xml (which \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e built \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e ovs-vswitchd.conf.db(8)).\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*queue_dump_next)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, void *state,\n                           unsigned int *queue_id, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *details);\n\n    /* Releases resources \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027state\u0027, which was initialized \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e a\n     * successful call to the \u0027queue_dump_start\u0027 function \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027netdev\u0027.\n     *\n     * May \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL if \u0027netdev\u0027 does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support QoS at all. */\n    int (*queue_dump_done)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, void *state);\n\n    /* Iterates over all \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027netdev\u0027\u0027s queues, calling \u0027cb\u0027 with the queue\u0027s\n     * ID, its statistics, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e the \u0027aux\u0027 specified \u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e the caller.  The order \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * iteration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e unspecified, but (when successful) each queue must \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * visited exactly once.\n     *\n     * \u0027cb\u0027 will \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e modify \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e free the statistics passed \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e. */\n    int (*dump_queue_stats)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev,\n                            void (*cb)(unsigned int queue_id,\n                                       \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_queue_stats *,\n                                       void *aux),\n                            void *aux);\n\n    /* Assigns \u0027addr\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u0027netdev\u0027\u0027s IPv4 address \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027mask\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e its netmask.  If\n     * \u0027addr\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e INADDR_ANY, \u0027netdev\u0027\u0027s IPv4 address \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e cleared.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*set_in4)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr addr,\n                   \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr mask);\n\n    /* Returns all assigned IP address to  \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e returns 0.\n     * API allocates array \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e address \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e masks \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e it to\n     * \u0027*addr\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027*mask\u0027.\n     * Otherwise, returns a positive errno value \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e sets \u0027*addr\u0027, \u0027*mask\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u0027*n_addr\u0027 to NULL.\n     *\n     * The following error values have well-defined meanings:\n     *\n     *   - EADDRNOTAVAIL: \u0027netdev\u0027 has no assigned IPv6 address.\n     *\n     *   - EOPNOTSUPP: No IPv6 network stack attached to \u0027netdev\u0027.\n     *\n     * \u0027addr\u0027 may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e null, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e which case the address itself \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e reported. */\n    int (*get_addr_list)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr **\u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e,\n                         \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in6_addr **mask, int *n_in6);\n\n    /* Adds \u0027router\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a default IP gateway \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e the TCP/IP stack \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e\n     * corresponds to \u0027netdev\u0027.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*add_router)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr router);\n\n    /* Looks up the next hop \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027host\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e the host\u0027s routing table.  If\n     * successful, stores the next hop gateway\u0027s address (0 if \u0027host\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e on a\n     * directly connected network) \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027*next_hop\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e a copy \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the name \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the\n     * device to reach \u0027host\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027*netdev_name\u0027, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e returns 0.  The caller \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * responsible \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e freeing \u0027*netdev_name\u0027 (\u003cspan class=\"hljs-keyword\"\u003eby\u003c/span\u003e calling free()).\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*get_next_hop)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr *host, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e in_addr *next_hop,\n                        char **netdev_name);\n\n    /* Retrieves driver information \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the device.\n     *\n     * Populates \u0027smap\u0027 with key-value pairs representing the status \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the\n     * device.  \u0027smap\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e a \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e key-value string pairs representing netdev\n     * type specific information.  For more information see\n     * ovs-vswitchd.conf.db(5).\n     *\n     * The caller \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e responsible \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e destroying \u0027smap\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e its data.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*get_status)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e smap *smap);\n\n    /* Looks up the ARP table entry \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027ip\u0027 on \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e stores the\n     * corresponding MAC address \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027mac\u0027.  A return value \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e ENXIO, \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e\n     * particular, indicates \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e there \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e no ARP table entry \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e \u0027ip\u0027 on\n     * \u0027netdev\u0027.\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*arp_lookup)(const \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, ovs_be32 ip,\n                      \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e eth_addr *mac);\n\n    /* Retrieves the current \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e flags on \u0027netdev\u0027 into \u0027*old_flags\u0027.  Then,\n     * turns off the flags \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e are \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to 1 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027off\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e turns on the flags\n     * \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e are \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to 1 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027on\u0027.  (No bit will \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eset\u003c/span\u003e to 1 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e both \u0027off\u0027 \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e\n     * \u0027on\u0027; \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, off &amp; on == 0.)\n     *\n     * This function may \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e invoked \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e a signal handler.  Therefore, it\n     * should \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e do anything \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e signal-safe (\u003cspan class=\"hljs-keyword\"\u003esuch\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e logging). */\n    int (*update_flags)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev, enum netdev_flags off,\n                        enum netdev_flags on, enum netdev_flags *old_flags);\n\n    /* If the provider called netdev_request_reconfigure(), the upper layer\n     * will eventually call this.  The provider can update the device\n     * configuration knowing \u003cspan class=\"hljs-keyword\"\u003ethat\u003c/span\u003e the upper layer will \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e call rxq_recv() \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e\n     * send() until this function returns.\n     *\n     * On error, the configuration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e indeterminant \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e the device cannot \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e\n     * used to send \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e receive packets until a successful configuration \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n     * applied. */\n    int (*reconfigure)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev *netdev);\n/* ## -------------------- ## */\n/* ## netdev_rxq Functions ## */\n/* ## -------------------- ## */\n\n/* If a particular netdev class does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e support receiving packets, all these\n * function pointers must \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e NULL. */\n\n    /* Life-cycle functions \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e a netdev_rxq.  See the large comment above on\n     * \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_class. */\n    \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *(*rxq_alloc)(void);\n    int (*rxq_construct)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *);\n    void (*rxq_destruct)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *);\n    void (*rxq_dealloc)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *);\n\n    /* Attempts to receive a batch \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e packets \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027rx\u0027.  In \u0027batch\u0027, the\n     * caller supplies \u0027packets\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e the pointer to the beginning \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e an array\n     * \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e NETDEV_MAX_BURST pointers to dp_packet.  If successful, the\n     * implementation stores pointers to up to NETDEV_MAX_BURST dp_packets into\n     * the array, transferring ownership \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e the packets to the caller, stores\n     * the number \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e received packets into \u0027count\u0027, \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e returns 0.\n     *\n     * The implementation does \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e necessarily initialize any non-data members\n     * \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e \u0027packets\u0027 \u003cspan class=\"hljs-keyword\"\u003ein\u003c/span\u003e \u0027batch\u0027.  That \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e, the caller must initialize layer\n     * pointers \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e metadata itself, if desired, e.g. with pkt_metadata_init()\n     * \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e miniflow_extract().\n     *\n     * Implementations should allocate buffers with DP_NETDEV_HEADROOM bytes \u003cspan class=\"hljs-keyword\"\u003eof\u003c/span\u003e\n     * headroom.\n     *\n     * Returns EAGAIN immediately if no packet \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e ready to \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e received \u003cspan class=\"hljs-keyword\"\u003eor\u003c/span\u003e\n     * another positive errno value if an error was encountered. */\n    int (*rxq_recv)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *rx, \u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e dp_packet_batch *batch);\n\n    /* Registers with the poll loop to wake up \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e the next call to\n     * poll_block() when a packet \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e ready to \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e received with\n     * netdev_rxq_recv() on \u0027rx\u0027. */\n    void (*rxq_wait)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *rx);\n\n    /* Discards all packets waiting to \u003cspan class=\"hljs-keyword\"\u003ebe\u003c/span\u003e received \u003cspan class=\"hljs-keyword\"\u003efrom\u003c/span\u003e \u0027rx\u0027. */\n    int (*rxq_drain)(\u003cspan class=\"hljs-keyword\"\u003estruct\u003c/span\u003e netdev_rxq *rx);\n};\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在Netdev侧的配置完成之后通常还会配套在Datapath侧做配置，下面以端口绑定流程为例讲解。 \u003cbr\u003e\n具体绑定的接口在Dpif.h中，Dpif模块本身就是Datapath对外暴露的接口，同时也起到协调设备和datapath协同工作的作用。\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs applescript\"\u003e/* Attempts \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e add \u0027netdev\u0027 \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e a port \u003cspan class=\"hljs-function_start\"\u003e\u003cspan class=\"hljs-keyword\"\u003eon\u003c/span\u003e\u003c/span\u003e \u0027dpif\u0027.  If \u0027port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * non-null \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eits\u003c/span\u003e value \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enot\u003c/span\u003e ODPP_NONE, \u003cspan class=\"hljs-keyword\"\u003ethen\u003c/span\u003e attempts \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e use \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e\n * value \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e port \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e.\n *\n * If successful, returns \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e sets \u0027*port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethe\u003c/span\u003e new port\u0027s port\n * \u003cspan class=\"hljs-type\"\u003enumber\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u0027port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e non-null).  On failure, returns a positive\n * errno value \u003cspan class=\"hljs-keyword\"\u003eand\u003c/span\u003e sets \u0027*port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eto\u003c/span\u003e ODPP_NONE (\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e \u0027port_nop\u0027 \u003cspan class=\"hljs-keyword\"\u003eis\u003c/span\u003e\n * non-null). */\nint\ndpif_port_add(struct dpif *dpif, struct netdev *netdev, odp_port_t *port_nop)\n{\n    const char *netdev_name = netdev_get_name(netdev);\n    odp_port_t port_no = ODPP_NONE;\n    int \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e;\n\n    COVERAGE_INC(dpif_port_add);\n\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (port_nop) {\n        port_no = *port_nop;\n    }\n\n    \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e = dpif-&gt;dpif_class-&gt;port_add(dpif, netdev, &amp;port_no);\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!\u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e) {\n        VLOG_DBG_RL(&amp;dpmsg_rl, \u003cspan class=\"hljs-string\"\u003e\"%s: added %s as port %\"\u003c/span\u003ePRIu32,\n                    dpif_name(dpif), netdev_name, port_no);\n    } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\n        VLOG_WARN_RL(&amp;error_rl, \u003cspan class=\"hljs-string\"\u003e\"%s: failed to add %s as port: %s\"\u003c/span\u003e,\n                     dpif_name(dpif), netdev_name, ovs_strerror(\u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e));\n        port_no = ODPP_NONE;\n    }\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (port_nop) {\n        *port_nop = port_no;\n    }\n\u003cspan class=\"hljs-command\"\u003e    return\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eerror\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e在上述代码在Datapath上创建一个指向netdev的vport，同时其端口号为port_no，这涉及到用户进程和内核进程的交互，用户态使用Netlink发送创建端口的消息给内核datapath进程，在内核态收到对应的消息类型后分别调用对应的方法进行处理，这里会调用ovs_vport_cmd_new方法进行处理\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs avrasm\"\u003estatic struct genl_ops dp_vport_genl_ops[] = {\n    { \u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e = OVS_VPORT_CMD_NEW,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.flags\u003c/span\u003e = GENL_UNS_ADMIN_PERM, \u003cspan class=\"hljs-comment\"\u003e/* Requires CAP_NET_ADMIN privilege. */\u003c/span\u003e\n      \u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e = vport_policy,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.doit\u003c/span\u003e = ovs_vport_cmd_new\n    },\n    { \u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e = OVS_VPORT_CMD_DEL,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.flags\u003c/span\u003e = GENL_UNS_ADMIN_PERM, \u003cspan class=\"hljs-comment\"\u003e/* Requires CAP_NET_ADMIN privilege. */\u003c/span\u003e\n      \u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e = vport_policy,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.doit\u003c/span\u003e = ovs_vport_cmd_del\n    },\n    { \u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e = OVS_VPORT_CMD_GET,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.flags\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,           \u003cspan class=\"hljs-comment\"\u003e/* OK for unprivileged users. */\u003c/span\u003e\n      \u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e = vport_policy,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.doit\u003c/span\u003e = ovs_vport_cmd_get,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.dumpit\u003c/span\u003e = ovs_vport_cmd_dump\n    },\n    { \u003cspan class=\"hljs-preprocessor\"\u003e.cmd\u003c/span\u003e = OVS_VPORT_CMD_SET,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.flags\u003c/span\u003e = GENL_UNS_ADMIN_PERM, \u003cspan class=\"hljs-comment\"\u003e/* Requires CAP_NET_ADMIN privilege. */\u003c/span\u003e\n      \u003cspan class=\"hljs-preprocessor\"\u003e.policy\u003c/span\u003e = vport_policy,\n      \u003cspan class=\"hljs-preprocessor\"\u003e.doit\u003c/span\u003e = ovs_vport_cmd_set,\n    },\n}\u003cspan class=\"hljs-comment\"\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e函数ovs_vport_cmd_new会调用static struct vport *new_vport(const struct vport_parms *parms)会继续调用到struct vport *ovs_vport_add(const struct vport_parms *parms)里面会调用vport = ops-&gt;create(parms); \u003cbr\u003e\nops是什么呢？在dp_init函数中会调用ovs_netdev_init，它会调用ovs_vport_ops_register(&amp;ovs_netdev_vport_ops); \u003cbr\u003e\n所以ops-&gt;create会调用netdev_create，它会调用ovs_netdev_link，其中有下面的代码：\u003c/p\u003e\n\n\n\n\u003cpre class=\"prettyprint\"\u003e\u003ccode class=\" hljs haskell\"\u003e    vport-&gt;dev = dev_get_by_name(ovs_dp_get_net(vport-&gt;dp), name);\n    err = netdev_rx_handler_register(vport-&gt;dev, netdev_frame_hook,\n                     vport);\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003enetdev_rx_handler_register会注册一个方法叫做netdev_frame_hook到对应的Netdev中，每当网卡收到包的时候，就调用这个方法。 \u003cbr\u003e\n在后面讲数据面的章节中，我们会从这个函数开始，解析整个网络包的处理过程。 \u003cbr\u003e\n另外要说一点，内核是通过用户进程传递的netdev_name在内核对应的namespace中寻找到对应的设备的，namespace可以起到网络设备隔离的作用。\u003c/p\u003e","markdowncontent":"##控制面总览\n![OpenVswitch call stack](http://img.blog.csdn.net/20170702094534464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvb2hlbnJ5ODg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上图只是描述了控制面的调用流程，控制面的接口包括如下几各方面：\n1. 虚拟设备的生命周期接口\n2. 虚拟设备的业务配置接口\n3. 二层基础协议的运行启动\n4. Openflow协议的运行开启与流表下发\n下面就这几个层面的分别简述一下\n###虚拟设备的生命周期接口\n虚拟设备不同于物理设备，除了FCAPS管理之外还需要对其生命周期进行管理，在OVS中，设备类型被分成了很多类（图中只标注了四类）：Netdev-linux，Netdev-internal，Netdev-bsd，Netdev-tap等，生命周期类的接口采用的是设备文件描述符+ioctl接口，但是ioctl接口只是一个单工的用户态向内核态通信的接口，而从内核态向用户态传递设备状态的接口仍然是Netlink接口，这里Netlink会订阅NETLINK_ROUTE协议类型的信息。\n\n```\nstruct netdev_class {\n    /* Type of netdevs in this class, e.g. \"system\", \"tap\", \"gre\", etc.\n     *\n     * One of the providers should supply a \"system\" type, since this is\n     * the type assumed if no type is specified when opening a netdev.\n     * The \"system\" type corresponds to an existing network device on\n     * the system. */\n    const char *type;\n\n    /* If \u0027true\u0027 then this netdev should be polled by PMD threads. */\n    bool is_pmd;\n\n/* ## ------------------- ## */\n/* ## Top-Level Functions ## */\n/* ## ------------------- ## */\n\n    /* Called when the netdev provider is registered, typically at program\n     * startup.  Returning an error from this function will prevent any network\n     * device in this class from being opened.\n     *\n     * This function may be set to null if a network device class needs no\n     * initialization at registration time. */\n    int (*init)(void);\n\n    /* Performs periodic work needed by netdevs of this class.  May be null if\n     * no periodic work is necessary.\n     *\n     * \u0027netdev_class\u0027 points to the class.  It is useful in case the same\n     * function is used to implement different classes. */\n    void (*run)(const struct netdev_class *netdev_class);\n\n    /* Arranges for poll_block() to wake up if the \"run\" member function needs\n     * to be called.  Implementations are additionally required to wake\n     * whenever something changes in any of its netdevs which would cause their\n     * -\u003echange_seq() function to change its result.  May be null if nothing is\n     * needed here.\n     *\n     * \u0027netdev_class\u0027 points to the class.  It is useful in case the same\n     * function is used to implement different classes. */\n    void (*wait)(const struct netdev_class *netdev_class);\n\n/* ## ---------------- ## */\n/* ## netdev Functions ## */\n/* ## ---------------- ## */\n\n    /* Life-cycle functions for a netdev.  See the large comment above on\n     * struct netdev_class. */\n    struct netdev *(*alloc)(void);\n    int (*construct)(struct netdev *);\n    void (*destruct)(struct netdev *);\n    void (*dealloc)(struct netdev *);\n};\n```\n除了Netdev的生命周期管理还有内核Datapath的生命周期管理，不过这部分接口是存在于dpif中的，相关代码如下：\n\n```\n\t/* Datapath interface class structure, to be defined by each implementation of\n * a datapath interface.\n *\n * These functions return 0 if successful or a positive errno value on failure,\n * except where otherwise noted.\n *\n * These functions are expected to execute synchronously, that is, to block as\n * necessary to obtain a result.  Thus, they may not return EAGAIN or\n * EWOULDBLOCK or EINPROGRESS.  We may relax this requirement in the future if\n * and when we encounter performance problems. */\nstruct dpif_class {\n    /* Type of dpif in this class, e.g. \"system\", \"netdev\", etc.\n     *\n     * One of the providers should supply a \"system\" type, since this is\n     * the type assumed if no type is specified when opening a dpif. */\n    const char *type;\n\n    /* Called when the dpif provider is registered, typically at program\n     * startup.  Returning an error from this function will prevent any\n     * datapath with this class from being created.\n     *\n     * This function may be set to null if a datapath class needs no\n     * initialization at registration time. */\n    int (*init)(void);\n\n    /* Enumerates the names of all known created datapaths (of class\n     * \u0027dpif_class\u0027), if possible, into \u0027all_dps\u0027.  The caller has already\n     * initialized \u0027all_dps\u0027 and other dpif classes might already have added\n     * names to it.\n     *\n     * This is used by the vswitch at startup, so that it can delete any\n     * datapaths that are not configured.\n     *\n     * Some kinds of datapaths might not be practically enumerable, in which\n     * case this function may be a null pointer. */\n    int (*enumerate)(struct sset *all_dps, const struct dpif_class *dpif_class);\n\n    /* Returns the type to pass to netdev_open() when a dpif of class\n     * \u0027dpif_class\u0027 has a port of type \u0027type\u0027, for a few special cases\n     * when a netdev type differs from a port type.  For example, when\n     * using the userspace datapath, a port of type \"internal\" needs to\n     * be opened as \"tap\".\n     *\n     * Returns either \u0027type\u0027 itself or a string literal, which must not\n     * be freed. */\n    const char *(*port_open_type)(const struct dpif_class *dpif_class,\n                                  const char *type);\n\n    /* Attempts to open an existing dpif called \u0027name\u0027, if \u0027create\u0027 is false,\n     * or to open an existing dpif or create a new one, if \u0027create\u0027 is true.\n     *\n     * \u0027dpif_class\u0027 is the class of dpif to open.\n     *\n     * If successful, stores a pointer to the new dpif in \u0027*dpifp\u0027, which must\n     * have class \u0027dpif_class\u0027.  On failure there are no requirements on what\n     * is stored in \u0027*dpifp\u0027. */\n    int (*open)(const struct dpif_class *dpif_class,\n                const char *name, bool create, struct dpif **dpifp);\n\n    /* Closes \u0027dpif\u0027 and frees associated memory. */\n    void (*close)(struct dpif *dpif);\n\n    /* Attempts to destroy the dpif underlying \u0027dpif\u0027.\n     *\n     * If successful, \u0027dpif\u0027 will not be used again except as an argument for\n     * the \u0027close\u0027 member function. */\n    int (*destroy)(struct dpif *dpif);\n\n    /* Performs periodic work needed by \u0027dpif\u0027, if any is necessary.\n     * Returns true if need to revalidate. */\n    bool (*run)(struct dpif *dpif);\n\n    /* Arranges for poll_block() to wake up if the \"run\" member function needs\n     * to be called for \u0027dpif\u0027. */\n    void (*wait)(struct dpif *dpif);\n};\n```\n###虚拟设备的业务配置接口\n虚拟设备的业务配置接口也同样在上数两个类中，除了设备的直接配置还会有设备的组合配置，比如把Netdev绑定到Datapath中\n\n```\nstruct netdev_class {\n    /* Fetches the device \u0027netdev\u0027\u0027s configuration, storing it in \u0027args\u0027.\n     * The caller owns \u0027args\u0027 and pre-initializes it to an empty smap.\n     *\n     * If this netdev class does not have any configuration options, this may\n     * be a null pointer. */\n    int (*get_config)(const struct netdev *netdev, struct smap *args);\n\n    /* Changes the device \u0027netdev\u0027\u0027s configuration to \u0027args\u0027.\n     *\n     * If this netdev class does not support configuration, this may be a null\n     * pointer.\n     *\n     * If the return value is not zero (meaning that an error occurred),\n     * the provider can allocate a string with an error message in \u0027*errp\u0027.\n     * The caller has to call free on it. */\n    int (*set_config)(struct netdev *netdev, const struct smap *args,\n                      char **errp);\n\n    /* Returns the tunnel configuration of \u0027netdev\u0027.  If \u0027netdev\u0027 is\n     * not a tunnel, returns null.\n     *\n     * If this function would always return null, it may be null instead. */\n    const struct netdev_tunnel_config *\n        (*get_tunnel_config)(const struct netdev *netdev);\n\n    /* Build Tunnel header.  Ethernet and ip header parameters are passed to\n     * tunnel implementation to build entire outer header for given flow. */\n    int (*build_header)(const struct netdev *, struct ovs_action_push_tnl *data,\n                        const struct netdev_tnl_build_header_params *params);\n\n    /* build_header() can not build entire header for all packets for given\n     * flow.  Push header is called for packet to build header specific to\n     * a packet on actual transmit.  It uses partial header build by\n     * build_header() which is passed as data. */\n    void (*push_header)(struct dp_packet *packet,\n                        const struct ovs_action_push_tnl *data);\n\n    /* Pop tunnel header from packet, build tunnel metadata and resize packet\n     * for further processing.\n     * Returns NULL in case of error or tunnel implementation queued packet for further\n     * processing. */\n    struct dp_packet * (*pop_header)(struct dp_packet *packet);\n\n    /* Returns the id of the numa node the \u0027netdev\u0027 is on.  If there is no\n     * such info, returns NETDEV_NUMA_UNSPEC. */\n    int (*get_numa_id)(const struct netdev *netdev);\n\n    /* Configures the number of tx queues of \u0027netdev\u0027. Returns 0 if successful,\n     * otherwise a positive errno value.\n     *\n     * \u0027n_txq\u0027 specifies the exact number of transmission queues to create.\n     *\n     * The caller will call netdev_reconfigure() (if necessary) before using\n     * netdev_send() on any of the newly configured queues, giving the provider\n     * a chance to adjust its settings.\n     *\n     * On error, the tx queue configuration is unchanged. */\n    int (*set_tx_multiq)(struct netdev *netdev, unsigned int n_txq);\n\n    /* Sends buffers on \u0027netdev\u0027.\n     * Returns 0 if successful (for every buffer), otherwise a positive errno\n     * value.  Returns EAGAIN without blocking if one or more packets cannot be\n     * queued immediately. Returns EMSGSIZE if a partial packet was transmitted\n     * or if a packet is too big or too small to transmit on the device.\n     *\n     * If the function returns a non-zero value, some of the packets might have\n     * been sent anyway.\n     *\n     * If \u0027may_steal\u0027 is false, the caller retains ownership of all the\n     * packets.  If \u0027may_steal\u0027 is true, the caller transfers ownership of all\n     * the packets to the network device, regardless of success.\n     *\n     * If \u0027concurrent_txq\u0027 is true, the caller may perform concurrent calls\n     * to netdev_send() with the same \u0027qid\u0027. The netdev provider is responsible\n     * for making sure that these concurrent calls do not create a race\n     * condition by using locking or other synchronization if required.\n     *\n     * The network device is expected to maintain one or more packet\n     * transmission queues, so that the caller does not ordinarily have to\n     * do additional queuing of packets.  \u0027qid\u0027 specifies the queue to use\n     * and can be ignored if the implementation does not support multiple\n     * queues.\n     *\n     * May return EOPNOTSUPP if a network device does not implement packet\n     * transmission through this interface.  This function may be set to null\n     * if it would always return EOPNOTSUPP anyhow.  (This will prevent the\n     * network device from being usefully used by the netdev-based \"userspace\n     * datapath\".  It will also prevent the OVS implementation of bonding from\n     * working properly over \u0027netdev\u0027.) */\n    int (*send)(struct netdev *netdev, int qid, struct dp_packet_batch *batch,\n                bool may_steal, bool concurrent_txq);\n\n    /* Registers with the poll loop to wake up from the next call to\n     * poll_block() when the packet transmission queue for \u0027netdev\u0027 has\n     * sufficient room to transmit a packet with netdev_send().\n     *\n     * The network device is expected to maintain one or more packet\n     * transmission queues, so that the caller does not ordinarily have to\n     * do additional queuing of packets.  \u0027qid\u0027 specifies the queue to use\n     * and can be ignored if the implementation does not support multiple\n     * queues.\n     *\n     * May be null if not needed, such as for a network device that does not\n     * implement packet transmission through the \u0027send\u0027 member function. */\n    void (*send_wait)(struct netdev *netdev, int qid);\n\n    /* Sets \u0027netdev\u0027\u0027s Ethernet address to \u0027mac\u0027 */\n    int (*set_etheraddr)(struct netdev *netdev, const struct eth_addr mac);\n\n    /* Retrieves \u0027netdev\u0027\u0027s Ethernet address into \u0027mac\u0027.\n     *\n     * This address will be advertised as \u0027netdev\u0027\u0027s MAC address through the\n     * OpenFlow protocol, among other uses. */\n    int (*get_etheraddr)(const struct netdev *netdev, struct eth_addr *mac);\n\n    /* Retrieves \u0027netdev\u0027\u0027s MTU into \u0027*mtup\u0027.\n     *\n     * The MTU is the maximum size of transmitted (and received) packets, in\n     * bytes, not including the hardware header; thus, this is typically 1500\n     * bytes for Ethernet devices.\n     *\n     * If \u0027netdev\u0027 does not have an MTU (e.g. as some tunnels do not), then\n     * this function should return EOPNOTSUPP.  This function may be set to\n     * null if it would always return EOPNOTSUPP. */\n    int (*get_mtu)(const struct netdev *netdev, int *mtup);\n\n    /* Sets \u0027netdev\u0027\u0027s MTU to \u0027mtu\u0027.\n     *\n     * If \u0027netdev\u0027 does not have an MTU (e.g. as some tunnels do not), then\n     * this function should return EOPNOTSUPP.  This function may be set to\n     * null if it would always return EOPNOTSUPP. */\n    int (*set_mtu)(struct netdev *netdev, int mtu);\n\n    /* Returns the ifindex of \u0027netdev\u0027, if successful, as a positive number.\n     * On failure, returns a negative errno value.\n     *\n     * The desired semantics of the ifindex value are a combination of those\n     * specified by POSIX for if_nametoindex() and by SNMP for ifIndex.  An\n     * ifindex value should be unique within a host and remain stable at least\n     * until reboot.  SNMP says an ifindex \"ranges between 1 and the value of\n     * ifNumber\" but many systems do not follow this rule anyhow.\n     *\n     * This function may be set to null if it would always return -EOPNOTSUPP.\n     */\n    int (*get_ifindex)(const struct netdev *netdev);\n\n    /* Sets \u0027carrier\u0027 to true if carrier is active (link light is on) on\n     * \u0027netdev\u0027.\n     *\n     * May be null if device does not provide carrier status (will be always\n     * up as long as device is up).\n     */\n    int (*get_carrier)(const struct netdev *netdev, bool *carrier);\n\n    /* Returns the number of times \u0027netdev\u0027\u0027s carrier has changed since being\n     * initialized.\n     *\n     * If null, callers will assume the number of carrier resets is zero. */\n    long long int (*get_carrier_resets)(const struct netdev *netdev);\n\n    /* Forces -\u003eget_carrier() to poll \u0027netdev\u0027\u0027s MII registers for link status\n     * instead of checking \u0027netdev\u0027\u0027s carrier.  \u0027netdev\u0027\u0027s MII registers will\n     * be polled once every \u0027interval\u0027 milliseconds.  If \u0027netdev\u0027 does not\n     * support MII, another method may be used as a fallback.  If \u0027interval\u0027 is\n     * less than or equal to zero, reverts -\u003eget_carrier() to its normal\n     * behavior.\n     *\n     * Most network devices won\u0027t support this feature and will set this\n     * function pointer to NULL, which is equivalent to returning EOPNOTSUPP.\n     */\n    int (*set_miimon_interval)(struct netdev *netdev, long long int interval);\n\n    /* Retrieves current device stats for \u0027netdev\u0027 into \u0027stats\u0027.\n     *\n     * A network device that supports some statistics but not others, it should\n     * set the values of the unsupported statistics to all-1-bits\n     * (UINT64_MAX). */\n    int (*get_stats)(const struct netdev *netdev, struct netdev_stats *);\n\n    /* Stores the features supported by \u0027netdev\u0027 into each of \u0027*current\u0027,\n     * \u0027*advertised\u0027, \u0027*supported\u0027, and \u0027*peer\u0027.  Each value is a bitmap of\n     * NETDEV_F_* bits.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP.\n     */\n    int (*get_features)(const struct netdev *netdev,\n                        enum netdev_features *current,\n                        enum netdev_features *advertised,\n                        enum netdev_features *supported,\n                        enum netdev_features *peer);\n\n    /* Set the features advertised by \u0027netdev\u0027 to \u0027advertise\u0027, which is a\n     * set of NETDEV_F_* bits.\n     *\n     * This function may be set to null for a network device that does not\n     * support configuring advertisements. */\n    int (*set_advertisements)(struct netdev *netdev,\n                              enum netdev_features advertise);\n\n    /* Attempts to set input rate limiting (policing) policy, such that up to\n     * \u0027kbits_rate\u0027 kbps of traffic is accepted, with a maximum accumulative\n     * burst size of \u0027kbits\u0027 kb.\n     *\n     * This function may be set to null if policing is not supported. */\n    int (*set_policing)(struct netdev *netdev, unsigned int kbits_rate,\n                        unsigned int kbits_burst);\n\n    /* Adds to \u0027types\u0027 all of the forms of QoS supported by \u0027netdev\u0027, or leaves\n     * it empty if \u0027netdev\u0027 does not support QoS.  Any names added to \u0027types\u0027\n     * should be documented as valid for the \"type\" column in the \"QoS\" table\n     * in vswitchd/vswitch.xml (which is built as ovs-vswitchd.conf.db(8)).\n     *\n     * Every network device must support disabling QoS with a type of \"\", but\n     * this function must not add \"\" to \u0027types\u0027.\n     *\n     * The caller is responsible for initializing \u0027types\u0027 (e.g. with\n     * sset_init()) before calling this function.  The caller retains ownership\n     * of \u0027types\u0027.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*get_qos_types)(const struct netdev *netdev, struct sset *types);\n\n    /* Queries \u0027netdev\u0027 for its capabilities regarding the specified \u0027type\u0027 of\n     * QoS.  On success, initializes \u0027caps\u0027 with the QoS capabilities.\n     *\n     * Should return EOPNOTSUPP if \u0027netdev\u0027 does not support \u0027type\u0027.  May be\n     * NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*get_qos_capabilities)(const struct netdev *netdev,\n                                const char *type,\n                                struct netdev_qos_capabilities *caps);\n\n    /* Queries \u0027netdev\u0027 about its currently configured form of QoS.  If\n     * successful, stores the name of the current form of QoS into \u0027*typep\u0027\n     * and any details of configuration as string key-value pairs in\n     * \u0027details\u0027.\n     *\n     * A \u0027*typep\u0027 of \"\" indicates that QoS is currently disabled on \u0027netdev\u0027.\n     *\n     * The caller initializes \u0027details\u0027 before calling this function.  The\n     * caller takes ownership of the string key-values pairs added to\n     * \u0027details\u0027.\n     *\n     * The netdev retains ownership of \u0027*typep\u0027.\n     *\n     * \u0027*typep\u0027 will be one of the types returned by netdev_get_qos_types() for\n     * \u0027netdev\u0027.  The contents of \u0027details\u0027 should be documented as valid for\n     * \u0027*typep\u0027 in the \"other_config\" column in the \"QoS\" table in\n     * vswitchd/vswitch.xml (which is built as ovs-vswitchd.conf.db(8)).\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*get_qos)(const struct netdev *netdev,\n                   const char **typep, struct smap *details);\n\n    /* Attempts to reconfigure QoS on \u0027netdev\u0027, changing the form of QoS to\n     * \u0027type\u0027 with details of configuration from \u0027details\u0027.\n     *\n     * On error, the previous QoS configuration is retained.\n     *\n     * When this function changes the type of QoS (not just \u0027details\u0027), this\n     * also resets all queue configuration for \u0027netdev\u0027 to their defaults\n     * (which depend on the specific type of QoS).  Otherwise, the queue\n     * configuration for \u0027netdev\u0027 is unchanged.\n     *\n     * \u0027type\u0027 should be \"\" (to disable QoS) or one of the types returned by\n     * netdev_get_qos_types() for \u0027netdev\u0027.  The contents of \u0027details\u0027 should\n     * be documented as valid for the given \u0027type\u0027 in the \"other_config\" column\n     * in the \"QoS\" table in vswitchd/vswitch.xml (which is built as\n     * ovs-vswitchd.conf.db(8)).\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*set_qos)(struct netdev *netdev,\n                   const char *type, const struct smap *details);\n\n    /* Queries \u0027netdev\u0027 for information about the queue numbered \u0027queue_id\u0027.\n     * If successful, adds that information as string key-value pairs to\n     * \u0027details\u0027.  Returns 0 if successful, otherwise a positive errno value.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 is greater than or equal to the\n     * number of supported queues (as reported in the \u0027n_queues\u0027 member of\n     * struct netdev_qos_capabilities by \u0027get_qos_capabilities\u0027).\n     *\n     * The caller initializes \u0027details\u0027 before calling this function.  The\n     * caller takes ownership of the string key-values pairs added to\n     * \u0027details\u0027.\n     *\n     * The returned contents of \u0027details\u0027 should be documented as valid for the\n     * given \u0027type\u0027 in the \"other_config\" column in the \"Queue\" table in\n     * vswitchd/vswitch.xml (which is built as ovs-vswitchd.conf.db(8)).\n     */\n    int (*get_queue)(const struct netdev *netdev,\n                     unsigned int queue_id, struct smap *details);\n\n    /* Configures the queue numbered \u0027queue_id\u0027 on \u0027netdev\u0027 with the key-value\n     * string pairs in \u0027details\u0027.  The contents of \u0027details\u0027 should be\n     * documented as valid for the given \u0027type\u0027 in the \"other_config\" column in\n     * the \"Queue\" table in vswitchd/vswitch.xml (which is built as\n     * ovs-vswitchd.conf.db(8)).  Returns 0 if successful, otherwise a positive\n     * errno value.  On failure, the given queue\u0027s configuration should be\n     * unmodified.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 is greater than or equal to the\n     * number of supported queues (as reported in the \u0027n_queues\u0027 member of\n     * struct netdev_qos_capabilities by \u0027get_qos_capabilities\u0027), or if\n     * \u0027details\u0027 is invalid for the type of queue.\n     *\n     * This function does not modify \u0027details\u0027, and the caller retains\n     * ownership of it.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*set_queue)(struct netdev *netdev,\n                     unsigned int queue_id, const struct smap *details);\n\n    /* Attempts to delete the queue numbered \u0027queue_id\u0027 from \u0027netdev\u0027.\n     *\n     * Should return EINVAL if \u0027queue_id\u0027 is greater than or equal to the\n     * number of supported queues (as reported in the \u0027n_queues\u0027 member of\n     * struct netdev_qos_capabilities by \u0027get_qos_capabilities\u0027).  Should\n     * return EOPNOTSUPP if \u0027queue_id\u0027 is valid but may not be deleted (e.g. if\n     * \u0027netdev\u0027 has a fixed set of queues with the current QoS mode).\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all, or if all of its\n     * QoS modes have fixed sets of queues. */\n    int (*delete_queue)(struct netdev *netdev, unsigned int queue_id);\n\n    /* Obtains statistics about \u0027queue_id\u0027 on \u0027netdev\u0027.  Fills \u0027stats\u0027 with the\n     * queue\u0027s statistics.  May set individual members of \u0027stats\u0027 to all-1-bits\n     * if the statistic is unavailable.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*get_queue_stats)(const struct netdev *netdev, unsigned int queue_id,\n                           struct netdev_queue_stats *stats);\n\n    /* Attempts to begin dumping the queues in \u0027netdev\u0027.  On success, returns 0\n     * and initializes \u0027*statep\u0027 with any data needed for iteration.  On\n     * failure, returns a positive errno value.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*queue_dump_start)(const struct netdev *netdev, void **statep);\n\n    /* Attempts to retrieve another queue from \u0027netdev\u0027 for \u0027state\u0027, which was\n     * initialized by a successful call to the \u0027queue_dump_start\u0027 function for\n     * \u0027netdev\u0027.  On success, stores a queue ID into \u0027*queue_id\u0027 and fills\n     * \u0027details\u0027 with the configuration of the queue with that ID.  Returns EOF\n     * if the last queue has been dumped, or a positive errno value on error.\n     * This function will not be called again once it returns nonzero once for\n     * a given iteration (but the \u0027queue_dump_done\u0027 function will be called\n     * afterward).\n     *\n     * The caller initializes and clears \u0027details\u0027 before calling this\n     * function.  The caller takes ownership of the string key-values pairs\n     * added to \u0027details\u0027.\n     *\n     * The returned contents of \u0027details\u0027 should be documented as valid for the\n     * given \u0027type\u0027 in the \"other_config\" column in the \"Queue\" table in\n     * vswitchd/vswitch.xml (which is built as ovs-vswitchd.conf.db(8)).\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*queue_dump_next)(const struct netdev *netdev, void *state,\n                           unsigned int *queue_id, struct smap *details);\n\n    /* Releases resources from \u0027netdev\u0027 for \u0027state\u0027, which was initialized by a\n     * successful call to the \u0027queue_dump_start\u0027 function for \u0027netdev\u0027.\n     *\n     * May be NULL if \u0027netdev\u0027 does not support QoS at all. */\n    int (*queue_dump_done)(const struct netdev *netdev, void *state);\n\n    /* Iterates over all of \u0027netdev\u0027\u0027s queues, calling \u0027cb\u0027 with the queue\u0027s\n     * ID, its statistics, and the \u0027aux\u0027 specified by the caller.  The order of\n     * iteration is unspecified, but (when successful) each queue must be\n     * visited exactly once.\n     *\n     * \u0027cb\u0027 will not modify or free the statistics passed in. */\n    int (*dump_queue_stats)(const struct netdev *netdev,\n                            void (*cb)(unsigned int queue_id,\n                                       struct netdev_queue_stats *,\n                                       void *aux),\n                            void *aux);\n\n    /* Assigns \u0027addr\u0027 as \u0027netdev\u0027\u0027s IPv4 address and \u0027mask\u0027 as its netmask.  If\n     * \u0027addr\u0027 is INADDR_ANY, \u0027netdev\u0027\u0027s IPv4 address is cleared.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*set_in4)(struct netdev *netdev, struct in_addr addr,\n                   struct in_addr mask);\n\n    /* Returns all assigned IP address to  \u0027netdev\u0027 and returns 0.\n     * API allocates array of address and masks and set it to\n     * \u0027*addr\u0027 and \u0027*mask\u0027.\n     * Otherwise, returns a positive errno value and sets \u0027*addr\u0027, \u0027*mask\n     * and \u0027*n_addr\u0027 to NULL.\n     *\n     * The following error values have well-defined meanings:\n     *\n     *   - EADDRNOTAVAIL: \u0027netdev\u0027 has no assigned IPv6 address.\n     *\n     *   - EOPNOTSUPP: No IPv6 network stack attached to \u0027netdev\u0027.\n     *\n     * \u0027addr\u0027 may be null, in which case the address itself is not reported. */\n    int (*get_addr_list)(const struct netdev *netdev, struct in6_addr **in,\n                         struct in6_addr **mask, int *n_in6);\n\n    /* Adds \u0027router\u0027 as a default IP gateway for the TCP/IP stack that\n     * corresponds to \u0027netdev\u0027.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*add_router)(struct netdev *netdev, struct in_addr router);\n\n    /* Looks up the next hop for \u0027host\u0027 in the host\u0027s routing table.  If\n     * successful, stores the next hop gateway\u0027s address (0 if \u0027host\u0027 is on a\n     * directly connected network) in \u0027*next_hop\u0027 and a copy of the name of the\n     * device to reach \u0027host\u0027 in \u0027*netdev_name\u0027, and returns 0.  The caller is\n     * responsible for freeing \u0027*netdev_name\u0027 (by calling free()).\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*get_next_hop)(const struct in_addr *host, struct in_addr *next_hop,\n                        char **netdev_name);\n\n    /* Retrieves driver information of the device.\n     *\n     * Populates \u0027smap\u0027 with key-value pairs representing the status of the\n     * device.  \u0027smap\u0027 is a set of key-value string pairs representing netdev\n     * type specific information.  For more information see\n     * ovs-vswitchd.conf.db(5).\n     *\n     * The caller is responsible for destroying \u0027smap\u0027 and its data.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*get_status)(const struct netdev *netdev, struct smap *smap);\n\n    /* Looks up the ARP table entry for \u0027ip\u0027 on \u0027netdev\u0027 and stores the\n     * corresponding MAC address in \u0027mac\u0027.  A return value of ENXIO, in\n     * particular, indicates that there is no ARP table entry for \u0027ip\u0027 on\n     * \u0027netdev\u0027.\n     *\n     * This function may be set to null if it would always return EOPNOTSUPP\n     * anyhow. */\n    int (*arp_lookup)(const struct netdev *netdev, ovs_be32 ip,\n                      struct eth_addr *mac);\n\n    /* Retrieves the current set of flags on \u0027netdev\u0027 into \u0027*old_flags\u0027.  Then,\n     * turns off the flags that are set to 1 in \u0027off\u0027 and turns on the flags\n     * that are set to 1 in \u0027on\u0027.  (No bit will be set to 1 in both \u0027off\u0027 and\n     * \u0027on\u0027; that is, off & on == 0.)\n     *\n     * This function may be invoked from a signal handler.  Therefore, it\n     * should not do anything that is not signal-safe (such as logging). */\n    int (*update_flags)(struct netdev *netdev, enum netdev_flags off,\n                        enum netdev_flags on, enum netdev_flags *old_flags);\n\n    /* If the provider called netdev_request_reconfigure(), the upper layer\n     * will eventually call this.  The provider can update the device\n     * configuration knowing that the upper layer will not call rxq_recv() or\n     * send() until this function returns.\n     *\n     * On error, the configuration is indeterminant and the device cannot be\n     * used to send and receive packets until a successful configuration is\n     * applied. */\n    int (*reconfigure)(struct netdev *netdev);\n/* ## -------------------- ## */\n/* ## netdev_rxq Functions ## */\n/* ## -------------------- ## */\n\n/* If a particular netdev class does not support receiving packets, all these\n * function pointers must be NULL. */\n\n    /* Life-cycle functions for a netdev_rxq.  See the large comment above on\n     * struct netdev_class. */\n    struct netdev_rxq *(*rxq_alloc)(void);\n    int (*rxq_construct)(struct netdev_rxq *);\n    void (*rxq_destruct)(struct netdev_rxq *);\n    void (*rxq_dealloc)(struct netdev_rxq *);\n\n    /* Attempts to receive a batch of packets from \u0027rx\u0027.  In \u0027batch\u0027, the\n     * caller supplies \u0027packets\u0027 as the pointer to the beginning of an array\n     * of NETDEV_MAX_BURST pointers to dp_packet.  If successful, the\n     * implementation stores pointers to up to NETDEV_MAX_BURST dp_packets into\n     * the array, transferring ownership of the packets to the caller, stores\n     * the number of received packets into \u0027count\u0027, and returns 0.\n     *\n     * The implementation does not necessarily initialize any non-data members\n     * of \u0027packets\u0027 in \u0027batch\u0027.  That is, the caller must initialize layer\n     * pointers and metadata itself, if desired, e.g. with pkt_metadata_init()\n     * and miniflow_extract().\n     *\n     * Implementations should allocate buffers with DP_NETDEV_HEADROOM bytes of\n     * headroom.\n     *\n     * Returns EAGAIN immediately if no packet is ready to be received or\n     * another positive errno value if an error was encountered. */\n    int (*rxq_recv)(struct netdev_rxq *rx, struct dp_packet_batch *batch);\n\n    /* Registers with the poll loop to wake up from the next call to\n     * poll_block() when a packet is ready to be received with\n     * netdev_rxq_recv() on \u0027rx\u0027. */\n    void (*rxq_wait)(struct netdev_rxq *rx);\n\n    /* Discards all packets waiting to be received from \u0027rx\u0027. */\n    int (*rxq_drain)(struct netdev_rxq *rx);\n};\n```\n在Netdev侧的配置完成之后通常还会配套在Datapath侧做配置，下面以端口绑定流程为例讲解。\n具体绑定的接口在Dpif.h中，Dpif模块本身就是Datapath对外暴露的接口，同时也起到协调设备和datapath协同工作的作用。\n\n```\n/* Attempts to add \u0027netdev\u0027 as a port on \u0027dpif\u0027.  If \u0027port_nop\u0027 is\n * non-null and its value is not ODPP_NONE, then attempts to use the\n * value as the port number.\n *\n * If successful, returns 0 and sets \u0027*port_nop\u0027 to the new port\u0027s port\n * number (if \u0027port_nop\u0027 is non-null).  On failure, returns a positive\n * errno value and sets \u0027*port_nop\u0027 to ODPP_NONE (if \u0027port_nop\u0027 is\n * non-null). */\nint\ndpif_port_add(struct dpif *dpif, struct netdev *netdev, odp_port_t *port_nop)\n{\n    const char *netdev_name = netdev_get_name(netdev);\n    odp_port_t port_no = ODPP_NONE;\n    int error;\n\n    COVERAGE_INC(dpif_port_add);\n\n    if (port_nop) {\n        port_no = *port_nop;\n    }\n\n    error = dpif-\u003edpif_class-\u003eport_add(dpif, netdev, &port_no);\n    if (!error) {\n        VLOG_DBG_RL(&dpmsg_rl, \"%s: added %s as port %\"PRIu32,\n                    dpif_name(dpif), netdev_name, port_no);\n    } else {\n        VLOG_WARN_RL(&error_rl, \"%s: failed to add %s as port: %s\",\n                     dpif_name(dpif), netdev_name, ovs_strerror(error));\n        port_no = ODPP_NONE;\n    }\n    if (port_nop) {\n        *port_nop = port_no;\n    }\n    return error;\n}\n```\n在上述代码在Datapath上创建一个指向netdev的vport，同时其端口号为port_no，这涉及到用户进程和内核进程的交互，用户态使用Netlink发送创建端口的消息给内核datapath进程，在内核态收到对应的消息类型后分别调用对应的方法进行处理，这里会调用ovs_vport_cmd_new方法进行处理\n\n```\nstatic struct genl_ops dp_vport_genl_ops[] = {\n\t{ .cmd = OVS_VPORT_CMD_NEW,\n\t  .flags = GENL_UNS_ADMIN_PERM, /* Requires CAP_NET_ADMIN privilege. */\n\t  .policy = vport_policy,\n\t  .doit = ovs_vport_cmd_new\n\t},\n\t{ .cmd = OVS_VPORT_CMD_DEL,\n\t  .flags = GENL_UNS_ADMIN_PERM, /* Requires CAP_NET_ADMIN privilege. */\n\t  .policy = vport_policy,\n\t  .doit = ovs_vport_cmd_del\n\t},\n\t{ .cmd = OVS_VPORT_CMD_GET,\n\t  .flags = 0,\t\t    /* OK for unprivileged users. */\n\t  .policy = vport_policy,\n\t  .doit = ovs_vport_cmd_get,\n\t  .dumpit = ovs_vport_cmd_dump\n\t},\n\t{ .cmd = OVS_VPORT_CMD_SET,\n\t  .flags = GENL_UNS_ADMIN_PERM, /* Requires CAP_NET_ADMIN privilege. */\n\t  .policy = vport_policy,\n\t  .doit = ovs_vport_cmd_set,\n\t},\n};\n```\n函数ovs_vport_cmd_new会调用static struct vport *new_vport(const struct vport_parms *parms)会继续调用到struct vport *ovs_vport_add(const struct vport_parms *parms)里面会调用vport = ops-\u003ecreate(parms);\nops是什么呢？在dp_init函数中会调用ovs_netdev_init，它会调用ovs_vport_ops_register(&ovs_netdev_vport_ops);\n所以ops-\u003ecreate会调用netdev_create，它会调用ovs_netdev_link，其中有下面的代码：\n\n```\n\tvport-\u003edev = dev_get_by_name(ovs_dp_get_net(vport-\u003edp), name);\n\terr = netdev_rx_handler_register(vport-\u003edev, netdev_frame_hook,\n\t\t\t\t\t vport);\n```\nnetdev_rx_handler_register会注册一个方法叫做netdev_frame_hook到对应的Netdev中，每当网卡收到包的时候，就调用这个方法。\n在后面讲数据面的章节中，我们会从这个函数开始，解析整个网络包的处理过程。\n另外要说一点，内核是通过用户进程传递的netdev_name在内核对应的namespace中寻找到对应的设备的，namespace可以起到网络设备隔离的作用。","markdowndirectory":null,"status":1,"articleedittype":1,"level":0,"articlemore":""}}
 [pool-2-thread-2] [chx]
[INFO] 2017-07-28 12:46:40 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:46)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-02-【OpenVswitch源码分析之三】控制面关键接口与调用流程.markdown [pool-2-thread-2] [chx]
[INFO] 2017-07-28 12:46:40 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:55)] -> 存储博客《【OpenVswitch源码分析之三】控制面关键接口与调用流程》成功 [pool-2-thread-2] [chx]
[INFO] 2017-07-28 12:46:43 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 25 pages downloaded. [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 13:14:12 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider blog.csdn.net started! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-28 13:14:12 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://blog.csdn.net/a/article/list/9999 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 13:14:12 [us.codecraft.webmagic.Spider.onDownloadSuccess(Spider.java:422)] -> page status code error, page http://blog.csdn.net/a/article/list/9999 , code: 403 [pool-1-thread-1] [chx]
[INFO] 2017-07-28 13:14:17 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider blog.csdn.net closed! 1 pages downloaded. [AWT-EventQueue-0] [chx]
[ERROR] 2017-07-28 13:14:17 [cn.chenhaoxiang.CSDNBlogExport.startGetBlogID(CSDNBlogExport.java:121)] -> 请检查用户名或网络是否已经连接! [AWT-EventQueue-0] [chx]
[INFO] 2017-07-31 14:47:18 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-0] [chx]
[INFO] 2017-07-31 14:47:19 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=76227559 [pool-1-thread-1] [chx]
[INFO] 2017-07-31 14:47:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:37)] -> {"status":true,"error":"","data":{"id":76227559,"title":"windows下git 使用教程","create_at":"\/Date(1501205220000)\/","create":"2017-07-28 09:27:00","view_count":50,"comment_count":0,"comment_allowed":"true","type":"original","channel":7,"digg":0,"bury":0,"description":"安装好软件后，桌面右击点击Git Bash打开程序，是一个shell脚本命令，类似于linux的终端命令。\n\n一、使用git上传项目\n\n\n1.cd d:/github\n\n\n 进入一个D盘中github文件夹\n2. git --version\n\n\n查看版本号\n3.git config --global user.name zcc888\n\n\n 设置你的用户名  huan","url":"http://blog.csdn.net/u012017783/article/details/76227559","categories":"IT杂谈日记","tags":"windows下git 使用教程","content":"\r\n\u003cspan style=\"font-size:18px\"\u003e安装好软件后，桌面右击点击Git Bash打开程序，是一个shell脚本命令，类&#20284;于linux的终端命令。\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003c/span\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size:18px\"\u003e一、使用git上传项目\u003c/span\u003e\u003c/p\u003e\r\n\u003cspan style=\"font-size:18px\"\u003e1.cd d:/github &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\u003cspan style=\"background-color:rgb(51,255,51)\"\u003e &nbsp;(进入一个D盘中github文件夹)\u003c/span\u003e\u003cbr\u003e\r\n\u003c/span\u003e\u003cspan style=\"font-size:18px\"\u003e2. git --version &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\u003cspan style=\"background-color:rgb(102,255,153)\"\u003e(查看版本号)\u003c/span\u003e\u003cbr\u003e\r\n3.git config --global user.name zcc888 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\u003cspan style=\"background-color:rgb(51,255,51)\"\u003e &nbsp;(设置你的用户名 &nbsp;\u003cspan style=\"font-size:18px\"\u003ezcc888\u003c/span\u003e这是你自己的用户名)\u003c/span\u003e\u003cbr\u003e\r\n4. git config --global user.email 841617432@qq.com &nbsp; &nbsp;\u003cspan style=\"background-color:rgb(51,255,51)\"\u003e(设置邮箱号 &nbsp;841617432@qq.com这是你自己的邮箱号)\u003c/span\u003e\u003cbr\u003e\r\n5.git init &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \u003cspan style=\"background-color:rgb(51,255,51)\"\u003e\r\n&nbsp; &nbsp;(初始化工作仓库路径)\u003c/span\u003e\u003cbr\u003e\r\n6.git remote add origin https://github.com/zcc888/gitTest.git\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cspan style=\"background-color:rgb(51,255,51)\"\u003e(连接远程服务器 &nbsp; &nbsp; https://github.com/zcc888/gitTest.git 这是你的提交工作路径，修改为你自己的，\u003cbr\u003e\r\n如果显示\u003cspan style=\"color:#ff0000\"\u003efatal: remote origin already exists\u003c/span\u003e.用命令: \u003cspan style=\"color:#ff0000\"\u003e\r\n&nbsp;git remote rm origin \u003c/span\u003e&nbsp;解决,重新执行上一条命令.)\u003cbr\u003e\r\n\u003c/span\u003e\u003cbr\u003e\r\n7. &nbsp; 拷贝项目到你刚刚创建的D盘github文件夹里去\u003cbr\u003e\r\n\u003cbr\u003e\r\n8.git status &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\u003cspan style=\"background-color:rgb(51,255,51)\"\u003e &nbsp;(查看状态)\u003c/span\u003e\u003cbr\u003e\r\n9.git add a.txt &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\u003cspan style=\"background-color:rgb(51,255,51)\"\u003e &nbsp; &nbsp;将文件上传到本地git库 &nbsp;a.txt我上传的文件名(补充:\u003cspan style=\"color:rgb(255,0,0)\"\u003e git add .\u003c/span\u003e 提交当前目录下的所有文件)\u003c/span\u003e\u003cbr\u003e\r\n10.git commit -m \u0027test\u0027 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \u003cspan style=\"background-color:rgb(51,255,51)\"\u003e\r\n&nbsp; &nbsp;(上传之前，给本次操作取名字 &nbsp;test是我本次操作的名字)\u003c/span\u003e\u003cbr\u003e\r\n11.git push -u origin master &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \u003cspan style=\"background-color:rgb(51,255,51)\"\u003e\r\n&nbsp;(上传到git服务器 )\u003c/span\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n\u003cspan style=\"color:#ff0000\"\u003e多次上传直接重复 7，8，9，10，11步骤即可。\u003c/span\u003e\u003cbr\u003e\r\n\u003cbr\u003e\r\n二、使用git下载项目\u003cbr\u003e\r\n&nbsp;git clone &nbsp;\u003cspan style=\"font-size:18px\"\u003ehttps://github.com/zcc888/gitTest.git\u003c/span\u003e\u003c/span\u003e\r\n","markdowncontent":null,"markdowndirectory":null,"status":1,"articleedittype":0,"level":0,"articlemore":""}}
 [pool-1-thread-1] [chx]
[INFO] 2017-07-31 14:47:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:51)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-28-windows下git 使用教程.markdown [pool-1-thread-1] [chx]
[INFO] 2017-07-31 14:47:19 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:60)] -> 存储博客《windows下git 使用教程》成功 [pool-1-thread-1] [chx]
[INFO] 2017-07-31 14:47:22 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-0] [chx]
[INFO] 2017-07-31 14:52:07 [us.codecraft.webmagic.Spider.run(Spider.java:306)] -> Spider write.blog.csdn.net started! [Thread-0] [chx]
[INFO] 2017-07-31 14:52:07 [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:88)] -> downloading page success http://write.blog.csdn.net/mdeditor/getArticle?id=76254851 [pool-1-thread-1] [chx]
[INFO] 2017-07-31 14:52:07 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:37)] -> {"status":true,"error":"","data":{"id":76254851,"title":"【小工具】CSDN博客导出工具-Java集成Maven开发","create_at":"\/Date(1501224219000)\/","create":"2017-07-28 02:43:39","view_count":1812,"comment_count":16,"comment_allowed":"true","type":"original","channel":16,"digg":3,"bury":0,"description":"转载请注明出处：http://chenhaoxiang.cn\n本文源自【人生之旅_谙忆的博客】\n\n\nCSDNBlogExport\n\nCSDN博客导出工具\n\n之前一直想把CSDN的博客导入到自己的网站中，可是由于博客比较多，后面受朋友老郭启发，就找了个时间用Java开发了这款小工具。 \nHad been trying to CSDN blog into their website, but beca","url":"http://blog.csdn.net/qq_26525215/article/details/76254851","categories":"❷ Java大学之行,----- ⑦、爬虫,----- ①、Java/Web小项目","tags":"java,csdn博客,maven","content":"\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://chenhaoxiang.cn\" target=\"_blank\"\u003e\u003cfont color=\"green\"\u003ehttp://chenhaoxiang.cn\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://chenhaoxiang.cn\" target=\"_blank\"\u003e人生之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003ch1 id=\"csdnblogexport\"\u003eCSDNBlogExport\u003c/h1\u003e\n\n\u003cp\u003eCSDN博客导出工具\u003c/p\u003e\n\n\u003cp\u003e之前一直想把CSDN的博客导入到自己的网站中，可是由于博客比较多，后面受朋友老郭启发，就找了个时间用Java开发了这款小工具。 \u003cbr\u003e\nHad been trying to CSDN blog into their website, but because of the blog is more, inspired by my friend guo behind, will find a time this kind of small tools with Java development.  \u003c/p\u003e\n\n\n\n\u003ch1 id=\"only-use\"\u003eonly use\u003c/h1\u003e\n\n\u003cp\u003e直接下载CSDNBlogExport.7z解压使用即可。 \u003cbr\u003e\nDirect download CSDNBlogExport.7z decompression can be used. \u003cbr\u003e\n\u003cimg src=\"http://i.imgur.com/H5mMN3E.png\" alt=\"\" title=\"\"\u003e  \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://i.imgur.com/MBLoPTU.png\" alt=\"\" title=\"\"\u003e  \u003c/p\u003e\n\n\u003cp\u003e经过测试，667篇博客，开50个线程，在54秒左右可以全部导出到文件。 \u003cbr\u003e\nTested, 667 blog, open 50 threads, in 54 seconds can all exported to a file.\u003c/p\u003e\n\n\u003cp\u003e博客文件导出的存储规则是: \u003cbr\u003e\n软件运行目录\\blog\\年-月\\年-月-日 博客标题名.markdown \u003cbr\u003e\nBlog file exported storage rule is: \u003cbr\u003e\nSoftware running directory/blog/year-month/year-month-day blog title name.markdown  \u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://i.imgur.com/tWkpxob.png\" alt=\"\" title=\"\"\u003e  \u003c/p\u003e\n\n\n\n\u003ch1 id=\"开发\"\u003e开发\u003c/h1\u003e\n\n\u003cp\u003eCSDNBlogExport目录下是完整的程序代码 \u003cbr\u003e\n使用了WebMagic爬虫框架，本来自己写HttpURLConnection工具类也能实现的，只是比较耗时，偷个小懒，既然别人有更好的工具，为什么不用呢 \u003cbr\u003e\n技术含量呢，可以说基本没有什么，但是也是花了大半天时间做的。 \u003cbr\u003e\n中间还遇到部分玩家无法导出博客的情况，因为CSDN对于用户的链接命名分了2种情况，当时写的时候没有发现，是测试别人博客的时候发现的，经过半小时解决了这个问题。  \u003c/p\u003e\n\n\u003cp\u003e虽然很想把这个程序完善，但是由于时间限制还是不能做太多事。 \u003cbr\u003e\n不保证本版本一直能使用下去，如果某天本程序不能使用了(肯定是CSDN对返回的数据进行了处理或者进行了权限控制)，请留言或者联系我QQ:619699629或者邮箱:uifuture@uifuture.com \u003cbr\u003e\n我会利用空闲时间跟上csdn对博客的升级，以保证能继续使用  \u003c/p\u003e\n\n\u003cp\u003e此版本为1.0版本，希望用的朋友遇到bug，在这里留言或联系我，我会及时修复。\u003c/p\u003e\n\n\u003cp\u003e也欢迎朋友加入进来与我一起完善本程序。\u003c/p\u003e\n\n\u003cp\u003e本小程序可导出任意CSDN用户的博客，但是仅供学习使用。 \u003cbr\u003e\n免责声明:如果导出博客侵犯他人权益，引起纠纷的，一概与本人无关。\u003c/p\u003e\n\n\n\n\u003ch1 id=\"development\"\u003edevelopment\u003c/h1\u003e\n\n\u003cp\u003eCSDNBlogExport directory is a complete program code \u003cbr\u003e\nUsed WebMagic crawler frame, original, write their own HttpURLConnection tools can be achieved only takes time, steal a little lazy, now that people have a better tools, why not \u003cbr\u003e\nTechnical content, it was basically have no what, but also spent most of time to do. \u003cbr\u003e\nAnd in case of some players cannot export blog because CSDN links named points to the user for two kinds of circumstances, then write not found, is to test others while on a blog, solved the problem after half an hour.\u003c/p\u003e\n\n\u003cp\u003eAlthough very want to send this application is perfect, but due to time constraints or can’t do too many things. \u003cbr\u003e\nDoes not guarantee that this version has been able to use, if one day can’t use this program (must be CSDN on the returned data processing or access control), please leave a message or contact me QQ: 619699629 or email: uifuture@uifuture.com  \u003c/p\u003e\n\n\u003cp\u003eI will use free time keep up with the CSDN on updating the blog, to ensure that can continue to use  \u003c/p\u003e\n\n\u003cp\u003eThis version is 1.0 version, hope to meet with friends bug, leave a message or contact me here, I’ll repair in time. \u003cbr\u003e\nAlso welcome friends to join in with me in perfect this procedure. \u003cbr\u003e\nThis small program can export any CSDN user’s blog, but only for the use of learning. \u003cbr\u003e\nDisclaimer: if the export blog infringement of rights and interests of others, cause disputes, all has nothing to do with himself.  \u003c/p\u003e\n\n\n\n\u003ch1 id=\"源代码下载地址\"\u003e源代码下载地址：\u003c/h1\u003e\n\n\u003cblockquote cite=\"陈浩翔\"\u003e\nGITHUB项目地址:\u003cstrong\u003e【\u003ca href=\"https://github.com/chenhaoxiang/CSDNBlogExport\" target=\"_blank\"\u003e点我进行访问\u003c/a\u003e】\u003c/strong\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e如果无法访问，请翻墙哦  \u003c/p\u003e\n\n\u003cp\u003e本文章由\u003ca href=\"http://chenhaoxiang.cn/\" target=\"_blank\"\u003e[谙忆]\u003c/a\u003e编写， 所有权利保留。  \u003cbr\u003e\n欢迎转载，分享是进步的源泉。\u003c/p\u003e\n\n\u003cblockquote cite=\"陈浩翔\"\u003e\n\u003cp\u003e转载请注明出处：\u003ca href=\"http://chenhaoxiang.cn\" target=\"_blank\"\u003e\u003cfont color=\"green\"\u003ehttp://chenhaoxiang.cn\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\"http://chenhaoxiang.cn\" target=\"_blank\"\u003e人生之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","markdowncontent":"\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://chenhaoxiang.cn\u0027\u003e\u003cfont color=\"green\"\u003ehttp://chenhaoxiang.cn\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://chenhaoxiang.cn\u0027 target=\u0027_blank\u0027\u003e人生之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n#CSDNBlogExport  \nCSDN博客导出工具\n\n之前一直想把CSDN的博客导入到自己的网站中，可是由于博客比较多，后面受朋友老郭启发，就找了个时间用Java开发了这款小工具。  \nHad been trying to CSDN blog into their website, but because of the blog is more, inspired by my friend guo behind, will find a time this kind of small tools with Java development.  \n\n#only use  \n直接下载CSDNBlogExport.7z解压使用即可。   \nDirect download CSDNBlogExport.7z decompression can be used.  \n![](http://i.imgur.com/H5mMN3E.png)  \n\n![](http://i.imgur.com/MBLoPTU.png)  \n\n经过测试，667篇博客，开50个线程，在54秒左右可以全部导出到文件。  \nTested, 667 blog, open 50 threads, in 54 seconds can all exported to a file.\n \n博客文件导出的存储规则是:  \n软件运行目录\\blog\\年-月\\年-月-日 博客标题名.markdown   \nBlog file exported storage rule is:  \nSoftware running directory/blog/year-month/year-month-day blog title name.markdown  \n\n![](http://i.imgur.com/tWkpxob.png)  \n\n#开发\nCSDNBlogExport目录下是完整的程序代码  \n使用了WebMagic爬虫框架，本来自己写HttpURLConnection工具类也能实现的，只是比较耗时，偷个小懒，既然别人有更好的工具，为什么不用呢  \n技术含量呢，可以说基本没有什么，但是也是花了大半天时间做的。  \n中间还遇到部分玩家无法导出博客的情况，因为CSDN对于用户的链接命名分了2种情况，当时写的时候没有发现，是测试别人博客的时候发现的，经过半小时解决了这个问题。  \n\n虽然很想把这个程序完善，但是由于时间限制还是不能做太多事。  \n不保证本版本一直能使用下去，如果某天本程序不能使用了(肯定是CSDN对返回的数据进行了处理或者进行了权限控制)，请留言或者联系我QQ:619699629或者邮箱:uifuture@uifuture.com  \n我会利用空闲时间跟上csdn对博客的升级，以保证能继续使用  \n\n此版本为1.0版本，希望用的朋友遇到bug，在这里留言或联系我，我会及时修复。\n\n也欢迎朋友加入进来与我一起完善本程序。\n\n本小程序可导出任意CSDN用户的博客，但是仅供学习使用。\n免责声明:如果导出博客侵犯他人权益，引起纠纷的，一概与本人无关。\n\n\n#development  \nCSDNBlogExport directory is a complete program code\nUsed WebMagic crawler frame, original, write their own HttpURLConnection tools can be achieved only takes time, steal a little lazy, now that people have a better tools, why not\nTechnical content, it was basically have no what, but also spent most of time to do.   \nAnd in case of some players cannot export blog because CSDN links named points to the user for two kinds of circumstances, then write not found, is to test others while on a blog, solved the problem after half an hour.\n   \nAlthough very want to send this application is perfect, but due to time constraints or can\u0027t do too many things.   \nDoes not guarantee that this version has been able to use, if one day can\u0027t use this program (must be CSDN on the returned data processing or access control), please leave a message or contact me QQ: 619699629 or email: uifuture@uifuture.com  \n\nI will use free time keep up with the CSDN on updating the blog, to ensure that can continue to use  \n\nThis version is 1.0 version, hope to meet with friends bug, leave a message or contact me here, I\u0027ll repair in time.  \nAlso welcome friends to join in with me in perfect this procedure.  \nThis small program can export any CSDN user\u0027s blog, but only for the use of learning.  \nDisclaimer: if the export blog infringement of rights and interests of others, cause disputes, all has nothing to do with himself.  \n\n#源代码下载地址：\n\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\nGITHUB项目地址:\u003cstrong\u003e【\u003ca href=\u0027https://github.com/chenhaoxiang/CSDNBlogExport\u0027 target=\u0027_blank\u0027\u003e点我进行访问\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n如果无法访问，请翻墙哦  \n\n\n本文章由\u003ca href=\"http://chenhaoxiang.cn/\"\u003e[谙忆]\u003c/a\u003e编写， 所有权利保留。 \n欢迎转载，分享是进步的源泉。\n\u003cblockquote cite=\u0027陈浩翔\u0027\u003e\n\u003cp background-color=\u0027#D3D3D3\u0027\u003e转载请注明出处：\u003ca href=\u0027http://chenhaoxiang.cn\u0027\u003e\u003cfont color=\"green\"\u003ehttp://chenhaoxiang.cn\u003c/font\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n本文源自\u003cstrong\u003e【\u003ca href=\u0027http://chenhaoxiang.cn\u0027 target=\u0027_blank\u0027\u003e人生之旅_谙忆的博客\u003c/a\u003e】\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e","markdowndirectory":null,"status":1,"articleedittype":1,"level":1,"articlemore":""}}
 [pool-1-thread-1] [chx]
[INFO] 2017-07-31 14:52:07 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:51)] -> E:\chenhaoxiang\git\study\backupCSDNBlog\blog\2017-07\2017-07-28-【小工具】CSDN博客导出工具-Java集成Maven开发.markdown [pool-1-thread-1] [chx]
[INFO] 2017-07-31 14:52:07 [cn.chenhaoxiang.SaveBlogDataEntity.process(SaveBlogDataEntity.java:62)] -> 存储博客《【小工具】CSDN博客导出工具-Java集成Maven开发》成功 [pool-1-thread-1] [chx]
[INFO] 2017-07-31 14:52:10 [us.codecraft.webmagic.Spider.run(Spider.java:338)] -> Spider write.blog.csdn.net closed! 1 pages downloaded. [Thread-0] [chx]
